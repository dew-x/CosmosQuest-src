function Game() {
    var TECH = computeTECH();
    var BUILDINGS = computeBUILDINGS();
    var OITEMS = computeOITEMS();
    var caseData = computeChest();
    var TIDoffset = 0+0*11; //for testing purposes
    var THEROtid = Math.floor((Date.now()/(24*60*60*1000)))+TIDoffset;
    var THERO = computeTHERO(THEROtid);
    var TPROMO = computeTPROMO(THEROtid);
    var DIMENSION = getDimensions();
    var VERSION = "v4.9.0.1";
    var _this = this;
    var data = undefined;
    var production = 0;
    var PFMODE='Live';
    var BEVO = [
        [1,81,486*2*3,1458*9*3,4374*25*7,15000*36*150,45000*49*200,45000*49*200*50,45000*49*200*250,45000*49*200*250*100,45000*49*200*250*300,45000*49*200*250*300*25,45000*49*200*250*300*250,45000*49*200*250*300*250*10,45000*49*200*250*300*250*50], // 0
        [1,5,450,50000,2500000,2500000*1000], // 1
        [1,5,400,40000,1000000,1000000*600], // 2
        [1,5,350,35000,750000,750000*200], // 3
        [1,5,300,20000,500000,500000*50], // 4
        [1,5,250,10000,250000,250000*25], // 5
        [1,5,200,5000,75000,75000*5], // 6
        [1,5,150,1500,18000], // 7
        [1,5,100,400,4000], // 8
        [1,5,50,250,1500], // 9
        [1,5,40,160,600], // 10
        [1,5,30,60,150], // 11
    ];
    var EVENTS=[
            {
                id:"OTO1",
                icon:"08ot",
                text:"One-Time Offer 1",
                action: "menu",
                extra: {target:"shop",submenu:"home"},
                active: function () {
                    if (!_this.isStPatrick()||(pfdata!==undefined&&mdata!==undefined&&mdata.city.hero[96]>0)) {
                        if (data.stats.t.v.ascension>1 && mdata!==undefined && mdata.city.hero[0]==0&&mdata.city.promo[0]==0) {
                            return true;
                        }
                    }
                    return false;
                }
            },{
                id:"OTO2",
                icon:"08ot",
                text:"One-Time Offer 2",
                action: "menu",
                extra: {target:"shop",submenu:"home"},
                active: function () {
                    if (!_this.isStPatrick()||(pfdata!==undefined&&mdata!==undefined&&mdata.city.hero[96]>0)) {
                        if (data.stats.t.v.ascension>5 && mdata!==undefined && mdata.city.hero[0]>=1 && mdata.city.hero[1]==0&&mdata.city.promo[1]==0) {
                            return true;
                        } 
                    }
                    return false;
                }
            },{
                id:"OTO3",
                icon:"08ot",
                text:"One-Time Offer 3",
                action: "menu",
                extra: {target:"shop",submenu:"home"},
                active: function () {
                    if (!_this.isStPatrick()||(pfdata!==undefined&&mdata!==undefined&&mdata.city.hero[96]>0)) {
                        if (data.stats.t.v.ascension>10 && mdata!==undefined && mdata.city.hero[1]>=1 && mdata.city.hero[2]==0&&mdata.city.promo[2]==0) {
                            return true;
                        }
                    }
                    return false;
                }
            },{
                id:"OTO4",
                icon:"08ot",
                text:"One-Time Offer 4",
                action: "menu",
                extra: {target:"shop",submenu:"home"},
                active: function () {
                    if (!_this.isStPatrick()||(pfdata!==undefined&&mdata!==undefined&&mdata.city.hero[96]>0)) {
                        if (data.stats.t.v.ascension>20 && mdata!==undefined && mdata.city.hero[2]>=1 && mdata.city.hero[80]==0&&mdata.city.promo[80]==0) {
                            return true;
                        }
                    }
                    return false;
                }
            },{
                id: "CQDC",
                icon: "2gv4",
                text: "CosmosQuest Info",
                action: "cqdc",
                extra: {target:!cqdcOpen},
                active: function () {
                    return true;
                }
            },{
                id:"RESEARCH",
                icon:"02gd",
                text:"Research Available",
                action: "menu",
                extra: {target:"research"},
                active: function () {
                    if (toResearch.length != 0 && data.researching===undefined) {
                        return true;
                    }
                    return false;
                }
            },{
                id:"LAB",
                icon:"09lu",
                text:"Check your Experiments",
                action: "smartlab",
                extra: undefined,
                active: function () {
                    if (!_this.isEnabled("experiment")) return false;
                    var unlocked = Math.min(12,Math.max(data.lab.length,data.specie+1));
                    for (var i=0; i<unlocked; ++i) {
                        if (nn(data.lab[i]) || i<=data.specie) {
                            if (i<=data.specie && !nn(data.lab[i])) {
                                return true;
                            } else if (data.lab[i].todo <= 0){
                                return true;
                            }
                        }
                    }
                    return false;
                }
            },{
                id:"DAILYF",
                icon:"0at2",
                text:"Daily Quest Available",
                action: "scene",
                extra: {target:"pved"},
                active: function () {
                    if (!_this.isEnabled("pved")) return false;
                    if (mdata!=undefined && mdata.followers>6000 && mdata.city!==undefined) {
                        if (mdata.city.daily == undefined || mdata.city.daily.timer2-Date.now() < 0) {
                            return true;
                        }
                    }
                    return false;
                }
            },{
                id:"APFULL",
                icon:"0n36",
                text:"Anti-Particle is Full",
                action: "scene",
                extra: {target:"galaxies"},
                active: function () {
                    if (!_this.isEnabled("galaxies")) return false;
                    return galaxies.empty()==0;
                }
            },{
                id:"EVOLVE",
                icon:"0fw3",
                text:"Evolve your species",
                action: "menu",
                extra: {target:"specie"},
                active: function () {
                    return data.specie+1<SPECIES.length && data.stats.c.v.energy>SPECIES[data.specie+1].requires;
                }
            },{
                id:"BIGCRUNCH",
                icon:"0lka",
                text:"Big Crunch resets AP",
                action: "menu",
                extra: {target:"specie"},
                active: function () {
                    if (data.specie+1<SPECIES.length && data.stats.c.v.energy>SPECIES[data.specie+1].requires) return false;
                    else if (_this.isEnabled("galaxies") && _this.getOmegas()/(data.stats.t.v.gomega+_this.getOmegas())>0.33) return true;
                    return false;
                }
            },{
                id:"HBATTLE",
                icon:"0542",
                text:"Hourly Battle",
                action: "scene",
                extra: {target:"ranking"},
                active: function () {
                    if (_this.isEnabled("city") && (mdata.city.pvp!==undefined&&mdata.city.pvp.attacks>0)) return true;
                    else return false;
                }
            },{
                id:"CHEST",
                icon:"0g7m",
                text:"Free Chest Available",
                action: "scene",
                extra: {target:"roulette"},
                active: function () {
                    if (_this.isEnabled("roulette") && BK>0) return true;
                    else return false;
                }
            },{
                id:"TOURNAMENT",
                icon:"04n9",
                text:"Join Tournament",
                action: "scene",
                extra: {target:"tournaments"},
                active: function () {
                    if (_this.isEnabled("tournaments")) {
                        return !_this.joinedTour();
                    } 
                    return false;
                }
            },{
                id:"POLL",
                icon:"0h29",
                text:"Daily Poll",
                action: "pOpen",
                extra: {target:true},
                active: function () {
                    if (CQW!==undefined&&CQW.poll!==undefined&&CQW.poll.voted===false) {
                        return true;
                    } 
                    return false;
                }
            },{
                id:"OTO5",
                icon:"0cqg",
                text:"Weekly Chest",
                action: "menu",
                extra: {target:"shop"},
                active: function () {
                    if (mdata!==undefined && mdata.city!==undefined && mdata.city.WC!==undefined&&mdata.city.WC<3) {
                        return true;
                    } 
                    return false;
                }
            },{
                id:"LTH",
                icon:"r8aa",
                text: "Limited Time Hero",
                action: "menu",
                extra: {target:"shop",submenu:"lto"},
                active: function () {
                    var any = false;
                    var tid=Math.floor(Date.now()/(24*60*60*1000));
                    if (CQW !== undefined && CQW.lto !== undefined) {
                        for (var i = 0; i < CQW.lto.length; ++i) {
                            if (mdata.city.hero[CQW.lto[i].id] == 0 && tid>=CQW.lto[i].start && tid<=CQW.lto[i].finish && CQW.lto[i].notify == true) any = true;
                        }
                    }
                    if (any) {
                        return true;
                    } else return false;
                }
            },{
                id:"DEVENT",
                icon: function() {
                    return _this.isDailyEvent().icon;
                },
                text: function() {
                    return _this.isDailyEvent().text;
                },
                action: "doDaily",
                extra: {target:"true"},
                active: function () {
                    if (_this.isDailyEvent().mode!==undefined) return true;
                    else return false;
                }
            },{
                id:"EASD",
                icon: function() {
                    return _this.isEAS().icon;
                },
                text: function() {
                    return _this.isEAS().text;
                },
                action: "scene",
                extra: {target:"worldboss"},
                active: function () {
                    if (_this.isEAS().mode!==undefined) return true;
                    else return false;
                }
            },{
                id:"SWB",
                icon: function() {
                    return _this.isSWB().icon;
                },
                text: function() {
                    return _this.isSWB().text;
                },
                action: "scene",
                extra: {target:"worldboss"},
                active: function () {
                    if (_this.isSWB().mode!==undefined) return true;
                    else return false;
                }
            },{
                id:"OTO6",
                icon:"qyte",
                text:"Season Pass",
                action: "tgsp",
                extra: {target:"true"},
                active: function () {
                    if (mdata!==undefined && mdata.city!==undefined && mdata.city.pass!==undefined&&mdata.city.pass.isGold!==1) {
                        return true;
                    } 
                    return false;
                }
            },{
                id:"DOWN",
                icon: "je8x",
                text: function () {
                    if (CQW===undefined || CQW.status===undefined || CQW.status.text===undefined) return "CQ servers Down";
                    else if (CQW!==undefined && CQW.status!==undefined && CQW.status.text!==undefined && CQW.status.text==="Playfab") return "PlayFab servers Down";
                    else return "Undefined Error";
                },
                action: "sdown",
                extra: undefined,
                active: function () {
                    if (CQW===undefined || CQW.status===undefined || CQW.status.text===undefined) return true;
                    else if (CQW!==undefined && CQW.status!==undefined && CQW.status.text!==undefined && CQW.status.text==="Playfab") return true;
                    else return false;
                }
            },{
                id:"HAL",
                icon:"ury5",
                text:"Halloween",
                action: "ohall",
                extra: {target:"true"},
                active: function () {
                    if (_this.isHalloween() && CQW!==undefined && CQW.halloween!==undefined) return true; 
                    else return false;
                } 
            },{
                id:"ADV",
                icon:"iwdo",
                text:"Advent Calendar",
                action: "oadv",
                extra: {target:"true"},
                active: function () {
                    if (_this.isChristmas()) return true;
                    else return false;
                }
            },{
                id:"CHR",
                icon:"soga",
                text:"Christmas",
                action: "ochr",
                extra: {target:"true"},
                active: function () {
                    if (_this.isChristmas2()) return true;
                    else return false;
                }
            },{
                id:"3YEAR",
                icon:"7kqx",
                text:"3rd Anniversary",
                action: "oyear",
                extra: {target:true},
                active: function () {
                    if (_this.isAnniversary() && mdata !== undefined && mdata.city !== undefined && mdata.city.anniversary !== undefined) {
                        return true;
                    } 
                    return false;
                }
            },{
                id:"STPA",
                icon:"r8aa",
                text: "St.Patrick Hero",
                action: "menu",
                extra: {target:"shop",submenu:"lto"},
                active: function () {
                    if (_this.isStPatrick() && mdata !== undefined && mdata.city !== undefined && mdata.city.hero[205] == 0) {
                        return true;
                    } else return false;
                }
            },{
                id:"STG",
                icon:"o3jw",
                text:"St.George",
                action: "ostg",
                extra: {target:"true"},
                active: function () {
                    if (mdata.city !== undefined && mdata.city.stGeorge && _this.isStGeorge()) return true;
                    else return false;
                }
            },{
                id:"EAS",
                icon:"bbck",
                text:"The Eternals",
                action: "oeter",
                extra: {target:"true"},
                active: function () {
                    if (mdata.city !== undefined && mdata.city.eternals && _this.isEternal()) return true;
                    else return false;
                }
            },{
                id:"SJE",
                icon:"oq8n",
                text:"Space Journey",
                action: "osje",
                extra: {target:"true"},
                active: function () {
                    if (mdata.city !== undefined && mdata.city.space !== undefined && currentSpecialEvent() == "Space Journey") return true;
                    else return false;
                }
            },{
                id:"EGG",
                icon:"jhfg",
                text:"G.A.M.E.S",
                action: "ogg",
                extra: {target:"true"},
                active: function () {
                    if (mdata.city !== undefined && mdata.city.games !== undefined && currentSpecialEvent() == "G.A.M.E.S") return true;
                    else return false;
                }
            }
        ];
    var firstPur=true;
    function onPurchaseResult(result) {
        if (kongregate!==undefined && result.success) {
            kongregate.mtx.requestUserItemList(null, function (response) {
                var needSync=false;
                if(response.success) {
                    data.premium=0;
                    if (data.premiumR!=2) data.premiumR=0;
                    for(var i=0; i < response.data.length; i++) {
                        var item = response.data[i];
                        if (item.identifier=="timetravel") {
                            kongregate.mtx.useItemInstance(item.id, function (used) {
                                if (used.success) {
                                    var prod = data.stats.t.m.prod*24*60*60*3;
                                    data.energy+=prod;
                                    _this.doStat("v","energy",prod);
                                    _this.doStat("v","benergy",prod);
                                    _this.doStat("m","energy",data.energy);
                                    _this.updateResearch(prod);
                                    ++data.shop.tt;
                                    var event = new GA.Events.Business(
                                        'Buy:Timetravel',    //A 2 part event id
                                        500,                    //The amount in cents
                                        'USD',                  //The currency
                                        data.shop.tt                     //Store this value locally and increment each time a business event is submitted during the lifetime (installation) of the game/app.
                                    );

                                    GA.getInstance().addEvent(event);
                                }
                            });
                        } else if (item.identifier=="multiplier") {
                            ++data.premium;
                        } else if (item.identifier=="bigbigcrunch") {
                            kongregate.mtx.useItemInstance(item.id, function (used) {
                                if (used.success) {
                                    var newOmega = _this.getOmegas();
                                    data.omega +=  newOmega;
                                    _this.doStat("v","gomega",newOmega);
                                    _this.doStat("v","ascension",1);
                                    ++data.shop.om;
                                    var event = new GA.Events.Business(
                                        'Buy:Omegas',    //A 2 part event id
                                        500,                    //The amount in cents
                                        'USD',                  //The currency
                                        data.shop.om                     //Store this value locally and increment each time a business event is submitted during the lifetime (installation) of the game/app.
                                    );

                                    GA.getInstance().addEvent(event);
                                }
                            });
                        } else if (item.identifier=="researcher") {
                            data.premiumR=1;
                            ++data.premium;
                        } else if (item.identifier=="nresearcher") {
                            data.premiumR=1;
                        } else if (item.identifier=="finish") {
                            var cpy=item;
                            kongregate.mtx.useItemInstance(item.id, function (used) {
                                if (used.success) {
                                    _this.doAction("Collect",{target:parseInt(cpy.data)});
                                    ++data.shop.lab;
                                    var event = new GA.Events.Business(
                                        'Buy:Finish',    //A 2 part event id
                                        50,                    //The amount in cents
                                        'USD',                  //The currency
                                        data.shop.lab                     //Store this value locally and increment each time a business event is submitted during the lifetime (installation) of the game/app.
                                    );
                                    GA.getInstance().addEvent(event);
                                }
                            });
                        } else if (item.identifier=="finishall") {
                            var cpy=item;
                            kongregate.mtx.useItemInstance(item.id, function (used) {
                                if (used.success) {
                                    for (var li=0; li<data.lab.length; ++li) {
                                        _this.doAction("Collect",{target:li});
                                    }
                                    ++data.shop.laba;
                                    var event = new GA.Events.Business(
                                        'Buy:FinishAll',    //A 2 part event id
                                        250,                    //The amount in cents
                                        'USD',                  //The currency
                                        data.shop.laba                     //Store this value locally and increment each time a business event is submitted during the lifetime (installation) of the game/app.
                                    );
                                    GA.getInstance().addEvent(event);
                                }
                            });
                        } else {
                            needSync=true;
                        }
                    }
                    if (data.premium>0 && data.shop.mul<data.premium) {
                        data.shop.mul=data.premium;
                        var event = new GA.Events.Business(
                            'Buy:Multiplier',    //A 2 part event id
                            500,                    //The amount in cents
                            'USD',                  //The currency
                            data.premium                     //Store this value locally and increment each time a business event is submitted during the lifetime (installation) of the game/app.
                        );
                        GA.getInstance().addEvent(event);
                    }
                    if (data.premiumR>0 && data.shop.res==0) {
                        data.shop.res=1;
                        var event = new GA.Events.Business(
                            'Buy:Researcher',    //A 2 part event id
                            100,                    //The amount in cents
                            'USD',                  //The currency
                            data.premiumR                     //Store this value locally and increment each time a business event is submitted during the lifetime (installation) of the game/app.
                        );
                        GA.getInstance().addEvent(event);
                    }
                    if (needSync&&!firstPur) {
                        _this.sync();
                    }
                    _this.evalBuildings();
                    firstPur=false;
                }
            });
        }
    }
    var UM=0;
    var PK=0;
    var BK=0;
    var KU=0;
    var PG=0;
    var CC=0;
    var AS=0;
    var SD=0;
    var ZG=0;
    var ET=0;
    var BKS=undefined;
    var zones = {};
    var shopOpen = false;
    var jumpOpen = false;
    var dPollOpen = false;
    var numbers = [];
    var anumbers = [];
    var menus = ["research","achievements","stats","specie","exotic","options","shop"]; // available menus
    var menu = "research"; // current selected menu
    var menut = {
        research: "Research",
        achievements: "Challenges",
        stats: "Stats",
        specie: "Species",
        shop: "Shop",
        exotic: "Omega",
        options: "Options",
    }
    var menuf = {
        research: "drawResearch",
        achievements: "drawAchievements",
        stats: "drawStats",
        specie: "drawSpecie",
        shop: "drawShop",
        exotic: "drawExotic",
        options: "drawOptions"
    }
    var menuHot = {
        research: 0,
        achievements: 0,
        stats: 0,
        specie: 0,
        shop: 1,
        exotic: 0,
        options: 0
    }
    var adActive = false;
    var adShow = undefined;
    var adtime = 30*60*1000;
    var BTIMER = 1000;
    var btimers = Array(BUILDINGS.length).fill(BTIMER);
    var shake = {x:0,y:0,z:0};
    var superClick = undefined;
    var openAch = undefined;
    var lastAch = undefined;
    var popup = undefined;
    var achMenu = 0;
    var spin = 0;
    var toResearch = [];
    var toUnlock = [];
    var buildingProduction = [0,0,0,0,0,0,0,0,0,0,0,0];
    var statPage = 0;
    var achPage = 0;
    var optPage = 0;
    var labPage = 0;
    var ascending = undefined;
    var achc=0;
    var stopSign=true;
    var statPages = [
        {
            title: "Energy",
            elems: [
                // name, family, key, printf[time,J,W,omega,none]
                ["Total Energy","v","energy","J"],
                ["Idle Energy","v","benergy","J"],
                ["Click Energy","v","cenergy","J"],
                ["Disaster Energy","v","senergy","J"],
                ["Research Energy","v","renergy","J"],
                ["Maximum Energy","m","energy","J"],
                ["Maximum Production","m","prod","W"],
            ]
        },
        {
            title: "Buildings 1",
            elems: [
                // name, family, key, printf[time,J,W,omega,none]
                ["Total Buildings","v","bamount",""],
                [0,"m","b0",""],
                [1,"m","b1",""],
                [2,"m","b2",""],
                [3,"m","b3",""],
                [4,"m","b4",""],
                [5,"m","b5",""],
            ]
        },{
            title: "Buildings 2",
            elems: [
                // name, family, key, printf[time,J,W,omega,none]
                ["Total Buildings","v","bamount",""],
                [6,"m","b6",""],
                [7,"m","b7",""],
                [8,"m","b8",""],
                [9,"m","b9",""],
                [10,"m","b10",""],
                [11,"m","b11",""],
            ]
        },{
            title: "Click",
            elems: [
                // name, family, key, printf[time,J,W,omega,none]
                ["Clicks","v","camount",""],
                ["Max Click per sec","m","cps",""],
                ["Disaster Clicks","v","samount",""],
                ["Disaster Amount","v","screated",""],
                ["Disaster efficiency","v","seff","%"],
                ["Disaster over Click","v","scr","%"],
                ["Energy over Click","v","tce","%"],
            ]
        },{
            title: "Time & Research",
            elems: [
                // name, family, key, printf[time,J,W,omega,none]
                ["Time Played","v","time","s"],
                ["Time Offline","m","offline","s"],
                ["Back in Time","m","tt","s"],
                ["Research completed","v","ramount",""],
                ["Research Time spent","v","rtime","s"],
                ["Research energy used","v","renergy","J"],
                ["Research over Time","v","rtr","%"],
            ]
        },{
            title: "Time Records",
            elems: [
                // name, family, key, printf[time,J,W,omega,none]
                [SPECIES[1].name,"t","e1","s"],
                [SPECIES[2].name,"t","e2","s"],
                [SPECIES[3].name,"t","e3","s"],
                [SPECIES[4].name,"t","e4","s"],
                [SPECIES[5].name,"t","e5","s"],
                [SPECIES[6].name,"t","e6","s"],
                [SPECIES[7].name,"t","e7","s"],
            ]
        },{
            title: "Time Records 2",
            elems: [
                // name, family, key, printf[time,J,W,omega,none]
                [SPECIES[8].name,"t","e8","s"],
                [SPECIES[9].name,"t","e9","s"],
                [SPECIES[10].name,"t","e10","s"],
                [SPECIES[11].name,"t","e11","s"],
                [SPECIES[12].name,"t","e12","s"],
                [SPECIES[13].name,"t","e13","s"],
                [SPECIES[14].name,"t","e14","s"],
            ]
        },{
            title: "\u03A9 Particles",
            elems: [
                // name, family, key, printf[time,J,W,omega,none]
                ["Gained \u03A9","v","gomega","\u03A9"],
                ["Spent \u03A9","v","somega","\u03A9"],
                ["Evolved","v","evolutions",""],
                ["Big Crunch","v","ascension",""],
                ["Big Crunch Time","t","a","s"],
            ]
        },{
            title: "Quantum Gambling",
            elems: [
                ["Play times","v","bet",""],
                ["Won times","v","btrue",""],
                ["Lost times","v","blost",""],
                ["Gained","v","bwon","J"],
                ["Spent","v","bspend","J"],
                ["Max gained","m","bwon","J"],
                ["Highest Bet","m","bspend","J"],
            ]
        },{
            title: "Experiment Laboratory",
            elems: [
                ["Experiments","v","ltimes",""],
                ["1h started","v","ltimes1",""],
                ["4h started","v","ltimes4",""],
                ["12h started","v","ltimes12",""],
                ["Gained energy","v","lenergy","J"],
                ["Max gained energy","m","lenergy","J"],
                ["Time experimented","v","ltime","s"],
            ]
        },{
            title: "Anti-Particle",
            elems: [
                ["Total removed","v","gpop",""],
                ["Max removed","m","gpop",""],
                ["Max empty","m","gempty",""],
            ]
        },{
            title: "Miracles",
            elems: [
                ["Performed Miracles","v","claim",""],
                ["Chests Open","v","roulette",""],
                ["Daily Quests","v","daily",""],
                ["Max Daily Quest","m","qdaily",""],
            ]
        },{
            title: "Dimensions",
            elems: [
                ["Dimensions Visited","a","dim",""],
                ["Jumps performed","v","djumps",""]
            ]
        },{
            title: "Energy Orbs",
            elems: [
                ["Collected","v","tdk","orbs"],
                ["Spawned","v","tds","towers"],
                ["Clicked","v","tdc","towers"],
                ["Gained energy","v","tde","J"],
                ["Max Gained energy","m","tde","J"],
                ["Max level","m","tdm",""],
            ]
        }
    ]
    var OM = {
        prod: 1,
        click: 1,
        disaster: 1,
        bcost: 1,
        rmul: 1,
        perc: 1,
    }
    var ttimes = [
        1000,// map
        1000,// energy
        1000,// cavemna
        1000,// production
        1000,// research
        1000,// bar
        1000,// new building
        1000,// specie
        10000,// messages
        1000,// superclick
    ];
    var galaxyColors = [];
    for (var i=0; i<galaxyParts.length; ++i) {
        galaxyColors.push(Math.random()*2*Math.PI);
    }
    var universeBubbles = [];
    var primordialObjects = [];
    var relems = undefined;
    var achCache = [];
    var achStack = [];
    var noAch=false;
    var R = {}; // let's cache all rectangles
    var nextArr = [];
    var FN = undefined;
    var electron = undefined;
    var galaxies;
    var Julia = undefined;
    var claimDelay=[0,0,0,0,0,0,0,0,0];
    var scene = "buildings";
    var fList=["miracles","roulette","worldboss","city","ranking","battle","pve","pved","tournaments","prana","milestones"];
    var sceneBG = {
        "buildings": 14,
        "quantum": 19,
        "experiment": 14,
        "galaxies":19,
        "buildings": 14,
        "miracles": 14,
        "roulette": 14,
        "milestones": 14,
        "city": 14,
        "ranking": 14,
        "battle": 29,
        "pve":14,
        "pved": 14,
        "tournaments": 14,
        "prana": 14,
        "ed": 54
    }
    var milePage=0; // current milestone page
    var milestones=getMilestones(); // milestone list
    var mExtra={ // milestone bonus
        cps:0,
        dps:0,
        disaster:0,
        td:0,
    }
    var mdata=undefined;
    var lastClick=Date.now();
    var typeTab=0;
    var searchTab=false;
    var cityClick=undefined;
    var doubleClick=undefined; //Time - x - y
    var ranquing=undefined;
    var battlePage=0;
    var rankingPage=0;
    var rankingPageT=0;
    var battleSpeed=1;
    var battleSync=Date.now();
    var fbattleSync=Date.now();
    var hofTab="alltime";
    var oponent=undefined;
    var pvepage=0 // current pve page
    var pveselected=-1 // current selected pve fight
    var fabric=[];
    var equeue=[];
    var shopPos=0;
    var xvel = 0.0;
    var xacc = 0.0;
    var xrew = undefined;
    var caseArray = undefined;
    var mulChestArray = undefined;
    var randomEnd=undefined;
    var monstersPage=[0,0,0,0,0];
    var dimensionsPage=0;
    var tournamentPage="join";//else results
    var wbosspage="fight";//else results
    var showDay = 0;
    var showBoss = 0;
    var showHero = undefined;
    var pranaPage=0;
    var tdata=undefined;
    var CQW=undefined;
    var CQWS=undefined;
    var bdata=undefined;
    var otooltip=undefined;
    var pollVote=0;
    var showRanking=0;
    var edtimers=undefined;
    var ederase=false;
    var srateTimer=Date.now();
    var edShoots=[];
    var edenemy=[];
    var hdisaster = undefined;
    var viewbattle = -1;
    var swapping=false;
    var mulLvl=false;
    var maxLvl=false;
    var x100=false;
    var mulChest=false;
    var giftArray=undefined;//1;
    var giftCounter=undefined;//20000;
    var giftDis=undefined;
    var updateCurrStamp=undefined;
    var auctionOpen=false;
    var ltoOpen=false;
    var aucPage = 0;
    var ltoPage = 0;
    var auctionUpdate=undefined;
    var tmShow=false;
    var tmpos=0;
    var flashOpen=false;
    var flashPage="fight";//else results
    var showFlash=0;
    var seasonOpen=false;
    var passOpen=false;
    var showDaily=false;
    var lotteryPage=0;
    var inDungeon=false;
    var hOpen=false;
    var hisPage=0;
    var dunPage="fight";//else results
    var fmTimer=Date.now();
    var chestTimer=Date.now();
    var chestQueue=[];
    var tLevelTimer=Date.now();
    var lastTower=undefined;
    var showNews=undefined;
    var isSnowing = {
        active: true,
        flakes: [],
        max: 35,
        speedx: 1,
        speedy: 3,
        minSize: 50,
        maxSize: 100,
        refresh: 150,
        ts: Date.now(),
        color: ["rgb(221,221,221)", "rgb(238,238,238)"],
        entity: "8226",
    };
    var adventOpen = false;
    var adventChoice = undefined;
    var xmasOpen = false;
    var giftData = doGift();
    var instaGift=false;
    var promHero = undefined;
    var promPrice = getPromoPrice();
    var mulGiftArray = undefined;//[0,1,1,1,1,2,2,3,3,4];
    var mulGift = false;
    var eventCCopen = false;
    var cc_body = [2,1,0];
    var cc_coin = Math.floor(Math.random() * 180);
    var cc_event_ts = Date.now();
    var cc_direction = "RIGHT";
    var cc_changed=false;
    var cc_data = {
        start: false,
        points: 0,
        timer: 140,
        ts: Date.now(),
        speed: 500,
        attempts: undefined,
        sent: false,
    };
    var show2year=false;
    var localClicks=undefined;
    var realClicks={
        timestamp:undefined,
        value:undefined,
    };
    var serverClicks=undefined;
    var lastcps = undefined;
    var readytopge = 0;
    var easterAnimation = {
        check: Date.now(),
    };
    var easterMilestones = getEasterData();
    var solver = undefined;
    var vipOpen = false;
    var rTopSeason = undefined;
    var showingSeasons = false;
    var filterOpen = false;
    var cityPage = "hourly";
    var tournamentid = 0;
    var lili = 0;
    var simwbscreen = false;
    var simwbchoose = 0;
    var simwbplayer = 0;
    var cellStatus = undefined;
    var showDecompose = undefined;
    var adventureOpen = false;
    var adventure = {
        kind: undefined,
        percentage: undefined,
        next: false,
    };
    var cqdcOpen = false;
    var halloweenOpen = false;
    var halloweenMode = "fight";
    var halloweenLevelUp = undefined;
    var halloweenPage=0;
    var halllvlmode=0;
    var giftLine=[];
    var trendLine=[];
    var yearpage=0;
    var longskill=undefined;
    var stGeorgeOpen=false;
    var stGeorgeData={
        timer: undefined,
        lastClick: Date.now(),
        totalClicks: 0,
        currentClicks: 0,
        rawClicks: 0,
        visualClicks: Date.now(),
        visualUpdate: Date.now(),
    }
    var eTicketsOpen=false;
    var sjEventOpen=false;
    var eventRanking=undefined;
    var gamesOpen=false;
    var gamesTab=0;
    var gamesReceivedActions=undefined;
    var eternalOpen=false;
    var selectedCaptcha=[];
    var imgcaptcha=undefined;
    var captchaLoaded=false;
    var captchaFunction=undefined;
    var scientistOpen=false;
    this.load = function () {
        // LILI
        T.setCallback("e3gv",function (){lili=Date.now();});
        //T.setMethod("0ao2","fadein");
        T.setAnimation("0ao2",3);
        T.setCallback("0ao2",function (){relems[1].time=4});

        T.setAnimation("0dkk",100);
        T.setMethod("0dkk","interpolate");
        T.setAnimation("0ob4",200);
        T.setMethod("0ob4","interpolate");

        // HERO ANIMS DEW-AOYUKKI-ROGER
        //T.setAnimation("0ej9",8);
        //T.setMethod("00jt","interpolate");
        T.setAnimation("03ij",10);
        //T.setMethod("03ij","interpolate");
        //T.setAnimation("0dkk",4);
        relems = [
            {
                bg:"0ith",
                text: function () {return _this.pn(data.energy,"J")},
                pila:"0etv",
                ox: -8,
                hover:"U",
            },
            {
                bg:"04or",
                text: function () {return _this.pn(production,"W")},
                anim:"0ao2",
                time: 5,
                static: "0ao2_11",
                ox: -8,
                hover: "W",
            },
            {
                bg: "0dy2",
                text: function () {return _this.pn(data.omega,"\u03A9",true)},
                spin: "0jf0",
                ox: -8,
                hover: "O",
            },
            {
                bg:"0ob4",
                text: function () {return _this.getHC()},
                anim:"0dkk",
                action: {action: "mshop",extra:{target:true}},
                ox: -8,
                btn: "0gek",
                btnh: "0ac5",
            },
            {
                bg: "0b40",
                text: function () {return (data.buildingAmount!="MAX"&&data.buildingAmount!="NXT"&&data.buildingAmount!="MXT"?"x":"")+data.buildingAmount},
                action: {action: "nextBuildingAmount"},
                ox: -4,
                hover: "B",
            }
        ]
        // Specie 0
        //T.setCallback("0hcy", function () {show=true|false;});
        //T.setAnimation("0hcy",3);

        T.setAnimation("078p",10);
        T.setCallback("078p",function () {
            superClick.phase=1;
        });
        T.setCallback("0bqj",function () {
            superClick=undefined;
        });
        T.setAnimation("0cws",800);
        T.setMethod("0cws","interpolate");
        // Specie 1
        T.loop(0);
        T.loop(2);
        T.loop(4);
        T.loop(6);
        T.loop(8);
        T.loop(10);
        T.loop(12);
        T.loop(17);
        T.loop(21);
        T.loop(23);
        T.loop(14); // bg
        T.setVolume(14,data.sound?0.4:0);
        T.loop(19); // quantum betting bg
        T.loop(26); // quantum betting bg
        T.setVolume(19,data.sound?0.4:0);
        T.loop(29); // quantum betting bg
        T.loop(30);
        T.loop(32);
        T.loop(34);
        T.loop(36);
        T.loop(38);
        T.loop(40);
        T.loop(42);
        T.loop(44);
        T.loop(46);
        T.loop(48);
        T.loop(50);
        T.loop(52);
        T.loop(54);
        T.loop(58);
        T.setVolume(29,data.sound?0.5:0);
        T.setVolume(54,data.sound?1:0);
        T.play(14);
        for (var i=0; i<14; ++i) {
            T.setVolume(i,data.effect?1:0);
        }
        T.setVolume(17,data.effect?1:0);
        T.setVolume(18,data.effect?1:0);
        T.setVolume(20,data.effect?1:0);
        T.setVolume(21,data.effect?1:0);
        T.setVolume(22,data.effect?1:0);
        T.setVolume(23,data.effect?1:0);
        T.setVolume(24,data.effect?1:0);
        T.setVolume(25,data.effect?1:0);
        T.setVolume(26,data.effect?1:0);
        T.setVolume(27,data.effect?1:0);
        T.setVolume(28,data.effect?1:0);
        T.setVolume(30,data.effect?0.7:0);
        T.setVolume(31,data.effect?0.7:0);
        T.setVolume(32,data.effect?0.7:0);
        T.setVolume(33,data.effect?0.7:0);
        T.setVolume(34,data.effect?1:0);
        T.setVolume(35,data.effect?1:0);
        T.setVolume(36,data.effect?0.7:0);
        T.setVolume(37,data.effect?0.7:0);
        T.setVolume(38,data.effect?0.7:0);
        T.setVolume(39,data.effect?0.7:0);
        T.setVolume(40,data.effect?0.7:0);
        T.setVolume(41,data.effect?0.7:0);
        T.setVolume(42,data.effect?0.7:0);
        T.setVolume(43,data.effect?0.7:0);
        T.setVolume(44,data.effect?0.7:0);
        T.setVolume(45,data.effect?0.7:0);
        T.setVolume(46,data.effect?0.7:0);
        T.setVolume(47,data.effect?0.7:0);
        T.setVolume(48,data.effect?0.7:0);
        T.setVolume(49,data.effect?0.7:0);
        T.setVolume(50,data.effect?0.7:0);
        T.setVolume(51,data.effect?0.7:0);
        T.setVolume(52,data.effect?0.7:0);
        T.setVolume(53,data.effect?0.7:0);
        T.setVolume(55,data.effect?0.7:0);
        T.setVolume(56,data.effect?0.7:0);
        T.setVolume(57,data.effect?0.7:0);
        T.setVolume(58,data.effect?0.7:0);
        T.setVolume(59,data.effect?0.7:0);
        T.setVolume(60,data.effect?0.7:0);
        T.setVolume(61,data.effect?0.7:0);
        // Specie 3
        T.setAnimation("034z",100);
        T.setMethod("034z","interpolate");
        // Specie 6
        universeBubbles=[];
        for (var i=0; i<6; ++i) {
            universeBubbles.push({
                x:randInt(T.width("0das")/2,T.width("0bl5")-T.width("0das")/2),
                y:randInt(T.height("0das")/2,T.height("0bl5")-T.height("0das")/2),
                vx: Math.random()-0.5,
                vy: Math.random()-0.5,
                ox: randInt(T.width("0das")/2,T.width("0bth")-T.width("0das")/2),
                oy: randInt(T.height("0das")/2,T.height("0bth")-T.height("0das")/2),
                ovx: Math.random()-0.5,
                ovy: Math.random()-0.5,
            });
            var magnitude=dist2(universeBubbles[i].vx,universeBubbles[i].vy);
            universeBubbles[i].vx/=magnitude;
            universeBubbles[i].vy/=magnitude;
            var magnitude=dist2(universeBubbles[i].ovx,universeBubbles[i].ovy);
            universeBubbles[i].ovx/=magnitude;
            universeBubbles[i].ovy/=magnitude;
        }
        // Specie 7
        primordialObjects = [];
        for (var i=0; i<primParts.length; ++i) {
            primordialObjects.push({
                x:randInt(T.width(primParts[i])/2,T.width("0ijt")-T.width(primParts[i])/2),
                y:randInt(T.height(primParts[i])/2,T.height("0ijt")-T.height(primParts[i])/2),
                vx: Math.random()-0.5,
                vy: Math.random()-0.5,
                img: primParts[i],
                stella: [],
                todo:500,
                timer:500,
                r: 0,
                t: Math.random()/10+0.4,
            });
            var magnitude=dist2(primordialObjects[i].vx,primordialObjects[i].vy);
            primordialObjects[i].vx/=magnitude;
            primordialObjects[i].vy/=magnitude;
        }
        onPurchaseResult({success:true});
        this.wsync();
        this.wsync2();
    }
    this.update = function (delta) {
        if (fbattleSync+2*60*1000<Date.now()) this.fsync();
        var ntid = Math.floor((Date.now()/(24*60*60*1000)))+TIDoffset;
        if (THEROtid != ntid) {
            THEROtid = ntid;
            THERO = computeTHERO(THEROtid);
            TPROMO = computeTPROMO(THEROtid);
        }
        T.stepAnim();
        if (BKS!==undefined && BK==0) {
            BKS-=delta/1000;
            if (BKS<0) {
                BKS=undefined;
                this.loadInventory();
            }
        }
        if (data.mul3>0) {
            data.mul3-=delta;
            if (data.mul3<0) {
                this.evalBuildings();
                data.mul3=0;
            }
        }
        if (edtimers===undefined) {
            edtimers = [];
            for (var i=0;i<100; ++i) {
                if (data.ed[i]>=1) edtimers.push(Date.now());
                else edtimers.push(undefined);
            }
        }

        if (auctionUpdate===undefined) {
            auctionUpdate=Date.now();
        }

        if (data.sNews.active && showNews==undefined) {
            showNews=true;
            if (data.sNews.version !== VERSION) data.sNews.version=VERSION;
        } else {
            if (!data.sNews.active && data.sNews.version !== VERSION) {
                data.sNews.active = true;
                data.sNews.version=VERSION;
            }
        }
        if (mdata !== undefined && mdata.city !== undefined && mdata.city.adventure !== undefined && !adventure.next && mdata.city.adventure.time!==undefined && (mdata.city.adventure.time-Date.now())>0) adventure.next=true;

        this.evalEventQueue();
        if (Math.abs(shake.z)>1) {
            shake.z = (shake.z - 1)*0.98;
        } else shake.z = 0;
        if (data.tour.setup[tournamentid] == undefined) data.tour.setup[tournamentid]=Array(30).fill(-1);
        if (data.flash.setup == undefined) data.flash.setup=Array(18).fill(-1);
        if (Date.now()-data.saved>30*1000) {
            this.save();
            for (var i = 0; i < 2; i++) {
	            var ctid=i==0?Math.floor(Date.now()/(24*60*60*1000)):Math.floor((Date.now()+12*60*60*1000)/(24*60*60*1000));
	            if (data.tour.tid[i] != ctid) {
	                data.tour.setup[i] = Array(30).fill(-1);
	                data.tour.tid[i] = ctid;
	            }
            }
        }
        if (Date.now()-data.wsync>5*60*1000) {
            data.wsync=Date.now();
            this.wsync();
        }
        if ((data.autocloud||data.fautocloud) && Date.now()-data.cloud>5*60*1000) this.cloudSave();
        if (Date.now()-data.acheval>1000) this.evalAchievements();
        this.updateProduction(delta);
        if (delta>1000/20||delta<0) delta = 1000/20;
        data.importBlock-=delta;
        if (menu!="achievements" && achStack.length>0) {
            lastAch=openAch=achStack[0].id;
            achStack[0].time-=delta;
            if (achStack[0].time<0) {
                achStack.splice(0, 1);
                if (achStack==0) {
                    openAch=undefined;
                }
            }
        }
        if (openAch!==undefined) {
            achMenu=Math.min(1,achMenu+delta/1000*4);
        } else {
            achMenu=Math.max(0,achMenu-delta/1000*4);
        }
        this.updateNumbers(delta);
        spin+=delta;
        if ((data.tutorial==8 && data.stats.t.v.time>2.5*60*1000 && data.specie==0)||(data.tutorial==9 && superClick==undefined)) {
            this.createSuperClick();
            GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step9"));
            data.tutorial=9;
            ttimes[9]=1000;
        }
        if (menu=="shop") {
            if (shopPos<1) shopPos=clamp(shopPos+delta/500,0,1);
        } else {
            if (shopPos>0) shopPos=clamp(shopPos-delta/500,0,1);
        }

        if (superClick==undefined) {
            var timespan = (3*60*1000*OM.disaster)*this.dimBuff("supert");
            var timep = delta/timespan;
            if ((Math.random()<=timep && data.stats.t.v.time>4*60*1000)||(Date.now()-data.previousDisaster>timespan*2)) {
                this.createSuperClick();
            } else if (mExtra!==undefined && mExtra.dps>0 && 1000/mExtra.dps<Date.now()-data.previousDisaster) {
                this.createSuperClick();
            }
        } else if (superClick!==undefined && Date.now()-superClick.stime>20*1000 && data.tutorial>9) {
            if (data.specie==1 && superClick.phase<=5) {
                superClick.stime = Date.now();
                superClick.phase=7;
                T.setAnimation("0nai",120);
                T.setDirection("0nai",-1);
                T.setMethod("0nai","fadeout");
                T.setCallback("0nai",function () {
                    superClick=undefined;
                    _this.doStat("v","smiss",1);
                    T.setDirection("0nai",1);
                    _this.resetSFX();
                });
            } else if (data.specie==8 && superClick.phase<2) {
                superClick.phase=2;
                superClick.stime = Date.now();
                T.setAnimation("07kj",20);
                T.setDirection("07kj",-1);
                T.setMethod("07kj","fadeout");
                T.setCallback("07kj",function () {
                    superClick=undefined;
                    _this.doStat("v","smiss",1);
                    _this.resetSFX();
                });
            } else if (data.specie==9 && superClick.phase<2) {
                superClick.phase=2;
                superClick.stime = Date.now();
                this.doStat("v","smiss",1);
                this.resetSFX();
            } else if (data.specie==10) {
                superClick.phase=1;
                superClick.stime = Date.now();
                this.doStat("v","smiss",1);
                this.resetSFX();
            } else {
                superClick=undefined;
                this.doStat("v","smiss",1);
                this.resetSFX();
            }
        }
        if (adActive&&adShow==undefined&&data.ad<Date.now()&&data.adBlock<Date.now()) {
            adShow={t:Date.now(),phase:0};
        }

        if (data.specie==1 && superClick!=undefined) {
            if (superClick.phase>0 && Math.floor(superClick.phase)%2==0) {
                superClick.phase+=delta/1000;
                if (superClick.phase>=6) superClick.phase-=delta/2000;
                if (Math.floor(superClick.phase)%2!=0) {
                    superClick.phase = parseInt(superClick.phase);
                    if (superClick.phase==5) superClick.phase=1;
                }
            }
        } else if (data.specie==2 && superClick!=undefined) {
            if (superClick.phase==2) {
                superClick.loc.x += superClick.loc.dx*delta;
                superClick.loc.y += superClick.loc.dy*delta;
                if (superClick.loc.x<-1200||superClick.loc.x>=1200) superClick=undefined;
            }
        } else if (data.specie==4 && superClick!=undefined) {
            if (superClick.phase==2&&Date.now()-superClick.timer>5000) {
                superClick=undefined
            }
        } else if (data.specie==6 && superClick!=undefined) {
            if (superClick.phase==0&&Date.now()-superClick.timer>2000) {
                superClick.phase=1;
                superClick.timer=Date.now();
            } else if (superClick.phase==2&&Date.now()-superClick.timer>2000) {
                superClick=undefined;
            }
        } else if (data.specie==9 && superClick!=undefined) {
            if (superClick.phase==0 && Date.now()-superClick.stime>2000) superClick.phase=1;
            else if (superClick.phase==2 && Date.now()-superClick.stime>2000) superClick=undefined;
        } else if (data.specie==13 && superClick!==undefined) {
            if (superClick.phase==1 && Date.now()-superClick.stime>2000) superClick=undefined;
        } else if (data.specie==14 && superClick!==undefined) {
            if (superClick.phase==1 && Date.now()-superClick.stime>2000) superClick=undefined;
        }
        if (data.specie==6) {
            var bgw = T.width("0bl5");
            var bgh = T.height("0bl5");
            var bw = T.width("0das");
            var bh = T.height("0das");
            var hw = T.width("0bth");
            var hh = T.height("0bth");
            var r = (Math.min(bw,bh)/2)*0.92;
            for (var i=0; i<universeBubbles.length; ++i) {
                universeBubbles[i].x += universeBubbles[i].vx*delta/1000*15;
                universeBubbles[i].y += universeBubbles[i].vy*delta/1000*15;
                for (var j=0; j<i; ++j) {
                    var dist = p2p(universeBubbles[i].x,universeBubbles[i].y,universeBubbles[j].x,universeBubbles[j].y);
                    if (dist<r*2) {
                        universeBubbles[i].vx+=(universeBubbles[i].x-universeBubbles[j].x)/dist;
                        universeBubbles[i].vy+=(universeBubbles[i].y-universeBubbles[j].y)/dist;
                        universeBubbles[j].vx+=(universeBubbles[j].x-universeBubbles[i].x)/dist;
                        universeBubbles[j].vy+=(universeBubbles[j].y-universeBubbles[i].y)/dist;
                        var magnitude=dist2(universeBubbles[i].vx,universeBubbles[i].vy);
                        universeBubbles[i].vx/=magnitude;
                        universeBubbles[i].vy/=magnitude;
                        var magnitude=dist2(universeBubbles[j].vx,universeBubbles[j].vy);
                        universeBubbles[j].vx/=magnitude;
                        universeBubbles[j].vy/=magnitude;
                    }
                }
                if (universeBubbles[i].x<bw/2) {
                    universeBubbles[i].x = bw/2;
                    universeBubbles[i].vx *= -1;
                } else if (universeBubbles[i].x>bgw-bw/2) {
                    universeBubbles[i].x = bgw-bw/2;
                    universeBubbles[i].vx *= -1;
                }
                if (universeBubbles[i].y<bh/2) {
                    universeBubbles[i].y = bh/2;
                    universeBubbles[i].vy *= -1;
                } else if (universeBubbles[i].y>bgh-bh/2) {
                    universeBubbles[i].y = bgh-bh/2;
                    universeBubbles[i].vy *= -1;
                }
                universeBubbles[i].ox += universeBubbles[i].ovx*delta/1000*10;
                universeBubbles[i].oy += universeBubbles[i].ovy*delta/1000*10;
                if (universeBubbles[i].ox<bw/2) {
                    universeBubbles[i].ox = bw/2;
                    universeBubbles[i].ovx *= -1;
                } else if (universeBubbles[i].ox>hw-bw/2) {
                    universeBubbles[i].ox = hw-bw/2;
                    universeBubbles[i].ovx *= -1;
                }
                if (universeBubbles[i].oy<bh/2) {
                    universeBubbles[i].oy = bh/2;
                    universeBubbles[i].ovy *= -1;
                } else if (universeBubbles[i].oy>hh-bh/2) {
                    universeBubbles[i].oy = hh-bh/2;
                    universeBubbles[i].ovy *= -1;
                }
            }
        } else if (data.specie==7) {
            var bgw = T.width("0ijt");
            var bgh = T.height("0ijt");
            var now=Date.now();
            for (var i=0; i<primordialObjects.length; ++i) {
                var bw = T.width(primordialObjects[i].img);
                var bh = T.height(primordialObjects[i].img);
                for (var j=0; j<primordialObjects[i].stella.length; ++j) {
                    primordialObjects[i].stella[j].a=Math.max(0.00009,0.6-(now-primordialObjects[i].stella[j].t)/18000);
                }
                primordialObjects[i].todo-=delta;
                if (primordialObjects[i].todo<=0) {
                    primordialObjects[i].todo=primordialObjects[i].timer;
                    primordialObjects[i].stella.unshift({x:primordialObjects[i].x,y:primordialObjects[i].y,a:0.6,t:Date.now(),r:primordialObjects[i].r});
                }
                while (primordialObjects[i].stella.length>0 && primordialObjects[i].stella[primordialObjects[i].stella.length-1].a<0.01) primordialObjects[i].stella.pop();
                primordialObjects[i].x += primordialObjects[i].vx*delta/1000*15;
                primordialObjects[i].y += primordialObjects[i].vy*delta/1000*15;
                primordialObjects[i].r += primordialObjects[i].t*delta/1000;
                if (primordialObjects[i].x<bw/2) {
                    primordialObjects[i].x = bw/2;
                    primordialObjects[i].vx *= -1;
                } else if (primordialObjects[i].x>bgw-bw/2) {
                    primordialObjects[i].x = bgw-bw/2;
                    primordialObjects[i].vx *= -1;
                }
                if (primordialObjects[i].y<bh/2) {
                    primordialObjects[i].y = bh/2;
                    primordialObjects[i].vy *= -1;
                } else if (primordialObjects[i].y>bgh-bh/2) {
                    primordialObjects[i].y = bgh-bh/2;
                    primordialObjects[i].vy *= -1;
                }
            }
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    superClick.r += superClick.t*delta/1000;
                } else if (superClick.phase==1) {
                    var now=Date.now();
                    var bw = T.width(superClick.img);
                    var bh = T.height(superClick.img);
                    for (var j=0; j<superClick.stella.length; ++j) {
                        superClick.stella[j].a=Math.max(0.009,(1-(now-superClick.stella[j].t)/18000)-(now-superClick.timer)/8000);
                    }
                    superClick.todo-=delta;
                    if (superClick.todo<=0) {
                        superClick.todo=superClick.ttimer;
                        superClick.stella.unshift({x:superClick.x,y:superClick.y,a:Math.max(0.009,1-(now-superClick.timer)/8000),t:now,r:superClick.r});
                    }
                    while (superClick.stella.length>0 && superClick.stella[superClick.stella.length-1].a<0.01) superClick.stella.pop();
                    superClick.x += superClick.vx*delta/1000*60;
                    superClick.y += superClick.vy*delta/1000*60;
                    superClick.r += superClick.t*delta/1000;
                    if (now-superClick.timer>8000) superClick=undefined;
                }
            }
        }
        if (ascending!==undefined && Date.now()-ascending.time>5000) {
            ascending=undefined;
        }
        if (data.tutorial<ttimes.length) ttimes[data.tutorial]=Math.max(0,ttimes[data.tutorial]-delta);
        if (scene=="battle" && gBattle!==undefined) {
            gBattle.step+=(delta/(gBattle.fast?1000:1600))*battleSpeed;
            var cstep=Math.floor(gBattle.step);
            while (cstep>gBattle.dstep && gBattle.dstep+1<gBattle.steps.length) {
                if (gBattle.dstep>=0 && gBattle.steps[gBattle.dstep].action=="DIE") {
                    gBattle[gBattle.steps[gBattle.dstep].target][gBattle.steps[gBattle.dstep].pos]=undefined;
                }
                ++gBattle.dstep;
                gBattle.fast=false;
                var step=gBattle.steps[gBattle.dstep];
                if (step.action=="SPAWN") {
                    gBattle.fast=true;
                    gBattle[step.target][step.pos]=step.data;
                    //gBattle.step+=(delta/2000)*battleSpeed;
                } else if (step.action=="FIGHT") {
                    var openSpot=undefined;
                    for (var i=0; i<gBattle[step.target].length; ++i) {
                        if (gBattle[step.target][i]!==undefined) {
                            if (openSpot!==undefined) {
                                gBattle[step.target][openSpot]=gBattle[step.target][i];
                                gBattle[step.target][openSpot].from=i;
                                gBattle[step.target][i]=undefined;
                                openSpot++;
                            } else {
                                gBattle[step.target][i].from=i;
                            }
                        } else if (openSpot==undefined) {
                            openSpot=i;
                        }
                    }
                } else if (step.action=="HIT") {
                    if (step.silent) gBattle.fast=true;
                    gBattle[step.target][step.pos].hp=Math.max(gBattle[step.target][step.pos].hp-step.damage,0);
                    T.play(27);
                } else if (step.action=="AOE") {
                    
                    for (var i=0; i<gBattle[step.target].length; ++i) {
                        if (gBattle[step.target][i]!==undefined) gBattle[step.target][i].hp=Math.max(gBattle[step.target][i].hp-step.damage,0);
                    }
                } else if (step.action=="HEAL") {
                    gBattle.fast=true;
                    for (var i=0; i<step.val.length; ++i) {
                        if (gBattle[step.target][i]!==undefined && gBattle[step.target][i].hp>0 && step.val[i]>0) {
                            gBattle[step.target][i].hp=Math.min(Math.max(gBattle[step.target][i].hp+step.val[i],step.val[i]),gBattle[step.target][i].mhp);
                        }
                    }
                } else if (step.action=="HEAL3") {
                    gBattle.fast=true;
                    for (var i=0; i<step.val.length; ++i) {
                        if (gBattle[step.target][i]!==undefined && step.val[i]>0) {
                            gBattle[step.target][i].hp=Math.min(Math.max(gBattle[step.target][i].hp+step.val[i],step.val[i]),gBattle[step.target][i].mhp);
                        }
                    }
                } else if (step.action=="EXTRA") {
                    gBattle.fast=true;
                } else if (step.action=="HEAL2") {
                    gBattle.fast=true;
                    for (var i=0; i<step.val.length; ++i) {
                        if (gBattle[step.target][i]!==undefined && gBattle[step.target][i].hp>0 && step.val[i]>0) {
                            gBattle[step.target][i].mhp+=step.val[i];
                            gBattle[step.target][i].hp+=step.val[i];
                        }
                    }
                } else if (step.action=="EXPLO") {
                    gBattle.fast=true;
                    for (var i=0; i<step.val.length; ++i) {
                        if (gBattle[step.target][i]!==undefined && gBattle[step.target][i].hp>0 && step.val[i]>0) {
                            gBattle[step.target][i].hp=Math.max(gBattle[step.target][i].hp-step.val[i],0);
                        }
                    }
                } else if (step.action=="PIERCE") {
                    for (var i=0; i<gBattle[step.target].length; ++i) {
                        if (gBattle[step.target][i]!==undefined && i!=6) {
                            gBattle[step.target][i].hp=Math.max(gBattle[step.target][i].hp-step.damage,0);
                        }
                    }
                } else if (step.action=="DMG2") {
                    gBattle[step.target][step.pos].atk+=step.value;
                } else if (step.action=="HP2") {
                    gBattle[step.target][step.pos].hp+=step.value;
                    gBattle[step.target][step.pos].mhp+=step.value;
                } else if (step.action=="DIE") {
                    T.play(28);
                } else if (step.action=="RESULT") {
                    // NOTHING
                    if (gBattle.tinfo!==undefined) {
                        if (step.target=="draw") ++gBattle.tinfo.draw;
                        else if (step.target=="win") ++gBattle.tinfo.awin;
                        else if (step.target=="loss") ++gBattle.tinfo.bwin;
                    }
                } else if (step.action=="DEF"||step.action=="DMG"||step.action=="EVO"||step.action=="RATK"||step.action=="ELEM") {
                    // nothing todohere
                } else if (step.action=="DEBUFF"||step.action=="DAMPEN") {
                    gBattle.fast=true;
                } else {
                    console.log("UNKNOWN",step);
                }
                if (step.dmg!==undefined) {
                    if (gBattle.tinfo!==undefined) {
                        if (step.target=="you") gBattle.tinfo.bdmg+=step.dmg;
                        else gBattle.tinfo.admg+=step.dmg;
                    } else if (gBattle.isBossBattle) {
                        if (step.target=="other") gBattle.bossDmg+=step.dmg;
                    }
                }
                if (step.turn!==undefined) ++gBattle.turn;
            }
        }

        if (mdata !== undefined && mdata.city !== undefined && mdata.city.easter !== undefined && Date.now() > easterAnimation.check+3600*5) {
            if (mdata.city.easter.claimed < 27 && easterMilestones.personal[mdata.city.easter.claimed + 1].m <= mdata.city.easter.points){
                if ((mdata.city.easter.claimed + 1) !== 11 && (mdata.city.easter.claimed + 1) !== 14 && (mdata.city.easter.claimed + 1) !== 16 && (mdata.city.easter.claimed + 1) !== 22) {
                    this.claimPersonalEaster(mdata.city.easter.claimed + 1);
                }
                else {
                	easterAnimation.check = Date.now();
                    popup = {
                        text:"You have unlocked a 2019 Easter Reward",
                        alert: easterMilestones.personal[mdata.city.easter.claimed + 1].t,
                        mode:"optional",
                        ltext:"Lifetime",
                        rtext:"60 days x3",
                        left: "elt",
                        right: "e30",
                        center: true,

                    }
                }
            }
        }
        if (CQW!==undefined && CQWS!==undefined && rTopSeason===undefined) this.doTopSeason();
        if (trendLine.length == 0) {
            var x = 50;
            for (var i = 0; i < 105; ++i) {
                trendLine.unshift(x);
                x+=T.width("ny0n");
            }
        }
    }
    this.draw = function (ctx) {
        zones = {}; // clear zones
        if (ascending!==undefined) {
            var t = Date.now()-ascending.time;
            if (t<1000) {
                var r = dist2(W/2,H/2)*t/1000;
                var grd = ctx.createRadialGradient(W/2,H/2,r/2,W/2,H/2,r*3);
                grd.addColorStop(0,"rgba(255,255,255,1)");
                grd.addColorStop(1,"rgba(255,255,255,0)");
                ctx.fillStyle=grd;
                ctx.save();
                ctx.beginPath();
                ctx.arc(W/2,H/2,r*4,0,2*Math.PI);
                ctx.closePath();
                ctx.fill();
                ctx.restore();
                return;
            }
        }
        if (fList.indexOf(scene) !== -1) {
            this.drawFollowers(ctx);
            if (passOpen) {
                zones={};
                this.drawSeasonPass(ctx);
            }
        } else {
            this.drawCamera(ctx);
            this.drawScene(ctx);
            this.drawMenus(ctx);
            if (shopOpen) {
                zones={};
                this.drawShopPopup(ctx);
            } else if (jumpOpen) {
                zones={};
                this.drawJump(ctx);
            } else if (dPollOpen) {
                zones={};
                this.drawPoll(ctx);
            } else if (tmShow) {
                zones={};
                this.drawTmPopup(ctx);
            } else if (flashOpen) {
                zones={};
                if (mdata!==undefined && mdata.city!==undefined) this.drawFlash(ctx);
            } else if (showDaily) {
                zones={};
                this.drawDailyEvent(ctx);
            } else if (seasonOpen) {
                zones={};
                this.drawSeasonShop(ctx);
            } else if (hOpen) {
                zones={};
                this.drawHistory(ctx);
            } else if (showNews) {
                zones={};
                this.drawNews(ctx);
            } else if (adventOpen) {
                zones={};
                this.drawAdvent(ctx);
            } else if (xmasOpen) {
                zones={};
                this.drawChristmas(ctx);
            } else if (eventCCopen) {
                zones={};
                if (mdata!==undefined) this.drawEventCC(ctx);
            } else if (this.isAnniversary() && show2year) {
                zones={};
                this.draw3Anniversary(ctx);
            } else if (vipOpen) {
                zones={};
                this.drawVip(ctx);
            } else if (adventureOpen) {
                zones = {};
                if (mdata!==undefined) this.drawAdventure(ctx);
            } else if (cqdcOpen) {
                zones = {};
                this.drawCQDC(ctx);
            } else if (this.isHalloween() && halloweenOpen) {
                zones = {};
                this.drawHalloween(ctx);
            } else if (stGeorgeOpen) {
                zones={};
                if (mdata.city !== undefined && mdata.city.stGeorge !== undefined) this.drawStGeorge(ctx);
            } else if (eTicketsOpen) {
                zones = {};
                this.drawEventTickets(ctx);
            } else if (sjEventOpen) {
                zones = {};
                if (mdata.city !== undefined && mdata.city.space !== undefined) this.drawSpaceJourney(ctx);
            } else if (gamesOpen) {
                zones = {};
                if (mdata.city !== undefined && mdata.city.games !== undefined) this.drawEventGAMES(ctx);
            } else if (eternalOpen) {
                zones={};
                if (mdata.city !== undefined && mdata.city.eternals !== undefined) this.drawEternals(ctx);
            } else if (scientistOpen) {
                zones={};
                if (mdata.city !== undefined && mdata.city.scientist !== undefined) this.drawScientistEvent(ctx);
            }

        }
        if (popup!==undefined) {
            zones={};
            this.drawPopup(ctx);
        }
        if (gamesReceivedActions!==undefined) {
            zones={};
            if (mdata !== undefined && mdata.city !== undefined) this.drawReceivedActions(ctx);
        }
        if (captchaSync) {
            ctx.fillStyle="rgba(0,0,0,0.75)";
            ctx.fillRect(0,0,W,H);
            this.spinner(ctx,W*0.5,H*0.5,40);
        }
        if (captchaLoaded) {
            zones={};
            this.drawCaptcha(ctx);
        }
        if (ascending!==undefined) {
            var t = Date.now()-ascending.time;
            var a = 1-((t-1000)/4000);
            ctx.fillStyle="rgba(255,255,255,"+a.toFixed(2)+")";
            ctx.fillRect(0,0,W,H);
        }
        if (data.tutorial==0||data.tutorial==1&&data.energy<4) {
            text(ctx,"\u2190 Click to obtain energy",W*0.29+(Math.sin((data.tutorial==0?spin:0)/200)+1)*30/2,H/2,"50px "+FONT,"white","left","middle","black",4);
        }
        if (data.tutorial==1) {
            text(ctx,"\u2191 This is your energy in Joules, use it to build your Civilization",W*0.31,130/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==2) {
            text(ctx,"\u2191 Here you have your sources of Energy. Breed your first sibling",W*0.31,300/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==3) {
            text(ctx,"\u2191 This is the energy gain per second",W*0.31+430/2,130/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
            text(ctx,"   Try reaching 10 Watt [1W = 1J in 1S]",W*0.31+430/2,190/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==4) {
            text(ctx,"\u2193 Research new ways to obtain power, may take a while",W*0.31,750/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==5) {
            text(ctx,"\u2193 You can see the progress anytime",W*0.31,640/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==6) {
            text(ctx,"\u2191 You unlocked a new source of energy",W*0.55,260/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
            text(ctx,"   Build it!",W*0.55,320/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==7) {
            text(ctx,"\u2193 Check your Species Evolution",W*0.635,640/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==8) {
            if (ttimes[8]>5000) {
                text(ctx,"You can Evolve after filling the bar",W*0.64,1060/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","center","middle","black",4);
                text(ctx,"\u2191",W*0.64,1000/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","center","middle","black",4);
            } else if (ttimes[8]>1000) {
                text(ctx,"Good luck on your Cosmos Quest",W*0.64,640/2+(Math.sin(spin/200)+1)*10/2,"50px "+FONT,"white","center","middle","black",4);
            }
        } else if (data.tutorial==9) {
            var perc = ttimes[9]/1000;
            var alpha = (1-perc)*0.5;
            var cx = fireZones[superClick.loc].x;
            var cy = fireZones[superClick.loc].y;
            var grd=ctx.createRadialGradient(cx,cy,100,cx,cy,Math.max(W,H));
            grd.addColorStop(0,"rgba(47,47,47,0)");
            grd.addColorStop(0.03,"rgba(47,47,47,0)");
            grd.addColorStop(0.08,"rgba(47,47,47,"+alpha+")");
            grd.addColorStop(1,"rgba(47,47,47,"+alpha+")");
            // Fill with gradient
            ctx.fillStyle=grd;
            ctx.fillRect(0,0,W,H);
            text(ctx,"\u2190 Natural disasters give tons of energy!",cx+100/2+(Math.sin(spin/200)+1)*30/2,cy,"50px "+FONT,"white","left","middle","black",4);
            text(ctx,"     They last a few seconds, HURRY!",cx+100/2+(Math.sin(spin/200)+1)*30/2,cy+60/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==10 && data.stats.c.v.energy>SPECIES[1].requires) {
            text(ctx,"\u2193 You can Evolve now (it's safe)",W*0.635,640/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
        } else if (data.tutorial==11 && data.stats.t.v.ascension==0 && this.getOmegas()>100) {
            if (menu=="specie") {
                text(ctx,"Use Big Crunch to increase Production not safe but worth",W*0.635,900/2+(Math.sin(spin/200)+1)*20,"50px "+FONT,"white","center","middle","black",4);
                text(ctx,"\u2193",W*0.635,970/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","center","middle","black",4);
            } else {
                text(ctx,"\u2193 You gotta come with me",W*0.635,640/2+(Math.sin(spin/200)+1)*20/2,"50px "+FONT,"white","left","middle","black",4);
            }
        }
        if (data.tutorial<=4) {
            text(ctx,"\u2192 Skip tutorial",W-20/2,H-20/2,"50px "+FONT,"white","right","bottom","black",4);
            this.addZone("skipt",(new Rect(W-340/2,H-80/2,340/2,80/2)).small(),"skip");
        }
        this.drawSolver(ctx);
        var any = false;
        for (var key in zones) {
            if (zones[key].r.isInside(GM.x,GM.y)) {
                any=true;
                break;
            }
        }
        if (cityClick!==undefined) {
            document.body.style.cursor = "move";
        } else if (any) {
            document.body.style.cursor = "pointer";
        } else {
            document.body.style.cursor = "auto";
        }
    }
    this.click = function (x,y) {
        var any=false;
        if (zones["closeach"]!==undefined && zones["closeach"].r.isInside(x,y)) {
            this.doAction(zones["closeach"].a,zones["closeach"].e,x,y);
            any=true;
        } else {
            for (var key in zones) {
                if (zones[key].r.isInside(x,y)) {
                    this.doAction(zones[key].a,zones[key].e,x,y);
                    if (key.indexOf("Bubble_")===-1) {
                        this.doStat("a","zclick",key);
                        data.stats.c.a.zclick=[];
                        while (data.stats.t.a.zclick.length>200) {
                            var best=0;
                            for (var i=1; i<data.stats.t.a.zclick.length; ++i) {
                                if (data.stats.t.a.zclick[i].length>data.stats.t.a.zclick[best].length) best=i;
                            }
                            data.stats.t.a.zclick.splice(best,1);
                        }
                    }
                    any=true;
                }
            }
        }
        if (any && data.click) T.play(16);
    }
    this.clickUp = function (x,y) {
        if (cityClick!==undefined) {
            if (scene=="city" && cityPage=="hourly") {
                var bx = 1024*0.163;
                var by = 640*0.185;
                if ((new Rect(16+bx,15+by,T.width("08g3")-30,T.height("08g3")-30)).small().isInside(x,y)) {
                    for (var i=0;i<6; ++i){
                        for (var j=0;j<6; ++j){
                            if ((new Rect(16+bx+80*i,15+by+80*j,80,80)).small().isInside(x,y)) {
                                var position=i+6*j;
                                if (swapping===undefined || !swapping) {
                                    if (typeTab!=4 && !searchTab){
                                        if(((this.getCitySpent()+MONSTERS[cityClick.id].cost)<=mdata.followers)) {
                                            if (mdata.city!==undefined && mdata.city.setup!==undefined) {
                                                var rc=[0,0,0,0,0,0];
                                                var empty=0;
                                                for (var x=0; x<6; ++x) {
                                                    var b=x*6;
                                                    for (var y=0; y<6; ++y) {
                                                        if (mdata.city.setup[b+y]!==-1) ++rc[x];
                                                    }
                                                    if (rc[x]==0) ++empty;
                                                }
                                                if (rc[j]>0 && empty>3) {
                                                    var placeid=cityClick.id;
                                                    popup = {
                                                        text:"Placing a unit here will decrease your win chances",
                                                        alert:"Try to place 1 unit in each row first. Are you sure?",
                                                        mode:"confirm",
                                                        action: function () {
                                                            _this.place(position,placeid);
                                                        }
                                                    }
                                                } else {
                                                    this.place(position,cityClick.id);
                                                }
                                            } else {
                                                this.place(position,cityClick.id);
                                            }
                                        }
                                    }
                                    else {
                                        var rc=[0,0,0,0,0,0];
                                        var empty=0;
                                        for (var x=0; x<6; ++x) {
                                            var b=x*6;
                                            for (var y=0; y<6; ++y) {
                                                if (mdata.city.setup[b+y]>=0) ++rc[x];
                                            }
                                            if (rc[x]==0) ++empty;
                                        }
                                        this.place(position,cityClick.id);
                                    }
                                } else {
                                    if ((Date.now()-doubleClick.time)>=400 && swapping==true){
										var initialMonster=mdata.city.setup[position];
										if (mulChest) {
											this.swaprow(position,cityClick.initPos);
										} else {
											this.swap(position,cityClick.initPos);
										}
                                        swapping=false;
                                    } 
                                }
                            }
                        }
                    }
                }
            } else if (scene=="city" && cityPage=="playground") {
                var y1 = H*0.45-16;
                var y2 = H*0.75-16;
                var x0 = (W*0.57-T.width("0lts")/2);
                var xa = [101,261,421,580,740,900];
                for (var i=0;i<6;++i) {
                    var x1=x0+xa[i]/2;
                    var rect1=(new Rect(x1-35,y1-77,70,77)).small();
                    if (rect1.isInside(x,y)) {
                        if (swapping===undefined || !swapping) {
                            var any = false;
                            for (var j = 0; j < 6; ++j) if (cityClick.id <-1 && cityClick.id == data.playground[0].line[j] && i !== j) any = true;
                            if (any) {
                                popup={
                                    text:"Cant place repeated heroes",
                                    mode:"alert",
                                }
                            } else {
                                if (cityClick.id<=-1) this.placePlayground(0,i,cityClick.id);
                                else data.playground[0].line[i]=cityClick.id;
                            }
                        }
                        else {
                            if ((Date.now()-doubleClick.time)>=400  && cityClick.line == 0){
                                var initialMonster=data.playground[0].line[i];
                                var initialLevel=data.playground[0].level[i];
                                var initialPromo=data.playground[0].promo[i];
                                data.playground[0].line[i] = cityClick.id;
                                data.playground[0].line[cityClick.initPos] = initialMonster;
                                data.playground[0].level[i] = cityClick.level;
                                data.playground[0].level[cityClick.initPos] = initialLevel;
                                data.playground[0].promo[i] = cityClick.promo;
                                data.playground[0].promo[cityClick.initPos] = initialPromo;
                                swapping=false;
                            }
                        }
                    }
                    var rect2=(new Rect(x1-35,y2-77,70,77)).small();
                    if (rect2.isInside(x,y)) {
                        if (swapping===undefined || !swapping) {
                            var any = false;
                            for (var j = 0; j < 6; ++j) if (cityClick.id <-1 && cityClick.id == data.playground[1].line[j] && i !== j) any = true;
                            if (any) {
                                popup={
                                    text:"Cant place repeated heroes",
                                    mode:"alert",
                                }
                            } else {
                                if (cityClick.id<=-1) this.placePlayground(1,i,cityClick.id);
                                else data.playground[1].line[i]=cityClick.id;
                            }
                        }
                        else {
                            if ((Date.now()-doubleClick.time)>=400 && cityClick.line == 1){
                                var initialMonster=data.playground[1].line[i];
                                var initialLevel=data.playground[1].level[i];
                                var initialPromo=data.playground[1].promo[i];
                                data.playground[1].line[i] = cityClick.id;
                                data.playground[1].line[cityClick.initPos] = initialMonster;
                                data.playground[1].level[i] = cityClick.level;
                                data.playground[1].level[cityClick.initPos] = initialLevel;
                                data.playground[1].promo[i] = cityClick.promo;
                                data.playground[1].promo[cityClick.initPos] = initialPromo;
                                swapping=false;
                            }
                        }
                    }
                }
            } else if (scene=="tournaments") {
                var bx = 1024*0.163;
                var by = 640*0.185;
                var yfix=[0,5,13,20,27];
                var tid=Math.floor((Date.now()/(24*60*60*1000)));
                var tmax = tid2max(tid);
                if ((new Rect(16+bx,15+by,T.width("08g3")-30,T.height("08g3")-30)).small().isInside(x,y)) {
                    for (var i=0;i<6; ++i){
                        for (var j=0;j<5; ++j){
                            if ((new Rect(16+bx+80*i,15+by+80*j+yfix[j],80,80)).small().isInside(x,y)) {
                                var position=i+6*j;
                                if (swapping===undefined || !swapping) {
                                    if (typeTab!=4 && !searchTab){
                                        //var fmode=[30000,600000,9000000];
                                        var fmode=tid2fol(tid);
                                        if (tournamentid==1) fmode = CQW.tour.current.followers;
                                        if(((this.getTournamentSpent()+MONSTERS[cityClick.id].cost)<=fmode)) {
                                            if (mdata.city!==undefined && mdata.city.setup!==undefined) {
                                                var rc=[0,0,0,0,0,0];
                                                var empty=0;
                                                for (var x=0; x<6; ++x) {
                                                    var b=x*6;
                                                    for (var y=0; y<6; ++y) {
                                                        if (mdata.city.setup[b+y]>=0) ++rc[x];
                                                    }
                                                    if (rc[x]==0) ++empty;
                                                }
                                                if (rc[j]>0 && empty>3) {
                                                    data.tour.setup[tournamentid][position]=cityClick.id;
                                                } else {
                                                    if (tournamentid==1 && CQW !== undefined) {
                                                        if (CQW.tour.current.grid[position]!=4) {
                                                            data.tour.setup[tournamentid][position]=cityClick.id;
                                                        }
                                                    }
                                                    else data.tour.setup[tournamentid][position]=cityClick.id;
                                                }
                                            } else {
                                                data.tour.setup[tournamentid][position]=cityClick.id;
                                            }
                                        }
                                    }
                                    else {
                                        var rc=[0,0,0,0,0];
                                        for (var x=0; x<5; ++x) {
                                            var b=x*6;
                                            for (var y=0; y<6; ++y) {
                                                if (data.tour.setup[tournamentid][b+y]<-1) ++rc[x];
                                            }
                                        }
                                        var row = Math.floor(position/6);
                                        if (rc[row]>=tmax) {
                                            popup={
                                                text:"You can only place "+tmax+" heroes per row",
                                                mode:"alert",
                                            }
                                        } else {
                                            if (tournamentid==1 && CQW !== undefined) {
                                                if (CQW.tour.current.grid[position]!=4 && CQW.tour.current.grid[position]!=8) {
                                                    data.tour.setup[tournamentid][position]=cityClick.id;
                                                }
                                            } else data.tour.setup[tournamentid][position]=cityClick.id; 
                                        }
                                    }
                                }
                                else {
                                    if ((Date.now()-doubleClick.time)>=400){
										if (mulChest) {
											var rowa = j;
											var rowb = Math.floor(cityClick.initPos/6);
											var allowRowSwap = true;
											if (tournamentid==1 && CQW!==undefined) { // check validity
												for (var k=0;k<6;++k) {
													var cella = CQW.tour.current.grid[k+6*rowa];
													var cellb = CQW.tour.current.grid[k+6*rowb];
													if ((cella==4 && data.tour.setup[tournamentid][k+6*rowb]!=-1) || (cellb==4 && data.tour.setup[tournamentid][k+6*rowa]!=-1) || (cella==8 && data.tour.setup[tournamentid][k+6*rowb]<-1) || (cellb==8 && data.tour.setup[tournamentid][k+6*rowa]<-1))
														allowRowSwap = false;
												}
											}
											if (allowRowSwap) {
												for (var k=0;k<6;++k) {
													var initialMonster=data.tour.setup[tournamentid][k+6*rowa];
													data.tour.setup[tournamentid][k+6*rowa] = data.tour.setup[tournamentid][k+6*rowb];
													data.tour.setup[tournamentid][k+6*rowb] = initialMonster;
												}
											}
										} else {
											var initialMonster=data.tour.setup[tournamentid][position];
											if (tournamentid==1 && CQW!==undefined) {
												if (CQW.tour.current.grid[position]!=4) {
													if (CQW.tour.current.grid[position]==8 && cityClick.id>-1) {
														data.tour.setup[tournamentid][position] = cityClick.id;
														data.tour.setup[tournamentid][cityClick.initPos] = initialMonster;
													} else if (CQW.tour.current.grid[position]!=8) {
														data.tour.setup[tournamentid][position] = cityClick.id;
														data.tour.setup[tournamentid][cityClick.initPos] = initialMonster;
													}
												} 
											} else {
												data.tour.setup[tournamentid][position] = cityClick.id;
												data.tour.setup[tournamentid][cityClick.initPos] = initialMonster;
											}
										}
                                        swapping=false;
                                    }
                                }
                            }
                        }
                    }
                }
            } else if (scene=="pve" || scene=="pved" || inDungeon==true) {
                var x_move=0;
                var y_move=0;
                if (inDungeon) {
                    x_move=77;
                    y_move=-105;
                }
                var y1 = H*0.98-16+y_move;
                var x0 = (W*0.5-T.width("0lts")/2);
                var xa = [101,261,421,580,740,900];
                for (var i=0;i<6;++i) {
                    var x1=x0+xa[i]/2+x_move;
                    var rect=(new Rect(x1-35,y1-77,70,77)).small();
                    if (rect.isInside(x,y)) {
                        if (swapping===undefined || !swapping) {
                            if (typeTab!=4 && !searchTab){
                                if(((this.getPveSpent()+MONSTERS[cityClick.id].cost)<=mdata.followers)) {
                                    if (data.pve[data.pveline]!==undefined) {
                                        data.pve[data.pveline][i]=cityClick.id;
                                    }
                                }
                            }
                            else {
                                if (data.pve[data.pveline]!==undefined) {
                                    data.pve[data.pveline][i]=cityClick.id;
                                }
                            }
                        }
                        else {
                            if ((Date.now()-doubleClick.time)>=400){
                                var initialMonster=data.pve[data.pveline][i];
                                data.pve[data.pveline][i] = cityClick.id;
                                data.pve[data.pveline][cityClick.initPos] = initialMonster;
                                swapping=false;
                            }
                        }
                    }
                }
            } else if (halloweenOpen) {
                var x_move=85;
                var y_move=-50;
                var y1 = H*0.98-16+y_move;
                var x0 = (W*0.5-T.width("0lts")/2);
                var xa = [101,261,421,580,740,900];
                for (var i=0;i<6;++i) {
                    var x1=x0+xa[i]/2+x_move;
                    var rect=(new Rect(x1-35,y1-77,70,77)).small();
                    if (rect.isInside(x,y)) {
                        if (swapping===undefined || !swapping) {
                            if (typeTab!=4 && !searchTab){
                                if(((this.getPveSpent()+MONSTERS[cityClick.id].cost)<=mdata.followers)) {
                                    if (data.halloween!==undefined) {
                                        data.halloween[i]=cityClick.id;
                                    }
                                }
                            }
                            else {
                                if (data.halloween!==undefined) {
                                    data.halloween[i]=cityClick.id;
                                }
                            }
                        }
                        else {
                            if ((Date.now()-doubleClick.time)>=400){
                                var initialMonster=data.halloween[i];
                                data.halloween[i] = cityClick.id;
                                data.halloween[cityClick.initPos] = initialMonster;
                                swapping=false;
                            }
                        }
                    }
                }
            } else if (scene=="worldboss") {
                var y1 = H*0.98-16;
                var x0 = (W*0.5-T.width("0lts")/2);
                var xa = [101,261,421,580,740,900];
                for (var i=0;i<6;++i) {
                    var x1=x0+xa[i]/2;
                    var rect=(new Rect(x1-35,y1-77,70,77)).small();
                    if (rect.isInside(x,y)) {
                        if (swapping===undefined || !swapping) {
                            if (typeTab!=4 && !searchTab){
                                if(((this.getWbSpent()+MONSTERS[cityClick.id].cost)<=mdata.followers)) {
                                    if (data.wb!==undefined && data.wb[data.wbline]!==undefined) {
                                        data.wb[data.wbline][i]=cityClick.id;
                                    }
                                }
                            }
                            else {
                                if (data.wb!==undefined && data.wb[data.wbline]) {
                                    data.wb[data.wbline][i]=cityClick.id;
                                }
                            }
                        }
                        else {
                            if ((Date.now()-doubleClick.time)>=400){
								var initialMonster=data.wb[data.wbline][i];
								data.wb[data.wbline][i] = cityClick.id;
								data.wb[data.wbline][cityClick.initPos] = initialMonster;
                                swapping=false;
                            }
                        }
                    }
                }
            }
            else if (flashOpen){
                var bx=W*0.33;
                var by=H*0.2;
                var xa = [101,261,421,580,740,900];
                var mp=0;
                if ((new Rect(bx,by,T.width("0lts"),T.height("0lts")*3)).small().isInside(x,y)) {
                    for (var i=0;i<3; ++i){
                        for (var j=0;j<6; ++j){
                            var x1=bx+xa[j]/2;
                            var y1=by+T.height("0lts")*0.83*(i+1)-(T.height("0lts")*0.1*i);
                            if ((new Rect(x1-40,y1-80,80,80)).small().isInside(x,y)) {
                                if (swapping===undefined || !swapping) {
                                    if (typeTab!=4 && !searchTab){
                                        if(((this.getFlashSpent()+MONSTERS[cityClick.id].cost)<=CQW.flash.current.followers)) {
                                            if (data.flash!==undefined && data.flash.setup!==undefined) {
                                                var rc=[0,0,0,0,0,0];
                                                var empty=0;
                                                for (var x=0; x<6; ++x) {
                                                    var b=x*6;
                                                    for (var y=0; y<6; ++y) {
                                                        if (data.flash.setup[b+y]>=0) ++rc[x];
                                                    }
                                                    if (rc[x]==0) ++empty;
                                                }
                                                data.flash.setup[mp]=cityClick.id;
                                            }
                                        }
                                    }
                                    else {
                                        var rc=[0,0,0,0,0];
                                        for (var x=0; x<5; ++x) {
                                            var b=x*6;
                                            for (var y=0; y<6; ++y) {
                                                if (data.flash.setup[b+y]<-1) ++rc[x];
                                            }
                                        }
                                        data.flash.setup[mp]=cityClick.id;
                                    }
                                }
                                else {
                                    if ((Date.now()-doubleClick.time)>=400){
                                        var initialMonster=data.flash.setup[mp];
                                        data.flash.setup[mp] = cityClick.id;
                                        data.flash.setup[cityClick.initPos] = initialMonster;
                                        swapping=false;
                                    }
                                }
                            }
                            mp++;
                        }
                    }
                }
            }
            cityClick=undefined;
            swapping=undefined;
        }
    }
    this.keyPress = function (code) {
        if (!searchTab && document.getElementById("levelwb").style.display!="block" && document.getElementById("playgroundbg").style.display!="block") {
            if (code == 122) this.doAction("zPress");
            else if (code>=48 && code<=57) this.doAction("build",{target:code-48});
            else if (code==44) this.doAction("build",{target:10});
            else if (code==46) this.doAction("build",{target:11});
            else if (code==98 && this.isEnabled("buildings")) this.doAction("scene",{target:"buildings"});
            else if (code==113 && this.isEnabled("quantum")) this.doAction("scene",{target:"quantum"});
            else if (code==108 && this.isEnabled("experiment")) this.doAction("scene",{target:"experiment"});
            else if (code==97 && this.isEnabled("galaxies")) this.doAction("scene",{target:"galaxies"});
            else if (code==109 && this.isEnabled("miracles")) this.doAction("scene",{target:"miracles"});
            else if (code==107 && this.isEnabled("ranking")) this.doAction("scene",{target:"ranking"});
            else if (code==114) {
            	if (eventCCopen && cc_data.start) this.doAction("ccrs");
            	else if (this.isEnabled("roulette")) this.doAction("scene",{target:"roulette"});
            } else if (code==116 && this.isEnabled("milestones")) this.doAction("scene",{target:"milestones"});
            else if (code==112) {
                if (scene!="city" && this.isEnabled("city")) this.doAction("scene",{target:"city"});
                else if (scene=="city" && this.isEnabled("pve")) this.doAction("scene",{target:"pve"});
            }
        }
    }
    this.keyDown = function (code) {
        if (!searchTab) {
            if (code==16) {
                mulLvl = true;
                halllvlmode=1;
            } else if (code == 88) { 
            	ederase = true;
            } else if (code==37 && cc_direction!=="RIGHT" && cc_changed==false) {
                cc_direction="LEFT";
                cc_changed=true;
                if (!cc_data.start) cc_data.start = true;
                return true;
            } else if (code==38 && cc_direction!=="DOWN" && cc_changed==false) {
                cc_direction="UP";
                cc_changed=true;
                if (!cc_data.start) cc_data.start = true;
                return true;
            } else if (code==39 && cc_direction!=="LEFT" && cc_changed==false) {
                cc_direction="RIGHT";
                cc_changed=true;
                if (!cc_data.start) cc_data.start = true;
                return true;
            } else if (code==40 && cc_direction!=="UP" && cc_changed==false) {
                cc_direction="DOWN";
                cc_changed=true;
                if (!cc_data.start) cc_data.start = true;
                return true;
            } else if (code==17) {
                maxLvl = true;
                mulChest = true;
                mulGift = true;
                halllvlmode = 2;
            } else if (code==18) {
                x100 = true;
            } else if (eventCCopen && cc_data.start && cc_data.timer>0 && cc_data.attempts>0) { //CCC is running
            	return (code==37||code==38||code==39||code==40); //prevent default action for arrow keys
            }
        }
    }
    this.keyUp = function (code) {
        if (!searchTab) {
            if (code==88) ederase = false;
            else if (code==16) {
                mulLvl = false;
                halllvlmode = 0;
            } else if (code==17) {
                maxLvl = false;
                mulChest = false;
                mulGift = false;
                halllvlmode = 0;
            } else if (code==18) {
                x100 = false;
            }
        }
    }
    this.unfocusGame = function () {
    	//reset all keydown-variables when unfocussing the game
    	ederase = false;
        mulLvl = false;
        halllvlmode = 0;
        maxLvl = false;
        mulChest = false;
        mulGift = false;
        x100 = false;
    }
    this.drawCamera = function (ctx) {
        var zx = 0;
        var zy = 0;
        var zw = W*0.28125;
        var zh = H;
        if (!R.click) R.click=(new Rect(zx,zy,zw,zh)).small();
        this.addZone("click",R.click,"click");
        ctx.save();
        ctx.rect(zx,zy,zw,zh);
        //ctx.clip();
        ctx.save();
        if (shake.z>0) {
            var sfx = 1+Math.abs(shake.z)/zw;
            var sfy = 1+Math.abs(shake.z)/zh;
            ctx.scale(sfx,sfy);
            ctx.translate(-(shake.x*shake.z)/zw,-(shake.y*shake.z)/zh);
        }
        if (data.cdim==-1) this.drawCameraS(ctx,zx,zy,zw,zh);
        else this.drawCameraD(ctx,zx,zy,zw,zh);
        ctx.restore();
        if (giftDis!==undefined) {
            ctx.save();
            if (giftDis.phase==0) this.addZone("xmasd",(new Rect(giftDis.x,giftDis.y,T.width("8tlo"),T.height("8tlo"))).small(),"xmasd");
            else if (Date.now()-giftDis.time<2000) {
                ctx.globalAlpha=1-(Date.now()-giftDis.time)/2000;
                text(ctx,giftDis.val,giftDis.x+T.width("8tlo")/2,giftDis.y+T.height("8tlo")/2-T.height("8tlo")/2*(Date.now()-giftDis.time)/2000,"50px"+FONT,"red","center","middle","black",4);
            }
            T.draw(ctx,"8tlo",giftDis.x,giftDis.y);
            ctx.restore();
            if (Date.now()-giftDis.time>1950) giftDis=undefined;
        }
        ctx.save();
        if (data.showNumbers) {
            var nw = T.width("0229");
            var nh = T.height("0229");
            for (var i=0; i<numbers.length; ++i) {
                var number = numbers[i];
                if (number.ox!=undefined&&number.oy!=undefined) {
                    var id = number.t-Date.now();
                    if (id>2625) {
                        id=clamp(Math.floor((375-(id-2625))/75),0,4);
                        T.draw(ctx,"0229_"+id,number.ox-nw/2,number.oy-nh/2);
                    }
                }
                if (number.image===undefined) {
                    var canvas = text2canvas(ctx,number.text,number.x,number.y,(40*number.scale)+"px "+FONT,"rgb("+number.color+")","center","middle","rgb(0,0,0)",5*number.scale);
                    number.image=canvas;
                    number.x-=canvas.width/2;
                    number.y-=canvas.height/2;
                }
                ctx.globalAlpha=number.a;
                ctx.drawImage(number.image,number.x,number.y);
            }
            for (var i=0; i<anumbers.length; ++i) {
                var number = anumbers[i];
                if (number.ox!=undefined&&number.oy!=undefined) {
                    var id = number.t-Date.now();
                    if (id>2625) {
                        id=clamp(Math.floor((375-(id-2625))/75),0,4);
                        T.draw(ctx,"0229_"+id,number.ox-nw/2,number.oy-nh/2);
                    }
                }
                if (number.image===undefined) {
                    var canvas = text2canvas(ctx,number.text,number.x,number.y,(40*number.scale)+"px "+FONT,"rgb("+number.color+")","center","middle","rgb(0,0,0)",5*number.scale);
                    number.image=canvas;
                    number.x-=canvas.width/2;
                    number.y-=canvas.height/2;
                }
                ctx.globalAlpha=number.a;
                ctx.drawImage(number.image,number.x,number.y);
            }
        }
        ctx.restore();
        T.draw(ctx,"7yor",zx,zy,T.width("7yor"),T.height("7yor")+3);
        T.draw(ctx,"q4p7",zx,zy);
        T.draw(ctx,"59z0",zx+T.width("7yor")-T.width("59z0"),zy);
        T.draw(ctx,"daes",zx,zy+T.height("q4p7")-T.height("daes"));
        if (data.tutorial==0) {
            ctx.fillStyle="rgba(47,47,47,"+(0.5*(ttimes[0]/1000))+")";
            var x = zx;
            var y = zy;
            var w = zw;
            var h = zh;
            ctx.fillRect(x,y,w,h);
        }
        T.draw(ctx,"0cdn",zx+zw*0.91,0);
        if (!R.clicktt) R.clicktt=(new Rect(zx+zw*0.90,0,T.width("0cdn"),T.height("0cdn"))).small();
        if (R.clicktt.isInside(GM.x,GM.y)) {
            var tid = "0i26";
            var tw=T.width(tid)*1.07;
            var th=T.height(tid);
            var b = 10;
            var line = 50/2;
            var x0 = zx+zw*0.82+T.width("0cdn")-tw;
            var y0 = T.height("0cdn")-50/2;
            T.draw(ctx,tid,x0,y0,tw,th);
            y0+=25;
            // first line
            y0+=b;
            text(ctx,this.pn(this.getClick(),"J",true),x0+b,-25+y0+line/2,"28px"+FONT,"white","left","middle");
            ctext(ctx,"per Click",x0+tw-b*2.5,-25+y0+line/2,"28px"+FONT,"white","right","middle");
            // second line
            y0+=line;
            text(ctx,this.pn(this.getSuper(),"J",true),x0+b,-25+y0+line/2,"28px"+FONT,"white","left","middle");
            ctext(ctx,"per Disaster",x0+tw-b*2.5,-25+y0+line/2,"28px"+FONT,"white","right","middle");
            // third line
            // multiplier
            y0+=line+b;
            T.draw(ctx,"0a3w",x0+b,-30+y0,line,line);
            text(ctx,mExtra.cps.toFixed(1)+" cps",x0+b*1.5+line,-30+y0+line/2,"22px"+FONT,"white","left","middle");
            T.draw(ctx,SPECIES[data.specie].tool,x0+tw-b*2.5-line,-30+y0,line,line);
            text(ctx,"x"+this.pn(data.bonus.cmul,"",true),x0+tw-b*3-line,-30+y0+line/2,"22px"+FONT,"white","right","middle");
            // fourth line
            // omega sum
            y0+=line+b;
            T.draw(ctx,"0c6m",x0+b,-30+y0,line,line);
            text(ctx,this.pn(mExtra.disaster+1000)+" cpd",x0+b*1.5+line,-30+y0+line/2,"22px"+FONT,"white","left","middle");
            T.draw(ctx,"08sn",x0+tw-b*2.5-line,-30+y0,line,line);
            text(ctx,"+"+this.pn(OM.click,"",true),x0+tw-b*3-line,-30+y0+line/2,"22px"+FONT,"white","right","middle");
            // fifth line
            // production sum
            y0+=line+b;
            if (data.dismul>0) {
                text(ctx,this.pn(data.dismul,"",true),x0+b,-30+y0+line/2,"22px"+FONT,"white","left","middle");
            }
            T.draw(ctx,"02je",x0+tw-b*2.5-line,-30+y0,line,line);
            text(ctx,"+"+(OM.perc*100).toFixed(2)+"% ["+this.pn(production*OM.perc,"J")+"]",x0+tw-b*3-line,-30+y0+line/2,"22px"+FONT,"white","right","middle");
        }

        var x = zx+zw*0.13-T.width("0m2f")/2;
        var y = 5;
        var dy = T.height("0at2");
        var anyClaim=false;
        if (mdata!==undefined) {
            for (var i=0; i<mdata.miracles.length; ++i) {
                if (mdata.miracles[i]<Date.now()) {
                    if (mdata!==undefined && mdata.tm!==undefined && (mdata.tm==-1||(mdata.tm-Date.now()>0))){
                        mdata.miracles[i] +=MIRACLES[i].time*60*60*1000*0.9*(1-mdata.city.easter.miracles);
                    }
                    else anyClaim=true;
                }
            }
        }
        if (this.isEnabled("miracles")) {
            if ((new Rect(x,y,T.width("0m2f"),T.height("0m2f"))).small().isInside(GM.x,GM.y)) {
                if (anyClaim==true) T.draw(ctx,"01i5",x+1,y+1);
                else T.draw(ctx,"0m2f",x+1,y+1);
            }
            else {
                if (anyClaim==true) T.draw(ctx,"01i5",x+T.width("01i5")*0.05,y+T.height("01i5")*0.05,T.width("01i5")*0.95,T.height("01i5")*0.95);
                else T.draw(ctx,"0m2f",x+T.width("01i5")*0.05,y+T.height("01i5")*0.05,T.width("01i5")*0.95,T.height("01i5")*0.95);
            }
            this.addZone("toMiracles",(new Rect(x,y,T.width("0m2f"),T.height("0m2f"))).small(),"scene",{target:"miracles"});

            y+=H*0.09;
            for (var i=0;i<equeue.length;++i) {
                var eIcon=equeue[i].icon;
                if (typeof equeue[i].icon === "function") {
                    var eIcon = equeue[i].icon();
                }
                if (eIcon=="r8aa") T.draw(ctx,"ahqn",x,y,60,60);
                T.draw(ctx,eIcon,x+7,y);
                var erect=(new Rect(x,y,T.width(eIcon),T.height(eIcon))).small();
                this.addZone("events_"+i,erect,equeue[i].action,equeue[i].extra);
                if (erect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"0coj",x+7+T.width(eIcon),y);
                    if (typeof equeue[i].text === "function") {
                        var eventText=equeue[i].text();
                        text(ctx,eventText,x+10+T.width(eIcon)+T.width("0coj")/2,y+T.height("0coj")/2,"28px"+FONT,"white","center","middle");
                    }
                    else text(ctx,equeue[i].text,x+10+T.width(eIcon)+T.width("0coj")/2,y+T.height("0coj")/2,"28px"+FONT,"white","center","middle");
                }
                if (equeue[i].notify !== undefined) {
                    if (equeue[i].notify()) {
                        ctx.fillStyle="black";
                        ctx.beginPath();
                        ctx.arc(x+16+T.width(eIcon),y+7,10,0,2*Math.PI);
                        ctx.closePath();
                        ctx.fill();
                        text(ctx,"!",x+16+T.width(eIcon),y+7,"36px"+FONT,"white","center","middle");
                    }
                }
                y+=dy;
            }
        } else {
            if ((new Rect(x,y,T.width("0m2f"),T.height("0m2f"))).small().isInside(GM.x,GM.y)) {
                if (anyClaim==true) T.draw(ctx,"01i5",x+1,y+1);
                else T.draw(ctx,"0m2f",x+1,y+1);
            }
            else {
                if (anyClaim==true) T.draw(ctx,"01i5",x+T.width("01i5")*0.05,y+T.height("01i5")*0.05,T.width("01i5")*0.95,T.height("01i5")*0.95);
                else T.draw(ctx,"0m2f",x+T.width("01i5")*0.05,y+T.height("01i5")*0.05,T.width("01i5")*0.95,T.height("01i5")*0.95);
            }
            this.addZone("toMiracles",(new Rect(x,y,T.width("0m2f"),T.height("0m2f"))).small(),"scene",{target:"miracles"});
        }
        ctx.restore();

        // Event Tickets
        var etrect=(new Rect(W*0.113,H-T.height("joy2")*1.75-17,T.width("joy2")*1.75,T.height("joy2")*1.75)).small();
        if (etrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"joy2",W*0.113-1,H-T.height("joy2")*1.75-17-1,T.width("joy2")*1.75+2,T.height("joy2")*1.75+2);
            this.addZone("oetckm",etrect,"oetickets",{target:true});
        } else T.draw(ctx,"joy2",W*0.113,H-T.height("joy2")*1.75-17,T.width("joy2")*1.75,T.height("joy2")*1.75);

        // Task Manager Icon
        if (mdata!==undefined && mdata.tm!==undefined) {
            var tmrect=(new Rect(7,H-T.height("01i5")*0.95-5,T.width("01i5")*0.95,T.height("01i5")*0.95)).small();
            if (mdata.tm==-1||(mdata.tm-Date.now()>0)){
                if (tmrect.isInside(GM.x,GM.y)){
                    if (tmpos < (7+T.width("01i5")*0.95*0.5)) tmpos = tmpos+W*0.005;
                    else if (tmpos > (7+T.width("01i5")*0.95*0.5)) tmpos = 7+T.width("01i5")*0.95*0.5;
                    ctx.save();
                    ctx.beginPath();
                    ctx.rect(7+T.width("01i5")*0.95*0.5,H-T.height("01i5")*0.95,W*0.15,T.height("01i5")*0.95-10);
                    ctx.closePath();
                    ctx.clip();
                    roundedRect(ctx,tmpos,H-T.height("01i5")*0.95,W*0.15,T.height("01i5")*0.95-10,10,"rgba(0,0,0,0.8)");
                    if (tmpos==7+T.width("01i5")*0.95*0.5){
                        if (mdata.tm!==-1) {
                            if ((mdata.tm-Date.now())>86400000) text(ctx,Math.ceil((mdata.tm-Date.now())/86400000)+" Days",tmpos+W*0.15*0.5+W*0.01,H-T.height("01i5")*0.95+(T.height("01i5")*0.95-10)*0.5,"38px"+FONT,"white","center","middle");
                            else text(ctx,timer((mdata.tm-Date.now())/1000),tmpos+W*0.15*0.5+W*0.01,H-T.height("01i5")*0.95+(T.height("01i5")*0.95-10)*0.5,"38px"+FONT,"white","center","middle");
                            this.addZone("tmbuy",tmrect,"tm_show",{target:true});
                        }
                        else {
                            text(ctx,"Lifetime",tmpos+W*0.15*0.5+W*0.01,H-T.height("01i5")*0.95+(T.height("01i5")*0.95-10)*0.5,"38px"+FONT,"white","center","middle");
                        }
                    }
                    ctx.restore();   
                }
                else tmpos = 7+T.width("01i5")*0.95*0.5-W*0.15;
                T.draw(ctx,"t9zc",7,H-T.height("01i5")*0.95-5,T.width("01i5")*0.95,T.height("01i5")*0.95);
            } else {
                if (tmrect.isInside(GM.x,GM.y)){
                    if (tmpos < (7+T.width("01i5")*0.95*0.5)) tmpos = tmpos+W*0.005;
                    else if (tmpos > (7+T.width("01i5")*0.95*0.5)) tmpos = 7+T.width("01i5")*0.95*0.5;
                    ctx.save();
                    ctx.beginPath();
                    ctx.rect(7+T.width("01i5")*0.95*0.5,H-T.height("01i5")*0.95,W*0.15,T.height("01i5")*0.95-10);
                    ctx.closePath();
                    ctx.clip();
                    roundedRect(ctx,tmpos,H-T.height("01i5")*0.95,W*0.15,T.height("01i5")*0.95-10,10,"rgba(0,0,0,0.8)");
                    if (tmpos==7+T.width("01i5")*0.95*0.5){
                        text(ctx,"Not Active",tmpos+W*0.15*0.5+W*0.01,H-T.height("01i5")*0.95+(T.height("01i5")*0.95-10)*0.5,"38px"+FONT,"white","center","middle");
                        this.addZone("tmbuy",tmrect,"tm_show",{target:true});
                    }
                    ctx.restore(); 
                } else tmpos = 7+T.width("01i5")*0.95*0.5-W*0.15;
                T.negative(ctx,"t9zc",7,H-T.height("01i5")*0.95-5,T.width("01i5")*0.95,T.height("01i5")*0.95);
            }
        }

        // Season Pass
        if (mdata!==undefined && mdata.city!==undefined && mdata.city.pass!==undefined) {
            var sprect=(new Rect(W*0.22,H-T.height("4krx")*0.95-5,T.width("4krx")*0.95,T.height("4krx")*0.95)).small();
            if (sprect.isInside(GM.x,GM.y)){
                T.draw(ctx,"4krx",W*0.22+T.width("4krx")*0.05,H-T.height("4krx")*0.9-5,T.width("4krx")*0.9,T.height("4krx")*0.9);
                this.addZone("tgsp",sprect,"tgsp",{target:true});
            } else T.draw(ctx,"4krx",W*0.22,H-T.height("4krx")*0.95-5,T.width("4krx")*0.95,T.height("4krx")*0.95);
        }

        // Right tabs
        var anyExperiment=false;
        for (var j=0; j<data.lab.length; ++j) {
            if (nn(data.lab[j]) && data.lab[j].todo<=0) anyExperiment=true;
        }
        var anyBuilding=false;
        for (var i=0; i<BUILDINGS.length; ++i) {
            var amount = data.buildingAmount=="MAX"?this.buildingMax(i,data.energy):(data.buildingAmount=="NXT"||data.buildingAmount=="MXT"?this.buildingNxt(i,data.buildingAmount=="NXT"):data.buildingAmount);
            var price = this.buildingPrice(i,amount);
            if (price<=data.energy) anyBuilding=true;
        }
        var sceneOrder=["buildings","experiment","quantum","galaxies","ed","dimensions"];
        var spriteTabs = ["04b7","0e6f","0dx0","08u1","04cn","0gcl"];
        var x0 = W*0.2417;
        var y0 = H*0.45;
        var lastDraw=undefined;
        var ldy=undefined;
        for (var i=5;i>=0;--i) {
            if (this.isEnabled(sceneOrder[i])) {
                if (scene == sceneOrder[i]) {
                    ldy=y0;
                    lastDraw=i;
                }
                else{
                    T.draw(ctx,"0lnw",x0+1,y0);
                    if (sceneOrder[i]=="buildings") {
                        if (anyBuilding) T.draw(ctx,"0eph",x0+2,y0);
                        else T.draw(ctx,"0lnw",x0+2,y0);
                    }
                    else if (sceneOrder[i]=="experiment") {
                        if (anyExperiment) T.draw(ctx,"0eph",x0+2,y0);
                        else T.draw(ctx,"0lnw",x0+2,y0);
                    }
                    else if (sceneOrder[i]=="galaxies") {
                        if (galaxies.empty()==0 || galaxies.hasMovesLeft()) T.draw(ctx,"0eph",x0+2,y0);
                        else T.draw(ctx,"0lnw",x0+2,y0);
                    }
                    if ((new Rect(x0+1,y0+T.height("0lnw")*0.15,T.width("0lnw"),T.height("0lnw")*0.7)).small().isInside(GM.x,GM.y)) {
                        T.draw(ctx,"05ms",x0+2,y0);
                        ctx.save();
                        ctx.translate(x0+2,y0+T.height("0coj")/4);
                        ctx.scale(-1,1);
                        T.draw(ctx,"0coj",0,0);
                        ctx.restore();
                        if (sceneOrder[i]=="buildings") text(ctx,"Buildings",x0+2-T.width("0coj")/2,y0+T.height("05ms")/2,"28px"+FONT,"white","center","middle");
                        else if (sceneOrder[i]=="experiment") text(ctx,"Experiment Laboratory",x0+2-T.width("0coj")/2,y0+T.height("05ms")/2,"28px"+FONT,"white","center","middle");
                        else if (sceneOrder[i]=="galaxies") text(ctx,"Anti-Particle Board",x0+2-T.width("0coj")/2,y0+T.height("05ms")/2,"28px"+FONT,"white","center","middle");
                        else if (sceneOrder[i]=="quantum") text(ctx,"Quantum Gambling",x0+2-T.width("0coj")/2,y0+T.height("05ms")/2,"28px"+FONT,"white","center","middle");
                        else if (sceneOrder[i]=="ed") text(ctx,"Energy Orbs",x0+2-T.width("0coj")/2,y0+T.height("05ms")/2,"28px"+FONT,"white","center","middle");
                        else if (sceneOrder[i]=="dimensions") text(ctx,"Dimensions",x0+2-T.width("0coj")/2,y0+T.height("05ms")/2,"28px"+FONT,"white","center","middle");
                    }
                    T.draw(ctx,spriteTabs[i],x0+3,y0+T.height("0fgx")*0.25);
                }
                this.addZone("navTab"+i,(new Rect(x0+1,y0+T.height("0lnw")*0.15,T.width("0lnw"),T.height("0lnw")*0.7)).small(),"scene",{target:sceneOrder[i]});
            }
            y0-=H*0.08;
        }
        // Do lastDraw (zOrder for selected tab)
        T.draw(ctx,"0fgx",x0+1,ldy);
        T.draw(ctx,spriteTabs[lastDraw],x0+3,ldy+T.height("0fgx")*0.25);
    }
    this.drawCameraS = function (ctx,zx,zy,zw,zh) {
        if (data.specie==0) {
            T.draw(ctx,"0gks",zx,zy);
            if (superClick!==undefined) {
                var fw = T.width("078p");
                var fh = T.height("078p");
                var fx = fireZones[superClick.loc].x-fw/2;
                var fy = fireZones[superClick.loc].y-fh/2-10;
                if (superClick.phase==0) {
                    T.draw(ctx,"078p",fx,fy);
                } else if (superClick.phase==1) {
                    T.draw(ctx,"00ys",fx,fy);
                }
                if (superClick.phase==2) {
                    T.draw(ctx,"0bqj",fx,fy);
                } else {
                    this.addZone("superclick",(new Rect(fx,fy,fw,fh)).small(),"superclick");
                }
            }
        } else if (data.specie==1) {
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    T.draw(ctx,"0nai",zx,zy);
                } else if (superClick.phase==7) {
                    T.draw(ctx,"0nai",zx,zy);
                } else {
                    T.draw(ctx,"0nai_2",zx,zy);
                }
                if (superClick!==undefined) {
                    if (superClick.phase==1 || superClick.phase==3) {
                        var ex = 0;
                        var ey = 0;
                        if (superClick.loc==0) {
                            ex = 75/2;
                            ey = 220/2;
                        }
                        var sid = (superClick.phase-1)/2;
                        T.draw(ctx,lightningZones[superClick.loc].nuvol[sid],zx+ex,zy+ey);
                    } else if (superClick.phase>=5 && superClick.phase<6) {
                        T.draw(ctx,lightningZones[superClick.loc].llamp,zx,zy);
                    }
                    if (superClick.phase>=1 && superClick.phase<5) {
                        var ex = 0;
                        var ey = 0;
                        if (superClick.loc==0) {
                            ex = 75/2;
                            ey = 220/2;
                        }
                        var idata = T.getImage(lightningZones[superClick.loc].nuvol[0]+"_0");
                        var fw = (idata.w0*idata.s);
                        var fh = (idata.h0*idata.s);
                        var fx = zx+idata.x0/2+ex;
                        var fy = zy+idata.y0/2+ey;
                        this.addZone("superclick",(new Rect(fx,fy,fw/2,fh/2)).small(),"superclick");
                    }
                }
            } else {
                T.draw(ctx,"0nai_0",zx,zy);
            }
            ctx.globalAlpha=1;
            var smoke = T.getImage("0cuc");
            var step = Math.floor(smoke.h0/20);
            for (var i=smoke.h0-step; i>=0; i-=step) {
                var end = Math.min(i+step,smoke.h0);
                var fact = (1-end/smoke.h0);
                var offsetX = Math.sin(Date.now()/2000+fact*2*Math.PI)*Math.pow(fact,1.5)*8;
                ctx.drawImage(smoke.source,smoke.x,smoke.y+i,smoke.w0,end-i,zx+smoke.x0/2+offsetX,zy+smoke.y0/2+i*smoke.s/2,(smoke.w0*smoke.s)/2,((end-i)*smoke.s)/2);
            }
        } else if (data.specie==2) {
            T.draw(ctx,"0kb8",zx,zy);
            if (superClick!==undefined) {
                var w = T.width("0imh");
                var h = T.height("0imh");
                var x = superClick.loc.x-w/2;
                var y = superClick.loc.y-h/2;
                if (superClick.phase==0) {
                    T.draw(ctx,"0imh",zx+x,zy+y);
                    this.addZone("superclick",(new Rect(x,y,w,h)).small(),"superclick");
                } else {
                    ctx.save();
                    ctx.translate(superClick.loc.x,superClick.loc.y);
                    ctx.rotate(Math.atan2(superClick.loc.dy,superClick.loc.dx));
                    if (superClick.phase==1) {
                        T.draw(ctx,"01fb",-w/2,-h/2);
                    } else if (superClick.phase==2) {
                        T.draw(ctx,"01fb_5",-w/2,-h/2);
                    }
                    ctx.restore();
                }
            }
        } else if (data.specie==3) {
            T.draw(ctx,"034z",zx,zy);
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    var w = T.width("0ie0");
                    var h = T.height("0ie0");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    ctx.save();
                    ctx.translate(zx+superClick.loc.x,zy+superClick.loc.y);
                    ctx.rotate(spin/800);
                    T.draw(ctx,"0ie0",-w/2,-h/2);
                    ctx.restore();
                    this.addZone("superclick",(new Rect(x,y,w,h)).small(),"superclick");
                } else {
                    var w = T.width("0701");
                    var h = T.height("0701");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"0701",zx+x,zy+y);
                }
            }
        } else if (data.specie==4) {
            var w = T.width("0mp9");
            var h = T.height("0mp9");
            T.draw(ctx,"0a41",zx,zy);
            ctx.save();
            ctx.translate(zx+zw/2,zy+zh/2);
            ctx.scale(2,1.2);
            ctx.rotate(spin/8000);
            T.draw(ctx,"0mp9",-w/2,-h/2);
            for (var i=0; i<galaxyParts.length; ++i) {
                ctx.globalAlpha = 0.5+(Math.sin(galaxyColors[i]+spin/400)+1)/4;
                T.draw(ctx,galaxyParts[i],-w/2,-h/2);
            }
            var r = [];
            if (superClick!==undefined && superClick.loc) {
                ctx.translate(superClick.loc.x,superClick.loc.y);
                ctx.rotate(-spin/8000);
                //ctx.scale(1,2/1.2);
                if (superClick.phase==0) {
                    var sw = T.width("036t");
                    var sh = T.height("036t");
                    T.draw(ctx,"036t",-sw*0.7,-sh*0.7,sw*1.4,sh*1.4);
                    var p = rotate_point(superClick.loc.x,superClick.loc.y,0,0,spin/8000);
                    var x = p.x*2+zw/2;
                    var y = p.y*1.2+zh/2;
                    this.addZone("superclick",(new Rect(x-sw/2,y-sw/2,sw,sh)).small(),"superclick");
                } else if (superClick.phase==1) {
                    ctx.globalAlpha=1;
                    var sw = T.width("0n5p");
                    var sh = T.height("0n5p");
                    T.draw(ctx,"0n5p",-sw/2,-sh/2);
                }
                if (superClick.phase==1 || superClick.phase==2) {
                    var sp = Math.min(1.5,(Date.now()-superClick.timer)/2000);
                    ctx.scale(sp,sp);
                    ctx.globalAlpha=Math.pow((1.5-sp)/1.5,2);
                    var sw = T.width("00lw");
                    var sh = T.height("00lw");
                    T.draw(ctx,"00lw",-sw/2,-sh/2);
                }
            }
            ctx.restore();
        } else if (data.specie==5) {
            T.draw(ctx,"02kk",zx,zy);
            if (superClick!==undefined && superClick.loc) {
                ctx.save();
                if (superClick.phase==0 && superClick.loc) {
                    var iw = T.width(superClick.id);
                    var ih = T.height(superClick.id);
                    ctx.globalAlpha = 0.5+(Math.sin(spin/400)+1)/4;
                    this.addZone("superclick",(new Rect(zx+superClick.loc.x-iw/2,zy+superClick.loc.y-ih/2,iw,ih)).small(),"superclick");
                    T.draw(ctx,superClick.id,zx+superClick.loc.x-iw/2,zy+superClick.loc.y-ih/2);
                } else if (superClick.phase==1 && superClick.loc) {
                    var t = Date.now()-superClick.timer;
                    var iw = T.width("0hss");
                    var ih = T.height("0hss");
                    if (t<250) {
                        T.draw(ctx,"0hss",zx+superClick.loc.x-iw/2,zy+superClick.loc.y-ih/2);
                    } else if (t>1250) {
                        T.draw(ctx,"0hss",zx+superClick.loc.x-iw/2,zy+superClick.loc.y-ih/2);
                    }
                    if (t>200 && t<1400 && superClick!==undefined && superClick.loc!==undefined) {
                        var perc=(t-200)/200;
                        if (t>800) perc=(1400-t)/200;
                        ctx.beginPath();
                        ctx.rect(zx,zy,zw,zh);
                        ctx.closePath();
                        ctx.clip();
                        var grd = ctx.createRadialGradient(zx+superClick.loc.x,zy+superClick.loc.y,0, zx+superClick.loc.x, zy+superClick.loc.y,perc*zh)
                        grd.addColorStop(0,"rgba(255,255,255,1)");
                        grd.addColorStop(1,"rgba(255,255,255,0)");
                        ctx.fillStyle=grd;
                        ctx.beginPath();
                        ctx.arc(zx+superClick.loc.x,zy+superClick.loc.y,zh,0,2*Math.PI);
                        ctx.closePath();
                        ctx.fill();
                    }
                }
                ctx.restore();
            }
        } else if (data.specie==6) {
            T.draw(ctx,"0bl5",zx,zy);
            var bw = T.width("0das");
            var bh = T.height("0das");
            var r = (Math.min(bw,bh)/2)*0.92;
            var hubble = T.getImage("0bth");
            for (var i=0; i<universeBubbles.length; ++i) {
                try {
                    var b = universeBubbles[i];
                    if (superClick!==undefined && superClick.loc==i) {
                        if (superClick.phase==0) {
                            var perc=Math.max(0,1-(Date.now()-superClick.timer)/2000);
                            ctx.save();
                            ctx.beginPath();
                            ctx.arc(b.x,b.y,r*perc,0,2*Math.PI);
                            ctx.closePath();
                            ctx.clip();
                            ctx.drawImage(hubble.source,hubble.x+(b.ox-bw/2)/hubble.s,hubble.y+(b.oy-bh/2)/hubble.s,(bw/hubble.s)*2,(bh/hubble.s)*2,b.x-bw/2,b.y-bh/2,bw,bh);
                            ctx.restore();
                            ctx.save();
                            ctx.translate(b.x,b.y);
                            ctx.scale(perc,perc);
                            T.draw(ctx,"0das",-bw/2,-bh/2);
                            ctx.restore();
                        } else if (superClick.phase==1) {
                            var perc=(Date.now()-superClick.timer)/2000;
                            if (perc>0.75) {
                                var lb = Math.floor(perc*4);
                                var rest = (perc*4-lb)/4;
                                if (lb%2) perc=0.75-rest;
                                else perc=0.5+rest;
                            }
                            superClick.perc=perc;
                            ctx.save();
                            ctx.beginPath();
                            ctx.arc(b.x,b.y,r*perc,0,2*Math.PI);
                            ctx.fillStyle="white";
                            ctx.closePath();
                            ctx.fill();
                            ctx.restore();
                            ctx.save();
                            ctx.translate(b.x,b.y);
                            ctx.scale(perc,perc);
                            T.draw(ctx,"0das",-bw/2,-bh/2);
                            ctx.restore();
                            this.addZone("superclick",(new Rect(b.x-bw*perc/2,b.y-bh*perc/2,bw*perc,bh*perc)).small(),"superclick");
                        } else if (superClick.phase==2) {
                            var perc=Math.min(1,superClick.perc+(Date.now()-superClick.timer)/1000);
                            var perc1=Math.min(1,(Date.now()-superClick.timer)/1000);
                            ctx.save();
                            ctx.beginPath();
                            ctx.arc(b.x,b.y,r*perc,0,2*Math.PI);
                            ctx.closePath();
                            ctx.clip();
                            ctx.drawImage(hubble.source,hubble.x+(b.ox-bw/2)/hubble.s,hubble.y+(b.oy-bh/2)/hubble.s,(bw/hubble.s)*2,(bh/hubble.s)*2,b.x-bw/2,b.y-bh/2,bw,bh);
                            ctx.fillStyle="rgba(255,255,255,"+(1-perc1)+")";
                            ctx.fill();
                            ctx.restore();
                            ctx.save();
                            ctx.translate(b.x,b.y);
                            ctx.scale(perc,perc);
                            T.draw(ctx,"0das",-bw/2,-bh/2);
                            ctx.restore();
                        }
                    } else {
                        ctx.save();
                        ctx.beginPath();
                        ctx.arc(b.x,b.y,r,0,2*Math.PI);
                        ctx.closePath();
                        ctx.clip();
                        ctx.drawImage(hubble.source,hubble.x+(b.ox-bw/2)/hubble.s,hubble.y+(b.oy-bh/2)/hubble.s,(bw/hubble.s)*2,(bh/hubble.s)*2,b.x-bw/2,b.y-bh/2,bw,bh);
                        ctx.restore();
                        T.draw(ctx,"0das",b.x-bw/2,b.y-bh/2);
                    }
                } catch (e) {
                    console.log(e);
                }
            }
        } else if (data.specie==7) {
            T.draw(ctx,"0ijt",zx,zy);
            for (var i=0; i<primordialObjects.length; ++i) {
                var bw = T.width(primordialObjects[i].img);
                var bh = T.height(primordialObjects[i].img);
                for (var j=primordialObjects[i].stella.length-1; j>=0; --j) {
                    ctx.save();
                    ctx.translate(primordialObjects[i].stella[j].x,primordialObjects[i].stella[j].y);
                    ctx.rotate(primordialObjects[i].stella[j].r);
                    ctx.globalAlpha=primordialObjects[i].stella[j].a;
                    T.draw(ctx,primordialObjects[i].img,-bw/2,-bh/2);
                    ctx.restore();
                }
                ctx.globalAlpha=1;
                ctx.save();
                ctx.translate(primordialObjects[i].x,primordialObjects[i].y);
                ctx.rotate(primordialObjects[i].r);
                T.draw(ctx,primordialObjects[i].img,-bw/2,-bh/2);
                ctx.restore();
            }
            if (superClick!==undefined) {
                var bw = T.width(superClick.img);
                var bh = T.height(superClick.img);
                for (var j=superClick.stella.length-1; j>=0; --j) {
                    ctx.save();
                    ctx.translate(superClick.stella[j].x,superClick.stella[j].y);
                    ctx.rotate(superClick.stella[j].r);
                    ctx.globalAlpha=superClick.stella[j].a;
                    T.draw(ctx,superClick.img,-bw/2,-bh/2);
                    ctx.restore();
                }
                ctx.globalAlpha=1;
                ctx.save();
                if (superClick.phase==1) {
                    ctx.globalAlpha=Math.max(0.00001,1-(Date.now()-superClick.timer)/8000);
                }
                ctx.translate(superClick.x,superClick.y);
                ctx.rotate(superClick.r);
                T.draw(ctx,superClick.img,-bw/2,-bh/2);
                ctx.restore();
                if (superClick.phase==0) {
                    this.addZone("superclick",(new Rect(superClick.x-bw/2,superClick.y-bh/2,bw,bh)).small(),"superclick");
                }
            }
        } else if (data.specie==8) {
            T.draw(ctx,"0cws",zx,zy);
            var bw = T.width("07kj");
            var bh = T.height("07kj");
            if (superClick!==undefined) {
                if (superClick.phase<2) {
                    this.addZone("superclick",(new Rect(superClick.loc.x-bw/2,superClick.loc.y-bh/2,bw,bh)).small(),"superclick");
                }
                if (superClick.phase==0 || superClick.phase==2) {
                    T.draw(ctx,"07kj",superClick.loc.x-bw/2,superClick.loc.y-bh/2);
                } else if (superClick.phase==1) {
                    T.draw(ctx,"02ir",superClick.loc.x-bw/2,superClick.loc.y-bh/2);
                }
            }
        } else if (data.specie==9) {
            try {
                if (Julia==undefined) Julia=new JuliaFract(ctx,zw,zh);
                if (superClick==undefined) Julia.step(data.fractal);
                else {
                    if (superClick.phase==0) {
                        Julia.step(data.fractal,superClick.loc.x,superClick.loc.y,(Date.now()-superClick.stime)/4000);
                    } else if (superClick.phase==1) {
                        Julia.step(data.fractal,superClick.loc.x,superClick.loc.y,mapf(Math.sin(spin/400),-1,1,0.45,0.5));
                        this.addZone("superclick",(new Rect(superClick.loc.x,superClick.loc.y,128,128)).small(),"superclick");
                    } else {
                        Julia.step(data.fractal,superClick.loc.x,superClick.loc.y,0.5-((Date.now()-superClick.stime)/4000));
                    }
                }
                Julia.draw(ctx,zx,zy);
            } catch (e) {

            }
        } else if (data.specie==10) {
            T.draw(ctx,"0e0o",zx,zy);
            if (superClick!==undefined) {
                var delta = Date.now()-superClick.stime;
                if (superClick.phase==0) {
                    if (delta<2000) {
                        ctx.save();
                        ctx.globalAlpha=delta/2000;
                        T.draw(ctx,reiZones[superClick.loc].sid+"_0",reiZones[superClick.loc].x,reiZones[superClick.loc].y);
                        ctx.restore();
                    } else {
                        T.draw(ctx,reiZones[superClick.loc].sid,reiZones[superClick.loc].x,reiZones[superClick.loc].y);
                        this.addZone("superclick",(new Rect(reiZones[superClick.loc].x,reiZones[superClick.loc].y,T.width(reiZones[superClick.loc].sid),T.height(reiZones[superClick.loc].sid))).small(),"superclick");
                    }
                } else {
                    if (delta<2000) {
                        ctx.save();
                        ctx.globalAlpha=1-(delta/2000);
                        T.draw(ctx,reiZones[superClick.loc].sid+"_0",reiZones[superClick.loc].x,reiZones[superClick.loc].y);
                        ctx.restore();
                    } else {
                        superClick=undefined;
                    }
                }
            }
        } else if (data.specie==11) {
            T.draw(ctx,"0ggx",zx,zy);
            if (superClick!==undefined) {
                var delta = Date.now()-superClick.stime;
                if (superClick.phase==0) {
                    if (delta<2000) {
                        ctx.save();
                        ctx.globalAlpha=delta/2000;
                        T.draw(ctx,"06ew",superClick.loc.x,superClick.loc.y);
                        ctx.restore();
                    } else {
                        T.draw(ctx,"06ew",superClick.loc.x,superClick.loc.y);
                        ctx.save();
                        ctx.globalAlpha=(Math.sin(spin/100)+1)/2;
                        T.draw(ctx,"07sw",superClick.loc.x,superClick.loc.y);
                        ctx.restore();
                        this.addZone("superclick",(new Rect(superClick.loc.x,superClick.loc.y,T.width("06ew"),T.height("06ew"))).small(),"superclick");
                    }
                } else {
                    if (delta<2000) {
                        ctx.save();
                        ctx.globalAlpha=1-(delta/2000);
                        T.draw(ctx,"06ew",superClick.loc.x,superClick.loc.y);
                        ctx.restore();
                    } else {
                        superClick=undefined;
                    }
                }
            }
        } else if (data.specie==12) {
            var shades=["0mrb","0c2d","04c1","0ms5","08id"];
            var lshades=["0ll7","03s8","0oo7","06q8","0opo"];
            var slen=600;
            var dlen=100;
            if (!data.fractal) {
                slen=100;
                dlen=40;
            }
            var mw=T.width("0gks")-T.width("0mrb")*2;
            var mh=T.height("0gks")-T.height("0mrb")*2;
            var SPEED=0.5;
            while (fabric.length<slen) {
                fabric.push({
                    x:randInt(0,mw),
                    y:randInt(0,mh),
                    s:shades[randInt(0,shades.length)],
                    o:Math.random()/2+0.5,
                })
            }
            if (superClick==undefined) {
                if (fabric.length>slen) fabric.pop();
                if (fabric.length>slen) fabric.pop();
            } else {
                if (superClick.phase==0) {
                    this.addZone("superclick",(new Rect(superClick.loc.x,superClick.loc.y,100,100)).small(),"superclick");
                    if (fabric.length<slen+dlen) {
                        fabric.push({
                            x:superClick.loc.x+randInt(0,100-40),
                            y:superClick.loc.y+randInt(0,100-40),
                            s:lshades[randInt(0,lshades.length)],
                            o:Math.random()/2+0.5,
                        });
                    }
                } else if (superClick.phase==1) {
                    if (fabric.length>slen) fabric.pop();
                    if (fabric.length>slen) fabric.pop();
                }
            }
            ctx.save();
            for (var i=fabric.length-1; i>=0; --i) {
                //if (Math.random()<0.01) fabric[i].s=shades[randInt(0,shades.length)];
                fabric[i].x=clamp(fabric[i].x+(Math.random()-0.5)*SPEED,0,mw);
                fabric[i].y=clamp(fabric[i].y+(Math.random()-0.5)*SPEED,0,mh);
                fabric[i].o=clamp(fabric[i].o+(Math.random()-0.5)*0.1,0.5,1);
                ctx.globalAlpha=fabric[i].o;
                T.draw(ctx,fabric[i].s,fabric[i].x,fabric[i].y,T.width("0mrb")*2,T.height("0mrb")*2);
            }
            ctx.restore();
        } else if (data.specie==13) {
            T.draw(ctx,"0fhv",zx,zy);
            if (superClick!==undefined) {
                ctx.save();
                ctx.translate(superClick.loc.x+(T.width("0384")*superClick.loc.s)/2,superClick.loc.y+(T.height("0384")*superClick.loc.s)/2);
                ctx.rotate(superClick.loc.a);
                if (superClick.phase==0) {
                    ctx.globalAlpha=mapfc(Date.now()-superClick.stime,0,1500,0,1);
                    T.draw(ctx,"0384",-(T.width("0384")*superClick.loc.s)/2,-(T.height("0384")*superClick.loc.s)/2);
                    this.addZone("superclick",(new Rect(superClick.loc.x,superClick.loc.y,T.width("0384")*superClick.loc.s,T.height("0384")*superClick.loc.s)).small(),"superclick");
                } else if (superClick.phase==1) {
                    ctx.globalAlpha=1-mapfc(Date.now()-superClick.stime,0,1500,0,1);
                    T.draw(ctx,"0384",-(T.width("0384")*superClick.loc.s)/2,-(T.height("0384")*superClick.loc.s)/2);
                }
                ctx.restore();
            }
        } else if (data.specie==14) {
            T.draw(ctx,"l5lg",zx,zy);
            if (superClick!==undefined) {
                var sx=zx+T.width("l5lg")/2-(T.width("036t")/2+2);
                if (superClick.phase==0) {
                    var sy=(1-mapf(Date.now()-superClick.begin,0,20000,0.2,0.95))*T.height("l5lg");
                    T.draw(ctx,"036t",sx,sy);
                    this.addZone("superclick",(new Rect(sx,sy,T.width("036t"),T.height("036t"))).small(),"superclick");
                } else {
                    var sy=(1-mapf(Date.now()-superClick.begin,0,20000,0.2,0.95))*T.height("l5lg");
                    sy=clamp(sy-mapf(Date.now()-superClick.stime,0,2000,0,1)*T.height("l5lg"),0,H);
                    ctx.save();
                    ctx.globalAlpha=1-mapfc(Date.now()-superClick.stime,0,1500,0,1);
                    T.draw(ctx,"036t",sx,sy);
                    ctx.restore();
                }
            }
        }
    }
    var pixels = [];
    this.drawCameraD = function (ctx,zx,zy,zw,zh) {
        if (data.cdim==0) {
            T.draw(ctx,"0a0y",zx,zy);
            var pw = T.width("0cbr");
            var ph = T.height("0cbr");
            var plen=20;
            if (!data.fractal) plen=10;
            if (pixels.length<plen) pixels.push({
                x: randInt(zx,zx+zw-pw),
                y: randInt(zy+zh,zy+zh+500),
                s: 0,
                ss: randInt(10,25),
            });
            if (pixels.length>plen) pixels.pop();
            for (var i=0; i<pixels.length; ++i) {
                T.draw(ctx,"0cbr",pixels[i].x,pixels[i].y);
                ++pixels[i].s;
                if (pixels[i].s==pixels[i].ss) {
                    pixels[i].s=0;
                    pixels[i].y-=pw/3;
                    if (pixels[i].y<=-ph) {
                        pixels[i] = {
                            x: randInt(zx,zx+zw-pw),
                            y: randInt(zy+zh,zy+zh+100),
                            s: 0,
                            ss: randInt(5,15),
                        }
                    }
                }
            }
            T.draw(ctx,"0gl7",zx,zy);
            T.draw(ctx,"0huu",zx,zy);
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    T.draw(ctx,"04o8",superClick.loc.x,superClick.loc.y);
                    ++superClick.loc.s;
                    if (superClick.loc.s==superClick.loc.ss) {
                        superClick.loc.s=0;
                        superClick.loc.y+=pw/3;
                    }
                    this.addZone("superclick",(new Rect(superClick.loc.x-pw/2,superClick.loc.y+ph-pw*1.5,pw*2,pw*2)).small(),"superclick");
                } else {
                    ctx.save();
                    ctx.globalAlpha=mapfc(Date.now()-superClick.stime,0,2000,1,0);
                    T.draw(ctx,"04o8",superClick.loc.x,superClick.loc.y);
                    superClick.loc.y+=pw/6;
                    ctx.restore();
                    if (superClick.loc.y>zh+zy || Date.now()-superClick.stime>2500) superClick=undefined;
                }
            }
        } else if (data.cdim==1) {
            T.draw(ctx,"0ihd",zx,zy);
            if (superClick!==undefined) {
                var ow = T.width("0548");
                var oh = T.height("0548");
                if (superClick.phase==0) {
                    T.draw(ctx,"0548",superClick.loc.x,superClick.loc.y+superClick.loc.oy);
                    if (superClick.loc.d) {
                        superClick.loc.oy+=0.1+Math.random()/2;
                        if (superClick.loc.oy>10) superClick.loc.d=false;
                    } else {
                        superClick.loc.oy-=0.1+Math.random()/2;
                        if (superClick.loc.oy<-10) superClick.loc.d=true;
                    }
                    this.addZone("superclick",(new Rect(superClick.loc.x,superClick.loc.y+superClick.loc.oy,ow,oh)).small(),"superclick");
                } else {
                    var ratio = mapfc(Date.now()-superClick.stime,0,2000,1,0);
                    var nratio = (1-ratio)/2;
                    T.draw(ctx,"0548",superClick.loc.x+ow*nratio,superClick.loc.y+oh*nratio,ow*ratio,oh*ratio);
                    if (Date.now()-superClick.stime>2500) superClick=undefined;
                }
            }
        } else if (data.cdim==2) {
            T.draw(ctx,"0mb5",zx,zy);
            if (superClick!==undefined) {
                if (this.__maskd2===undefined) {
                    this.__maskd2 = T.getPixels("0gc2");
                }
                var mw = T.width("0gc2");
                var mh = T.height("0gc2");
                var org = ctx.getImageData(superClick.loc.x,superClick.loc.y,mw,mh);
                if (superClick.phase==0) {
                    var limit=Math.floor(mapfc(Date.now()-superClick.stime,0,3000,255,5));
                    var minim=mapfc(Date.now()-superClick.stime,0,5000,0,1);
                    if (data.fractal) {
                        for (var i=0; i<this.__maskd2.data.length; i+=4) {
                            var bw = mapfc(this.__maskd2.data[i],0,limit,0,minim);
                            //bw*=bw;
                            var color = 1 - bw;
                            var col=(org.data[i]*0.3+org.data[i+1]*0.59+org.data[i+2]*0.11)*1.3*bw;
                            org.data[i]=org.data[i]*color+col;
                            org.data[i+1]=org.data[i+1]*color+col;
                            org.data[i+2]=org.data[i+2]*color+col;
                        }
                    } else {
                        for (var i=0; i<this.__maskd2.data.length; i+=4) {
                            if (this.__maskd2.data[i]>limit) {
                                //Red * 0.3 + Green * 0.59 + Blue * 0.11
                                // var col=pixels.data[i]*0.3+pixels.data[i+1]*0.59+pixels.data[i+2]*0.11;
                                var col=(org.data[i]*0.3+org.data[i+1]*0.59+org.data[i+2]*0.11)*1.3;
                                org.data[i]=col;
                                org.data[i+1]=col;
                                org.data[i+2]=col;
                            }
                        }
                    }
                    ctx.putImageData(org,superClick.loc.x,superClick.loc.y,0,0,mw,mh);
                    if (Date.now()-superClick.stime>3000) this.addZone("superclick",(new Rect(superClick.loc.x,superClick.loc.y,mw,mh)).small(),"superclick");
                } else {
                    var limit=255-Math.floor(mapfc(Date.now()-superClick.stime,0,2000,255,5));
                    var minim=1-mapfc(Date.now()-superClick.stime,0,2000,0,1);
                    if (data.fractal) {
                        for (var i=0; i<this.__maskd2.data.length; i+=4) {
                            var bw = mapfc(this.__maskd2.data[i],0,limit,0,minim);
                            //bw*=bw;
                            var color = 1 - bw;
                            var col=(org.data[i]*0.3+org.data[i+1]*0.59+org.data[i+2]*0.11)*1.3*bw;
                            org.data[i]=org.data[i]*color+col;
                            org.data[i+1]=org.data[i+1]*color+col;
                            org.data[i+2]=org.data[i+2]*color+col;
                        }
                    } else {
                        for (var i=0; i<this.__maskd2.data.length; i+=4) {
                            if (this.__maskd2.data[i]>limit) {
                                //Red * 0.3 + Green * 0.59 + Blue * 0.11
                                // var col=pixels.data[i]*0.3+pixels.data[i+1]*0.59+pixels.data[i+2]*0.11;
                                var col=(org.data[i]*0.3+org.data[i+1]*0.59+org.data[i+2]*0.11)*1.3;
                                org.data[i]=col;
                                org.data[i+1]=col;
                                org.data[i+2]=col;
                            }
                        }
                    }
                    ctx.putImageData(org,superClick.loc.x,superClick.loc.y,0,0,mw,mh);
                }
            }
        } else if (data.cdim==3) {
            T.draw(ctx,"0cju",zx,zy);
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    var w = T.width("0mr6");
                    var h = T.height("0mr6");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"0mr6",zx+x,zy+y);
                    this.addZone("superclick",(new Rect(x,y,w,h)).small(),"superclick");
                } else {
                    var w = T.width("049f");
                    var h = T.height("049f");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"049f",zx+x,zy+y);
                }
            }
        } else if (data.cdim==4) {
            T.draw(ctx,"0hy2",zx,zy);
            if (superClick!==undefined) {
                var delta = Date.now()-superClick.stime;
                if (superClick.phase==0) {
                    var w = T.width("0f2h");
                    var h = T.height("0f2h");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;

                    if (delta<2000) {
                        ctx.save();
                        ctx.globalAlpha=delta/2000;
                        ctx.translate(zx+superClick.loc.x,zy+superClick.loc.y);
                        ctx.rotate(spin/800);
                        T.draw(ctx,"0f2h",-w/2,-h/2);
                        ctx.restore();
                    } else {
                        ctx.save();
                        ctx.translate(zx+superClick.loc.x,zy+superClick.loc.y);
                        ctx.rotate(spin/800);
                        T.draw(ctx,"0f2h",-w/2,-h/2);
                        ctx.restore();
                        this.addZone("superclick",(new Rect(x,y,w,h)).small(),"superclick");
                    }
                } else {
                    var w = T.width("0f64");
                    var h = T.height("0f64");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"0f64",zx+x,zy+y);
                }
            }
        } else if (data.cdim==5) {
            T.draw(ctx,"0fgl",zx,zy);
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    var w = T.width("05tw");
                    var h = T.height("05tw");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"05tw",zx+x,zy+y);
                    this.addZone("superclick",(new Rect(x,y,w,h)).small(),"superclick");
                }
            }
        } else if (data.cdim==6) {
            T.draw(ctx,"0aca",zx,zy);
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    var x = superClick.loc.x
                    var y = superClick.loc.y
                    T.draw(ctx,"0jiw",zx+x,zy+y);
                    this.addZone("superclick",(new Rect(x,y,T.width("0jiw_0"),T.height("0jiw_0"))).small(),"superclick");
                } else {
                    if (Math.random()<0.5) {
                        superClick.loc.x-=4;
                    } else {
                        superClick.loc.y-=4;
                    }
                    var x = superClick.loc.x
                    var y = superClick.loc.y
                    T.draw(ctx,"0jiw",zx+x,zy+y);
                    //this.addZone("superclick",(new Rect(x,y,T.width("0jiw_0"),T.height("0jiw_0"))).small(),"superclick");
                }
            }
        } else if (data.cdim==7) {
            T.draw(ctx,"082d",zx,zy);
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    var w = T.width("0fzz_0");
                    var h = T.height("0fzz_0");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"0fzz_0",zx+x,zy+y);
                    this.addZone("superclick",(new Rect(x,y,w,h)).small(),"superclick");
                } else {
                    var w = T.width("0fzz");
                    var h = T.height("0fzz");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"0fzz",zx+x,zy+y);
                }
            }
        } else if (data.cdim==8) {
            T.draw(ctx,"0n8p",zx,zy);
            if (superClick!==undefined) {
                if (superClick.phase==0) {
                    var w = T.width("0ekv");
                    var h = T.height("0ekv");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"0ekv",zx+x,zy+y);
                    this.addZone("superclick",(new Rect(x,y,w,h)).small(),"superclick");
                } else {
                    var w = T.width("0nbm");
                    var h = T.height("0nbm");
                    var x = superClick.loc.x-w/2;
                    var y = superClick.loc.y-h/2;
                    T.draw(ctx,"0nbm",zx+x,zy+y);
                }
            }
        }
    }
    this.drawMenus = function (ctx) {
        var zx = W*0.28125;
        var zy = H*0.5+80/2;
        var zw = W*0.71875;
        var zh = H*0.5-80/2;
        T.draw(ctx,"0cog",zx,zy);
        T.draw(ctx,"02bn",zx,zy+92/2);
        var bw = T.width("0567");
        var bh = T.height("0567");
        var ow = T.width("05x5");
        var oh = T.height("05x5");
        var bb = 16/2;
        var x = zx+bb;
        var y = zy+bb;
        for (var i=0; i<menus.length; ++i) {
            var sprite="07y4";
            if (menus[i]==menu) sprite="0567";
            else if (menuHot[menus[i]]===1) sprite="05x5";
            if (menus[i]=="shop") sprite="0539";
            if (R["menu"+i]===undefined) R["menu"+i]=(new Rect(x,y,bw,bh)).small();
            if ((data.tutorial>7||(data.tutorial==7&&menus[i]=="specie")) && (R["menu"+i].isInside(GM.x,GM.y) && sprite=="07y4")) sprite="0567";
            if (sprite=="05x5") T.draw(ctx,sprite,x+bw/2-ow/2,y+bh/2-oh/2);
            else T.draw(ctx,sprite,x,y);
            if (data.tutorial>6 && menu!=="shop") this.addZone(menus[i],R["menu"+i],"menu",{target:menus[i]});
            if (menus[i]=="specie" && menuHot[menus[i]]!==1) {
                var energyPerc = Math.min(1,data.specie+1<SPECIES.length?data.stats.c.v.energy/SPECIES[data.specie+1].requires:0);
                ctx.save();
                ctx.beginPath();
                ctx.rect(x+bw/2-ow/2,y+bh/2-oh/2,ow*energyPerc,oh);
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,"05x5",x+bw/2-ow/2,y+bh/2-oh/2);
                ctx.restore();
            } else if (menus[i]=="research" && menuHot[menus[i]]!==1) {
                var researchPerc = data.researching?data.research[data.researching].done/TECH[data.researching].cost:0;
                ctx.save();
                ctx.beginPath();
                ctx.rect(x+bw/2-ow/2,y+bh/2-oh/2,ow*researchPerc,oh);
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,"05x5",x+bw/2-ow/2,y+bh/2-oh/2);
                ctx.restore();
            }
            ctext(ctx,menut[menus[i]],x+bw/2,y+bh/2,"30px "+FONT,"black","center","middle");
            x+=bw+bb;
        }
        if (menu!=="shop") {
            ctx.save();
            ctx.beginPath();
            ctx.rect(zx,zy+bb*2+bh,zw,zh-(bb*2+bh));
            ctx.closePath();
            ctx.clip();
        }
        this[menuf[menu]](ctx,zx,zy+bb*2+bh,zw,zh-(bb*2+bh));
        if (menu!=="shop") ctx.restore();
        if (data.tutorial<=4) {
            ctx.fillStyle="rgba(47,47,47,"+(0.5*(ttimes[4]/1000))+")";
            var x = zx;
            var y = zy+bb*2+bh;
            var w = zw;
            var h = zh-(bb*2+bh);
            ctx.fillRect(x,y,w,h);
        }
        if (data.tutorial<=5) {
            ctx.fillStyle="rgba(47,47,47,"+(0.5*(ttimes[5]/1000))+")";
            var x = zx;
            var y = zy;
            var w = 215/2;
            var h = bb*2+bh;
            ctx.fillRect(x,y,w,h);
        }
        if (data.tutorial<=7) {
            ctx.fillStyle="rgba(47,47,47,"+(0.5*(ttimes[7]/1000))+")";
            var x = zx + 215/2
            var y = zy;
            var w = (zw-215/2);
            var h = bb*2+bh;
            ctx.fillRect(x,y,w,h);
        }
    }
    this.drawResearch = function (ctx,zx,zy,zw,zh) {
        var rw = T.width("0e6q");
        var rh = T.height("0e6q");
        var bb = 32/2;
        var ib = 8/2;
        var iw = rh-ib*2;
        var ih = rh-ib*2;
        var bw = T.width("09zp");
        var bh = T.height("09zp");
        for (var i=0; i<toResearch.length+toUnlock.length; ++i) {
            var col = i%3;
            var row = Math.floor(i/3);
            var x = zx+bb+(bb+rw)*col;
            var y = zy+bb*2+(bb/2+rh)*row;
            var bg = "0e6q";
            if (i<toResearch.length&&(new Rect(x,y,rw,rh)).small().isInside(GM.x,GM.y)) bg="0j6t";
            if (i<toResearch.length&&toResearch[i]==data.researching) bg="0ek8";
            T.draw(ctx,bg,x,y);
            if (i<toResearch.length) {
                var icon = TECH[toResearch[i]].icon;
                T.draw(ctx,icon,x+ib,y+ib,iw,ih);
                this.addZone("research"+i,(new Rect(x,y,rw,rh)).small(),"research",{target:toResearch[i]});
                ctext(ctx,TECH[toResearch[i]].name,x+ib*2+iw,y+ib,"25px "+FONT,"black","left","top");
                var cx = x+rw-ib;
                ctext(ctx,TECH[toResearch[i]].text||"",cx,y+rh/2,"25px "+FONT,"black","right","middle");
                T.draw(ctx,"09zp",x+ib*2+iw,y+rh-ib-bh);
                var researchPerc = data.research[toResearch[i]]?data.research[toResearch[i]].done/TECH[toResearch[i]].cost:0;
                ctx.save();
                ctx.beginPath();
                ctx.rect(x+ib*2+iw,y+rh-ib-bh,bw*researchPerc,bh);
                ctx.closePath();
                ctx.clip();
                var todoEnergy = TECH[toResearch[i]].cost-(data.research[toResearch[i]]?data.research[toResearch[i]].done:0);
                var barText = "";
                if (toResearch[i]==data.researching) {
                    T.draw(ctx,"08q9",x+ib*2+iw,y+rh-ib-bh);
                    barText=timer((todoEnergy/OM.rmul)/production);
                } else {
                    T.draw(ctx,"0crn",x+ib*2+iw,y+rh-ib-bh);
                    barText=this.pn(todoEnergy,"J");
                    //barText=timer(todoEnergy/production);
                }
                ctx.restore();
                T.draw(ctx,"0iw0",x+ib*2+iw,y+rh-ib-bh);
                text(ctx,barText,x+ib*2+iw+bw/2,y+rh-ib-bh/2,"20px "+FONT,"black","center","middle");
            } else {
                var icon="0cyw";
                T.draw(ctx,icon,x+ib,y+ib,iw,ih);
                var lines = this.require2text(TECH[toUnlock[i-toResearch.length]].requires);
                for (var j=0; j<lines.length; ++j) {
                    ctext(ctx,lines[j],x+ib*2+iw,y+ib+j*35/2,"25px "+FONT,"black","left","top");
                }
            }
        }
        T.draw(ctx,data.autoResearch?"0oh5":"0o0x",zx+bb,zy+bb/2,bb,bb);
        var tgrect=(new Rect(zx+bb,zy+bb/2,bb,bb)).small();
        if (tgrect.isInside(GM.x,GM.y)) {
            ctx.fillStyle="rgba(255,255,255,0.15)";
            ctx.fillRect(zx+bb,zy+bb/2,bb,bb);
        }
        this.addZone("toggleAutoR",tgrect,"toggle",{target:"autoResearch"});
        ctext(ctx,"Auto-research "+(data.premiumR?"(all)":"(under 1 millisecond only)"),zx+bb*2.5,zy+bb,"25px "+FONT,"white","left","middle");
    }
    this.drawAchievements = function (ctx,zx,zy,zw,zh) {
        var aw = 102/2;
        var ah = 102/2;
        var bh = 18/2;
        var bw = 25/2;
        var ib = 8/2;
        ctx.fillStyle="black";
        var aid = achPage*44;
        var aend = Math.min((achPage+1)*44,ACH.length);
        for (var j=bh; j<=468/2-(bh+ah); j+=ah+ib) {
            for (var i=bw+aw+ib; i<=1472/2-(bw+aw*2); i+=aw+ib) {
                if (aid<aend) {
                    var ach = ACH[aid](data,this.pn);
                    if (ach.levels>0) {
                        var lvl = ach.level;
                        if (lvl>0) {
                            T.draw(ctx,ach.icon,zx+i,zy+j,aw,ah);
                        } else {
                            T.draw(ctx,"04rx",zx+i,zy+j,aw,ah);
                        }
                        T.draw(ctx,"0jtf",zx+i,zy+j,aw,ah);
                        text(ctx,lvl+"/"+ach.levels,zx+i+aw-ib,zy+j+ah-ib/2,"24px "+FONT,"black","right","bottom");
                        if (R["ach"+aid]===undefined) R["ach"+aid]=(new Rect(zx+i,zy+j,aw,ah)).small();
                        this.addZone("achievement"+aid,R["ach"+aid],"achievement",{target:aid});
                        if (R["ach"+aid].isInside(GM.x,GM.y)) {
                            ctx.fillStyle="rgba(255,255,255,0.1)";
                            ctx.fillRect(zx+i,zy+j,aw,ah);
                        }
                    }
                }
                ++aid;
            }
        }
        // prev-next
        var nw=T.width("09sg");
        var nh=T.height("09sg");
        T.draw(ctx,"09sg",zx+zw-16-nw,zy+zh/2-nh/2);
        ctx.save();
        ctx.translate(zx+16+nw/2,zy+zh/2)
        ctx.scale(-1,1);
        T.draw(ctx,"09sg",-nw/2,-nh/2);
        ctx.restore();
        this.addZone("achnext",(new Rect(zx+zw-16-nw,zy+zh/2-nh/2,nw,nh)).small(),"achp",{target:(achPage+1)%Math.ceil(ACH.length/44)});
        this.addZone("achprev",(new Rect(zx+16,zy+zh/2-nh/2,nw,nh)).small(),"achp",{target:(achPage-1+Math.ceil(ACH.length/44))%Math.ceil(ACH.length/44)});
        text(ctx,(achPage+1)+"/"+Math.ceil(ACH.length/44),zx+zw-16-nw/2,zy+zh-16,"24px"+FONT,"white","center","bottom");
        text(ctx,"+"+(2+(this.dimBuff("challengeinc")-1)*100).toFixed(1)+"%",zx+16+nw/2,zy+zh-44,"18px"+FONT,"white","center","bottom");
        text(ctx,"production",zx+16+nw/2,zy+zh-32,"18px"+FONT,"white","center","bottom");
        text(ctx,"per level",zx+16+nw/2,zy+zh-20,"18px"+FONT,"white","center","bottom");
        text(ctx,"completed",zx+16+nw/2,zy+zh-8,"18px"+FONT,"white","center","bottom");

        text(ctx,"Current bonus:",zx+16+nw/2,zy+20,"18px"+FONT,"white","center","bottom");
        text(ctx,"x"+this.pn3(this.getAchievement(),""),zx+16+nw/2,zy+40,"28px"+FONT,"white","center","bottom");
        var total=0;
        var got=0;
        for (var i=0; i<ACH.length; ++i) {
            var ach = ACH[i](data,this.pn);
            if (ach.levels>0) {
                total+=ach.levels;
                got+=ach.level;
            }
        }
        text(ctx,got+"/"+total,zx+zw-16-nw/2,zy+25,"24px"+FONT,"white","center","bottom");
        text(ctx,(got*100/total).toFixed(2)+"%",zx+zw-16-nw/2,zy+45,"18px"+FONT,"white","center","bottom");
    }
    this.drawStats = function (ctx,zx,zy,zw,zh) {
        var y=zy+80/2;
        var nw=T.width("09sg");
        var nh=T.height("09sg");
        var page = statPages[statPage];
        var bw = T.width("06ss");
        var bh = T.height("06ss");
        var mw = T.width("03mm");
        var mh = T.height("03mm");
        var mx = 19/2;
        var ww = bw-(47)/2;

        ctext(ctx,page.title,zx+8*4.5+96*4,zy+13/2,"40px "+FONT,"white","center","top");
        ctext(ctx,"Current",zx+8*3+96*3,zy+23/2,"30px "+FONT,"white","right","top");
        ctext(ctx,"Total",zx+zw-(8*2+96*2),zy+23/2,"30px "+FONT,"white","left","top");
        for (var i=0; i<page.elems.length; ++i) {
            var t = page.elems[i][0];
            if (typeof t==="number") {
                if (data.buildLevel[t]==-1) t="????????";
                else t=BUILDINGS[t].name[data.buildLevel[t]];
            }
            var nc,nt,nct,ntt,perc;
            if (page.elems[i][2]=="seff") {
                nc = data.stats.t.v.samount;
                nt = data.stats.t.v.screated;
            } else if (page.elems[i][2]=="scr") {
                nc = data.stats.t.v.senergy;
                nt = data.stats.t.v.senergy+data.stats.t.v.cenergy;
            } else if (page.elems[i][2]=="tce") {
                nc = data.stats.t.v.senergy+data.stats.t.v.cenergy;
                nt = data.stats.t.v.energy;
            } else if (page.elems[i][2]=="rtr") {
                nc = data.stats.t.v.rtime;
                nt = data.stats.t.v.time;
            } else if (page.elems[i][1]=="a") {
                nc = data.stats.c[page.elems[i][1]][page.elems[i][2]].length;
                nt = data.stats.t[page.elems[i][1]][page.elems[i][2]].length;
            } else {
                nc = data.stats.c[page.elems[i][1]][page.elems[i][2]];
                nt = data.stats.t[page.elems[i][1]][page.elems[i][2]];
            }
            var f = page.elems[i][3];
            if (f=="%") {
                nct = this.pn((nc+nt)?Math.round(100*nc/(nc+nt)):0,f,true);
                ntt = this.pn((nc+nt)?Math.round(100*nt/(nc+nt)):0,f,true);
                perc = (nc+nt)?nc/(nc+nt):1;
            } else if (f=="s") {
                nct = bigtimer(nc/1000);
                ntt = bigtimer(nt/1000);
                perc = (nt-nc)?nc/nt:1;
            } else {
                nct = this.pn(nc,f);
                ntt = this.pn(nt,f);
                perc = (nt-nc)?nc/nt:1;
            }
            perc=Math.min(1,Math.max(0,perc));
            ctext(ctx,nt==0?Array(Math.min(20,t.length)).join("?"):t,zx+8*2+96*2,y+55/2*i,"30px "+FONT,"white","right","top");
            text(ctx,nct,zx+8*3+96*3,y+55/2*i,"30px "+FONT,"white","right","top");
            text(ctx,ntt,zx+zw-(8*2+96*2),y+55/2*i,"30px "+FONT,"white","left","top");
            T.draw(ctx,"06ss",zx+8*4+96*3,y+55/2*i);
            ctx.save();
            ctx.beginPath();
            ctx.rect(zx+8*4+96*3,y+55/2*i,mx+ww*perc,bh);
            ctx.closePath();
            ctx.clip();
            T.draw(ctx,"0jzb",zx+8*4+96*3,y+55/2*i);
            ctx.restore();
            T.draw(ctx,"03mm",zx+8*4+96*3+mx+ww*perc-3,y+(55/2)*i+bh/2-mh/2);
            T.draw(ctx,"072s",zx+8*4+96*3,y+55*i);
        }
        // prev-next
        T.draw(ctx,"09sg",zx+zw-16-nw,zy+zh/2-nh/2);
        ctx.save();
        ctx.translate(zx+16+nw/2,zy+zh/2)
        ctx.scale(-1,1);
        T.draw(ctx,"09sg",-nw/2,-nh/2);
        ctx.restore();
        this.addZone("statnext",(new Rect(zx+zw-16-nw,zy+zh/2-nh/2,nw,nh)).small(),"stat",{target:(statPage+1)%statPages.length});
        this.addZone("statprev",(new Rect(zx+16,zy+zh/2-nh/2,nw,nh)).small(),"stat",{target:(statPage-1+statPages.length)%statPages.length});
    }
    this.drawSpecie = function (ctx,zx,zy,zw,zh) {
        var portrait = SPECIES[data.specie].portrait;
        var pw = T.width(portrait);
        var ph = T.height(portrait);
        var bw = T.width("09zp");
        var bh = T.height("09zp");
        T.draw(ctx,portrait,zx+32/2,zy);
        var y = zy+20;
        if (data.specie<SPECIES.length-1) {
            // next
            var hidden = SPECIES[data.specie+1].hidden;
            T.draw(ctx,hidden,zx+zw-pw-32/2,zy);
            // name
            if (data.specie == 12) ctext(ctx,SPECIES[data.specie].name,zx+zw/2,y,"40px "+FONT,"rgb(255,153,153)","center","middle");
            else if (data.specie == 13) ctext(ctx,SPECIES[data.specie].name,zx+zw/2,y,"40px "+FONT,"rgb(255,0,0)","center","middle");
            else ctext(ctx,SPECIES[data.specie].name,zx+zw/2,y,"40px "+FONT,"white","center","middle");
            // bar
            var y = y+(32*1.1)/2
            T.draw(ctx,"09zp",zx+zw/2-bw/2,y);
            var energyPerc = Math.min(1,data.stats.c.v.energy/SPECIES[data.specie+1].requires);
            var timeToEvolve = production?(SPECIES[data.specie+1].requires-data.stats.c.v.energy)/production:0;
            ctx.save();
            ctx.beginPath();
            ctx.rect(zx+zw/2-bw/2,y,bw*energyPerc,bh);
            ctx.closePath();
            ctx.clip();
            T.draw(ctx,"08q9",zx+zw/2-bw/2,y);
            ctx.restore();
            T.draw(ctx,"0iw0",zx+zw/2-bw/2,y);
            var sbrect = (new Rect(zx+zw/2-bw/2,y,bw,bh)).small();
            if (!sbrect.isInside(GM.x,GM.y) || timeToEvolve<0) {
                var es = (energyPerc*100).toFixed(9).toString();
                var p=es.indexOf(".");
                var l0=p+1;
                while (l0<es.length && es[l0]=='0') ++l0;
                if (energyPerc>0.01) l0=p+2;
                text(ctx,(energyPerc*100).toFixed(Math.max(2,l0-p))+"%",zx+zw/2-bw/2+bw/2,y+bh/2,"20px "+FONT,"black","center","middle");
            } else {
                text(ctx,timer(timeToEvolve),zx+zw/2-bw/2+bw/2,y+bh/2,"20px "+FONT,"black","center","middle");
            }
            // button
            y += (32*2+15)/2;
            var button=energyPerc==1?"0539":"07y4";
            var scale = 1+(Math.sin(spin/400)+1)/20;
            var btw = T.width(button);
            var bth = T.height(button);
            var rect = (new Rect(zx+zw/2-btw/2,y-bth/2,btw,bth)).small();
            if (energyPerc==1) {
                if (rect.isInside(GM.x,GM.y)) {
                    scale=1.1;
                }
                btw*=scale;
                bth*=scale;
            } else scale=1;
            T.draw(ctx,button,zx+zw/2-btw/2,y-bth/2,btw,bth);
            ctext(ctx,data.specie>=5?"Ascend":"Evolve",zx+zw/2,y,(32*scale)+"px "+FONT,"black","center","middle");
            if (energyPerc>=1) this.addZone("evolve",(new Rect(zx+zw/2-btw/2,y-bth/2,btw,bth)).small(),"evolve");
            y-=35;
            ctext(ctx,"*You won't lose any progress",zx+zw/2,y+(32/2)*4,"24px "+FONT,"white","center","middle");
            if (data.specie>0) {
                y += 170/2+16;
                var button="05x5";
                var scale = 1+(Math.sin(spin/400)+1)/20;
                var btw = T.width(button);
                var bth = T.height(button);
                var rect = (new Rect(zx+zw/2-btw/2,y-bth/2,btw,bth)).small();
                if (rect.isInside(GM.x,GM.y)) {
                    scale=1.1;
                }
                if (data.omega>this.getOmegas()) scale=1;
                if (this.getOmegas()<=0) button="07y4";
                btw*=scale;
                bth*=scale;
                T.draw(ctx,button,zx+zw/2-btw/2,y-bth/2,btw,bth);
                ctext(ctx,"Big Crunch",zx+zw/2,y,(32*scale)+"px "+FONT,"black","center","middle");
                if (this.getOmegas()>0) this.addZone("ascend",rect,"ascend");
                y-=20;
                var tt="Obtain "+this.pn(this.getOmegas()>0?this.getOmegas():0,"\u03A9",true)+" after Big Crunch";
                ctext(ctx,"*You start since the Beginning of Time",zx+zw/02,y+32*1.5,"24px "+FONT,"white","center","middle");
                text(ctx,tt,zx+zw/2,y+32*2.25,"32px "+FONT,"white","center","middle");
                text(ctx,"Production x"+((this.getOmegaMul(data.stats.t.v.gomega+this.getOmegas())/this.getOmegaMul())||1).toFixed(2),zx+zw/2,y+32*3,"32px "+FONT,"white","center","middle");
            }
        } else {
            if (data.specie == 12) ctext(ctx,SPECIES[data.specie].name,zx+zw/1.5,y,"40px "+FONT,"rgb(255,153,153)","center","middle");
            else if (data.specie == 13) ctext(ctx,SPECIES[data.specie].name,zx+zw/1.5,y,"40px "+FONT,"rgb(255,0,0)","center","middle");
            else ctext(ctx,SPECIES[data.specie].name,zx+zw/1.5,y,"40px "+FONT,"white","center","middle");
            // ascend
            y += (32*1.5 + 30)/2;
            var button="05x5";
            var scale = 1+(Math.sin(spin/400)+1)/20;
            var btw = T.width(button);
            var bth = T.height(button);
            var rect = (new Rect(zx+zw/1.5-btw/2,y-bth/2,btw,bth)).small();
            if (rect.isInside(GM.x,GM.y)) {
                scale=1.1;
            }
            if (data.omega>this.getOmegas() || this.getOmegas()==0) scale=1;
            if (this.getOmegas()==0) button="07y4";
            btw*=scale;
            bth*=scale;
            if (data.specie!=14) {
                T.draw(ctx,button,zx+zw/1.5-btw/2,y-bth/2,btw,bth);
                ctext(ctx,"Big Crunch",zx+zw/1.5,y,(32*scale)+"px "+FONT,"black","center","middle");
                if (this.getOmegas()>0) this.addZone("ascend",rect,"ascend");
                y-=20;
                var tt="Obtain "+this.pn(this.getOmegas(),"\u03A9",true)+" after Big Crunch";
                ctext(ctx,"*You start since the beginning of time",zx+zw/1.5,y+32/2*3,"24px "+FONT,"white","center","middle");
                text(ctx,tt,zx+zw/1.5,y+32/2*5,"32px "+FONT,"white","center","middle");
                text(ctx,"Production x"+(this.getOmegaMul(data.stats.t.v.gomega+this.getOmegas())/this.getOmegaMul()).toFixed(2),zx+zw/1.5,y+32/2*6.5,"32px "+FONT,"white","center","middle");
            }
            else {
                var drect = (new Rect(zx+zw/1.25-btw/2,y-bth/2,btw,bth)).small();
                T.draw(ctx,button,zx+zw/1.25-btw/2,y-bth/2,btw,bth);
                ctext(ctx,"Big Crunch",zx+zw/1.25,y,(32*scale)+"px "+FONT,"black","center","middle");
                if (this.getOmegas()>0) this.addZone("ascend",drect,"ascend");
                y-=20;
                var tt="Obtain "+this.pn(this.getOmegas(),"\u03A9",true)+" after Big Crunch";
                ctext(ctx,"*You start since the beginning of time",zx+zw/1.25,y+32/2*3,"24px "+FONT,"white","center","middle");
                text(ctx,tt,zx+zw/1.25,y+32/2*5,"32px "+FONT,"white","center","middle");
                text(ctx,"Production x"+(this.getOmegaMul(data.stats.t.v.gomega+this.getOmegas())/this.getOmegaMul()).toFixed(2),zx+zw/1.25,y+32/2*6.5,"32px "+FONT,"white","center","middle");

                y+=20;
                var target = this.currentJump();
                if (target==0) {
                    T.draw(ctx,"07y4",zx+zw*0.5-btw/2,y-bth/2,btw,bth);
                    ctext(ctx,"Jump",zx+zw*0.5,y,(32*scale)+"px "+FONT,"black","center","middle");
                    if (canJump) this.addZone("jump",drect,"jump",{target:true});
                    y-=20;
                    ctext(ctx,"*Big Crunch to jump again",zx+zw*0.5,y+32/2*3,"24px "+FONT,"white","center","middle");
                    var pos = (Math.sqrt(8*data.djumps+1)-1)/2;
                    var previous = Math.floor(pos.toFixed(3));
                    var next = Math.ceil(pos.toFixed(3));
                    var currentRun = previous;
                    var runIndex = (currentRun*(currentRun+1))/2;
                    var runIndex2 = (next*(next+1))/2;
                    var jumpNum = data.djumps-runIndex;
                    text(ctx,"Jump sequence: "+(previous!=next?previous:previous-1),zx+zw/2-bw/2+bw/2,y+32/2*3+30,"30px "+FONT,"white","center","middle");
                    text(ctx,"Jumps left: "+(runIndex2-data.djumps),zx+zw/2-bw/2+bw/2,y+32/2*3+50,"30px "+FONT,"white","center","middle");
                } else {
                    var energyPerc = Math.min(1,data.stats.c.v.energy/bn(1,target));
                    var timeToEvolve = production?(bn(1,target)-data.stats.c.v.energy)/production:0;
                    var canJump=energyPerc>=1;
                    var drect = (new Rect(zx+zw*0.5-btw/2,y-bth/2,btw,bth)).small();
                    var button=energyPerc==1?"0539":"07y4";
                    var scale = 1+(Math.sin(spin/400)+1)/20;
                    var btw = T.width(button);
                    var bth = T.height(button);
                    if (energyPerc==1) {
                        if (drect.isInside(GM.x,GM.y)) {
                            scale=1.1;
                        }
                        btw*=scale;
                        bth*=scale;
                    } else scale=1;
                    T.draw(ctx,button,zx+zw*0.5-btw/2,y-bth/2,btw,bth);
                    ctext(ctx,"Jump",zx+zw*0.5,y,(32*scale)+"px "+FONT,"black","center","middle");
                    if (canJump) this.addZone("jump",drect,"jump",{target:true});
                    y-=20;
                    ctext(ctx,"*Jump to another dimension",zx+zw*0.5,y+32/2*3,"24px "+FONT,"white","center","middle");
                    var y = y+(32*1.1)/2+45;
                    T.draw(ctx,"09zp",zx+zw/2-bw/2,y);
                    ctx.save();
                    ctx.beginPath();
                    ctx.rect(zx+zw/2-bw/2,y,bw*energyPerc,bh);
                    ctx.closePath();
                    ctx.clip();
                    T.draw(ctx,"08q9",zx+zw/2-bw/2,y);
                    ctx.restore();
                    T.draw(ctx,"0iw0",zx+zw/2-bw/2,y);
                    var sbrect = (new Rect(zx+zw/2-bw/2,y,bw,bh)).small();
                    if (!sbrect.isInside(GM.x,GM.y) || timeToEvolve<0) {
                        var es = (energyPerc*100).toFixed(9).toString();
                        var p=es.indexOf(".");
                        var l0=p+1;
                        while (l0<es.length && es[l0]=='0') ++l0;
                        if (energyPerc>0.01) l0=p+2;
                        text(ctx,(energyPerc*100).toFixed(Math.max(2,l0-p))+"%",zx+zw/2-bw/2+bw/2,y+bh/2,"20px "+FONT,"black","center","middle");
                    } else {
                        text(ctx,timer(timeToEvolve),zx+zw/2-bw/2+bw/2,y+bh/2,"20px "+FONT,"black","center","middle");
                    }
                    var pos = (Math.sqrt(8*data.djumps+1)-1)/2;
                    var previous = Math.floor(pos.toFixed(3));
                    var next = Math.ceil(pos.toFixed(3));
                    if (next==previous) ++next;
                    var currentRun = previous;
                    var runIndex = (currentRun*(currentRun+1))/2;
                    var runIndex2 = (next*(next+1))/2;
                    var jumpNum = data.djumps-runIndex;
                    text(ctx,"Current jump energy: "+this.pn(bn(1,target),"J",true),zx+zw/2-bw/2+bw/2,y+bh/2+30,"24px "+FONT,"white","center","middle");
                    text(ctx,"Jump sequence: "+(previous),zx+zw/2-bw/2+bw/2,y+bh/2+50,"30px "+FONT,"white","center","middle");
                    text(ctx,"Jumps left: "+(runIndex2-data.djumps),zx+zw/2-bw/2+bw/2,y+bh/2+70,"30px "+FONT,"white","center","middle");
                }
            }
        }
    }
    this.drawShop = function (ctx,zx,zy,zw,zh) {
        // Extra
        var extraShop=[];
        for (var i=HEROSHOP.length-1;i>=0;--i) {
            if (mdata!==undefined && mdata.city!==undefined && mdata.city.hero[HEROSHOP[i].number]==0) extraShop.push(HEROSHOP[i]);
        }
        var WC = undefined;
        if (mdata!== undefined && mdata.city!==undefined) WC = mdata.city.WC;
        if (WC!==undefined && WC<WCSHOP.length) extraShop.push(WCSHOP[WC]);
        if (this.isLimitedTimeHeroON().active && mdata!==undefined && mdata.city!==undefined && mdata.city.hero[this.isLimitedTimeHeroON().number]==0) {
            var heroStruct={
                name:this.isLimitedTimeHeroON().name,
                number: this.isLimitedTimeHeroON().number,
                price: this.isLimitedTimeHeroON().price,
                curr: this.isLimitedTimeHeroON().curr,
                type: this.isLimitedTimeHeroON().type,
                promo: this.isLimitedTimeHeroON().promo,
                level: this.isLimitedTimeHeroON().level,
            }
            //extraShop.push(heroStruct);
        }
        if (extraShop.length>0) {
            for (var key in zones) {
                if (key.indexOf("navTab")!==-1) delete zones[key];
            }
        }
        var shopData=getShopData();
        var y0=mapf(shopPos,0,1,460,0);
        
        T.draw(ctx,"07cl",0,y0);
        if (y0<300) {
            T.draw(ctx,"0539",W-(10+T.width("0539")),60+y0);
            text(ctx,"Close",W-(10+T.width("0539"))+T.width("0539")/2,60+y0+T.height("0539")/2,"32px"+FONT,"black","center","middle");
            var srect=(new Rect(W-(10+T.width("0539")),60+y0,T.width("0539"),T.height("0539"))).small();
            this.addZone("shopBack",srect,"menu",{target:"research"});
        }

        if (auctionOpen) {
            var monsterInfo=undefined;
            var monsterKreed=undefined;
            if (CQW===undefined || CQW.auction===undefined) {
                this.wsync();
                auctionUpdate=Date.now();
            }
            else if (CQW!==undefined && CQW.auction!==undefined) {
                var now = Date.now();
                if ((now - auctionUpdate) >= 30000 ) {
                    auctionUpdate = Date.now();
                    this.wsync();
                }
            }

            var backRect=(new Rect(W*0.3,y0+H*0.10,T.width("psrk"),T.height("psrk"))).small();
            if (backRect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"psrk",W*0.3-T.width("psrk")*0.05,y0+H*0.10-T.height("psrk")*0.05,T.width("psrk")*1.1,T.height("psrk")*1.1);
                this.addZone("aucbutton_cl",backRect,"aucbutton",{target:false});
            } else T.draw(ctx,"psrk",W*0.3,y0+H*0.10);

            if (CQW!==undefined && CQW.auction!==undefined && mdata!==undefined && mdata.city!==undefined) {
                // Sort Auction items
                var drawArray=[];
                // Check if you are the max bid
                for (var i=0;i<CQW.auction.length;++i) {
                    if (kongregate.services.getUsername() == CQW.auction[i].bidname){
                        var object = {
                            id : i,
                            timer : CQW.auction[i].timer,
                        }
                        drawArray.push(object); 
                    }
                }
                // Sort your max bid due to time left
                drawArray=drawArray.sort(function(a, b) {return  a.timer - b.timer; } );
                // Sort the remaining elements due to time left
                var temporalArray=[];
                for (var i=0;i<CQW.auction.length;++i) {
                    var maxbid = false;
                    for (var j=0;j<drawArray.length;++j) if (drawArray[j].id == i) maxbid=true;
                    if (maxbid==false) {
                        var object = {
                            id : i,
                            timer : CQW.auction[i].timer,
                        }
                        temporalArray.push(object); 
                    }
                }
                temporalArray=temporalArray.sort(function(a, b) {return  a.timer - b.timer; } );
                // Add the remaining elements to our Draw Array
                for (var i=0;i<temporalArray.length;++i) drawArray.push(temporalArray[i]);
                
                //Filter
                if (data.showAH > 0) {
                	if (data.showAH == 1) {//all non-maxed
                		for (var i=0;i<drawArray.length;++i) {
                            if (mdata.city.hero[CQW.auction[drawArray[i].id].hero]==99) {
                                drawArray.splice(i,1);
                                i--;
                            }
                        }
                	} else if (data.showAH == 2) { //all that you need to win in auction to max
            			var hidOfAH = [73,74,75,97,98,99,137,138,139,153,154,155,156,200,201,202,203,206,207,208,209,226,227,228,229];
                		for (var i=0;i<drawArray.length;++i) {
                			var leveldByAH = false;
                			for (var j = 0; j < hidOfAH.length; j++) {
                				if (CQW.auction[drawArray[i].id].hero == hidOfAH[j]) leveldByAH = true;
                			}
                            if (mdata.city.hero[CQW.auction[drawArray[i].id].hero]==99 || (mdata.city.hero[CQW.auction[drawArray[i].id].hero]!=0 && !leveldByAH)) {
                                drawArray.splice(i,1);
                                i--;
                            }
                        }
                	} else {//only non-owned
                		for (var i=0;i<drawArray.length;++i) {
                            if (mdata.city.hero[CQW.auction[drawArray[i].id].hero]!=0) {
                                drawArray.splice(i,1);
                                i--;
                            }
                        }
                	}
                }
                if (drawArray.length>=1) {
                    var aucPages = Math.ceil(drawArray.length/3);
                    var item = 3*aucPage;
                    for (var i=0;i<3;++i) {
                        if (item+i < drawArray.length) {
                            var ix = W*0.365;

                            if (kongregate.services.getUsername() == CQW.auction[drawArray[item+i].id].bidname) {
                                text(ctx,"You have the max bid",ix+(W*0.15/2)+i*W*0.2,y0+H*0.87,"24px"+FONT,"white","center","middle"); 
                                roundedRect(ctx,ix+i*W*0.2-12,y0+H*0.3-12,W*0.15+24,W*0.2+24,10,"rgba(255,215,0,1)");
                            } else if (mdata.city.hero[CQW.auction[drawArray[item+i].id].hero]==99 || mdata.city.promo[CQW.auction[drawArray[item+i].id].hero]==5) {
                                text(ctx,"Already at level 99!",ix+(W*0.15/2)+i*W*0.2,y0+H*0.87,"24px"+FONT,"white","center","middle"); 
                            }
                            
                            roundedRect(ctx,ix+i*W*0.2-10,y0+H*0.3-10,W*0.15+20,W*0.2+20,10,"rgba(63,133,163,1)");
                            roundedRect(ctx,ix+i*W*0.2-8,y0+H*0.3-8,W*0.15+16,W*0.2+16,10,"rgba(16,16,16,0.8)");
                            if (CQW.auction[drawArray[item+i].id].flash!=0) {
                                roundedRect(ctx,ix+i*W*0.2-4,y0+H*0.3-4,W*0.15+8,W*0.2+8,10,"rgba(254, 27, 7 ,0.2)");
                            }
                            roundedRect(ctx,ix+i*W*0.2,y0+H*0.3,W*0.15,W*0.2,10,"rgba(0,0,0,0.6)");

                            var infoRect=(new Rect(ix+i*W*0.2,y0+H*0.3,W*0.15,W*0.2)).small();
                            if (infoRect.isInside(GM.x,GM.y)) monsterInfo = CQW.auction[drawArray[item+i].id].hero;
                            
                            var incrementalTime = (Date.now()-auctionUpdate)/1000;
                            text(ctx,timer(CQW.auction[drawArray[item+i].id].timer/1000-incrementalTime),ix+(W*0.15/2)+i*W*0.2,y0+H*0.33,"40px"+FONT,"white","center","middle");
                            if (mdata.city.hero[CQW.auction[drawArray[item+i].id].hero]!==0) this.drawMonster(ctx,-2-CQW.auction[drawArray[item+i].id].hero,ix+(W*0.15/2)+i*W*0.2,y0+H*0.58,undefined,false,1.6,mdata.city.hero[CQW.auction[drawArray[item+i].id].hero]);
                            else this.drawMonster(ctx,-2-CQW.auction[drawArray[item+i].id].hero,ix+(W*0.15/2)+i*W*0.2,y0+H*0.58,undefined,false,1.6);
                            text(ctx,HERO[CQW.auction[drawArray[item+i].id].hero].name,ix+(W*0.15/2)+i*W*0.2,y0+H*0.60,"36px"+FONT,"white","center","middle");


                            T.draw(ctx,"0dlk",ix+(W*0.15/2)+i*W*0.2-T.width("0dlk")*0.75*0.5,y0+H*0.65,T.width("0dlk")*0.75,T.height("0dlk")*0.75);
                            text(ctx,"Current bid: "+CQW.auction[drawArray[item+i].id].bid,ix+(W*0.15/2)+i*W*0.2,y0+H*0.68,"32px"+FONT,"white","center","middle");
                            text(ctx,"by: "+CQW.auction[drawArray[item+i].id].bidname,ix+(W*0.15/2)+i*W*0.2,y0+H*0.705,"22px"+FONT,"white","center","middle");
                            T.draw(ctx,"0mcj",ix+(W*0.15/2)+i*W*0.2+T.width("0dlk")*0.75*0.5-T.width("0mcj")*0.4+7,y0+H*0.63+12,T.width("0mcj")*0.4,T.height("0mcj")*0.4);

                            text(ctx,"Price will update in "+timer((auctionUpdate-Date.now()+30000)/1000),ix+(W*0.15/2)+i*W*0.2,y0+H*0.73,"22px"+FONT,"rgba(168,168,171,1)","center","middle");

                            if (wsynking) {
                                T.negative(ctx,"091m",ix+(W*0.15/2)+i*W*0.2-T.width("091m")*0.75*0.5,y0+H*0.78,T.width("091m")*0.75,T.height("091m")*0.75);
                                this.spinner(ctx,ix+(W*0.15/2)+i*W*0.2,y0+H*0.78+T.height("091m")*0.5*0.75,15);
                            }
                            else {
                                var raise = Math.ceil(CQW.auction[drawArray[item+i].id].bid*10/100);
                                var bidRect=(new Rect(ix+(W*0.15/2)+i*W*0.2-T.width("091m")*0.75*0.5,y0+H*0.78,T.width("091m")*0.75,T.height("091m")*0.75)).small();
                                if (mdata.city.hero[CQW.auction[drawArray[item+i].id].hero]!==99 && (CQW.auction[drawArray[item+i].id].bid+raise) <= this.getHC() && kongregate.services.getUsername() !== CQW.auction[drawArray[item+i].id].bidname) {
                                    if (bidRect.isInside(GM.x,GM.y) && !bidsync) {
                                        T.draw(ctx,"0eni",ix+(W*0.15/2)+i*W*0.2-T.width("0eni")*0.75*0.5,y0+H*0.78,T.width("0eni")*0.75,T.height("0eni")*0.75);
                                        T.draw(ctx,"rvht",ix+(W*0.15/2)+i*W*0.2-T.width("rvht")*0.75*0.5,y0+H*0.78,T.width("rvht")*0.75,T.height("rvht")*0.75);
                                        this.addZone("placebid"+i,bidRect,"placebid",{target:CQW.auction[drawArray[item+i].id].hero,bid:CQW.auction[drawArray[item+i].id].bid+raise});
                                    } else {
                                        T.draw(ctx,"091m",ix+(W*0.15/2)+i*W*0.2-T.width("091m")*0.75*0.5,y0+H*0.78,T.width("091m")*0.75,T.height("091m")*0.75);
                                        T.draw(ctx,"f2ph",ix+(W*0.15/2)+i*W*0.2-T.width("f2ph")*0.75*0.5,y0+H*0.78,T.width("f2ph")*0.75,T.height("f2ph")*0.75);
                                    }
                                } else {
                                    T.negative(ctx,"091m",ix+(W*0.15/2)+i*W*0.2-T.width("091m")*0.75*0.5,y0+H*0.78,T.width("091m")*0.75,T.height("091m")*0.75);
                                    T.negative(ctx,"f2ph",ix+(W*0.15/2)+i*W*0.2-T.width("f2ph")*0.75*0.5,y0+H*0.78,T.width("f2ph")*0.75,T.height("f2ph")*0.75);
                                }
                                text(ctx,"Bid Price: "+(CQW.auction[drawArray[item+i].id].bid+raise)+" UM",ix+(W*0.15/2)+i*W*0.2,y0+H*0.83,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                            }

                            var hid = CQW.auction[drawArray[item+i].id].hero;
                            if (hid==73||hid==74||hid==75) {
                                text(ctx,"Can't be leveled",ix+(W*0.15/2)+i*W*0.2,y0+H*0.245,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                text(ctx,"Get 9 levels per auction",ix+(W*0.15/2)+i*W*0.2,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");

                            }
                            else if (hid==51||hid==52||hid==53||hid==96||hid==113||hid==127||hid==128||hid==129||hid==148||hid==168||hid==205) { //PG&CC
                                text(ctx,"Level up with: ",ix+(W*0.15/2)+i*W*0.2-W*0.018,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                T.draw(ctx,"0j14",ix+(W*0.15/2)+i*W*0.2+W*0.02,y0+H*0.265-T.height("0j14")*0.6*0.5,T.width("0j14")*0.6,T.height("0j14")*0.6);
                                T.draw(ctx,"0ap1",ix+(W*0.15/2)+i*W*0.2+W*0.04,y0+H*0.265-T.height("0j14")*0.6*0.5,T.width("0j14")*0.6,T.height("0j14")*0.6);
                            }
                            else if (hid==130||hid==102||hid==132||hid==147||hid==198||hid==173||hid==190||hid==217) { //AS
                                text(ctx,"Level up with: ",ix+(W*0.15/2)+i*W*0.2-W*0.013,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                T.draw(ctx,"08y7",ix+(W*0.15/2)+i*W*0.2+W*0.024,y0+H*0.265-T.height("08y7")*0.5*0.6,T.width("08y7")*0.5,T.height("08y7")*0.5);
                            }
                            else if (hid==97||hid==98||hid==99) {
                                text(ctx,"Can't be leveled",ix+(W*0.15/2)+i*W*0.2,y0+H*0.245,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                text(ctx,"Get 9 levels per auction",ix+(W*0.15/2)+i*W*0.2,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                            }
                            else if (hid==137||hid==138||hid==139) {
                                text(ctx,"Can't be leveled",ix+(W*0.15/2)+i*W*0.2,y0+H*0.245,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                text(ctx,"Get 9 levels per auction",ix+(W*0.15/2)+i*W*0.2,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                            }
                            else if (hid==153||hid==154||hid==155||hid==156) {
                                text(ctx,"Can't be leveled",ix+(W*0.15/2)+i*W*0.2,y0+H*0.245,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                text(ctx,"Get 33 levels per auction",ix+(W*0.15/2)+i*W*0.2,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                            }
                            else if (hid==200||hid==201||hid==202||hid==203) {
                                text(ctx,"Can't be leveled",ix+(W*0.15/2)+i*W*0.2,y0+H*0.245,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                text(ctx,"Get 3 levels per auction",ix+(W*0.15/2)+i*W*0.2,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                            }
                            else if (hid==101) { //PG&UM
                            	text(ctx,"Level up with: ",ix+(W*0.15/2)+i*W*0.2-W*0.018,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                T.draw(ctx,"0j14",ix+(W*0.15/2)+i*W*0.2+W*0.02,y0+H*0.265-T.height("0j14")*0.6*0.5,T.width("0j14")*0.6,T.height("0j14")*0.6);
                                T.draw(ctx,"0dvo",ix+(W*0.15/2)+i*W*0.2+W*0.04-T.width("0j14")*0.15,y0+H*0.265-T.height("0j14")*0.88*0.5,T.width("0j14")*0.95,T.height("0j14")*0.8);
                            }
                            else if (hid==206||hid==207||hid==208||hid==209) { //pyros
                                text(ctx,"Can't be leveled",ix+(W*0.15/2)+i*W*0.2,y0+H*0.245,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                text(ctx,"Get 33 levels per auction",ix+(W*0.15/2)+i*W*0.2,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                            }
                            else if (hid==226||hid==227||hid==228||hid==229) { //eternals
                                text(ctx,"Can't be leveled",ix+(W*0.15/2)+i*W*0.2,y0+H*0.245,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                text(ctx,"Get 9 levels per auction",ix+(W*0.15/2)+i*W*0.2,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                            }
                            else {
                                text(ctx,"Level up with: ",ix+(W*0.15/2)+i*W*0.2-W*0.013,y0+H*0.265,"24px"+FONT,"rgba(201,244,255,1)","center","middle");
                                T.draw(ctx,"0j14",ix+(W*0.15/2)+i*W*0.2+W*0.028,y0+H*0.265-T.height("0j14")*0.6*0.5,T.width("0j14")*0.6,T.height("0j14")*0.6);
                            }
                        }
                    }
                    text(ctx,"Page "+(aucPage+1)+"/"+aucPages,W*0.99,y0+H*0.975,"28px"+FONT,"rgba(201,244,255,1)","right","middle");

                    if (drawArray.length > 3){
                        var nw=T.width("09sg");
                        var nh=T.height("09sg");
                        T.draw(ctx,"09sg",W*0.94,y0+H*0.40);
                        ctx.save();
                        ctx.translate(W*0.32,y0+H*0.40+nh/2);
                        ctx.scale(-1,1);
                        T.draw(ctx,"09sg",-nw/2,-nh/2);
                        ctx.restore();
                        var nextRect=(new Rect(W*0.94,y0+H*0.40,nw,nh)).small();
                        var prevRect=(new Rect(W*0.32-nw/2,y0+H*0.40,nw,nh)).small();
                        if (nextRect.isInside(GM.x,GM.y)) this.addZone("aucnext",nextRect,"arrowauc",{target:(aucPage+1)%aucPages});
                        if (prevRect.isInside(GM.x,GM.y)) this.addZone("aucprev",prevRect,"arrowauc",{target:(aucPage-1+aucPages)%aucPages});
                    }

                    text(ctx,"* Placing a bid increases the timer 1 minute",W*0.64,y0+H*0.95,"30px"+FONT,"white","center","middle");
                    text(ctx,"** The price of a new bid is the current bid +10%",W*0.64,y0+H*0.975,"30px"+FONT,"white","center","middle");
                }
                else text(ctx,"YOU ALREADY HAVE ALL THE HEROES AT LEVEL 99!",W*0.64,y0+H*0.5,"30px"+FONT,"white","center","middle");

                text(ctx,"Show heroes:",W*0.78,y0+74,"32px"+FONT,"black","right","middle");
                this.rectButton(ctx,W*0.79,y0+60,"ahshow","ahshow",undefined,undefined,["All","Not maxed","Relevant","Not owned"],data.showAH,"Set auction filter");
                
                if (aucPage>=aucPages) aucPage=aucPages-1;
            }
            else {
                for (var i=0;i<3;++i) this.spinner(ctx,W*0.365+(W*0.15/2)+i*W*0.2,y0+H*0.58,40);
            }

        } else if (ltoOpen) {
            var backRect=(new Rect(W*0.3,y0+H*0.10,T.width("psrk"),T.height("psrk"))).small();
            if (backRect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"psrk",W*0.3-T.width("psrk")*0.05,y0+H*0.10-T.height("psrk")*0.05,T.width("psrk")*1.1,T.height("psrk")*1.1);
                this.addZone("aucbutton_cl",backRect,"aucbutton",{target:false});
            } else T.draw(ctx,"psrk",W*0.3,y0+H*0.10);

            if (CQW!==undefined && CQW.lto !==undefined && mdata !== undefined && mdata.city !== undefined) {
                var tid=Math.floor(Date.now()/(24*60*60*1000));
                var drawArray=[];
                var heroArray = CQW.lto;
                for (var i=0;i<heroArray.length;++i) {
                    if (mdata.city.hero[heroArray[i].id] == 0 && tid>=heroArray[i].start && tid<=heroArray[i].finish) drawArray.push(heroArray[i]);
                    else if (mdata.city.hero[heroArray[i].id] == 0 && heroArray[i].start == -1 && heroArray[i].finish == -1) drawArray.push(heroArray[i]);
                }

                var n = 0;
                if (drawArray.length>=1) {
                    var ltoPages = Math.ceil(drawArray.length/6);
                    var item = 6*ltoPage;
                    for (var j = 0; j < 2; ++j) {
                        for (var i = 0; i < 3; ++i) {
                            if ((item+n) < drawArray.length) {
                                var ww = W*0.15;
                                var hh = H*0.31;
                                var ix = W*0.44;
                                var bigrect=(new Rect(ix-ww*0.5+(W*0.2*i)-10,H*0.354-hh*0.5-10+(H*0.42*j),ww+20,hh+20)).small();
                                if (bigrect.isInside(GM.x,GM.y)) {
                                    monsterInfo = drawArray[item+n].id;
                                    if (drawArray[item+n].curr == "KRED") monsterKreed = drawArray[item+n].price;
                                }
                                var scale = 0.9;
                                T.draw(ctx,"0bye",ix-T.width("0bye")*scale*0.5+(W*0.2*i),y0+H*0.35-T.height("0bye")*scale*0.5+(H*0.42*j),T.width("0bye")*scale,T.height("0bye")*scale);
                                roundedRect(ctx,ix-ww*0.5+(W*0.2*i)-10,y0+H*0.354-hh*0.5-10+(H*0.42*j),ww+20,hh+20,10,"rgba(63,133,163,0.7)");
                                roundedRect(ctx,ix-ww*0.5+(W*0.2*i)-8,y0+H*0.354-hh*0.5-8+(H*0.42*j),ww+16,hh+16,10,"rgba(16,16,16,0.5)");
                                roundedRect(ctx,ix-ww*0.5+(W*0.2*i)-2,y0+H*0.354-hh*0.5+(H*0.42*j)-2,ww+4,hh+4,10,"rgba(0,0,0,0.3)");
                                T.draw(ctx,"05v4",ix-T.width("05v4")*scale*0.5+(W*0.2*i),y0+H*0.35-T.height("0bye")*scale*0.5-T.height("05v4")*scale*0.5+(H*0.42*j)+5,T.width("05v4")*scale,T.height("05v4")*scale);
                                text(ctx,HERO[drawArray[item+n].id].name,ix+(W*0.2*i),y0+H*0.35-T.height("0bye")*0.63*0.5+(H*0.42*j),"30px "+FONT,"white","center","middle");
                                var heroRect=(new Rect(ix-ww*0.5+(W*0.2*i)-10,H*0.354-hh*0.5-10+(H*0.42*j)+30,ww+20,hh-70)).small();
                                if (heroRect.isInside(GM.x,GM.y)){
                                    ctx.fillStyle="rgba(0,0,0,0.4)";
                                    ctx.fillRect(ix-ww*0.5+(W*0.2*i),H*0.354-hh*0.5-10+(H*0.42*j)+30,ww,hh-70);
                                    if (drawArray[item+n].start == -1 && drawArray[item+n].finish == -1) {
                                        text(ctx,"LIFETIME",ix+(W*0.2*i),H*0.354-50+(H*0.42*j),"48px "+FONT,"white","center","middle");
                                    } else {
                                        var tidDifference = drawArray[item+n].finish - drawArray[item+n].start;
                                        if (tidDifference == 0) {
                                            var midnight = new Date();
                                            midnight.setHours( 24 );
                                            midnight.setMinutes( 0 );
                                            midnight.setSeconds( 0 );
                                            midnight.setMilliseconds( 0 );
                                            var now = new Date();
                                            var difference = midnight.getTime()-now.getTime();
                                            text(ctx,timer(difference/1000),ix+(W*0.2*i),H*0.354-50+(H*0.42*j),"48px "+FONT,"white","center","middle");
                                        } else {
                                            text(ctx,"DAYS LEFT: "+tidDifference,ix+(W*0.2*i),H*0.354-50+(H*0.42*j),"48px "+FONT,"white","center","middle");
                                        }
                                    }
                                    text(ctx,"Levelable with:",ix+(W*0.2*i),H*0.354-10+(H*0.42*j),"40px "+FONT,"white","center","middle");
                                    var yc = H*0.354-10+(H*0.42*j) + 30;
                                    if (HERO[drawArray[item+n].id].upgrade.none == 1) {
                                        text(ctx,"Can't level with currencies",ix+(W*0.2*i),yc,"26px "+FONT,"white","center","middle");
                                    } else {
                                        var toPrint = 0;
                                        var currs = ["pg","cc","as","um"];
                                        var icons = {pg:"0j14",cc:"0ap1",as:"08y7",um:"0dvo"};
                                        var sicons = {pg:1,cc:1,as:0.6,um:0.6};
                                        for (var z = 0; z < currs.length; ++z) {
                                            if (HERO[drawArray[item+n].id].upgrade[currs[z]] == 1) toPrint++;
                                        }
                                        var xinit = ix+(W*0.2*i);
                                        if (toPrint > 1) xinit -= 20;
                                        for (var z = 0; z < currs.length; ++z) {
                                            if (HERO[drawArray[item+n].id].upgrade[currs[z]] == 1) {
                                                if (currs[z] == "as") xinit-=30;
                                                if (toPrint > 1 && currs[z] == "cc") xinit+=20;
                                                T.draw(ctx,icons[currs[z]],xinit-T.width(icons[currs[z]])*sicons[currs[z]]*0.5+(15*z),yc-T.height(icons[currs[z]])*sicons[currs[z]]*0.5,T.width(icons[currs[z]])*sicons[currs[z]],T.height(icons[currs[z]])*sicons[currs[z]]);
                                            }
                                        }
                                    }
                                } else this.drawMonster(ctx,-2-drawArray[item+n].id,ix+(W*0.2*i),y0+H*0.40+(H*0.42*j)+14,undefined,false,1.3,1);
                                if (drawArray[item+n].extra !== undefined) {
                                    text(ctx,"Extra Currency: "+drawArray[item+n].extra.amount+"   ",ix+(W*0.2*i),y0+H*0.435+(H*0.42*j)+4,"22px "+FONT,"rgb(151,246,255)","center","middle");
                                    if (drawArray[item+n].extra.curr == "PG") T.draw(ctx,"0j14",ix+(W*0.2*i)+42,y0+H*0.435+(H*0.42*j)-T.height("0j14")*0.5*0.5+3,T.width("0j14")*0.5,T.height("0j14")*0.5);
                                    else if (drawArray[item+n].extra.curr == "AS") T.draw(ctx,"08y7",ix+(W*0.2*i)+35,y0+H*0.435+(H*0.42*j)-T.height("08y7")*0.4*0.5+4,T.width("08y7")*0.4,T.height("08y7")*0.4);
                                    else if (drawArray[item+n].extra.curr == "CC") T.draw(ctx,"0ap1",ix+(W*0.2*i)+42,y0+H*0.435+(H*0.42*j)-T.height("0ap1")*0.5*0.5+3,T.width("0ap1")*0.5,T.height("0ap1")*0.5);
                                }
                                var brect = (new Rect(ix-T.width("091m")*0.8*0.5+(W*0.2*i)-1,y0+H*0.475-T.height("091m")*0.6*0.5+(H*0.42*j)+10,T.width("091m")*0.8,T.height("091m")*0.6)).small();
                                if (brect.isInside(GM.x,GM.y)) {
                                    T.draw(ctx,"0eni",ix-T.width("0eni")*0.8*0.5+(W*0.2*i)-1,y0+H*0.475-T.height("0eni")*0.6*0.5+(H*0.42*j)+10,T.width("0eni")*0.8,T.height("0eni")*0.6);
                                    if (drawArray[item+n].curr == "UM") {
                                        if (drawArray[item+n].price <= this.getHC()) {
                                            this.addZone("buyhero_"+item+n,brect,"buylto",{target:drawArray[item+n].offer});
                                        }
                                    } else {
                                        if (drawArray[item+n].extra !== undefined && drawArray[item+n].id!==180 && drawArray[item+n].id!==205) {
                                            var code = ["ltocommon","ltorare","ltolegen","ltoascended"];
                                            this.addZone("buyHeroKred_"+item+n,brect,"shop",{target:code[HERO[drawArray[item+n].id].rarity]});
                                        } else this.addZone("buyHeroKred_"+item+n,brect,"shop",{target:"lto"+drawArray[item+n].id});
                                    }
                                } else T.draw(ctx,"091m",ix-T.width("091m")*0.8*0.5+(W*0.2*i)-1,y0+H*0.475-T.height("091m")*0.6*0.5+(H*0.42*j)+10,T.width("091m")*0.8,T.height("091m")*0.6);
                                text(ctx,drawArray[item+n].price,ix+(W*0.2*i)-15,y0+H*0.475+(H*0.42*j)+10,"50px "+EFONT,"rgb(151,246,255)","center","middle");
                                if (drawArray[item+n].curr == "UM") T.draw(ctx,"0dvo",ix+(W*0.2*i)+20,y0+H*0.475-T.height("0dvo")*0.5*0.5+(H*0.42*j)+8,T.width("0dvo")*0.5,T.height("0dvo")*0.5);
                                else if (drawArray[item+n].curr == "KRED") T.draw(ctx,"0c7v",ix+(W*0.2*i)+20,y0+H*0.475-T.height("0c7v")*0.70*0.5+(H*0.42*j)+10,T.width("0c7v")*0.70,T.height("0c7v")*0.70);

                                ctx.save();
                                ctx.translate(ix+(W*0.2*i),y0+H*0.35+T.height("0bye")*scale*0.5-T.height("05v4")*scale*0.5+(H*0.42*j)+15,T.width("05v4")*scale,T.height("05v4")*scale);
                                ctx.scale(1,-1);
                                T.draw(ctx,"05v4",-T.width("05v4")*0.5*scale,-T.height("05v4")*0.5*scale,T.width("05v4")*scale,T.height("05v4")*scale);
                                ctx.restore();
                            }
                            ++n;
                        }
                    }
                }

                text(ctx,"Page "+(ltoPage+1)+"/"+ltoPages,W*0.99,y0+H*0.975,"28px"+FONT,"rgba(201,244,255,1)","right","middle");
                if (drawArray.length > 6) {
                    var nw=T.width("09sg");
                    var nh=T.height("09sg");
                    T.draw(ctx,"09sg",W*0.94,y0+H*0.495);
                    ctx.save();
                    ctx.translate(W*0.32,y0+H*0.495+nh/2);
                    ctx.scale(-1,1);
                    T.draw(ctx,"09sg",-nw/2,-nh/2);
                    ctx.restore();
                    var nextRect=(new Rect(W*0.94,y0+H*0.495,nw,nh)).small();
                    var prevRect=(new Rect(W*0.32-nw/2,y0+H*0.495,nw,nh)).small();
                    if (nextRect.isInside(GM.x,GM.y)) this.addZone("ltonext",nextRect,"arrowlto",{target:(ltoPage+1)%ltoPages});
                    if (prevRect.isInside(GM.x,GM.y)) this.addZone("ltoprev",prevRect,"arrowlto",{target:(ltoPage-1+ltoPages)%ltoPages});
                }
                if (ltoPage>=ltoPages) ltoPage=ltoPages-1;
            }
            
        } else {
            var marble = "0dkk_0";
            var mw = T.width(marble) * 0.7;
            var mh = T.height(marble) * 0.7;

            var btw = T.width("091m");
            var bth = T.height("091m");

            var left = W*0.285;
            var right = W*0.51;
            var top = H*0.11;
            var bot = H*0.565;

            var zh = [H*0.135,H*0.225,H*0.315];
            var it = 0;

            var worder = [left,left,right,right];
            var horder = [top,bot,top,bot];

            var titles = ["05ei","0izh","078x","05h0"];
            var icons = ["0akm","0lb5","00dh","05p8"];

            var decoration = "05v4";

            for (var i=0;i<4;++i) {
                T.draw(ctx,"0bye",worder[i],y0+horder[i]);
                T.draw(ctx,titles[i],worder[i],y0+horder[i]+H*0.03);
                T.draw(ctx,decoration,worder[i]+W*0.01,y0+horder[i]-H*0.03);
                T.draw(ctx,icons[i],worder[i]+W*0.01,y0+horder[i]-H*0.03);
                for (var j=0;j<3;++j) {
    
                    var rect=(new Rect(worder[i]+W*0.018,y0+horder[i]+zh[j]+H*0.009,btw*0.85,bth*0.85)).small();
                    if (shopData[it].cost <= this.getHC()) {
                        if (rect.isInside(GM.x,GM.y) && !shopOpen){
                            T.draw(ctx,"0eni",worder[i],y0+horder[i]+zh[j]);
                            if (purchasing===undefined) this.addZone("buy_"+it,rect,"buy",{target:shopData[it].id});
                            else if (purchasing==shopData[it].id) this.spinner(ctx,worder[i]+W*0.167+T.width(marble)/2,y0+horder[i]+zh[j]+15+T.height(marble)/2,30);
                        }
                        else T.draw(ctx,"091m",worder[i],y0+horder[i]+zh[j]);
                    }
                    else T.draw(ctx,"0dlk",worder[i],y0+horder[i]+zh[j]);
    
                    T.draw(ctx,shopData[it].icon,worder[i]+W*0.02,y0+horder[i]+zh[j]+H*0.01);
                    T.draw(ctx,shopData[it].price,worder[i]+W*0.176-T.width(shopData[it].price),y0+horder[i]+zh[j]+2);
                    if (purchasing!=shopData[it].id) T.draw(ctx,marble,worder[i]+W*0.167,y0+horder[i]+zh[j]+15);
                    text(ctx,this.getShopText(shopData[it].id),worder[i]+W*0.025,y0+horder[i]+zh[j]+H*0.07,"32px "+FONT,"white","left","middle");
                    if (shopData[it].cost > this.getHC()) {
                        T.draw(ctx,"0m9x",worder[i],y0+horder[i]+zh[j]);
                        this.addZone("g2s_"+it,rect,"mshop",{target:true});
                    }
                    ++it;
                }
            }

            text(ctx,"x"+this.pn(this.getPremium(),"",true),left+W*0.185,y0+top+H*0.12,"32px "+FONT,"white","center","middle");
            text(ctx,"x"+this.getFmul(),right+W*0.184,y0+top+H*0.12,"32px "+FONT,"white","center","middle");
            // buy marbles
            var mrect=(new Rect(W*0.75,y0+H*(0.275-0.115)+10,T.width("049e")*0.905,T.height("049e")*0.78)).small();
            if (mrect.isInside(GM.x,GM.y) && !shopOpen){
                T.draw(ctx,"0jpq",W*0.735,y0+H*(0.26-0.115)+10);
                this.addZone("buy_m",mrect,"mshop",{target:true});
            }
            else T.draw(ctx,"049e",W*0.735,y0+H*(0.26-0.115)+10);
            // keys
            var keysB = ["0i4m","0hq3","0m9q"];
            var inx = W*0.732;
            var kdiff=0.43;
            T.draw(ctx,"0gua",W*0.724,y0+H*(0.69-kdiff)+7);
            for (var i=0;i<3;++i) {
                if (shopData[i+12].cost <= this.getHC()) {
                    var BKrect=(new Rect(inx+8,y0+H*(0.765-kdiff)+7,T.width(keysB[i])*0.85,T.height(keysB[i])*0.89)).small();
                    if (BKrect.isInside(GM.x,GM.y) && !shopOpen) {
                        T.draw(ctx,"0djp",inx,y0+H*(0.76-kdiff)+7);
                        if (purchasing===undefined) this.addZone("buy_"+i+12,BKrect,"buy",{target:shopData[i+12].id});
                        else if (purchasing==shopData[i+12].id) this.spinner(ctx,inx+T.width(keysB[i])/2,y0+H*(0.76-kdiff)+T.height(keysB[i])/2,30);
                    }
                }
                else T.draw(ctx,"0dgs",inx,y0+H*(0.76-kdiff)+7);

                T.draw(ctx,keysB[i],inx,y0+H*(0.76-kdiff)+7);
                inx+=T.width(keysB[i])*0.92;
            }
            // one time offer
            if (mdata!==undefined) {
                var eventOffer=false;
                var timeToFinish=((17607+2)*(24*60*60))-Date.now()/1000;
                if (mdata.city.hero===undefined||(mdata.city.hero[0]==0&&mdata.city.promo[0]==0)||(mdata.city.hero[1]==0&&mdata.city.promo[1]==0)||(mdata.city.hero[2]==0&&mdata.city.promo[2]==0)||(mdata.city.hero[80]==0&&mdata.city.promo[80]==0)||eventOffer) {
                    var otor=(new Rect(W*0.74+T.width("00ed")*0.03,y0+H*0.44+T.height("00ed")*0.05+5,T.width("00ed")*0.94,T.height("00ed")*0.9)).small();
                    if (otor.isInside(GM.x,GM.y)) {
                        roundedRect(ctx,W*0.74+T.width("00ed")*0.5-2-T.width("00ed")*0.8*0.5,y0+H*0.44-30-2,T.width("00ed")*0.8+4,H*0.15+4,5,"rgb(255,255,255)");
                        roundedRect(ctx,W*0.74+T.width("00ed")*0.5-T.width("00ed")*0.8*0.5,y0+H*0.44-30,T.width("00ed")*0.8,H*0.15,5,"rgb(4,48,111)");
                        if (mdata.city.hero[0]==0) text(ctx,"Bonus: 40x",W*0.74+T.width("00ed")*0.5-10,y0+H*0.44-30+22,"30px"+FONT,"white","center","middle");
                        else if (mdata.city.hero[1]==0) text(ctx,"Bonus: 100x",W*0.74+T.width("00ed")*0.5-10,y0+H*0.44-30+22,"30px"+FONT,"white","center","middle");
                        else if (mdata.city.hero[2]==0) text(ctx,"Bonus: 250x",W*0.74+T.width("00ed")*0.5-12,y0+H*0.44-30+22,"30px"+FONT,"white","center","middle");
                        else if (mdata.city.hero[80]==0) text(ctx,"Bonus: 650x",W*0.74+T.width("00ed")*0.5-12,y0+H*0.44-30+22,"30px"+FONT,"white","center","middle");
                        T.draw(ctx,"joy2",W*0.74+T.width("00ed")*0.5+30,y0+H*0.44-30+22-T.height("joy2")*0.5,T.width("joy2"),T.height("joy2"));
                        
                        T.draw(ctx,"0lu7",W*0.74,y0+H*0.44+5);
                    } else {
                        T.draw(ctx,"00ed",W*0.74,y0+H*0.44+5);
                    }
                    var yh = H*0.675;
                    
                    if (eventOffer) {
                        this.addZone("mshop_7",otor,"shop",{target:10});
                        this.drawMonster(ctx,-98,W*0.789,y0+H*0.715+5,undefined,false,0.9);
                        text(ctx,"100",W*0.864,y0+yh+7+5,"50px"+FONT,"white","center","middle");
                        text(ctx,timer(timeToFinish),W*0.94,y0+yh+7+5,"32px"+FONT,"white","center","middle");
                    }
                    else {
                        if (mdata.city.hero===undefined||(mdata.city.hero[0]==0&&mdata.city.promo[0]==0)) {
                            T.draw(ctx,"00my",W*0.81,y0+H*0.51+5);
                            this.addZone("mshop_7",otor,"shop",{target:7});
                            text(ctx,"x1",W*0.789,y0+yh+5,"36px"+FONT,"white","center","middle");
                            text(ctx,"Next: x"+this.pn(this.getPremium(1),"",true),W*0.789,y0+yh+18+5,"30px"+FONT,"white","center","middle");
                            text(ctx,"x1",W*0.865,y0+yh+5,"36px"+FONT,"white","center","middle");
                            text(ctx,"Next: x"+this.pn(this.getFmul(1),"",true),W*0.865,y0+yh+18+5,"30px"+FONT,"white","center","middle");
                            this.drawMonster(ctx,-2,W*0.94,y0+H*0.715+5,undefined,false,0.9);

                        } else if (mdata.city.hero[1]==0&&mdata.city.promo[1]==0) {
                            T.draw(ctx,"06a6",W*0.81,y0+H*0.51+5);
                            this.addZone("mshop_8",otor,"shop",{target:8});
                            text(ctx,"x2",W*0.789,y0+yh+5,"36px"+FONT,"white","center","middle");
                            text(ctx,"Next: x"+this.pn(this.getPremium(2),"",true),W*0.789,y0+yh+18+5,"30px"+FONT,"white","center","middle");
                            text(ctx,"x2",W*0.865,y0+yh+5,"36px"+FONT,"white","center","middle");
                            text(ctx,"Next: x"+this.pn(this.getFmul(2),"",true),W*0.865,y0+yh+18+5,"30px"+FONT,"white","center","middle");
                            this.drawMonster(ctx,-3,W*0.94,y0+H*0.715+5,undefined,false,0.9);
                        } else if (mdata.city.hero[2]==0&&mdata.city.promo[2]==0) {
                            T.draw(ctx,"0gt8",W*0.81,y0+H*0.51+5);
                            this.addZone("mshop_9",otor,"shop",{target:9});
                            text(ctx,"x3",W*0.789,y0+yh+5,"36px"+FONT,"white","center","middle");
                            text(ctx,"Next: x"+this.pn(this.getPremium(3),"",true),W*0.789,y0+yh+18+5,"30px"+FONT,"white","center","middle");
                            text(ctx,"x3",W*0.865,y0+yh+5,"36px"+FONT,"white","center","middle");
                            text(ctx,"Next: x"+this.pn(this.getFmul(3),"",true),W*0.865,y0+yh+18+5,"30px"+FONT,"white","center","middle");
                            this.drawMonster(ctx,-4,W*0.94,y0+H*0.715+5,undefined,false,0.9);
                        } else if (mdata.city.hero[80]==0&&mdata.city.promo[80]==0) {
                            T.draw(ctx,"4xjo",W*0.81,y0+H*0.51+5);
                            this.addZone("mshop_13",otor,"shop",{target:13});
                            text(ctx,"x10",W*0.789,y0+yh+5,"36px"+FONT,"white","center","middle");
                            text(ctx,"Next: x"+this.pn(this.getPremium(10),"",true),W*0.789,y0+yh+18+5,"30px"+FONT,"white","center","middle");
                            text(ctx,"x10",W*0.865,y0+yh+5,"36px"+FONT,"white","center","middle");
                            text(ctx,"Next: x"+this.pn(this.getFmul(10),"",true),W*0.865,y0+yh+18+5,"30px"+FONT,"white","center","middle");
                            this.drawMonster(ctx,-82,W*0.94,y0+H*0.715+5,undefined,false,0.9);
                        }
                    }

                    if (otor.isInside(GM.x,GM.y)) {
                        var rhero=undefined;
                        var elements = ["Air","Earth","Fire","Water","Void"];
                        var wTool = 300;
                        var hTool = T.height("0c2t")*0.9;
                        var xt = W*0.44;
                        var yt = (640*(0.223+0.145*2))+T.height("0fj5")/2-hTool/2;
                        ctx.fillStyle="rgba(60,60,60,0.8)";
                        ctx.fillRect(xt,yt,wTool,hTool);

                        if (eventOffer) rhero = 96;
                        else if (mdata.city.hero===undefined||(mdata.city.hero[0]==0&&mdata.city.promo[0]==0)) rhero=0;
                        else if (mdata.city.hero[1]==0&&mdata.city.promo[1]==0) rhero=1;
                        else if (mdata.city.hero[2]==0&&mdata.city.promo[2]==0) rhero=2;
                        else if (mdata.city.hero[80]==0&&mdata.city.promo[80]==0) rhero=80;

                        var hpos = -2*1-rhero;

                        text(ctx,HERO[rhero].name,xt+wTool/2,yt+hTool*0.05,"50px"+FONT,"white","center","middle");
                        this.drawMonster(ctx,hpos,xt+wTool/2,yt+hTool*0.5,undefined,false,2,mdata.city.hero[rhero]);

                        var mhp = mtext(ctx,level2stats(rhero,mdata.city.hero[rhero]).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                        text(ctx,level2stats(rhero,1).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                        T.draw(ctx,"0fuu",xt+wTool/1.25-T.width("0fuu")-mhp/2,yt+hTool*0.555-T.height("0fuu")/2);
                        text(ctx,level2stats(rhero,1).atk,xt+wTool/4,yt+hTool*0.56,"36px"+FONT,"white","center","right");
                        T.draw(ctx,"0e9t",xt+wTool/4.5-T.width("0e9t"),yt+hTool*0.555-T.height("0e9t")/2);

                        text(ctx,"LEVEL: "+mdata.city.hero[rhero],xt+wTool/2,yt+hTool*0.66,"36px"+FONT,"white","center","middle");
                        text(ctx,"ELEMENT: "+elements[HERO[rhero].type],xt+wTool/2,yt+hTool*0.76,"36px"+FONT,"white","center","middle");
                        mltext(ctx,this.skill2text(HERO[rhero].skill,mdata.city.hero[rhero],false).short,xt+wTool/2,yt+hTool*0.86,"28px"+FONT,"white","center","middle");

                        if (rhero===96) {
                            text(ctx,"This hero can be level with: ",xt+wTool/2-20,yt+hTool*0.93,"36px"+FONT,"rgba(201,244,255,1)","center","middle");
                            T.draw(ctx,"0j14",xt+wTool/2+90,yt+hTool*0.91,T.width("0j14")*0.6,T.height("0j14")*0.6);
                            T.draw(ctx,"0ap1",xt+wTool/2+110,yt+hTool*0.91,T.width("0j14")*0.6,T.height("0j14")*0.6);
                        }
                    }
                }
            }
            // Task Manager and researcher
            var rdiff=-0.35;
            if (data.premiumR==0) {
                var rrect=(new Rect(W*0.76,y0+H*(0.405-rdiff),T.width("0c5y")*0.82,T.height("0c5y")*0.72)).small();
                if (rrect.isInside(GM.x,GM.y) && !shopOpen && this.getHC()>=100){
                    T.draw(ctx,"0mlk",W*0.748,y0+H*(0.387-rdiff),T.width("0c5y")*0.9,T.height("0c5y")*0.9);
                    if (purchasing===undefined) this.addZone("buy_rs",rrect,"buy",{target:"res"});
                    else if (purchasing=="res") this.spinner(ctx,W*0.735+T.width("0mlk")/2,y0+H*(0.375-rdiff)+T.height("0mlk")/2,40);
                }
                else T.draw(ctx,"0c5y",W*0.748,y0+H*(0.387-rdiff),T.width("0c5y")*0.9,T.height("0c5y")*0.9);
            }
            else if (mdata!==undefined&&mdata.tm!==undefined&&!(mdata.tm===-1)&&(mdata.tm-Date.now()<=0)) {
                var rrect=(new Rect(W*0.76,y0+H*(0.405-rdiff),T.width("6qlw")*0.82,T.height("6qlw")*0.72)).small();
                if (rrect.isInside(GM.x,GM.y) && !shopOpen){
                    T.draw(ctx,"vava",W*0.748,y0+H*(0.387-rdiff),T.width("6qlw")*0.9,T.height("6qlw")*0.9);
                    this.addZone("tm_show",rrect,"tm_show",{target:true});
                }
                else T.draw(ctx,"6qlw",W*0.748,y0+H*(0.387-rdiff),T.width("6qlw")*0.9,T.height("6qlw")*0.9);
            }
            // coupon
            var cdiff=0.013;
            var crect=(new Rect(W*0.775,y0+H*(0.893+cdiff),T.width("0ma5")*0.85,T.height("0ma5")*0.765)).small();
            if (crect.isInside(GM.x,GM.y) && !shopOpen){
                T.draw(ctx,"0aea",W*0.771,y0+H*(0.885+cdiff),T.width("0aea")*0.9,T.height("0aea")*0.9);
                this.addZone("coupon",crect,"coupon");
            }
            else T.draw(ctx,"0ma5",W*0.771,y0+H*(0.885+cdiff),T.width("0aea")*0.9,T.height("0aea")*0.9);
        }

        var inity = 270-((extraShop.length-1)*45) + T.height("0eqq")*0.02 + ((extraShop.length-1)*T.height("0eqq")*0.965);
        for (var i=0;i<extraShop.length;++i) {
            T.draw(ctx,"0eqq",W*0.165,y0+inity);
            if (extraShop[i].number !== undefined) {
                var level = mdata.city.hero[rhero];
                if (extraShop[i].level !== undefined) level = extraShop[i].level;
                var prom = mdata.city.promo[rhero];
                if (extraShop[i].promo !== undefined) prom = extraShop[i].promo;
                this.drawMonster(ctx,-2-extraShop[i].number,W*0.231,y0+inity+135,undefined,false,0.9,level,true,true,prom);
                if (extraShop[i].type == "UM") {
                    T.draw(ctx,extraShop[i].curr,W*0.209,y0+inity+133);
                    T.draw(ctx,"0dvo",W*0.210,y0+inity+142,T.width("0dvo")*0.4,T.height("0dvo")*0.4);
                }
                else if (extraShop[i].type == "KRED") {
                    T.draw(ctx,extraShop[i].curr,W*0.213,y0+inity+127,T.width(extraShop[i].curr)*0.6,T.height(extraShop[i].curr)*0.6);
                    T.draw(ctx,"0c7v",W*0.215,y0+inity+145,T.width("0c7v")*0.60,T.height("0c7v")*0.60);  
                }       
                var otor=(new Rect(W*0.19,y0+inity+50,W*0.085,H*0.16)).small();
                if (otor.isInside(GM.x,GM.y)) {
                    if (extraShop[i].type == "UM") {
                        if (extraShop[i].price <= this.getHC()) {
                            this.addZone("buyhero_"+i,otor,"buyhero",{target:extraShop[i].number});
                        }
                    } else {
                        this.addZone("buyHeroKred",otor,"shop",{target:extraShop[i].number});
                    }
                    var rhero=undefined;
                    var elements = ["Air","Earth","Fire","Water","Void"];
                    var wTool = 300;
                    var hTool = T.height("0c2t")*0.9;
                    var xt = W*0.44;
                    var yt = (640*(0.223+0.145*2))+T.height("0fj5")/2-hTool/2;
                    ctx.fillStyle="rgba(60,60,60,0.8)";
                    ctx.fillRect(xt,yt,wTool,hTool);

                    rhero=extraShop[i].number;

                    var hpos = -2*1-rhero;
                    var level = mdata.city.hero[rhero];
                    if (extraShop[i].level !== undefined) level = extraShop[i].level;
                    var prom = mdata.city.promo[rhero];
                    if (extraShop[i].promo !== undefined) prom = extraShop[i].promo;

                    text(ctx,HERO[rhero].name,xt+wTool/2,yt+hTool*0.05,"50px"+FONT,"white","center","middle");
                    this.drawMonster(ctx,hpos,xt+wTool/2,yt+hTool*0.5,undefined,false,2,level,true,true,prom);

                    var mhp = mtext(ctx,level2stats(rhero,mdata.city.hero[rhero]).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                    text(ctx,level2stats(rhero,1).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                    T.draw(ctx,"0fuu",xt+wTool/1.25-T.width("0fuu")-mhp/2,yt+hTool*0.555-T.height("0fuu")/2);
                    text(ctx,level2stats(rhero,1).atk,xt+wTool/4,yt+hTool*0.56,"36px"+FONT,"white","center","right");
                    T.draw(ctx,"0e9t",xt+wTool/4.5-T.width("0e9t"),yt+hTool*0.555-T.height("0e9t")/2);

                    text(ctx,"LEVEL: "+level,xt+wTool/2,yt+hTool*0.66,"36px"+FONT,"white","center","middle");
                    text(ctx,"ELEMENT: "+elements[HERO[rhero].type],xt+wTool/2,yt+hTool*0.76,"36px"+FONT,"white","center","middle");
                    mltext(ctx,"SKILL: "+this.skill2text(HERO[rhero].skill,mdata.city.hero[rhero],false).short,xt+wTool/2,yt+hTool*0.86,"28px"+FONT,"white","center","middle");
                    if (extraShop[i].type != "UM") {
                        text(ctx,"+",W*0.28+190,H*0.25+75,"50px"+FONT,"white","center","middle");
                        
                        ctx.fillStyle="rgba(60,60,60,0.8)";
                        ctx.fillRect(xt-140,yt,140.5,170.5);
                        text(ctx,"300",xt-70,yt+120,"50px"+FONT,"white","center","middle");
                        text(ctx,"Double VIP points",xt-70,yt+150,"30px"+FONT,"white","center","middle");
                        T.draw(ctx,"0j14",xt-70-40,yt+20,80,80);

                    }
                }
            }
            else {
                T.draw(ctx,extraShop[i].icon,W*0.230-T.width(extraShop[i].icon)*0.8*0.5,y0+inity+65,T.width(extraShop[i].icon)*0.8,T.height(extraShop[i].icon)*0.8);
                if (extraShop[i].type == "UM") {
                    T.draw(ctx,extraShop[i].curr,W*0.209,y0+inity+133);
                    T.draw(ctx,"0dvo",W*0.210,y0+inity+142,T.width("0dvo")*0.4,T.height("0dvo")*0.4); 
                }
                else if (extraShop[i].type == "KRED") {
                    if (extraShop[i].curr == "01ug") T.draw(ctx,extraShop[i].curr,W*0.213,y0+inity+125,T.width(extraShop[i].curr)*0.6,T.height(extraShop[i].curr)*0.6);
                    else T.draw(ctx,extraShop[i].curr,W*0.210,y0+inity+110,T.width(extraShop[i].curr)*0.7,T.height(extraShop[i].curr)*0.7);
                    T.draw(ctx,"0c7v",W*0.215,y0+inity+145,T.width("0c7v")*0.60,T.height("0c7v")*0.60); 
                }
                var otor=(new Rect(W*0.19,y0+inity+50,W*0.085,H*0.16)).small();
                if (otor.isInside(GM.x,GM.y)) {
                    this.addZone("buywc",otor,"buywc",{target:mdata.city.WC});
                    if (mdata.city.WC==1) {
                        roundedRect(ctx,W*0.6-2.5,H*0.5-H*0.15*0.5-2.5,W*0.2+5,H*0.15+5,5,"rgb(255,255,255)");
                        roundedRect(ctx,W*0.6-2,H*0.5-H*0.15*0.5-2,W*0.2+4,H*0.15+4,5,"rgb(0,4,68)");
                        roundedRect(ctx,W*0.6,H*0.5-H*0.15*0.5,W*0.2,H*0.15,5,"rgb(0,43,159)");
                        text(ctx,"Bonus:",W*0.6+W*0.2*0.7,H*0.5-15,"45px"+FONT,"white","center","middle");
                        text(ctx,"x100",W*0.6+W*0.2*0.7-15,H*0.5+15,"45px"+FONT,"white","center","middle");
                        T.draw(ctx,"joy2",W*0.6+W*0.2*0.7+15,H*0.5+15-T.height("joy2")*0.5,T.width("joy2"),T.height("joy2"));
                    } else if (mdata.city.WC==2) {
                        roundedRect(ctx,W*0.6-2.5,H*0.5-H*0.15*0.5-2.5,W*0.2+5,H*0.15+5,5,"rgb(255,255,255)");
                        roundedRect(ctx,W*0.6-2,H*0.5-H*0.15*0.5-2,W*0.2+4,H*0.15+4,5,"rgb(0,4,68)");
                        roundedRect(ctx,W*0.6,H*0.5-H*0.15*0.5,W*0.2,H*0.15,5,"rgb(0,43,159)");
                        text(ctx,"Bonus:",W*0.6+W*0.2*0.7,H*0.5-15,"45px"+FONT,"white","center","middle");
                        text(ctx,"x300",W*0.6+W*0.2*0.7-15,H*0.5+15,"45px"+FONT,"white","center","middle");
                        T.draw(ctx,"joy2",W*0.6+W*0.2*0.7+15,H*0.5+17-T.height("joy2")*0.5,T.width("joy2"),T.height("joy2"));
                    }
                    
                    T.draw(ctx,"0f04",W*0.5-T.width("0f04")*0.5,H*0.5-T.height("0f04")*0.5);
                    T.draw(ctx,extraShop[i].name,W*0.5-T.width(extraShop[i].name)*0.5,H*0.5-T.height("0f04")*0.35);
                    text(ctx,"x"+extraShop[i].reward.SD,W*0.5-T.width("0f04")*0.22+2,H*0.54,"36px"+FONT,"white","center","middle");
                    text(ctx,"x"+extraShop[i].reward.KEYS,W*0.5+2,H*0.54,"36px"+FONT,"white","center","middle");
                    text(ctx,"x"+extraShop[i].reward.EM,W*0.5+T.width("0f04")*0.22+2,H*0.54,"36px"+FONT,"white","center","middle");
                    text(ctx,"Next: x"+this.pn(this.getFmul(1),"",true),W*0.5+T.width("0f04")*0.22+2,H*0.563,"26px"+FONT,"white","center","middle");
                    text(ctx,extraShop[i].text,W*0.5,H*0.6,"26px"+FONT,"white","center","middle");
                    text(ctx,extraShop[i].text1,W*0.5,H*0.62,"26px"+FONT,"white","center","middle");

                }
            }
            inity-=150;
        }
            var suby = 0;
            if (CQW!==undefined && CQW.lto !==undefined && mdata !== undefined && mdata.city !== undefined) {
                var tid=Math.floor(Date.now()/(24*60*60*1000));
                var drawArray=[];
                var heroArray = CQW.lto;
                for (var i=0;i<heroArray.length;++i) {
                    if (mdata.city.hero[heroArray[i].id] == 0 && tid>=heroArray[i].start && tid<=heroArray[i].finish) drawArray.push(heroArray[i]);
                    else if (mdata.city.hero[heroArray[i].id] == 0 && heroArray[i].start == -1 && heroArray[i].finish == -1) drawArray.push(heroArray[i]);
                }
                if (drawArray.length !== 0) {
                    var ltoRect=(new Rect(W*0.162,y0+34+suby,T.width("5l89"),T.height("5l89")-10)).small();
                    if (ltoRect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"bh3h",W*0.162,y0+34);
                        this.addZone("ltobutton_op",ltoRect,"ltobutton",{target:true});
                    } else T.draw(ctx,"5l89",W*0.162,y0+34);
                    suby = 90;
                }
            }
            
        
            var opaucRect=(new Rect(W*0.162,y0+34+suby,T.width("3jdh"),T.height("3jdh"))).small();
            if (opaucRect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"s620",W*0.162,y0+34+suby-10);
                this.addZone("aucbutton_op",opaucRect,"aucbutton",{target:true});
            } else T.draw(ctx,"3jdh",W*0.162,y0+34+suby-10);

            suby+=81;

            // Season Shop Button
            var ssrect=(new Rect(W*0.162,y0+34+suby,T.width("3jdh"),T.height("3jdh"))).small();
            if (ssrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"2ct1_1",W*0.162,y0+34+suby-10);
                this.addZone("tgss",ssrect,"tgss",{target:true});
            } else T.draw(ctx,"2ct1_0",W*0.162,y0+34+suby-10);

            if (monsterInfo!==undefined) {
                var rhero=monsterInfo;
                var elements = ["Air","Earth","Fire","Water","Void"];
                var wTool = 300;
                var hTool = T.height("0c2t")*0.9;
                var xt = 0;
                var yt = (640*(0.223+0.145*2))+T.height("0fj5")/2-hTool/2;
                ctx.fillStyle="#127bdf";
                ctx.fillRect(xt,0,wTool,H);
                ctx.fillStyle="#303335";
                ctx.fillRect(xt+2,2,wTool-4,H-4);

                var hpos = -2*1-rhero;

                text(ctx,HERO[rhero].name,xt+wTool/2,yt+hTool*0.05,"50px"+FONT,"white","center","middle");
                this.drawMonster(ctx,hpos,xt+wTool/2,yt+hTool*0.5,undefined,false,2,1);

                var mhp = mtext(ctx,level2stats(rhero,1,mdata.city.promo[rhero]).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                text(ctx,level2stats(rhero,1,mdata.city.promo[rhero]).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                T.draw(ctx,"0fuu",xt+wTool/1.25-T.width("0fuu")-mhp/2,yt+hTool*0.555-T.height("0fuu")/2);
                text(ctx,level2stats(rhero,1,mdata.city.promo[rhero]).atk,xt+wTool/4,yt+hTool*0.56,"36px"+FONT,"white","center","right");
                T.draw(ctx,"0e9t",xt+wTool/4.5-T.width("0e9t"),yt+hTool*0.555-T.height("0e9t")/2);

                text(ctx,"LEVEL: "+1,xt+wTool/2,yt+hTool*0.66,"36px"+FONT,"white","center","middle");
                text(ctx,"ELEMENT: "+elements[HERO[rhero].type],xt+wTool/2,yt+hTool*0.76,"36px"+FONT,"white","center","middle");
                var tsize="28px"+FONT;
                var stext=this.skill2text(HERO[rhero].skill,1,false).short;
                var wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),xt+wTool/2,yt+hTool*0.86,tsize,"rgb(151,246,255)","center","middle");
                if (wtext >= wTool) tsize="24px"+FONT;
                wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),xt+wTool/2,yt+hTool*0.86,tsize,"rgb(151,246,255)","center","middle");
                if (wtext >= wTool) tsize="20px"+FONT;
                mltext(ctx,"SKILL: "+this.skill2text(HERO[rhero].skill,1,false).short,xt+wTool/2,yt+hTool*0.86,tsize,"white","center","middle");
                if (monsterKreed != undefined) {
                    var kreedsToCandies = {10: 10, 30: 30, 100: 110, 200: 230, 250: 300, 300: 380};
                    for (var i = 0; i < 9; ++i) T.draw(ctx,"joy2",6+i*32,yt-135,T.width("joy2"),T.height("joy2"));
                    mltext(ctx,"Get "+kreedsToCandies[monsterKreed]+" Event Tickets/nfor this purchase!",xt+wTool/2,yt-90,"46px"+FONT,"white","center","middle");
                    for (var i = 0; i < 9; ++i) T.draw(ctx,"joy2",6+i*32,yt-40,T.width("joy2"),T.height("joy2"));
                }
                
            }
    }
    this.drawExotic = function (ctx,zx,zy,zw,zh) {
        var w = 231/2;
        var bw = T.width("0j0g");
        var bh = T.height("0j0g");
        var row = 30/2;
        for (var i=0; i<OITEMS.length; ++i) {
            var x = zx+9/2+14/2*i+w*i;
            var y = zy+14/2;
            var u = OITEMS[i];
            var price = u.cost(data.omegas[i]);
            T.draw(ctx,price>data.omega?"0grd":"0j0g",x,y);
            T.draw(ctx,u.icon,x+14/2,y+14/2,bw-28/2,bw-28/2);
            ctext(ctx,u.name,x+bw/2,y+bw+14/2,"20px "+FONT,"black","center","top");
            ctext(ctx,u.text,x+bw/2,y+bw+14/2+row,"20px "+FONT,"black","center","top");
            var current = u.current(data,this.pn);
            if (typeof current==="number") current = this.pn(current,"",true);
            ctext(ctx,current,x+bw/2,y+bw+14/2+row*2.75,"30px "+FONT,"black","center","top");
            ctext(ctx,this.pn(price,"\u03A9",true),x+bw/2,y+bw+14/2+row*4.5,"30px "+FONT,"black","center","top");
            if (data.omega>=price) {
                var rect = (new Rect(x,y,bw,bh)).small();
                this.addZone("omegab"+i,rect,"omega",{target:i});
                if (rect.isInside(GM.x,GM.y)) {
                    ctx.fillStyle="rgba(255,255,255,0.03)";
                    ctx.fillRect(x,y,bw,bh);
                }
            }
        }
    }
    this.drawOptions = function (ctx,zx,zy,zw,zh) {
        // prev-next
        var nw=T.width("09sg");
        var nh=T.height("09sg");
        T.draw(ctx,"09sg",zx+zw-16-nw,zy+zh/2-nh/2);
        ctx.save();
        ctx.translate(zx+16+nw/2,zy+zh/2)
        ctx.scale(-1,1);
        T.draw(ctx,"09sg",-nw/2,-nh/2);
        ctx.restore();
        var maxOptPage = 3;
        this.addZone("optnext",(new Rect(zx+zw-16-nw,zy+zh/2-nh/2,nw,nh)).small(),"optpage",{target:(optPage+1)%maxOptPage});
        this.addZone("optprev",(new Rect(zx+16,zy+zh/2-nh/2,nw,nh)).small(),"optpage",{target:(optPage-1+maxOptPage)%maxOptPage});

        var ndist=T.height("0567")*0.7;
        // Define Rows and columns
        var r1=zx+zw*0.175-T.width("0567")/2;
        var r2=zx+zw*0.325-T.width("0567")/2;
        var r3=zx+zw*0.675-T.width("0567")/2;
        var r4=zx+zw*0.825-T.width("0567")/2;

        var c1=zy+zh*0.22-T.height("0567")/2;
        var c2=zy+zh*0.47-T.height("0567")/2;
        var c3=zy+zh*0.72-T.height("0567")/2;
        var c4=zy+zh*0.9-T.height("0567")/2;
        otooltip=undefined;
        if (optPage==1) {
            this.soundBox(ctx,r1,c1-13,"sound","sound","sound","Music",data.sound,"Mutes Background Music");
            this.soundBox(ctx,r1,c2,"effect","sound","effect","Effects",data.effect,"Mutes Disaster Sound");
            this.soundBox(ctx,r1,c3+13,"soundclick","sound","click","Click",data.click,"Mutes Click Sound");

            this.checkBox(ctx,r2-20,c2-80,data.showNumbers,"sshown","toggle","showNumbers","Show clicks","right","Display the energy obtained by Clicks");
            this.checkBox(ctx,r2-20,c2-35,data.fractal,"sfrac","toggle","fractal","High Graphics","right","Disable for better performance");
            this.checkBox(ctx,r2-20,c2+10,data.tdon,"stdon","toggle","tdon","Energy Orbs","right","Run/Pause Energy Orbs");
            this.checkBox(ctx,r2-20,c2+55,data.colorblind,"scolorblind","toggle","colorblind","Color Blind","right","Display Numbers in AP board");
            
            if (CQW!==undefined && CQW.isPublic!==undefined) this.checkBox(ctx,r2-20,c2+100,CQW.isPublic,"spub","toggle","public","Display name","right","Show your name in CosmosQuest.net");

            text(ctx,"Notation",r3+T.width("0567")+5,c1-ndist,"30px "+FONT,"white","center","top");
            this.rectButton(ctx,r3,c1,"notation","notation",undefined,undefined,["S.I.","Scientific"],data.nMode,"Changes Number Display Mode for Idle");
            this.rectButton(ctx,r4,c1,"bintmode","bintmode",undefined,undefined,["k/M/G/T/P","k/M/B/T/Q","k/Mn/Md/..."],data.bintmode,"Changes Number Display Mode for Followers");

            var sortList=["Species","Alphabetical","Level","Life","Damage","Rarity","Element","Strength"];
            text(ctx,"Hero Sort",r3+T.width("0567") + 5,c2-ndist,"30px "+FONT,"white","center","top");
            this.rectButton(ctx,r3,c2,"sorthero","sorthero",undefined,undefined,sortList,data.typeSort,"Changes the Hero sorting method");
            this.rectButton(ctx,r4,c2,"dirhero","dirhero",undefined,undefined,["DOWN","UP"],data.sortDir,"Choice direction of sort");

            text(ctx,"Resolution",r3+T.width("0567")/2,c3-ndist,"30px "+FONT,"white","center","top");
            this.rectButton(ctx,r3,c3,"res","res",undefined,undefined,["HIGH","MEDIUM","LOW"],data.resolution,"Default resolution [requires refreshing]");

            var infoList=["Strength","Followers"];
            text(ctx,"Line Info",r4+T.width("0567")/2,c3-ndist,"30px "+FONT,"white","center","top");
            this.rectButton(ctx,r4,c3,"lineinfo","lineinfo",undefined,undefined,infoList,data.lineInfo,"Changes the giving info of Grid (line)");

            this.checkBox(ctx,r3,c4,data.hideafford,"toggleAfford","toggle","hideafford","Hide furious","right","Show or hide furious monsters that you can't afford");

        } else if (optPage==0) {
            text(ctx,"Saved "+this.pn(Math.floor((Date.now()-data.saved)/1000),"",true)+"s ago",zx+zw*0.175,zy+zh*0.25-T.height("0567")*1.3-5,"30px "+FONT,"white","center","top");
            this.rectButton(ctx,r1,c1,"save","save","Save",undefined,undefined,undefined,"Local save your data");
            this.rectButton(ctx,r2,c1,"panic","panic","Panic",panicSync,undefined,undefined,"Recovery tool (last option)");

            if (data.cloud==0) text(ctx,"No Cloud",r1+T.width("0567")+5,c2-ndist,"30px "+FONT,"white","center","top");
            else text(ctx,"Cloud Saved "+bigtimer(Math.floor((Date.now()-data.cloud)/1000))+" ago",r1+T.width("0567")+5,c2-ndist,"30px "+FONT,"white","center","top");
            this.rectButton(ctx,r1,c2,"csave","csave","Cloud Save",syncSave,undefined,undefined,"Save your game to Cloud");
            this.rectButton(ctx,r2,c2,"cload","cload","Cloud Load",loadSync,undefined,undefined,"Load your saved game from Cloud");

            this.rectButton(ctx,r3,c1,"export","export","Export",undefined,undefined,undefined,"Exports data to share among computers");
            this.rectButton(ctx,r4,c1,"import","import","Import",undefined,undefined,undefined,"Imports an exported data (Has cooldown)");
            this.rectButton(ctx,r3,c2,"reset","reset","Hard Reset",undefined,undefined,undefined,"Starts the game from scratch [IRREVERSIBLE]");
            if (mdata!==undefined && mdata.log!==undefined) this.rectButton(ctx,r4,c2,"history","history","History",undefined,undefined,undefined,"Shows server callbacks list");
            this.rectButton(ctx,r3,c3,"clearf","clearf","Clear Filter",undefined,undefined,undefined,"Clear filters on Hero Manager");
            
            this.checkBox(ctx,r1,c3,data.autocloud,"toggleCloud","toggle","autocloud","Session Cloud Save","right","Auto Cloud save for current session");
            this.checkBox(ctx,r3,c4,data.fautocloud,"togglefCloud","toggle","fautocloud","Always Cloud Save","right","Auto Cloud save always (Can overwrite data)");
        } else if (optPage==2) {
            text(ctx,"NOTIFICATIONS",zx+zw/2,zy+5,"50px "+FONT,"white","center","top");
            var q1=["RESEARCH","LAB","DAILYF","APFULL","EVOLVE"];
            var q1d=["Research Available","Experiment Available","Daily Quest Available","AP is Full","Evolve Available"];
            for (var i=0;i<q1d.length;++i) {
                var state=undefined;
                if (data.notifications[q1[i]]<Date.now()) state=true;
                else state=false;

                this.checkBox(ctx,r1,c1+i*(H*0.055),state,"s1noti_"+i,"noti",q1[i],q1d[i],"right","Disable this notification for 7 days");
            }

            var q2=["BIGCRUNCH","HBATTLE","CHEST","TOURNAMENT","OTO"];
            var q2d=["Big Crunch Available","Hourly Battle Available","Free Chest Available","Tournament Available","Shop Offers"];
            for (var i=0;i<q2d.length;++i) {
                var state=undefined;
                if (data.notifications[q2[i]]<Date.now()) state=true;
                else state=false;

                this.checkBox(ctx,r4+T.width("0567")/2+T.width("0oh5")/2,c1+i*(H*0.055),state,"s2noti_"+i,"noti",q2[i],q2d[i],"left","Disable this notification for 7 days");
            }
        }
        // version
        ctext(ctx,VERSION,zx+zw-32/2,zy+zh-14/2,"32px "+FONT,"white","right","bottom");
        if (optPage!==3){
            // follow us
            var tw = T.width("0dz3");
            var th = T.height("0dz3");
            T.draw(ctx,"0dz3",zx+zw/2-tw/2,zy+zh/2-th/2+10);
            var trect = (new Rect(zx+zw/2-tw/2,zy+zh/2-th/2+10,tw,th)).small();
            this.addZone("twitter",trect,"twitter");
            if (trect.isInside(GM.x,GM.y)) {
                text(ctx,"Tweet us!",zx+zw/2,zy+zh/2+th/2+10,"32px "+FONT,"white","center","top");
            }
            // Poll
            var pw = T.width("05x5");
            var ph = T.height("05x5");
            T.draw(ctx,"05x5",zx+zw/2-tw/2,zy+zh/2-th/2+120);
            text(ctx,"POLL",zx+zw/2-tw/2+T.width("05x5")/2,zy+zh/2-th/2+120+T.height("05x5")/2,"32px "+FONT,"black","center","middle");
            var prect = (new Rect(zx+zw/2-tw/2,zy+zh/2-th/2+120,pw,ph)).small();
            if (prect.isInside(GM.x,GM.y)) {
                text(ctx,"Answer the Daily Poll",zx+zw/2,zy+zh/2+th/2,"32px "+FONT,"white","center","top");
            }
            this.addZone("pOpen",prect,"pOpen",{target:true});
            // User Vip panel
            var pw = T.width("05x5");
            var ph = T.height("05x5");
            T.draw(ctx,"05x5",zx+zw/2-tw/2,zy+zh/2-th/2-30);
            text(ctx,"VIP",zx+zw/2-tw/2+T.width("05x5")/2,zy+zh/2-th/2+T.height("05x5")/2-30,"32px "+FONT,"black","center","middle");
            var vrect = (new Rect(zx+zw/2-tw/2,zy+zh/2-th/2-30,pw,ph)).small();
            if (vrect.isInside(GM.x,GM.y)) {
                text(ctx,"Check VIP status",zx+zw/2,zy+zh/2-th/2-50,"32px "+FONT,"white","center","top");
            }
            this.addZone("vOpen",vrect,"vOpen",{target:true});
        }

        // Tooltip
        if (otooltip!==undefined) {
            var textw = mtext(ctx,otooltip.text,x0+150,otooltip.y+50,"32px "+FONT,"white","center","middle");
            if ((otooltip.y-zy)/zh<0.3) {
                ctx.fillStyle="rgba(0,0,0,0.8)";
                ctx.beginPath();
                ctx.moveTo(otooltip.x,otooltip.y+20);
                ctx.lineTo(otooltip.x-20,otooltip.y+35);
                ctx.lineTo(otooltip.x+20,otooltip.y+35);
                ctx.closePath();
                ctx.fill();
                var x0=(otooltip.x-zx)/zw>0.5?otooltip.x-(textw+40)/2-50:otooltip.x-(textw+40)/2+50;
                ctx.fillRect(x0,otooltip.y+35,textw+40,30);
                text(ctx,otooltip.text,x0+textw/2+20,otooltip.y+50,"32px "+FONT,"white","center","middle");
            } else {
                ctx.fillStyle="rgba(0,0,0,0.8)";
                ctx.beginPath();
                ctx.moveTo(otooltip.x,otooltip.y-20);
                ctx.lineTo(otooltip.x-20,otooltip.y-35);
                ctx.lineTo(otooltip.x+20,otooltip.y-35);
                ctx.closePath();
                ctx.fill();
                var x0=(otooltip.x-zx)/zw>0.5?otooltip.x-(textw+40)/2-50:otooltip.x-(textw+40)/2+50;
                ctx.fillRect(x0,otooltip.y-65,textw+40,30);
                text(ctx,otooltip.text,x0+textw/2+20,otooltip.y-50,"32px "+FONT,"white","center","middle");
            }
        }
    }
    this.drawScene = function (ctx) {
        var zx = W*0.28125;
        var zy = 0;
        var zw = W*0.71875;
        var zh = H*0.5+80/2;
        var b = 6;
        var bx = 5;
        var hx = -1;
        if (scene=="experiment") {
            ctx.fillStyle="rgba(44,47,51,1)";
            ctx.fillRect(zx,zy,zw,H*0.08);

            ctx.save();
            ctx.beginPath();
            ctx.rect(zx,zy+H*0.08,zw,zh-H*0.08);
            ctx.closePath();
            ctx.clip();
            T.draw(ctx,"0k2u",W*0.26,0,T.width("0k2u")*2.08,T.height("0k2u")*2);
            ctx.restore();

            ctx.fillStyle="rgba(0,0,0,0.2)";
            ctx.fillRect(zx,zy+H*0.08,zw,zh-H*0.08);
        }
        else T.draw(ctx,"0guo",zx,zy);
        var x = zx+b;
        var y = 6;
        var hover=undefined;
        var bw = T.width("06cn");
        var bh = T.height("06cn");
        var iw = T.width("0d78");
        var ih = T.height("0d78");
        var ib = (bh-iw)/2;
        for (var i=0; i<relems.length; ++i) {
            var elem = relems[i];
            var ey = 0;
            if (elem.bg) {
                var ew = T.width(elem.bg);
                var eh = T.height(elem.bg);
                if (elem.bg == "0ob4") ey=-2.5;
                var mrect = (new Rect(x,y,ew,eh)).small();
                if (elem.hover=="B") var mrect = (new Rect(x+10,y,ew-10,eh)).small();
                if (elem.action && data.tutorial>=8) {
                    this.addZone("elems"+i.toString(),mrect,elem.action.action,elem.action.extra);
                    if (elem.btn!==undefined) {
                        T.draw(ctx,elem.bg,x,y+ey);
                        var btw=T.width(elem.btn);
                        var bth=T.height(elem.btn);
                        if (mrect.isInside(GM.x,GM.y)) {
                            T.draw(ctx,elem.btnh,x+ew-btw+12,y-2.25);
                        } else {
                            T.draw(ctx,elem.btn,x+ew-btw+12,y-2.25);
                        }
                    } else {
                        if (mrect.isInside(GM.x,GM.y)) T.draw(ctx,elem.bg,x+3,y);
                        else  T.draw(ctx,"0i7g",x+3,y);
                    }
                } else {
                    if (elem.bg == "0ob4") T.draw(ctx,elem.bg,x,y-2);
                    else T.draw(ctx,elem.bg,x,y);
                }
                if (elem.text) {
                    if (elem.btn!==undefined) {
                        text(ctx,elem.text(),x+ew-b+elem.ox-14,y+eh/2-2,"40px "+FONT,"white","right","middle");
                    } else if (elem.hover=="B") {
                        text(ctx,elem.text(),x+ew-b+elem.ox+7,y+eh/2,"36px "+FONT,"black","right","middle");
                    } else {
                        text(ctx,elem.text(),x+ew-b+elem.ox,y+eh/2,"40px "+FONT,"black","right","middle");
                    }
                }
                if (elem.spin) {
                    var sw = T.width(elem.spin)+0.6;
                    var sh = T.height(elem.spin)+0.8;
                    ctx.save();
                    ctx.translate(x+sw/2+1,y+sh/2-0.5);
                    ctx.rotate(spin/500);
                    T.draw(ctx,elem.spin,-sw/2,-sh/2);
                    ctx.restore();
                }
                if (elem.hover&&mrect.isInside(GM.x,GM.y)) {
                    hover=elem.hover;
                    hx = x;
                }
                if (elem.anim) {
                    if (elem.time!==undefined) {
                        if (elem.time<0) {
                            T.draw(ctx,elem.anim,x,y);
                        } else {
                            elem.time-=0.016;
                            T.draw(ctx,elem.static,x,y);
                        }
                    } else {
                        T.draw(ctx,elem.anim,x+4,y+2);
                    }
                }
                if (elem.pila) {
                    var id = 0;
                    if (data.stats.c.m.energy>0) id=Math.floor(5.1*(Math.min(1,data.energy/data.stats.c.m.energy)));
                    if (isNaN(id)) id=0;
                    T.draw(ctx,elem.pila+"_"+id,x+0.5,y);
                }
            }
            x+=ew+b/2;
        }
        if (scene=="buildings") this.drawBuildings(ctx,menu!=="shop");
        else if (scene=="quantum") this.drawQuantum(ctx,menu!=="shop");
        else if (scene=="experiment") this.drawExperiment(ctx,menu!=="shop");
        else if (scene=="ed") this.drawED(ctx,menu!=="shop");
        else if (scene=="galaxies") this.drawGalaxies(ctx,menu!=="shop");
        else if (scene=="dimensions") this.drawDimensions(ctx,menu!=="shop");
        if (achMenu>0) {
            // 212
            var ach = ACH[lastAch](data,this.pn);
            var alvl = ach.level;
            var icon = alvl>0?ach.icon:"04rx";
            var atext = alvl>0?ach.name:Array(Math.min(31,ach.name.length)).join("?");
            var adesc = alvl>0?(menu!="achievements"?ach.curr:ach.next):Array(Math.min(31,(menu!="achievements"?ach.curr:ach.next).length)).join("?");
            var pw = T.width("01c9");
            var ph = T.height("01c9");
            var iw = T.width("04rx");
            var ih = T.height("04rx");
            var y = zy+zh-ph*achMenu+2;
            var x = zx+zw/2-pw/2;
            var br = (ph-ih)/2;
            T.draw(ctx,"01c9",x,y);
            this.addZone("closeach",(new Rect(x,y,pw,ph)).small(),"achpop");
            T.draw(ctx,icon,x+br,y+br,iw,ih);
            T.draw(ctx,"0jtf",x+br,y+br);
            text(ctx,alvl+"/"+ach.levels,x+br+iw-ib,y+br+ih-ib/2,"24px "+FONT,"black","right","bottom");
            ctext(ctx,atext,x+iw+br*2,y+br-11/2,"32px "+FONT,"white","left","top");
            ctext(ctx,adesc,x+pw-br,y+br+ih-10/2,"32px "+FONT,"white","right","top");
            var perc = clamp(ach.perc,0,1);
            var x0 = x+iw+br*2;
            var y0 = y+br+40/2;
            var bgw = pw-br*3-iw;
            var bgh = T.height("06ss");
            var mw = T.width("03mm");
            var mh = T.height("03mm");
            var mx = 27/2; // 19
            var ww = bgw-(47+8)/2;
            T.draw(ctx,"06ss",x0,y0,bgw,bgh);
            ctx.save();
            ctx.beginPath();
            ctx.rect(x0,y0,mx+ww*perc,bgh);
            ctx.closePath();
            ctx.clip();
            T.draw(ctx,"0jzb",x0,y0,bgw,bgh);
            ctx.restore();
            T.draw(ctx,"072s",x0,y0,bgw,bgh);
            T.draw(ctx,"03mm",x0+mx+ww*perc-3,y0+bgh/2-mh/2);
            if (alvl>0) {
                text(ctx,ach.bar,x0+bgw/2,y0+bgh/2+2,"22px"+FONT,"white","center","middle");
            }
        }
        if (data.tutorial<=1) {
            ctx.fillStyle="rgba(47,47,47,"+(0.5*(ttimes[1]/1000))+")";
            var x = zx;
            var y = zy;
            var w = 170;
            var h = 96/2;
            ctx.fillRect(x,y,w,h);
        }
        if (data.tutorial<=2) {
            ctx.fillStyle="rgba(47,47,47,"+(0.5*(ttimes[2]/1000))+")";
            var x = zx;
            var y = zy + 96/2;
            var w = zw;
            var h = zh - 96/2;
            ctx.fillRect(x,y,w,h);
        }
        if (data.tutorial<=3) {
            ctx.fillStyle="rgba(47,47,47,"+(0.5*(ttimes[3]/1000))+")";
            var x = zx + 170;
            var y = zy;
            var w = 165;
            var h = 96/2;
            ctx.fillRect(x,y,w,h);
        }
        if (data.tutorial<=8 && ttimes[8]>0) {
            ctx.fillStyle="rgba(47,47,47,0.5)";
            var x = zx + 335;
            var y = zy;
            var w = (zw-335);
            var h = 96/2;
            ctx.fillRect(x,y,w,h);
        }
        if (shopOpen || popup!==undefined || menu==="shop") {
        } else if (hover=="W") {
            var x = hx-14;
            var y = zy+75/2;
            var tid = "0ny4";
            var tw=T.width(tid);
            var th=T.height(tid);
            var y0=y+31/2;
            var m = 16/2;
            var line = 38/2;
            T.draw(ctx,tid,x,y);
            text(ctx,"Contribution to production",x+tw/2,y0+m+line/2,"25px"+FONT,"white","center","middle");

            y0+=m+line;
            for (var i=0; i<BUILDINGS.length; ++i) {
                if (data.buildLevel[i]>=0 && production>0) {
                    var col = i%3;
                    var row = Math.floor(i/3);
                    var ex = x+m+((tw-m*2)/3)*col;
                    var ey = y0+m+(m+line)*row;
                    var icon = BUILDINGS[i].icon[data.buildLevel[i]];
                    T.draw(ctx,icon,ex,ey,line,line);
                    text(ctx,(100*buildingProduction[i]/production).toFixed(2)+"%",ex+line+m,ey+line/2,"25px"+FONT,"white","left","middle");
                }
            }
        } else if (hover=="O") {
            var x = hx-14;
            var y = zy+75/2;
            var tid = "0ny4";
            var tw=T.width(tid);
            var th=T.height(tid);
            var y0=y+31/2;
            var m = 16/2;
            var line = 38/2;
            T.draw(ctx,tid,x,y);
            y0+=m;
            text(ctx,"Gain after Big Crunch:",x+m,y0+line/2,"25px"+FONT,"white","left","middle");
            text(ctx,this.pn(this.getOmegas(),"\u03A9"),x+tw-m,y0+line/2,"25px"+FONT,"white","right","middle");
            y0+=line+m;
            text(ctx,"Previous Big Crunch:",x+m,y0+line/2,"25px"+FONT,"white","left","middle");
            text(ctx,this.pn(data.prevOmega,"\u03A9"),x+tw-m,y0+line/2,"25px"+FONT,"white","right","middle");
            y0+=line+m;
            text(ctx,"Total gained Omega:",x+m,y0+line/2,"25px"+FONT,"white","left","middle");
            text(ctx,this.pn(data.stats.t.v.gomega,"\u03A9"),x+tw-m,y0+line/2,"25px"+FONT,"white","right","middle");
            y0+=line+m;
            text(ctx,"Current multiplier: ",x+m,y0+line/2,"25px"+FONT,"white","left","middle");
            text(ctx,"x"+this.pn(this.getOmegaMul(),""),x+tw-m,y0+line/2,"25px"+FONT,"white","right","middle");
            y0+=line+m;
            text(ctx,"After Big Crunch: ",x+m,y0+line/2,"25px"+FONT,"white","left","middle");
            text(ctx,"x"+this.pn(this.getOmegaMul(data.stats.t.v.gomega+this.getOmegas()),""),x+tw-m,y0+line/2,"25px"+FONT,"white","right","middle");
        } else if (hover=="U") {
            var x = hx-14;
            var y = zy+75/2;
            var tid = "0ny4";
            var tw=T.width(tid);
            var th=T.height(tid);
            var y0=y+31/2;
            var m = 8/2;
            var line = 36/2;
            T.draw(ctx,tid,x,y);
            text(ctx,"International System Prefixes",x+tw/2,y0+m+line/2,"25px"+FONT,"white","center","middle");
            y0+=m*4+line;
            for (var i=3; i<=30; i+=3) {
                var tx = x+m*2+(i/3>5?tw/2:0);
                var ty = y0+(line+m)*((i/3-1)%5);
                text(ctx,i==30?"a*":UNITS[i],tx,ty,"25px"+FONT,"white","left","middle");
                text(ctx,UNITSN[i],tx+tw/5.5,ty,"25px"+FONT,"white","center","middle");
                text(ctx,"10^"+i.toString(),tx+tw/2-m*4,ty,"25px"+FONT,"white","right","middle");
            }
        } else if (hover=="B") {
            var x = hx-126;
            var y = zy+75/2;
            var tid = "0dg5";
            var tw=T.width(tid);
            var th=T.height(tid);
            var y0=y+31/2;
            var m = 18/2;
            var line = 36/2;
            T.draw(ctx,tid,x,y);
            y0+=m;
            text(ctx,"Building Amount",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"xN",x+m,y0+line/2,"25px"+FONT,"white","left","middle");
            text(ctx,"Buy N buildings at once",x+tw-m,y0+line/2,"25px"+FONT,"white","right","middle");
            y0+=line+m;
            text(ctx,"MAX",x+m,y0+line/2,"25px"+FONT,"white","left","middle");
            text(ctx,"Buy maximum possible",x+tw-m,y0+line/2,"25px"+FONT,"white","right","middle");
            y0+=line+m;
            text(ctx,"NXT",x+m,y0+line/2,"25px"+FONT,"white","left","middle");
            text(ctx,"Buy based on research",x+tw-m,y0+line/2,"25px"+FONT,"white","right","middle");
            y0+=line+m;
            text(ctx,"[ press 'z' to change ]",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"[ press '0-9,.' to build ]",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
        }
    }
    this.drawBuildings = function (ctx,mouse) {
        var zx = W*0.28125;
        var zy = 0;
        var zw = W*0.71875;
        var zh = H*0.5+80/2;
        var b = 16;
        var bw = T.width("06cn");
        var bh = T.height("06cn");
        var iw = T.width("0d78");
        var ih = T.height("0d78");
        var tooltip = -1;
        for (var i=0; i<data.buildings.length; ++i) {
            if (data.buildLevel[i]>=0) {
                ctx.save();
                if (btimers[i]>=0) {
                    ctx.globalAlpha=1-(btimers[i]/BTIMER);
                    btimers[i]-=16;
                }
                var col = i%3;
                var row = Math.floor(i/3);
                var x = zx+b+(b+bw)*col;
                var y = zy+b+(b+bh)*row+80/2;
                var amount = data.buildingAmount=="MAX"?this.buildingMax(i,data.energy):(data.buildingAmount=="NXT"||data.buildingAmount=="MXT"?this.buildingNxt(i,data.buildingAmount=="NXT"):data.buildingAmount);
                var price = this.buildingPrice(i,amount);
                var sprite = price>data.energy?"06cn":"06w6";
                var arch = BUILDINGS[i];
                var icon = arch.icon[data.buildLevel[i]];
                var ib = (bh-iw)/2;
                T.draw(ctx,sprite,x,y);
                T.draw(ctx,icon,x+ib,y+ib);
                if (R["bicon"+i]===undefined) R["bicon"+i]=(new Rect(x+ib,y+ib,iw,ih)).small();
                if (R["bicon"+i].isInside(GM.x,GM.y)) tooltip=i;
                if (R["build"+i]===undefined) R["build"+i]=(new Rect(x,y,bw,bh)).small();
                if (price<=data.energy) {
                    if (mouse) this.addZone("build"+i,R["build"+i],"build",{target:i});
                    if (R["build"+i].isInside(GM.x,GM.y)) {
                        ctx.fillStyle="rgba(255,255,255,0.1)";
                        ctx.fillRect(x,y,bw,bh);
                    }
                }
                ctext(ctx,arch.name[data.buildLevel[i]],x+ib*2+iw,y+ib,"26px "+FONT,"black","left","top");
                ctext(ctx,data.buildings[i],x+bw-ib,y+ib,"26px "+FONT,"black","right","top");
                text(ctx,this.pn(price,"J")+(data.buildingAmount=="MAX"||data.buildingAmount=="NXT"||data.buildingAmount=="MXT"?"["+amount+"]":""),x+ib*2+iw,y+bh-ib*4,"26px "+FONT,"black","left","bottom");
                text(ctx,this.pn(buildingProduction[i]||this.getFutureProduction(i),"W"),x+bw-ib,y+bh-ib*4,"26px "+FONT,"black","right","bottom");
                ctx.restore();
            }
        }


        if (tooltip!=-1 && !shopOpen && popup==undefined && mouse) {
            var col = tooltip%3;
            var row = Math.floor(tooltip/3);
            var x = zx+b+(b+bw)*col-8/2;
            var y = zy+b+(b+bh)*row+80/2;
            var tid = "0at9";
            var tw=T.width(tid);
            var th=T.height(tid);
            var ty = y+bh-20/2;
            var y0=ty+31/2;
            var m = 8/2;
            var line = 38/2;
            var el = 0;
            var cxm = 0;
            cxm = -4/2;
            var cym=0;
            if (row==0) {
                cym=4/2;
            } else if (row>1) {
                tid="0o3r";
                ty = y-th+25/2;
                y0=ty+10/2;
                el = 2/2;
            }
            T.draw(ctx,tid,x,ty);
            var amount = data.buildingAmount=="MAX"?this.buildingMax(tooltip,data.energy):(data.buildingAmount=="NXT"||data.buildingAmount=="MXT"?this.buildingNxt(tooltip,data.buildingAmount=="NXT"):data.buildingAmount);
            var price = this.buildingPrice(tooltip,amount);
            y0+=m;
            // first line
            T.draw(ctx,"0odq",x+m,y0);
            text(ctx,this.pn(price,"J"),x+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            if (price>data.energy) {
                text(ctx,"In "+timer((price-data.energy)/production),x+tw-m,y0+line/2,"26px "+FONT,"white","right","middle");
            } else {
                text(ctx,"For "+amount,x+tw-m,y0+line/2,"26px "+FONT,"white","right","middle");
            }
            // second
            y0+=m+line+el;
            T.draw(ctx,"0jq7",x+m,y0);
            text(ctx,this.pn(buildingProduction[tooltip],"W"),x+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            text(ctx,(production?100*buildingProduction[tooltip]/production:0).toFixed(2)+"% of Total",x+tw-m,y0+line/2,"26px "+FONT,"white","right","middle");
            // third
            y0+=m+line+el;
            if (tooltip==0) {
                if (data.buildLevel[tooltip]==0) {
                    ctext(ctx,"Evolve to increase production",x+tw/2,y0+line/2,"26px "+FONT,"white","center","middle");
                } else {
                    T.draw(ctx,BUILDINGS[tooltip].icon[data.specie-1],x+m,y0,line,line);
                    text(ctx,"x"+this.pn(BEVO[tooltip][data.buildLevel[tooltip]],"",true),x+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
                    if (data.mul3>0) {
                        T.draw(ctx,"0kje",x+tw/3+m,y0,line,line);
                        text(ctx,timer(data.mul3/1000),x+tw/3+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
                    }
                }
            } else {
                if (data.buildLevel[tooltip]==0) {
                    text(ctx,"Build "+BUILDINGS[tooltip].elvl[1]+" to upgrade",x+tw/2,y0+line/2,"26px "+FONT,"white","center","middle");
                } else {
                    if (data.buildLevel[tooltip]<BEVO[tooltip].length-1) {
                        text(ctx,"Build "+BUILDINGS[tooltip].elvl[data.buildLevel[tooltip]+1]+" to upgrade",x+tw-m,y0+line/2,"26px "+FONT,"white","right","middle");
                    } else if (data.mul3>0) {
                        T.draw(ctx,"0kje",x+tw/3+m,y0,line,line);
                        text(ctx,timer(data.mul3/1000),x+tw/3+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
                    }
                    T.draw(ctx,BUILDINGS[tooltip].icon[0],x+m,y0,line,line);
                    text(ctx,"x"+this.pn(BEVO[tooltip][data.buildLevel[tooltip]],"",true),x+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
                }
            }
            // fourth
            y0+=m+line+el;
            // Building upgrade bonus
            T.draw(ctx,BUILDINGS[tooltip].icon[data.buildLevel[tooltip]],x+m,y0,line,line);
            text(ctx,"x"+this.pn3(Math.pow(2,data.buildUpgrade[tooltip]),"",true),x+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            // Global buildings bonus
            T.draw(ctx,"06k3",x+tw/3+m,y0,line,line);
            text(ctx,"x"+this.pn3(data.bonus.bmul,"",true),x+tw/3+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            // Achievement bonus bonus
            T.draw(ctx,"04rx",x+(tw/3)*2+m,y0,line,line);
            text(ctx,"x"+this.pn3(this.getAchievement(),""),x+(tw/3)*2+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            // fifth
            y0+=m+line+el;
            // premium
            T.draw(ctx,"0ixh",x+m,y0,line,line);
            text(ctx,"x"+this.pn3(this.getPremium(),"",true),x+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            // Omega bonus
            T.draw(ctx,"0a7b",x+tw/3+m,y0,line,line);
            text(ctx,"x"+this.pn3(this.getOmegaMul(),""),x+tw/3+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            // Omega bonus
            T.draw(ctx,"0h39",x+(tw/3)*2+m,y0,line,line);
            text(ctx,"x"+this.pn3(OM.prod,"",true),x+(tw/3)*2+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            // sixth
            y0+=m+line+el+cxm;
            T.draw(ctx,"0gzl",x+m,y0,line,line);
            text(ctx,"x"+this.pn3(this.calcGmul(),""),x+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            // tech bonus
            text(ctx,"x"+this.pn(data.bonus.tmul,"",true),x+(tw/2),y0+line/2,"26px "+FONT,"white","center","middle");
            T.draw(ctx,"05zy",x+(tw/3)*2+m,y0,line,line);
            text(ctx,"x"+this.pn3(this.calcFmul(),""),x+(tw/3)*2+m*2+line,y0+line/2,"26px "+FONT,"white","left","middle");
            // seventh
            y0+=m+line+el-cxm;
            var amount = Math.floor(Math.log(data.bonus.tmul)/Math.log(2));
            var x0 = x+tw/2;
            x0-=((amount-1)*m+(amount)*line)/2;
            for (var i=1; i<=amount; ++i) {
                T.draw(ctx,TMULICON[i-1],x0+(m+line)*(i-1),y0+cym,line,line);
            }
        }
    }
    this.drawQuantum = function (ctx,mouse) {
        var zx = W*0.28125;
        var zy = 0;
        var zw = W*0.71875;
        var zh = H*0.5+80/2;
        var bpy = 6.25
        var bw = T.width("07y4");
        var bh = T.height("07y4");
        var tw = T.width("09s6");
        var th = T.height("09s6");
        var tooltip = -1;
        var sprite = "07y4";
        var potentialBet = 0;

        if ((new Rect(zx + zw / 3 - bw / 2,zy + zh / bpy,bw,bh)).small().isInside(GM.x,GM.y)) {
            T.draw(ctx,"0567",zx + zw / 3 - bw / 2,zy + zh / bpy);
        }
        else{
            if (data.betMode == 0) T.draw(ctx,"0567",zx + zw / 3 - bw / 2,zy + zh / bpy);
            else T.draw(ctx,sprite,zx + zw / 3 - bw / 2,zy + zh / bpy);
        }
        text(ctx,"1%",zx + zw / 3,zy + zh / bpy + bh / 2,"30px "+FONT,"black","center","middle");
        if (mouse) this.addZone("Bet0.1",(new Rect(zx + zw / 3 - bw / 2,zy + zh / bpy,bw,bh)).small(),"nextBet",{target:0});

        if ((new Rect(zx + zw / 2 - bw / 2,zy + zh / bpy,bw,bh)).small().isInside(GM.x,GM.y)) {
            T.draw(ctx,"0567",zx + zw / 2 - bw / 2,zy + zh / bpy);
        }
        else{
            if (data.betMode == 1) T.draw(ctx,"0567",zx + zw / 2 - bw / 2,zy + zh / bpy);
            else T.draw(ctx,sprite,zx + zw / 2 - bw / 2,zy + zh / bpy);
        }
        text(ctx,"10%",zx + zw / 2,zy + zh / bpy + bh / 2,"30px "+FONT,"black","center","middle");
        this.addZone("Bet1.0",(new Rect(zx + zw / 2 - bw / 2,zy + zh / bpy,bw,bh)).small(),"nextBet",{target:1});

        if ((new Rect(zx + zw / 1.5 - bw / 2,zy + zh / bpy,bw,bh)).small().isInside(GM.x,GM.y)) {
            T.draw(ctx,"0567",zx + zw / 1.5 - bw / 2,zy + zh / bpy);
        }
        else{
            if (data.betMode == 2) T.draw(ctx,"0567",zx + zw / 1.5 - bw / 2,zy + zh / bpy);
            else T.draw(ctx,sprite,zx + zw / 1.5 - bw / 2,zy + zh / bpy);
        }
        text(ctx,"100%",zx + zw / 1.5,zy + zh / bpy + bh /2,"30px "+FONT,"black","center","middle");
        if (mouse) this.addZone("Bet10.0",(new Rect(zx + zw / 1.5 - bw * 0.75,zy + zh / bpy,bw*1.5,bh)).small(),"nextBet",{target:2});

        potentialBet = data.energy * Math.pow(10,-2 + data.betMode);
        if (data.betAmount == 0 && potentialBet >= 1 && (electron==undefined||Date.now()-electron.t>2000)){
            var BetSprite = "05x5";
            var betText = "PLACE BET " + this.pn(potentialBet,"J");
            if (mouse) this.addZone("PlayQuantum",(new Rect(zx + zw / 2 - bw / 2,zy + zh / 1.13,bw,bh)).small(),"bet");
        }
        else if (data.betAmount == 0 && electron!==undefined && Date.now()-electron.t<2000) {
            var BetSprite = "0567";
            var betText = "SEARCHING";
        }
        else {
            var BetSprite = "0567";
            var betText = "BETTING " + this.pn(data.betAmount, "J");
        }
        T.draw(ctx,BetSprite,zx + zw / 2 - bw * 0.75,zy + zh / 1.13,bw*1.5,bh);
        text(ctx,betText,zx + zw / 2,zy + zh / 1.13 + bh / 2,"28px "+FONT,"black","center","middle");


        // draw function
        var x0=zx + zw / 2 - tw  / 2;
        var y0=zy + zh / 1.77 - th / 2;
        T.draw(ctx,"09s6",x0,y0);
        x0+=12;
        var brects=[];
        if (FN!=undefined) {
            var gh = T.height("09s6");
            var gw = T.width("09s6");
            var ymin = y0+gh*0.05;
            var ymax = y0+gh*0.82;
            var points=FN.getPoints();
            var areas=FN.getAreas();
            var total=0;
            for (var i=0;i<areas.length; ++i) {
                total+=areas[i];
            }
            for (var i=0;i<areas.length; ++i) {
                var x1=x0+(points.length/areas.length)*i;
                brects[i]=(new Rect(x1,y0,Math.floor(points.length/areas.length)-1,gh)).small();
                if (electron==undefined && mouse) this.addZone("Zone_"+i,brects[i],"betzone",{target:i});
                if ((brects[i].isInside(GM.x,GM.y) && electron==undefined)||(electron!==undefined&&electron.z==i)) {
                    ctx.save();
                    ctx.beginPath();
                    var p0=Math.floor((points.length/areas.length)*i);
                    var p1=Math.floor((points.length/areas.length)*(i+1))-1;
                    ctx.moveTo(points[p0].x+x0,ymax+20);
                    for (var j=p0;j<=p1;++j) {
                        ctx.lineTo(points[j].x+x0,mapf(points[j].y,0,FN.max,ymax,ymin))
                    }
                    ctx.lineTo(points[p1].x+x0,ymax+20);
                    ctx.closePath();
                    ctx.fillStyle="rgba(52, 143, 197,0.5)";
                    ctx.fill();
                    ctx.restore();
                }
            }
            ctx.save();
            ctx.rect(x0-5,y0+5,gw-12,gh-10);
            ctx.clip();
            ctx.beginPath();
            ctx.lineCap="round";
            ctx.moveTo(x0-7,mapf(FN.x2y(FN.i2x(-7))-FN.min,0,FN.max,ymax,ymin));
            for (var i=0; i<points.length; ++i) {
                ctx.lineTo(points[i].x+x0,mapf(points[i].y,0,FN.max,ymax,ymin));
            }
            ctx.lineTo(x0+gw-17,mapf(FN.x2y(FN.i2x(519))-FN.min,0,FN.max,ymax,ymin));
            ctx.lineWidth=9;
            ctx.strokeStyle="rgba(255,255,255,0.1)";
            ctx.stroke();
            ctx.lineWidth=7;
            ctx.strokeStyle="rgba(255,255,255,0.5)";
            ctx.stroke();
            ctx.lineWidth=5;
            ctx.strokeStyle="rgba(125, 249, 255,0.5)";
            ctx.stroke();
            ctx.lineWidth=3;
            ctx.strokeStyle="rgba(44, 117, 255,0.7)";
            ctx.stroke();
            ctx.lineWidth=1;
            ctx.strokeStyle="rgba(49, 55, 253,1)";
            ctx.stroke();
            ctx.restore();
            if (electron!==undefined) {
                var diff = Date.now()-electron.t;
                if (diff>2000) {
                    T.draw(ctx,"0mds",x0+electron.x-T.width("0mds")/2,mapf(electron.y,0,1,mapf(points[electron.x].y,0,FN.max,ymax,ymin),ymax)-T.height("0mds")/2);
                    if (electron.won) text(ctx,"You won: "+this.pn(electron.won,"J"),zx+zw/2,(ymax+ymin)/2-50,"36px"+FONT,"white","center","middle","black",2);
                } else {
                    var delta = Math.pow((2000-diff)/2000,2);
                    var dx = Math.floor(electron.x+1200*delta)%(2*points.length);
                    var dy = Math.abs(electron.y-delta);
                    if (dx>=points.length) {
                        dx=clamp((2*points.length)-dx,0,points.length-1);
                    }
                    dy=electron.y;
                    T.draw(ctx,"0mds",x0+dx-T.width("0mds")/2,mapf(dy,0,1,mapf(points[dx].y,0,FN.max,ymax,ymin),ymax)-T.height("0mds")/2);
                }
            }
        }
        T.draw(ctx,"0b1s",x0-12,y0);
        if (FN!=undefined) {
            var gh = T.height("09s6");
            var gw = T.width("09s6");
            var ymin = y0+gh*0.02;
            var ymax = y0+gh*0.80;
            var points=FN.getPoints();
            var areas=FN.getAreas();
            var total=0;
            for (var i=0;i<areas.length; ++i) {
                total+=areas[i];
            }
            var prob = 0.97;
            if (this.dimBuff("gambling")==2) prob=0.99;
            for (var i=0;i<areas.length; ++i) {
                var x1=x0+(points.length/areas.length)*i;
                text(ctx,(100*areas[i]/total).toFixed(2)+"%",x1+(points.length/areas.length)/2,ymax+gh*0.07,"24px "+FONT,"black","center","middle",brects[i].isInside(GM.x,GM.y)&& electron==undefined?"black":undefined);
                text(ctx,"x"+(prob/(areas[i]/total)).toFixed(2),x1+(points.length/areas.length)/2,ymax+gh*0.15,"24px "+FONT,"black","center","middle",brects[i].isInside(GM.x,GM.y)&& electron==undefined?"black":undefined);
            }
            text(ctx,"Probability", x0-20,ymax+gh*0.07,"24px "+FONT,"black","right","middle");
            text(ctx,"Multiplier",x0-20,ymax+gh*0.15,"24px "+FONT,"black","right","middle");
        }
        T.draw(ctx,"0nww",zx + zw / 1.1 - 6,zy + zh / 6);
        var trect = (new Rect(zx + zw / 1.1 - 6 ,zy + zh / 6,T.width("0nww"),T.height("0nww"))).small();
        if (trect.isInside(GM.x,GM.y)) {
            var x = zx + zw / 1.1-134;
            var y = zy + zh / 6+75/2;
            var tid = "0dg5";
            var tw=T.width(tid);
            var th=T.height(tid);
            var y0=y+31/2;
            var m = 18/2;
            var line = 36/2;
            T.draw(ctx,tid,x,y);
            y0+=m;
            text(ctx,"Quantum Gambling",x+tw/2,y0+line/2,"30px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"Find the electron position",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"You have 8 possible choices",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"If you find it you'll earn J",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"Multiplier is the ratio you win",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"J is subtracted upon betting",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
        }
    }
    this.drawED = function (ctx, mouse) {
        var zx = W*0.28125;
        var zy = 0 + 40;
        var tzw = T.width("0ch8");
        var tzh = T.height("0ch8") - 40;
        var gix = zx + 7; // Grid init X
        var giy = zy + 15; // Grid init Y

        var Enemy = this.getEnemy();
        var Tower = this.getTower();
        var map = getDataED();
        var m = this.calcEDomegB(0);

        T.draw(ctx,"0ch8",zx-2,zy-40);

        var info = undefined;

        var enemyS = data.edlvl%7;
        var needShield = enemyS%2;
        var enemies = ["0h1k","01vh","0gc4","07wl","0as5","0giy","0dsd"];
        var shield = "0d82";

        var x = gix;
        var y = giy;
        var num = 0;

        for (var i=0;i<10;++i) {
            for (var j=0;j<10;++j) {
                if (data.ed[num]==-1) {
                    if (num==map[m][0]) T.draw(ctx,"0i95",x,y);
                    else if (num==map[m][map[m].length-1]) T.draw(ctx,"0a44",x,y);
                    else T.draw(ctx,"0ovp",x,y);
                }
                else {
                    if (data.ed[num]>=1) {
                        T.draw(ctx,"0cy0",x,y);
                        text(ctx,data.ed[num],x+T.width("0ovp")/2,y+T.height("0ovp")/2,"18px"+FONT,"white","center","top");
                    }
                    var grect = (new Rect(x,y,T.width("0ovp"),T.height("0ovp"))).small();
                    if (grect.isInside(GM.x,GM.y)) {
                        info=num;
                        if (ederase==false) {
                            ctx.fillStyle="rgba(255,255,255,0.3)";
                            ctx.fillRect(x,y,T.width("0ovp"),T.height("0ovp")); 

                            if (data.ed[num]>=1) {
                                ctx.beginPath();
                                ctx.arc(x+T.width("0ovp")/2,y+T.height("0ovp")/2,T.width("0ovp")*Tower.range,0,Math.PI*2);
                                ctx.closePath();
                                ctx.fillStyle="rgba(255,255,255,0.3)";
                                ctx.fill();
                            }
                        } else {
                            ctx.fillStyle="rgba(255,0,0,0.3)";
                            ctx.fillRect(x,y,T.width("0ovp"),T.height("0ovp")); 
                        }
                        if (mouse) this.addZone("Grid_"+num,grect,"edgrid",{target:num});
                    }
                }
                y=y+1+T.height("0ovp");
                num++;
            }
            y=giy;
            x=x+1+T.width("0ovp");
        }

        if (info!==undefined && data.ed[info]>=1) {
            T.draw(ctx,"0j2c",zx+tzw*0.47,zy+tzh*0.05);
            text(ctx,"Standard Collector",zx+tzw*0.64,zy+tzh*0.11,"26px"+FONT,"white","center","middle");
            text(ctx,"Charge: "+data.ed[info]+"/"+this.calcEDomegB(1),zx+tzw*0.64,zy+tzh*0.17,"26px"+FONT,"white","center","middle");
            text(ctx,"Damage: "+Tower.dps,zx+tzw*0.64,zy+tzh*0.22,"26px"+FONT,"white","center","middle");
            text(ctx,"Speed: "+Tower.aspd.toFixed(2)+" s",zx+tzw*0.64,zy+tzh*0.27,"26px"+FONT,"white","center","middle");
        }

        for (var i=0;i<edenemy.length;++i) {
            var maxHP = this.getEnemy().hp;

            if (edenemy[i].draw.x !== undefined && edenemy[i].draw.y !== undefined) {
                T.draw(ctx,enemies[enemyS],edenemy[i].draw.x,edenemy[i].draw.y);

                ctx.fillStyle="rgba(255,0,0,0.7)";
                ctx.fillRect(edenemy[i].draw.x,edenemy[i].draw.y+1,T.width("0ovp"),5);
                
                var bw = (T.width(enemies[enemyS])*edenemy[i].hp)/maxHP;

                ctx.fillStyle="rgba(0,255,0,0.7)";
                ctx.fillRect(edenemy[i].draw.x,edenemy[i].draw.y+1,bw,5);
            }
        }

        // EDOMEGA
        var ox = W*0.61;
        var oy = H*0.29;
        var scale = 0.75;
        var edom = [
            {
                name: "Constructor",
                icon: "0ood",
                text: "Redesign your map",
                current: "Level: "+(this.calcEDomegB(0)+1),
                cost: this.calcEDomegaP(0),
            },
            {
                name: "Battery Engineer",
                icon: "0orc",
                text: "Increase max Charge",
                current: this.calcEDomegB(1)+" charge",
                cost: this.calcEDomegaP(1),
            },
            {
                name: "Click Master",
                icon: "0ich",
                text: "Increase charge x click",
                current: this.calcEDomegB(2)+" per click",
                cost: this.calcEDomegaP(2),
            },
            {
                name: "The collector",
                icon: "0ezb",
                text: "Increase attack",
                current: this.calcEDomegB(3)+" Attack",
                cost: this.calcEDomegaP(3),
            },
        ];

        for (var i=0;i<4;++i) { 
            if (data.omega < this.calcEDomegaP(i)){
                T.draw(ctx,"0grd",ox+T.width("0grd")*scale*1.165*i,oy,T.width("0grd")*scale,T.height("0grd")*scale);
            }
            else {
                if (i!=0){
                    T.draw(ctx,"0j0g",ox+T.width("0j0g")*scale*1.165*i,oy,T.width("0j0g")*scale,T.height("0j0g")*scale);
                    var orect=(new Rect(ox+T.width("0j0g")*scale*1.165*i,oy,T.width("0j0g")*scale,T.height("0j0g")*scale)).small();
                    if (orect.isInside(GM.x,GM.y)) {
                        ctx.fillStyle="rgba(255,255,255,0.3)";
                        ctx.fillRect(ox+T.width("0j0g")*scale*1.165*i,oy,T.width("0j0g")*scale,T.height("0j0g")*scale);
                        if (mouse) this.addZone("Omed_"+i,orect,"omed",{target:i});
                    }
                }
                else {
                    var maps=getDataED();
                    if (data.omegas[8]<maps.length){
                        T.draw(ctx,"0j0g",ox+T.width("0j0g")*scale*1.165*i,oy,T.width("0j0g")*scale,T.height("0j0g")*scale);
                        var orect=(new Rect(ox+T.width("0j0g")*scale*1.165*i,oy,T.width("0j0g")*scale,T.height("0j0g")*scale)).small();
                        if (orect.isInside(GM.x,GM.y)) {
                            ctx.fillStyle="rgba(255,255,255,0.3)";
                            ctx.fillRect(ox+T.width("0j0g")*scale*1.165*i,oy,T.width("0j0g")*scale,T.height("0j0g")*scale);
                            if (mouse) this.addZone("Omed_"+i,orect,"omed",{target:i});
                        }
                    }
                }
            }
            T.draw(ctx,edom[i].icon,ox+T.width("0grd")*scale*1.165*i+(T.width("0grd")*scale)/2-T.width(edom[i].icon)/2,oy+10);
            text(ctx,edom[i].name,ox+T.width("0grd")*scale*1.165*i+(T.width("0grd")*scale)/2,oy+80,"22px"+FONT,"black","center","middle");
            text(ctx,edom[i].text,ox+T.width("0grd")*scale*1.165*i+(T.width("0grd")*scale)/2,oy+90,"14px"+FONT,"black","center","middle");
            text(ctx,edom[i].current,ox+T.width("0grd")*scale*1.165*i+(T.width("0grd")*scale)/2,oy+130,"22px"+FONT,"black","center","middle");
            text(ctx,this.pn(edom[i].cost,"\u03A9",true),ox+T.width("0grd")*scale*1.165*i+(T.width("0grd")*scale)/2,oy+145,"22px"+FONT,"black","center","middle");
        }

        // Levels
        var neededMonsters=data.dimensions[6]>0?20:25;

        text(ctx,"LEVEL: "+(data.edlvl+1),zx+tzw*0.868,zy+tzh*0.11,"34px"+FONT,"white","center","middle");
        if (data.edlvl==data.edmlvl) {
            text(ctx,"Enemies Killed:",zx+tzw*0.868,zy+tzh*0.16,"22px"+FONT,"white","center","middle");
            text(ctx,data.edmk+"/"+neededMonsters,zx+tzw*0.868,zy+tzh*0.195,"22px"+FONT,"white","center","middle");
        }

        if (data.edlvl<data.edmlvl) {
            T.draw(ctx,"09sg",zx+tzw*0.94,zy+tzh*0.08,T.width("09sg")*0.5,T.height("09sg")*0.5);
            var lvlrect=(new Rect(zx+tzw*0.94,zy+tzh*0.08,T.width("09sg")*0.5,T.height("09sg")*0.5)).small();
            if (lvlrect.isInside(GM.x,GM.y)) {
                if (mouse) this.addZone("edlvlup",lvlrect,"edlvlup");
            }
        }

        if (data.edlvl>=1) {
            ctx.save();
            ctx.translate(W*0.5,H*0.5);
            ctx.scale(-1,1);
            T.draw(ctx,"09sg",-W*0.353,-H*0.398,T.width("09sg")*0.5,T.height("09sg")*0.5);
            ctx.restore();
            var dlvlrect=(new Rect(zx+tzw*0.768,zy+tzh*0.08,T.width("09sg")*0.5,T.height("09sg")*0.5)).small();
            if (dlvlrect.isInside(GM.x,GM.y)) {
                if (mouse) this.addZone("edlvld",dlvlrect,"edlvld");
            }
        }

        // Bottom Rectangle
        var rwrd= 0;
        if (mExtra!==undefined && mExtra.td!==undefined) rwrd+=mExtra.td;
        text(ctx,"Enemy HP: "+Enemy.hp,zx+tzw*0.868,zy+tzh*0.29,"26px"+FONT,"white","center","middle");
        text(ctx,"Spawn Rate: "+Enemy.srate,zx+tzw*0.868,zy+tzh*0.33,"26px"+FONT,"white","center","middle");
        text(ctx,"Speed: "+Enemy.speed,zx+tzw*0.868,zy+tzh*0.37,"26px"+FONT,"white","center","middle");
        text(ctx,"Reward: "+this.pn(this.tdNRG()+rwrd,"J"),zx+tzw*0.868,zy+tzh*0.41,"26px"+FONT,"white","center","middle");
        
        // Draw Shoots
        if (edShoots.length>0) {
            for (var i=0; i<edShoots.length;++i) {
                T.draw(ctx,edShoots[i].img,edShoots[i].x-T.width(edShoots[i].img)/2,edShoots[i].y-T.height(edShoots[i].img)/2);
            }
        }
    }
    this.drawExperiment = function (ctx, mouse) {
        var zx = W*0.28125;
        var zy = 0 + 40;
        var zw = W*0.71875;
        var zh = H*0.5+80/2;
        var tzw = zw;
        var tzh = zh - 40;

        var tow = T.width(labParts[0] + "_2");
        var toh = T.height(labParts[0] + "_2");
        var omarginx = [-15,0,15];

        var tbtw = T.width("06wt");
        var tbth = T.height("06wt");
        var bdistx = [-57,0,57];
        var ButtonHourSprites = ["06wt","0mlv","0j5l"];

        var barSprite = "0p5d";
        var tbsw = T.width(barSprite);
        var tbsh = T.height(barSprite);
        var unlocked = Math.min(12,Math.max(data.lab.length,data.specie+1));
        var labPages = Math.ceil(unlocked/6);

        var fAllSprite = "05k6"
        var tallw = T.width(fAllSprite);
        var tallh = T.height(fAllSprite);

        var collectS = "0fkl";
        var tcw = T.width(collectS);
        var tch = T.height(collectS);

        var crossS = "063t";
        var tcrossw = T.width(crossS);
        var tcrossh = T.height(crossS);

        var sprite = 6*labPage;
        for (var i=0;i<2; ++i) {
            for (var j=0;j<3; j++) {
                if (sprite < unlocked && (nn(data.lab[sprite]) || sprite<=data.specie)){
                    T.draw(ctx,"tu25",(zx+tzw*(0.25*(j+1))-tow/2)+omarginx[j],(zy+tzh*(0.25*(i+1))-toh/2)+i*60);
                    if (sprite<=data.specie && !nn(data.lab[sprite])) {
                        T.draw(ctx,labParts[sprite] + "_0",(zx+tzw*(0.25*(j+1))-tow/2)+omarginx[j],(zy+tzh*(0.25*(i+1))-toh/2)+i*60);
                        for (var k=0;k<3; k++){
                            T.draw(ctx,ButtonHourSprites[k],(zx+tzw*(0.25*(j+1)))+omarginx[j]-tbtw/2+bdistx[k],(zy+tzh*(0.24*(i+1)))-tbth+toh/2+i*63);
                            var nrg = (data.stats.t.m.prod*24*60*60)/((Math.min(12,data.specie+1))*14);
                            if (k==1) nrg*=3;
                            else if (k==2) nrg*=7;
                            text(ctx,this.pn(nrg,"J"),((zx+tzw*(0.25*(j+1)))+omarginx[j]-tbtw/2+bdistx[k])+tbtw/2,((zy+tzh*(0.24*(i+1)))-tbth+toh/2+i*63)+tbth*0.75,"20px"+FONT,"white","center","middle");
                            if (nrg!=0) {
                                if (mouse) this.addZone("BtHour_"+sprite+"_"+k,(new Rect((zx+tzw*(0.25*(j+1)))+omarginx[j]-tbtw/2+bdistx[k],(zy+tzh*(0.24*(i+1)))-tbth+toh/2+i*63,tbtw,tbth)).small(),"hourButtons",{specie:sprite,target:k});
                                var x = (zx+tzw*(0.25*(j+1)))+omarginx[j]-tbtw/2+bdistx[k];
                                var y = (zy+tzh*(0.24*(i+1)))-tbth+toh/2+i*63;
                                if ((new Rect(x,y,tbtw,tbth)).small().isInside(GM.x,GM.y)) {
                                    ctx.fillStyle="rgba(255,255,255,0.3)";
                                    ctx.fillRect(x,y,tbtw,tbth);
                                }
                            }
                        }
                    }
                    else{
                        if (data.lab[sprite].todo > 0){
                            if (data.lab[sprite].todo/data.lab[sprite].init > 0.5){
                                T.draw(ctx,labParts[sprite] + "_0",(zx+tzw*(0.25*(j+1))-tow/2)+omarginx[j],(zy+tzh*(0.25*(i+1))-toh/2)+i*60);
                            }
                            else if (data.lab[sprite].todo/data.lab[sprite].init > 0){
                                T.draw(ctx,labParts[sprite] + "_1",(zx+tzw*(0.25*(j+1))-tow/2)+omarginx[j],(zy+tzh*(0.25*(i+1))-toh/2)+i*60);
                            }

                            text(ctx,timer(data.lab[sprite].todo/1000),(zx+tzw*(0.25*(j+1)))+omarginx[j]-tow*0.3,(zy+tzh*(0.24*(i+1)))-tbth+toh/2+i*63+tbsh*0.44,"32px"+FONT,"rgba(143,201,255,1)","center","middle");
                            T.draw(ctx,crossS,((zx+tzw*(0.25*(j+1))-tow/2)+omarginx[j])+tow*0.98-tcrossw,(zy+tzh*(0.255*(i+1))-toh/2)+i*60);
                            this.addZone("CancellLab_"+sprite,(new Rect(((zx+tzw*(0.25*(j+1))-tow/2)+omarginx[j])+tow*0.98-tcrossw,(zy+tzh*(0.255*(i+1))-toh/2)+i*60,tcrossw,tcrossh)).small(),"CancellLab",{target:sprite});
                        }
                        else{
                            T.draw(ctx,labParts[sprite] + "_2",(zx+tzw*(0.25*(j+1))-tow/2)+omarginx[j],(zy+tzh*(0.25*(i+1))-toh/2)+i*60);
                            T.draw(ctx,collectS,(zx+tzw*(0.25*(j+1)))+omarginx[j]-tcw*0.165,(zy+tzh*(0.245*(i+1)))-tbth+toh/2+i*63);
                            if (mouse) this.addZone("Collect_"+sprite,(new Rect((zx+tzw*(0.25*(j+1)))+omarginx[j]-tcw*0.165,(zy+tzh*(0.245*(i+1)))-tbth+toh/2+i*63,tcw,tch)).small(),"Collect",{target:sprite});
                            var x = (zx+tzw*(0.25*(j+1)))+omarginx[j]-tcw*0.165;
                            var y = (zy+tzh*(0.245*(i+1)))-tbth+toh/2+i*63;
                            if ((new Rect(x,y,tcw,tch)).small().isInside(GM.x,GM.y)) {
                                ctx.fillStyle="rgba(255,255,255,0.1)";
                                ctx.fillRect(x+3,y+3,tcw*0.95,tch*0.95);
                            }
                        }
                        text(ctx,this.pn(data.lab[sprite].nrg,"J"),(zx+tzw*(0.25*(j+1)))+omarginx[j]-tow*0.3,(zy+tzh*(0.24*(i+1)))-tbth+toh/2+i*63+tbsh*0.79,"22px"+FONT,"white","center","middle");
                    }
                }
                sprite++;
            }
        }

        //Set all experiments
        if (unlocked == 12) {
	        var x = zx+tzw/2-tallw/2-5-T.width("9wxp");
	        T.draw(ctx,"9wxp",x,zy+tzh-tallh);
	        var any = false;
	        for (var i = 0; i < 12; ++i) if (i<=data.specie && !nn(data.lab[i])) any = true;
	        if (any) {
		        for (var i = 0; i < 3; ++i) {
			        if (mouse) this.addZone("setAll"+i,(new Rect(x+101+i*T.height("9wxp")*0.6,zy+tzh-T.height("02pq")+T.height("9wxp")*0.2+1,T.height("9wxp")*0.6,T.height("9wxp")*0.6)).small(),"setAllExp",{target:i,max:unlocked});
			        if ((new Rect(x+101+i*T.height("9wxp")*0.6,zy+tzh-T.height("02pq")+T.height("9wxp")*0.2+1,T.height("9wxp")*0.6,T.height("9wxp")*0.6)).small().isInside(GM.x,GM.y)) {
			            ctx.fillStyle="rgba(255,255,255,0.3)";
			            ctx.fillRect(x+101+i*T.height("9wxp")*0.6,zy+tzh-T.height("02pq")+T.height("9wxp")*0.2+1,T.height("9wxp")*0.6,T.height("9wxp")*0.6);
			        }
		        }
	        }
        }
        
        //Finish all for 250 UM
        T.draw(ctx,fAllSprite,zx+tzw/2-tallw/2,zy+tzh-tallh);
        var AllEnergyObtain = 0;
        var CurrentInvestigations = 0;
        for (var i = 0; i < unlocked; i++){
            if (nn(data.lab[i])){
                AllEnergyObtain+=data.lab[i].nrg;
                if (data.lab[i].init == 60*60*1000*12) CurrentInvestigations++;
            }
        }
        if (AllEnergyObtain!=0 && CurrentInvestigations >= 1){
            if (mouse && purchasing===undefined) this.addZone("buyfall",(new Rect(zx+tzw/2-tallw/2,zy+tzh-tallh,tallw,tallh)).small(),"buy",{target:"fall"});
            if ((new Rect(zx+tzw/2-tallw/2,zy+tzh-tallh,tallw,tallh)).small().isInside(GM.x,GM.y)) {
                ctx.fillStyle="rgba(255,255,255,0.1)";
                ctx.fillRect(zx+tzw/2-tallw/2,zy+tzh-tallh,tallw,tallh*0.95);
                ctx.fillStyle="rgba(0,0,0,0.8)";
                ctx.fillRect(zx+tzw/2-tallw/2,zy+tzh-1.5*tallh,tallw,tallh*0.5);
                text(ctx,"You will obtain: "+this.pn(AllEnergyObtain,"J"),zx+tzw/2-tallw/2+8,zy+tzh-tallh-10,"26px"+FONT,"white","left","left");
            }
        }

        //Claim all experiments
        T.draw(ctx,"02pq",zx+tzw/2+5+tallw/2,zy+tzh-tallh);
        var anyClaim = false;
        for (var i = 0; i < unlocked; i++){
            if (nn(data.lab[i]) && data.lab[i].todo <= 0) anyClaim = true;
        }
        
        if (anyClaim) {
            if (mouse) this.addZone("clall",(new Rect(zx+tzw/2+5+tallw/2,zy+tzh-T.height("02pq"),T.width("02pq"),T.height("02pq"))).small(),"clall",{target:unlocked});
            if ((new Rect(zx+tzw/2+5+tallw/2,zy+tzh-T.height("02pq"),T.width("02pq"),T.height("02pq"))).small().isInside(GM.x,GM.y)) {
                ctx.fillStyle="rgba(255,255,255,0.1)";
                ctx.fillRect(zx+tzw/2+5+tallw/2,zy+tzh-T.height("02pq"),T.width("02pq"),T.height("02pq")*0.95);
            }
        }

        if (unlocked >= 6){
            var nw=T.width("09sg");
            var nh=T.height("09sg");
            T.draw(ctx,"09sg",zx+tzw-9-nw,zy+tzh/2-10-nh/2);
            ctx.save();
            ctx.translate(zx+9+nw/2,zy-10+tzh/2)
            ctx.scale(-1,1);
            T.draw(ctx,"09sg",-nw/2,-nh/2);
            ctx.restore();
            if (mouse) this.addZone("expnext",(new Rect(zx+tzw-9-nw,zy+tzh/2-10-nh/2,nw,nh)).small(),"arrowexp",{target:(labPage+1)%labPages});
            if (mouse) this.addZone("expprev",(new Rect(zx+9,zy-10+tzh/2-nh/2,nw,nh)).small(),"arrowexp",{target:(labPage-1+labPages)%labPages});
        }
    }
    this.drawGalaxies = function (ctx, mouse) {
        var zx = W*0.28125;
        var zy = 40;
        var zw = W*0.71875;
        var zh = H*0.5+80/2;

        var btw = T.width("0b62");
        var bth = T.height("0b62");
        var bSprite = "0b62";
        var NbSprite = "0bfq";

        var icon01 = "0kcs";
        var icon02 = "0gwu";
        var iconw = T.width(icon01);
        var iconh = T.height(icon01);

        var bubbleW = T.width("04c4");
        var bubbleH = T.height("04c4");

        T.draw(ctx,"0k2u",zx + zw / 2 - T.width("0k2u") / 2,zy + zh / 2 - T.height("0k2u") / 1.8);
        text(ctx,"MULTIPLIER: "+this.pn(this.calcGmul()),zx + zw * 0.633 + (btw/2),zy + zh * 0.145,"40px"+FONT,"black","center","middle");

        text(ctx,"FIX: "+this.pn(this.calcGmulFix())+" VAR: "+this.pn(this.calcGmulVar()),zx + zw * 0.633 + (btw/2),zy + zh * 0.25-10,"34px"+FONT,"white","center","middle");
        var NextBlock = Math.max(0,(data.galaxiesTimer-Date.now())/1000);
        text(ctx,"NEXT BLOCK: "+stimer(NextBlock),zx + zw * 0.633 + (btw/2),zy + zh * 0.25+10,"34px"+FONT,"white","center","middle");
        if (data.omega < this.calcGcolP()){
            T.draw(ctx,NbSprite,zx + zw * 0.633 ,zy + zh * 0.32);
            T.draw(ctx,icon01,zx + zw * 0.67 ,zy + zh * 0.36);
        }
        else {
            T.draw(ctx,bSprite,zx + zw * 0.633 ,zy + zh * 0.32);
            if (mouse) this.addZone("OmegaLessColors",(new Rect(zx+zw*0.633,zy+zh*0.32,btw,bth)).small(),"OmegaLessColors");
            T.draw(ctx,icon01,zx + zw * 0.67 ,zy + zh * 0.36);
            if ((new Rect(zx + zw * 0.633 ,zy + zh * 0.32,btw,bth)).small().isInside(GM.x,GM.y) && data.omega>=this.calcGcolP()) {
                ctx.fillStyle="rgba(255,255,255,0.1)";
                ctx.fillRect(zx + zw * 0.633 ,zy + zh * 0.32,btw,bth*0.9);
                ctx.fillRect((zx + zw * 0.631) + btw*0.095 ,(zy + zh * 0.32)+bth*0.9,btw*0.825,bth*0.1);
            }
        }
        text(ctx,"One less color",zx + zw * 0.672 + (btw/2),zy + zh * 0.39,"26px"+FONT,"black","center","middle");
        text(ctx,"Number of Colors: "+this.calcGcol(),zx + zw * 0.672 + (btw/2),zy + zh * 0.44,"17px"+FONT,"black","center","middle");
        text(ctx,this.pn(this.calcGcolP(),"\u03A9",true),zx + zw * 0.672 + (btw/2),zy + zh * 0.48,"17px"+FONT,"black","center","middle");

        if (data.omega < this.calcGtimeP()){
            T.draw(ctx,NbSprite,zx + zw * 0.633 ,zy + zh * 0.6);
            T.draw(ctx,icon02,zx + zw * 0.67 ,zy + zh * 0.64);
        }
        else {
            T.draw(ctx,bSprite,zx + zw * 0.633 ,zy + zh * 0.6);
            if (mouse) this.addZone("OmegaMoreTime",(new Rect(zx+zw*0.633,zy+zh*0.6,btw,bth)).small(),"OmegaMoreTime");
            T.draw(ctx,icon02,zx + zw * 0.67 ,zy + zh * 0.64);
            if ((new Rect(zx + zw * 0.633 ,zy + zh * 0.6,btw,bth)).small().isInside(GM.x,GM.y) && data.omega>=this.calcGtimeP()) {
                ctx.fillStyle="rgba(255,255,255,0.1)";
                ctx.fillRect(zx + zw * 0.633 ,zy + zh * 0.6,btw,bth*0.9);
                ctx.fillRect((zx + zw * 0.631) + btw*0.095 ,(zy + zh * 0.6)+bth*0.9,btw*0.825,bth*0.1);
            }
        }
        text(ctx,"More time",zx + zw * 0.672 + (btw/2),zy + zh * 0.67,"26px"+FONT,"black","center","middle");
        text(ctx,"Actual Time: "+this.calcGtime()/1000+"s",zx + zw * 0.672 + (btw/2),zy + zh * 0.72,"17px"+FONT,"black","center","middle");
        text(ctx,this.pn(this.calcGtimeP(),"\u03A9",true),zx + zw * 0.672 + (btw/2),zy + zh * 0.76,"17px"+FONT,"black","center","middle");

        var xPos = zx + zw / 2 - T.width("0k2u") / 2;
        var yPos = zy + zh / 2 - T.height("0k2u") / 1.8;

        for (var i=0; i<10; i++)
        {
            for (var j=0; j<9; j++)
            {
                if (galaxies.grid[j][i] != -1)
                {
                    T.draw(ctx,bubbleSprites[galaxies.grid[j][i]],xPos + i*(bubbleW*0.88),yPos + j*(bubbleH*0.81));
                    if(data.colorblind) text(ctx,galaxies.grid[j][i],(xPos + i*(bubbleW*0.88))+bubbleW/2,(yPos + j*(bubbleH*0.81))+bubbleH/2,"26px"+FONT,"black","center","middle");
                    if (mouse) this.addZone("Bubble_"+i+","+j,(new Rect(xPos + i*(bubbleW*0.88),yPos + j*(bubbleH*0.81),bubbleW*0.88,bubbleH*0.81)).small(),"ClickBubble",{x:i,y:j});
                }
            }
        }
        T.draw(ctx,"0bap",zx + zw / 1.096,zy + zh / 1.45);
        if (mouse) this.addZone("FillBubles",(new Rect(zx + zw / 1.096,zy + zh / 1.45,T.width("0bap"),T.height("0bap"))).small(),"refill");

        T.draw(ctx,"0nww",zx + zw / 1.096,zy + zh / 13);
        var trect = (new Rect(zx + zw / 1.096,zy + zh / 13,T.width("0nww"),T.height("0nww"))).small();
        if (trect.isInside(GM.x,GM.y)) {
            var x = zx + zw / 1.096-134;
            var y = zy + zh / 13+75/2;
            var tid = "0dg5";
            var tw=T.width(tid);
            var th=T.height(tid);
            var y0=y+31/2;
            var m = 18/2;
            var line = 36/2;
            T.draw(ctx,tid,x,y);
            y0+=m;
            text(ctx,"Anti-Particle",x+tw/2,y0+line/2,"30px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"You can break the blocks if you",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"have two or more together.",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"Fewer blocks, higher multiplier.",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"Big Crunching with x1.5",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
            y0+=line+m;
            text(ctx,"production resets your grid.",x+tw/2,y0+line/2,"25px"+FONT,"white","center","middle");
        }
    }
    this.drawDimensions = function (ctx,mouse) {
        var zx = W*0.28125;
        var zy = 0 + 40;
        var zw = W*0.71875;
        var zh = H*0.5+80/2;
        var tzw = zw;
        var tzh = zh - 40;

        for (var i=0;i<3;i++) {
            var rD=i+3*dimensionsPage;
            var dim=DIMENSION[rD];
            if (rD<DIMENSION.length) {
                var xScale=T.width(dim.bg);
                var left=zx+zw*0.2+zw*0.3*i-T.width("0k00")/2;
                var center=zx+zw*0.2+zw*0.3*i;
                var isActive=data.dimensions[rD]>0;
                T.draw(ctx,"0k00",left,zy+10);
                var x=left+5;
                var y=zy+18.5;
                var w=T.width("0k00")*0.945;
                var h=T.height("0k00")*0.948;
                var r=5;
                if (w < 2 * r) r = w / 2;
                if (h < 2 * r) r = h / 2;
                
                ctx.save();
                ctx.beginPath();
                ctx.moveTo(x+r,y);
                ctx.arcTo(x+w,y,x+w,y+h,r);
                ctx.arcTo(x+w,y+h,x,y+h,r);
                ctx.arcTo(x,y+h,x,y,r);
                ctx.arcTo(x,y,x+w,y,r);
                ctx.closePath();

                ctx.clip();
                
                if (isActive) {
                    ctx.globalAlpha=0.7;
                    T.draw(ctx,dim.bg,left,zy);
                    ctx.restore();
                    T.draw(ctx,"00kg",center-(T.width("00kg")*0.6)/2,zy+45-T.height("00kg")*0.6/2,T.width("00kg")*0.6,T.height("00kg")*0.6);
                } else {
                    ctx.globalAlpha=0.7;
                    T.negative(ctx,dim.bg,left,zy);
                    ctx.restore();
                    T.negative(ctx,"00kg",center-(T.width("00kg")*0.6)/2,zy+45-T.height("00kg")*0.6/2,T.width("00kg")*0.6,T.height("00kg")*0.6);
                }
                
                var x=left+15;
                var y=zy+72;
                var w=T.width("0k00")*0.855;
                var h=T.height("0k00")*0.75;
                var r=5;
                if (w < 2 * r) r = w / 2;
                if (h < 2 * r) r = h / 2;
                
                ctx.save();
                ctx.beginPath();
                ctx.moveTo(x+r,y);
                ctx.arcTo(x+w,y,x+w,y+h,r);
                ctx.arcTo(x+w,y+h,x,y+h,r);
                ctx.arcTo(x,y+h,x,y,r);
                ctx.arcTo(x,y,x+w,y,r);
                ctx.closePath();
                ctx.fillStyle="rgba(47,47,47,0.5)";
                ctx.fill();
                
                text(ctx,dim.name,center,zy+45,"40px"+FONT,"rgb(100,69,39)","center","middle");
                text(ctx,"Unlocks:",center,zy+zh*0.25,"32px"+FONT,"white","center","middle");
                if (dim.bonus.building!==undefined) {
                    if (isActive) T.draw(ctx,dim.bonus.building,center-T.width(dim.bonus.building)/2,zy+zh*0.3);
                    else T.negative(ctx,dim.bonus.building,center-T.width(dim.bonus.building)/2,zy+zh*0.3);
                }
                text(ctx,dim.bonus.text,center,zy+zh*0.3+T.height(dim.bonus.building)+17,"22px"+FONT,"white","center","middle");
                var atext = dim.abonus.text
                if (typeof atext === "function") atext=atext(data.dimensions[rD]);
                text(ctx,"Active Bonus:",center,zy+zh*0.6,"32px"+FONT,"white","center","middle");
                text(ctx,atext,center,zy+zh*0.6+20,"22px"+FONT,"white","center","middle");
                var ptext = dim.pbonus.text
                if (typeof ptext === "function") ptext=ptext(data.dimensions[rD]);
                text(ctx,"Passive Bonus:",center,zy+zh*0.74,"32px"+FONT,"white","center","middle");
                text(ctx,ptext,center,zy+zh*0.74+20,"22px"+FONT,"white","center","middle");
            }
        }

        var dimensionsUnlocked = Math.ceil(DIMENSION.length/3);
        if (dimensionsUnlocked > 1) {
            var nw=T.width("09sg");
            var nh=T.height("09sg");
            T.draw(ctx,"09sg",zx+tzw-9-nw,zy+tzh/2-10-nh/2);
            ctx.save();
            ctx.translate(zx+9+nw/2,zy-10+tzh/2)
            ctx.scale(-1,1);
            T.draw(ctx,"09sg",-nw/2,-nh/2);
            ctx.restore();
            if (mouse) this.addZone("dimnext",(new Rect(zx+tzw-9-nw,zy+tzh/2-10-nh/2,nw,nh)).small(),"arrowdim",{target:(dimensionsPage+1)%dimensionsUnlocked});
            if (mouse) this.addZone("dimprev",(new Rect(zx+9,zy-10+tzh/2-nh/2,nw,nh)).small(),"arrowdim",{target:(dimensionsPage-1+dimensionsUnlocked)%dimensionsUnlocked});
        }
    }
    this.drawJump = function (ctx) {
        ctx.fillStyle="rgba(47,47,47,0.5)";
        ctx.fillRect(0,0,W,H);
        
        for (var i=0;i<3;i++) {
            var dim=DIMENSION[data.jump[i]];
            var left=W*0.2-T.width(dim.bg)*0.9/2+i*(W*0.3);
            var center=left+T.width(dim.bg)*0.9/2;
            var y=H*0.5-T.height(dim.bg)*0.9/2;

            var x=left;
            var w=T.width(dim.bg)*0.9;
            var h=T.height(dim.bg)*0.9;
            var r=5;
            if (w < 2 * r) r = w / 2;
            if (h < 2 * r) r = h / 2;
            
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(x+r,y);
            ctx.arcTo(x+w,y,x+w,y+h,r);
            ctx.arcTo(x+w,y+h,x,y+h,r);
            ctx.arcTo(x,y+h,x,y,r);
            ctx.arcTo(x,y,x+w,y,r);
            ctx.closePath();

            ctx.clip();

            T.draw(ctx,dim.bg,left,y,T.width(dim.bg)*0.9,T.height(dim.bg)*0.9);
            T.draw(ctx,"00kg",W*0.2-T.width("00kg")*0.88/2+i*(W*0.3),y,T.width("00kg")*0.88,T.height("00kg"));

            ctx.restore();

            var x1=left+7;
            var y1=y+78;
            var w1=T.width(dim.bg)*0.85;
            var h1=T.height(dim.bg)*0.76;
            var r1=5;
            if (w < 2 * r) r = w / 2;
            if (h < 2 * r) r = h / 2;
            
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(x1+r1,y1);
            ctx.arcTo(x1+w1,y1,x1+w1,y1+h1,r1);
            ctx.arcTo(x1+w1,y1+h1,x1,y1+h1,r1);
            ctx.arcTo(x1,y1+h1,x1,y1,r1);
            ctx.arcTo(x1,y1,x1+w1,y1,r1);
            ctx.closePath();
            ctx.fillStyle="rgba(47,47,47,0.5)";
            ctx.fill();

            text(ctx,dim.name,center,y+T.height("00kg")/2,"60px"+FONT,"rgb(100,69,39)","center","middle");
            text(ctx,"Unlocks:",center,H*0.3,"50px"+FONT,"white","center","middle");
            if (dim.bonus.building!==undefined) {
                T.draw(ctx,dim.bonus.building,center-T.width(dim.bonus.building)/2,H*0.35);
            }
            text(ctx,dim.bonus.text,center,H*0.5,"32px"+FONT,"white","center","middle");
            
            text(ctx,"Active Bonus:",center,H*0.6,"50px"+FONT,"white","center","middle");
            var atext = dim.abonus.text;
            if (typeof atext==="function") atext=atext(data.dimensions[data.jump[i]]+1);
            text(ctx,atext,center,H*0.64,"32px"+FONT,"white","center","middle");

            text(ctx,"Passive Bonus:",center,H*0.73,"50px"+FONT,"white","center","middle");
            var ptext = dim.pbonus.text;
            if (typeof ptext==="function") ptext=ptext(data.dimensions[data.jump[i]]+1);
            text(ctx,ptext,center,H*0.77,"32px"+FONT,"white","center","middle");
            
            var jrect = (new Rect(x,y,w,h)).small();
            if (jrect.isInside(GM.x,GM.y)) {
                ctx.save();
                ctx.beginPath();
                ctx.moveTo(x+r,y);
                ctx.arcTo(x+w,y,x+w,y+h,r);
                ctx.arcTo(x+w,y+h,x,y+h,r);
                ctx.arcTo(x,y+h,x,y,r);
                ctx.arcTo(x,y,x+w,y,r);
                ctx.closePath();
                ctx.fillStyle="rgba(255,255,255,0.25)";
                ctx.fill();
                ctx.restore();
                this.addZone("dojump",jrect,"dojump",{target:i});
            }
        }
        // close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.99-cw*1.2,H*0.02,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0o6b",W*0.99-cw*1.2,H*0.02);
            this.addZone("closejump",crect,"jump",{target:false});
        }
        else T.draw(ctx,"0evr",W*0.99-cw*1.2,H*0.02);
    }
    this.drawShopPopup = function (ctx) {
        var info=undefined;
        ctx.fillStyle="rgba(47,47,47,0.25)";
        ctx.fillRect(0,0,W,H);

        var bgw=525;
        var bgh=595;

        roundedRect(ctx,W*0.5-(bgw*1.25/2)-120,H*0.5-(bgh*0.95/2),bgw*1.25,bgh*0.95,15,"rgba(216,233,255,1)");
        roundedRect(ctx,W*0.5-(bgw*1.25/2)+2-120,H*0.5-(bgh*0.95/2)+2,bgw*1.25-4,bgh*0.95-4,15,"rgba(33,33,33,1)");

        roundedRect(ctx,W*0.5-(bgw/2),H*0.5-(bgh/2),bgw,bgh,15,"rgba(216,233,255,1)");
        roundedRect(ctx,W*0.5-(bgw/2)+2,H*0.5-(bgh/2)+2,bgw-4,bgh-4,15,"rgba(33,33,33,1)");
        // close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
            this.addZone("closeshop",crect,"mshop",{target:false});
        }
        else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);

        // elements
        var marbles = ["0dvo","0mcj","02c9","0gjy","060g","00bv","0hpa"];
        var marblesx = W*0.26;
        var prices = ["0008","0olb","0jt8","06wf","0822","0gfh","07zq"];
        var wprices = ["0rut","yyrv","vog0","j517","34bu","eaq6","y5g7"];
        var pricesx = W*0.36;
        var kreeds = ["056j","01hy","056v","06rf","0jo1","0db8","02b3"];
        var kreedsx = W*0.49;
        var buyx = W*0.615;
        var inith = H*0.052;
        var bonus = [6,20,40,100,250,700,1500];

        for (var i=0;i<7;++i) {
            var brect = (new Rect(buyx+11,inith+10,T.width("0euw")*0.8,T.height("0euw")*0.75)).small();

            T.draw(ctx,"0l02",W*0.49-T.width("0l02")/1.7,inith);
            T.draw(ctx,marbles[i],marblesx,inith-4.5);
            //if (new Date().getDay()==6 || new Date().getDay()==0 || this.isChristmas2()) T.draw(ctx,wprices[i],pricesx,inith);
            //else T.draw(ctx,prices[i],pricesx,inith);
            T.draw(ctx,wprices[i],pricesx,inith);
            T.draw(ctx,kreeds[i],kreedsx,inith);
            if (brect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0ge3",buyx,inith);
                var t=i;
                //if (new Date().getDay()==6 || new Date().getDay()==0 || this.isChristmas2()) t=t+16;
                t=t+16;
                this.addZone("mshop_"+i,brect,"shop",{target:t});
            }
            else T.draw(ctx,"0euw",buyx,inith);

            text(ctx,"BONUS: ",W*0.090,inith+T.height("0l02")*0.5,"34px"+FONT,"white","left","middle");
            text(ctx,bonus[i],W*0.090+100,inith+T.height("0l02")*0.5,"34px"+FONT,"white","right","middle");
            T.draw(ctx,"joy2",W*0.095+100,inith+T.height("0l02")*0.5-T.height("joy2")*0.5,T.width("joy2"),T.height("joy2"));

            inith+=T.height("0l02")*1.025;
        }
        
        if (info!=undefined) {
            var rhero=undefined;
            var elements = ["Air","Earth","Fire","Water","Void"];
            var wTool = 300;
            var hTool = T.height("0c2t")*0.9;
            var xt = W*0.44;
            var yt = (640*(0.223+0.145*2))+T.height("0fj5")/2-hTool/2;
            ctx.fillStyle="rgba(60,60,60,0.8)";
            ctx.fillRect(xt,yt,wTool,hTool);

            var heroPos=[127,128,129];
            rhero=heroPos[info];

            var hpos = -2*1-rhero;

            text(ctx,HERO[rhero].name,xt+wTool/2,yt+hTool*0.05,"50px"+FONT,"white","center","middle");
            this.drawMonster(ctx,hpos,xt+wTool/2,yt+hTool*0.5,undefined,false,2,mdata.city.hero[rhero]);

            var mhp = mtext(ctx,level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
            text(ctx,level2stats(rhero,1,mdata.city.promo[rhero]).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
            T.draw(ctx,"0fuu",xt+wTool/1.25-T.width("0fuu")-mhp/2,yt+hTool*0.555-T.height("0fuu")/2);
            text(ctx,level2stats(rhero,1,mdata.city.promo[rhero]).atk,xt+wTool/4,yt+hTool*0.56,"36px"+FONT,"white","center","right");
            T.draw(ctx,"0e9t",xt+wTool/4.5-T.width("0e9t"),yt+hTool*0.555-T.height("0e9t")/2);

            text(ctx,"LEVEL: "+mdata.city.hero[rhero],xt+wTool/2,yt+hTool*0.66,"36px"+FONT,"white","center","middle");
            text(ctx,"ELEMENT: "+elements[HERO[rhero].type],xt+wTool/2,yt+hTool*0.76,"36px"+FONT,"white","center","middle");
            mltext(ctx,"SKILL: "+this.skill2text(HERO[rhero].skill,mdata.city.hero[rhero],false).short,xt+wTool/2,yt+hTool*0.86,"28px"+FONT,"white","center","middle");
        }
    }
    this.drawTmPopup = function (ctx) {
        var yBase=H*0.93;
        ctx.fillStyle="rgba(47,47,47,0.25)";
        ctx.fillRect(0,0,W,H);
        var bgw=525;
        var bgh=595;

        roundedRect(ctx,W*0.5-bgw/2,H*0.5-bgh/2*0.6,bgw,bgh*0.6,15,"rgba(216,233,255,1)");
        roundedRect(ctx,W*0.5-bgw/2+2,H*0.5-bgh/2*0.6+2,bgw-4,bgh*0.6-4,15,"rgba(33,33,33,1)");

        // close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2*0.6+ch*0.13,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2*0.6+ch*0.13);
            this.addZone("closetmshop",crect,"tm_show",{target:false});
        }
        else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2*0.6+ch*0.13);

        text(ctx,"LUCY MINIONS",W*0.5,H*0.29,"80px"+FONT,"white","center","middle");

        text(ctx,"- Auto-Claim Miracles",W*0.5,H*0.4,"46px"+FONT,"white","center","middle");
        text(ctx,"- Auto-Fight Daily Quest until max. level reached",W*0.5,H*0.45,"46px"+FONT,"white","center","middle");
        text(ctx,"- Reduce Miracle timers by 10%",W*0.5,H*0.5,"46px"+FONT,"white","center","middle");
        text(ctx,"- Reduce Daily Quest timer by 10%",W*0.5,H*0.55,"46px"+FONT,"white","center","middle");

        var b1rect = (new Rect(W*0.38-T.width("091m")/2,H*0.66,T.width("091m"),T.height("091m"))).small();
        if (b1rect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0eni",W*0.38-T.width("091m")/2,H*0.66);
            this.addZone("mshop_tmm",b1rect,"shop",{target:14});
        }
        else T.draw(ctx,"091m",W*0.38-T.width("091m")/2,H*0.66);
        text(ctx,"ADD 30 DAYS",W*0.38,H*0.695,"46px"+FONT,"white","center","middle");
        text(ctx,"100 Kreds",W*0.38,H*0.73,"40px"+FONT,"white","center","middle");

        var b2rect = (new Rect(W*0.62-T.width("091m")/2,H*0.66,T.width("091m"),T.height("091m"))).small();
        if (b2rect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0eni",W*0.62-T.width("091m")/2,H*0.66);
            this.addZone("mshop_tmlt",b2rect,"shop",{target:15});
        }
        else T.draw(ctx,"091m",W*0.62-T.width("091m")/2,H*0.66);
        text(ctx,"LIFETIME",W*0.62,H*0.695,"46px"+FONT,"white","center","middle");
        text(ctx,"1000 Kreds",W*0.62,H*0.73,"40px"+FONT,"white","center","middle");

        text(ctx,"Bonus: 100x",W*0.38-10,H*0.695-40,"30px"+FONT,"white","center","middle");
        text(ctx,"Bonus: 1300x",W*0.62-10,H*0.695-40,"30px"+FONT,"white","center","middle");
        T.draw(ctx,"joy2",W*0.38+35,H*0.695-40-T.height("joy2")*0.5,T.width("joy2"),T.height("joy2"));
        T.draw(ctx,"joy2",W*0.62+35,H*0.695-40-T.height("joy2")*0.5,T.width("joy2"),T.height("joy2"));
    }
    this.drawFollowers = function (ctx) {
        if (mdata==undefined) {
            scene="buildings";
            return;
        }
        T.draw(ctx,"0ko4",0,0);
        var backButton = "0i5r";
        T.draw(ctx,backButton,(1024*0.09)-T.width(backButton)/2,(640*0.055)-T.height(backButton)/2);
        if (scene!=="battle") this.addZone("backToIdle",(new Rect((1024*0.092)-T.width(backButton)/2,(640*0.055)-T.height(backButton)/2,T.width(backButton),T.height(backButton))).small(),"scene",{target:"buildings"});
        else this.addZone("backToIdle",(new Rect((1024*0.09)-T.width(backButton)/2,(640*0.055)-T.height(backButton)/2,T.width(backButton),T.height(backButton))).small(),"scene",{target:gBattle.back});
        if ((new Rect((1024*0.09)-T.width(backButton)/2,(640*0.055)-T.height(backButton)/2,T.width(backButton),T.height(backButton))).small().isInside(GM.x,GM.y)) {
            ctx.fillStyle="rgba(255,255,255,0.2)";
            ctx.fillRect((1024*0.099)-T.width(backButton)/2,(640*0.06)-T.height(backButton)/2,T.width(backButton)*0.90,T.height(backButton)*0.87);
        }

        // draw header
        T.draw(ctx,"0nkt",W*0.723,H*0.007);

        var tooltip = "0ewq";
        var tooltipw = T.width(tooltip);
        var tooltiph = T.height(tooltip);

        var folBox = "0bxc";
        var batBox = "0l4z";
        var felems = [
            {
                icon: "04uo",
                scene:"miracles",
                tooltip:"Miracles",
                unlock: 0,
                color: "rgb(255,248,170)",
            },{
                icon: function () {
                    return "0l1j";
                },
                scene:"roulette",
                tooltip:"Treasure Chests",
                unlock: 0,
                color: "rgb(255,248,170)",
            },{
                icon: "0bjp",
                scene:"worldboss",
                tooltip:"World Boss",
                unlock: 4000,
                color: "rgb(153,186,236)",
            },{
                icon: "0hlo",
                scene:"pved",
                tooltip:"Daily Quest",
                unlock: 4000,
                color: "rgb(153,186,236)",
            },{
                icon: "0cg3",
                scene:"pve",
                tooltip:"Quests",
                unlock: 4000,
                color: "rgb(153,186,236)",
            },{
                icon: "00jf",
                scene:"tournaments",
                tooltip:"Tournaments",
                unlock: 5000,
                color: "rgb(153,186,236)",
            },{
                icon: "06gt",
                scene:"prana",
                tooltip:"Hero Manager",
                unlock: 0,
                color: "rgb(153,186,236)",
            },{
                icon: "05gy",
                scene:"ranking",
                tooltip:"Ranking",
                unlock: 0,
                color: "rgb(153,186,236)",
            },{
                icon: "0mhl",
                scene:"city",
                tooltip:"Battle",
                unlock: 4000,
                color: "rgb(153,186,236)",
            }
        ];
        var initx=W*0.69;
        var fixinitx=W*0.392;
        var inith=H*0.028;
        var tselect=-1;
        for (var i=felems.length-1; i>=0; --i) {
            var icon=felems[i].icon;
            if (typeof icon === "function") icon=icon();
            var iw = T.width(icon);
            var ih = T.height(icon);
            var rect = (new Rect(initx+iw*0.04,inith,iw*0.92,ih)).small();
            if (rect.isInside(GM.x,GM.y)) {
                ctx.beginPath();
                ctx.arc(initx+iw/2+0.5,inith+ih/2,iw/2.2,0,Math.PI*2);
                ctx.closePath();
                ctx.fillStyle=felems[i].color;
                ctx.fill();
                tselect=i;
                fixinitx=initx+iw/2;
            }

            if (mdata.followers >= felems[i].unlock && this.isEnabled(felems[i].scene)) {
                T.draw(ctx,icon,initx,inith);
                this.addZone("fmenu_"+i,rect,"scene",{target:felems[i].scene});
            }
            else T.negative(ctx,icon,initx,inith);

            initx-=iw*0.92;
        }
        text(ctx,bint(mdata.followers,data.bintmode),1024*0.845,640*0.077,"58px"+FONT,"rgba(255,250,210,1)","center","middle");

        if (scene=="miracles") this.drawMiracles(ctx);
        else if (scene=="roulette") this.drawRoulette(ctx);
        else if (scene=="worldboss") this.drawWorldBoss(ctx);
        else if (scene=="milestones") this.drawMilestones(ctx);
        else if (scene=="city") this.drawCity(ctx);
        else if (scene=="ranking") this.drawRanking(ctx);
        else if (scene=="battle") this.drawBattle(ctx);
        else if (scene=="pve") this.drawPVE(ctx);
        else if (scene=="pved") this.drawPVED(ctx);
        else if (scene=="tournaments") this.drawTournaments(ctx);
        else if (scene=="prana") this.drawPrana(ctx);

        if (tselect!=-1) {
            T.draw(ctx,tooltip,fixinitx-tooltipw/2,H*0.10);
            if (mdata.followers >= felems[tselect].unlock) text(ctx,felems[tselect].tooltip,fixinitx,H*0.152,"38px"+FONT,"black","center","middle");
            else text(ctx,"Unlocks after "+felems[tselect].unlock+" followers",fixinitx,H*0.152,"22px"+FONT,"black","center","middle");
        }

    }
    this.drawMiracles = function (ctx) {
        var button = "000p";
        var buttonW = T.width(button);
        var buttonH = T.height(button);

        var claim = "09on"
        var claimW = T.width(claim);
        var claimH = T.height(claim);

        var backcount = "09ec"
        var backcountW = T.width(backcount);
        var backcountH = T.height(backcount);

        var multiplier = "0mou";
        var lore = "0ohv";

        var miraclesW = T.width(MIRACLES[0].icon);
        var miraclesH = T.height(MIRACLES[0].icon);

        var barra0 = "0aod";
        var barra1 = "0or4";
        var barra2 = "0fym";

        T.draw(ctx,lore,(1024*0.5)-T.width(lore)/2,(640*0.495)-T.height(lore)/2);
        text(ctx,"Each God is powered by their Followers, perform Miracles in front of intelligent creatures",(1024*0.5),640*0.225,"40px"+FONT,"white","center","middle");
        text(ctx,"in order to increase your follower count.",(1024*0.5),640*0.26,"40px"+FONT,"white","center","middle");
        if (mdata.city==undefined || mdata.city.daily == undefined || mdata.city.daily.timer2-Date.now() < 0) text(ctx,"Each follower increases energy production by 0.1%",(1024*0.5),640*0.295,"40px"+FONT,"white","center","middle");
        else {
            var value=0.1;
            if (mdata.city.daily.lvl!==undefined) value*=mdata.city.daily.lvl;
            text(ctx,"Each follower increases energy production by "+value.toFixed(1)+"%",(1024*0.5),640*0.295,"40px"+FONT,"white","center","middle");
        }

        T.draw(ctx,multiplier,(1024*0.65)-T.width(multiplier)/2,640*0.86);
        this.addZone("toshop",(new Rect((1024*0.65)-T.width(multiplier)/2,640*0.86,T.width(multiplier),T.height(multiplier)*0.95)).small(),"menu",{target:"shop",submenu:"home"});
        if ((new Rect((1024*0.65)-T.width(multiplier)/2,640*0.86,T.width(multiplier),T.height(multiplier)*0.95)).small().isInside(GM.x,GM.y)) {
            ctx.fillStyle="rgba(255,255,255,0.2)";
            ctx.fillRect((1024*0.665)-T.width(multiplier)/2,640*0.875,T.width(multiplier)*0.95,T.height(multiplier)*0.73);
        }

        // Claim All Miracles
        T.draw(ctx,"07mg",W*0.065,H*0.875);
        var claimable = false;
        for (var i=0;i<9;i++) if (mdata.miracles[i]-Date.now() <= 0) claimable = true;
        if (claimable) {
            if (!syncClaim) {
                this.addZone("ClaimAll",(new Rect(W*0.075,H*0.885,T.width("07mg")*0.93,T.height("07mg")*0.82)).small(),"ClaimAll");
            }
            if ((new Rect(W*0.075,H*0.885,T.width("07mg")*0.93,T.height("07mg")*0.82)).small().isInside(GM.x,GM.y)) {
                ctx.fillStyle="rgba(255,255,255,0.2)";
                ctx.fillRect(W*0.075,H*0.885,T.width("07mg")*0.93,T.height("07mg")*0.82);
            }
        }

        var miracleSprite = 0;
        var isDelay=false;
        for (var i=0; i<claimDelay.length; ++i) {
            if (claimDelay[i]>Date.now()) isDelay=true;
        }
        for (var i=0;i<3; ++i) {
            for (var j=0;j<3; j++) {
                T.draw(ctx,button,(1024*(0.18+0.32*j))-buttonW/2,(640*(0.432+0.17*i))-buttonH/2);
                T.draw(ctx,MIRACLES[miracleSprite].icon,((1024*(0.18+0.32*j))-buttonW/2)+miraclesW/2.5,((640*(0.432+0.17*i))-buttonH/2)+miraclesH/1.7);
                text(ctx,MIRACLES[miracleSprite].name,1024*(0.21+0.32*j),640*(0.412+0.17*i),"32px"+FONT,"white","center","middle");
                text(ctx,"Gain "+Math.round(MIRACLES[miracleSprite].followers*this.getFmul()*(1+0.01*mdata.city.mclaims[miracleSprite]))+" followers in "+MIRACLES[miracleSprite].time+" hours",1024*(0.21+0.32*j),640*(0.437+0.17*i),"28px"+FONT,"rgba(123,83,12,1)","center","middle");
                //Barres
                var TotalTime = MIRACLES[miracleSprite].time*60*60*1000;
                var SpendTime = mdata.miracles[miracleSprite]-Date.now()
                var percent = 1-clamp(SpendTime / TotalTime,0,1);

                T.draw(ctx,barra0,(1024*(0.18+0.32*j))-T.width(barra0)/2,(640*(0.357+0.17*i)));
                ctx.save();
                ctx.beginPath();
                ctx.rect((1024*(0.18+0.32*j))-T.width(barra0)/2,(640*(0.357+0.17*i)),T.width(barra1)*percent,T.height(barra1));
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,barra1,(1024*(0.18+0.32*j))-T.width(barra1)/2,(640*(0.357+0.17*i)));
                ctx.restore();
                T.draw(ctx,barra2,(1024*(0.18+0.32*j))-T.width(barra2)/2,(640*(0.357+0.17*i)));

                if(mdata.miracles[miracleSprite]-Date.now() <= 0) {
                    if (claimDelay[miracleSprite]<Date.now()) {
                        if (mdata!==undefined && mdata.tm!==undefined && (mdata.tm==-1||(mdata.tm-Date.now()>0))){
                            mdata.miracles[miracleSprite] +=MIRACLES[miracleSprite].time*60*60*1000*0.9*(1-mdata.city.easter.miracles);
                        }
                        else {
                            T.draw(ctx,claim,((1024*(0.18+0.32*j))-claimW/2)+miraclesW/2,(640*(0.472+0.17*i))-claimH/2);
                            if (!isDelay) this.addZone("mirclaim_"+miracleSprite,(new Rect(((1024*(0.18+0.32*j))-claimW/2)+miraclesW/2,(640*(0.472+0.17*i))-claimH/2,claimW,claimH)).small(),"ClaimMiracle",{target: miracleSprite});
                            if ((new Rect(((1024*(0.18+0.32*j))-claimW/2)+miraclesW/2,(640*(0.472+0.17*i))-claimH/2,claimW,claimH)).small().isInside(GM.x,GM.y)) {
                                ctx.fillStyle="rgba(255,255,255,0.2)";
                                ctx.fillRect(((1024*(0.184+0.32*j))-claimW/2)+miraclesW/2,(640*(0.475+0.17*i))-claimH/2,claimW*0.95,claimH*0.9);
                            }
                        }
                    } else {
                        T.draw(ctx,backcount,((1024*(0.18+0.32*j))-claimW/2)+miraclesW/2,(640*(0.472+0.17*i))-claimH/2);
                        this.spinner(ctx,((1024*(0.18+0.32*j))-claimW/2)+miraclesW/2+T.width(backcount)/2,(640*(0.472+0.17*i))-claimH/2+T.height(backcount)/2,T.height(backcount)/2);
                    }
                }
                else {
                    T.draw(ctx,backcount,((1024*(0.18+0.32*j))-backcountW/2)+miraclesW/2,(640*(0.472+0.17*i))-backcountH/2);
                    text(ctx,timer((mdata.miracles[miracleSprite]-Date.now())/1000),((1024*(0.18+0.32*j)))+miraclesW/2,(640*(0.472+0.17*i)),"46px"+FONT,"rgba(123,83,12,1)","center","middle");
                }

                var mrect=(new Rect(((1024*(0.18+0.32*j))-buttonW/2)+miraclesW/2.5,((640*(0.432+0.17*i))-buttonH/2)+miraclesH/1.7,T.width(MIRACLES[miracleSprite].icon),T.height(MIRACLES[miracleSprite].icon))).small();
                if (mrect.isInside(GM.x,GM.y)) {
                    var x=((1024*(0.18+0.32*j))-buttonW/2)+miraclesW/2.5+4+T.width(MIRACLES[miracleSprite].icon);
                    var y=((640*(0.432+0.17*i))-buttonH/2)+miraclesH/1.7;
                    roundedRect(ctx,x,y,W*0.212,H*0.1,10,"rgba(0,0,0,0.7)");
                    var followers=Math.round(MIRACLES[miracleSprite].followers*this.getFmul()*(1+0.01*mdata.city.mclaims[miracleSprite]));
                    var lucyBonus = (mdata.tm==-1||(mdata.tm-Date.now()>0))?0.9:1;
                    var hourly=Math.round(followers/(MIRACLES[miracleSprite].time*(1-mdata.city.easter.miracles)*lucyBonus));
                    var daily=hourly*24;
                    var monthly=daily*31;
                    text(ctx,"Hourly: "+hourly+" followers",x+8,y+(H*0.1*0.25),"24px"+FONT,"white","left","middle");
                    text(ctx,"Daily: "+daily+" followers",x+8,y+(H*0.1*0.5),"24px"+FONT,"white","left","middle");
                    text(ctx,"Monthly: "+monthly+" followers",x+8,y+(H*0.1*0.75),"24px"+FONT,"white","left","middle");
                    text(ctx,mdata.city.mclaims[miracleSprite],x+210,y+(H*0.1*0.75),"24px"+FONT,"white","right","middle");
                }

                miracleSprite++;
            }
        }
        
        var milrect=(new Rect(W*0.0185,H*0.885,T.width("086f")*0.85,T.height("086f")*0.85)).small();
        if (milrect.isInside(GM.x,GM.y)) {
            ctx.beginPath();
            ctx.arc(W*0.0433,H*0.9245,T.width("086f")*0.38,0,Math.PI*2);
            ctx.closePath();
            ctx.fillStyle="rgb(255,248,170)";
            ctx.fill();
            this.addZone("tomil",milrect,"scene",{target:"milestones"});
        }
        T.draw(ctx,"086f",W*0.0185,H*0.885,T.width("086f")*0.85,T.height("086f")*0.85);
        
        //Miracle prediction
        var mrect=(new Rect(W*0.75,H*0.007,T.width("0nkt"),T.height("0nkt"))).small();
        if (mrect.isInside(GM.x,GM.y)) {
            var x=W*0.75;
            var y=H*0.007+T.height("0nkt");
            roundedRect(ctx,x,y,W*0.212,H*0.125,10,"rgba(0,0,0,0.7)");
            var lucyBonus = (mdata.tm==-1||(mdata.tm-Date.now()>0))?0.9:1;
            var hourly = 0;
            for (var i = 0; i < 9; i++) {
            	var followers=Math.round(MIRACLES[i].followers*this.getFmul()*(1+0.01*mdata.city.mclaims[i]));
            	hourly += Math.round(followers/(MIRACLES[i].time*(1-mdata.city.easter.miracles)*lucyBonus));
            }
            var daily=hourly*24;
            var monthly=daily*31;
            text(ctx,"Expected gain from miracles:",x+8,y+(H*0.1*0.25),"24px"+FONT,"white","left","middle");
            text(ctx,"Hourly: "+hourly+" followers",x+8,y+(H*0.1*0.5),"24px"+FONT,"white","left","middle");
            text(ctx,"Daily: "+daily+" followers",x+8,y+(H*0.1*0.75),"24px"+FONT,"white","left","middle");
            text(ctx,"Monthly: "+monthly+" followers",x+8,y+(H*0.1),"24px"+FONT,"white","left","middle");
        }
    }
    this.drawRoulette = function (ctx) {
        var basew = 950;
        var baseh = 230;

        var padlock = "0n7y";
        var padlockw = T.width(padlock);
        var padlockh = T.height(padlock);

        var arrow = "0fwl";
        var arroww = T.width(arrow);
        var arrowh = T.height(arrow);

        var bkey = "0h3a";
        var hkey = "04e4";
        var bkeyw = T.width(bkey);
        var bkeyh = T.height(bkey);

        var initx = W*0.02;
        var distx = T.width("0iku")*1.01;

        if (mulChest && PK > 1) {
            ctx.save();
            ctx.translate(W*0.5+T.width("03fa")*0.5,H*0.964);
            ctx.rotate(180*Math.PI/180);
            T.draw(ctx,"03fa",0,0);
            ctx.restore();
            if (PK > 1 && PK <= 10) text(ctx,"x"+PK,W*0.5,H*0.9+T.height("03fa")*0.5,"40px"+FONT,"white","center","middle");
            else text(ctx,"x10",W*0.5,H*0.9+T.height("03fa")*0.5,"40px"+FONT,"white","center","middle");
        }

        if (mulChest && KU > 19) {
            ctx.save();
            ctx.translate(W*0.91,H*0.76);
            ctx.rotate(90*Math.PI/180);
            T.draw(ctx,"03fa",0,0,T.width("03fa")*0.5,T.height("03fa")*1.3);
            ctx.restore();
            if (KU > 19 && KU <= 100) text(ctx,"x"+Math.floor(KU/10),W*0.875,H*0.77+T.height("03fa")*0.5,"22px"+FONT,"white","center","middle");
            else text(ctx,"x10",W*0.875,H*0.77+T.height("03fa")*0.5,"22px"+FONT,"white","center","middle");
        }

        T.draw(ctx,"0n7y",W*0.5-padlockw/2,H*0.735-padlockh/2);
        var BRect = (new Rect(W*0.51-padlockw/2,H*0.81-padlockh/2,padlockw*0.9,padlockh*0.76)).small();
        if (openSync) {
            this.spinner(ctx,W*0.5,H*0.735,60);
        }
        else {
            if (xacc !== 0) {
                if (BRect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"0dud",W*0.5-padlockw/2,H*0.735-padlockh/2);
                    this.addZone("skipc",BRect,"skipc");
                } 
                T.draw(ctx,"0eb9",W*0.5-padlockw/2,H*0.735-padlockh/2);
            } else {
                if ((Date.now()-chestTimer) >= 3000) {
                    if (mulChest && PK > 1) {
                        if (BRect.isInside(GM.x,GM.y)) {
                            T.draw(ctx,"0dud",W*0.5-padlockw/2,H*0.735-padlockh/2);   
                        }
                        T.draw(ctx,"05jd",W*0.5-padlockw/2,H*0.735-padlockh/2);
                        if (PK > 1 && PK <= 10) this.addZone("mulchest",BRect,"mulchest",{"target":"normal","mul":PK});
                        else this.addZone("mulchest",BRect,"mulchest",{"target":"normal","mul":10});
                    } else {
                        if (BK > 0) {
                            if (BRect.isInside(GM.x,GM.y)) {
                                T.draw(ctx,"0dud",W*0.5-padlockw/2,H*0.735-padlockh/2);
                            }
                            T.draw(ctx,"0lvs",W*0.5-padlockw/2,H*0.735-padlockh/2);
                            this.addZone("ccase",BRect,"case",{"target":"normal"});
                        } else if (PK>0) {
                            if (BRect.isInside(GM.x,GM.y)) {
                                T.draw(ctx,"0dud",W*0.5-padlockw/2,H*0.735-padlockh/2);
                            }
                            T.draw(ctx,"05jd",W*0.5-padlockw/2,H*0.735-padlockh/2);
                            this.addZone("ccase",BRect,"case",{"target":"normal"});
                        } else  {
                            if (BRect.isInside(GM.x,GM.y)) {
                                T.draw(ctx,"0dud",W*0.5-padlockw/2,H*0.735-padlockh/2);
                            }
                            T.draw(ctx,"0884",W*0.5-padlockw/2,H*0.735-padlockh/2);
                            if (UM>=100) {
                                this.addZone("ccase1",BRect,"menu",{target:"shop",submenu:"home"});
                            } else {
                                this.addZone("ccase",BRect,"scene",{target:"buildings"});
                                this.addZone("ccase1",BRect,"mshop",{target:true});
                            }
                        }
                    }
                }
                else {
                    text(ctx,timer(((chestTimer+3000)-Date.now())/1000),W*0.5,H*0.755,"40px"+FONT,"white","center","middle");
                }
            }
        }

        ctx.fillStyle="rgba(10,10,10,0.3)";
        ctx.fillRect(W*0.5-basew/2+10-3,H*0.4-baseh/2+10-3,basew-20+6+3,baseh-20+6+2);
        ctx.fillStyle="rgba(37,84,101,1)";
        ctx.fillRect(W*0.5-basew/2+10,H*0.4-baseh/2+10,basew-20,baseh-20);


        ctx.save();
        ctx.beginPath();
        ctx.rect(W*0.515-basew/2,H*0.42-baseh/2,basew*0.968+2.5,baseh*0.89);
        ctx.closePath();
        ctx.clip();

        var t1=H*0.465;
        var t2=H*0.5;
        if(caseArray!=undefined){
            for (var i=caseArray.length-1;i > 0;--i){
                if (initx-xvel+T.width("0iku")>0 && initx-xvel<W) {
                    if (xacc == 0 && i != 4) {
                        if (xrew!==undefined) {
                            this.updateMData(xrew);
                            xrew=undefined;
                        }
                        if (caseArray[i]<-1) {
                            var hid=-(caseArray[i]+2)
                            var box="0gci";
                            var title="Common Hero";
                            if (HERO[hid].rarity==1) {
                                title="Rare Hero";
                                box="00bz";
                            } else if (HERO[hid].rarity==2) {
                                title="Legendary Hero";
                                box="0iku";
                            }
                            T.negative(ctx,box,initx-xvel,H*0.22);
                            this.drawMonster(ctx,caseArray[i],initx-xvel+T.width(box)/2,H*0.41,undefined,false,0.9,mdata.city.hero[hid]||1,false);
                            text(ctx,title,initx-xvel+T.width("0iku")/2,t1,"40px"+FONT,"black","center","middle");
                            text(ctx,HERO[hid].name,initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"black","center","middle");
                        } else {
                            T.negative(ctx,caseData[caseArray[i]].box,initx-xvel,H*0.22);
                            T.negative(ctx,caseData[caseArray[i]].prize,initx-xvel,H*0.22);
                            text(ctx,caseData[caseArray[i]].name,initx-xvel+T.width("0iku")/2,t1,"40px"+FONT,"white","center","middle");
                            if (caseData[caseArray[i]].t=="FOL") text(ctx,Math.max(caseData[caseArray[i]].v*(Math.floor(this.getFmul()/2)+1),Math.round(Math.min(bn(3,9),mdata.followers)*caseData[caseArray[i]].p)),initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"white","center","middle");
                            else if (caseData[caseArray[i]].t=="UM") text(ctx,caseData[caseArray[i]].v,initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"white","center","middle");
                            else if (caseData[caseArray[i]].t=="MUL")
                            {
                                    if (caseData[caseArray[i]].v/3600000 == 1) text(ctx,(caseData[caseArray[i]].v/3600000)+" Hour",initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"white","center","middle");
                                    else text(ctx,(caseData[caseArray[i]].v/3600000)+" Hours",initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"white","center","middle");
                            }
                            else if (caseData[caseArray[i]].t=="NRG") text(ctx,this.pn(data.stats.t.m.prod*caseData[caseArray[i]].v,"J")+" Hours",initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"white","center","middle");
                            else if (caseData[caseArray[i]].t=="DIS") text(ctx,caseData[caseArray[i]].v+" times",initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"white","center","middle");
                        }
                    } else {
                        if (caseArray[i]<-1) {
                            var hid=-(caseArray[i]+2)
                            var box="0gci";
                            var title="Common Hero";
                            if (HERO[hid].rarity==1) {
                                title="Rare Hero";
                                box="00bz";
                            } else if (HERO[hid].rarity==2) {
                                title="Legendary Hero";
                                box="0iku";
                            }
                            T.draw(ctx,box,initx-xvel,H*0.22);
                            this.drawMonster(ctx,caseArray[i],initx-xvel+T.width(box)/2,H*0.41,undefined,false,0.9,mdata.city.hero[hid]||1);
                            text(ctx,title,initx-xvel+T.width("0iku")/2,t1,"40px"+FONT,"black","center","middle");
                            text(ctx,HERO[hid].name,initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"black","center","middle");
                        } else {
                            T.draw(ctx,caseData[caseArray[i]].box,initx-xvel,H*0.22);
                            T.draw(ctx,caseData[caseArray[i]].prize,initx-xvel,H*0.22);
                            text(ctx,caseData[caseArray[i]].name,initx-xvel+T.width("0iku")/2,t1,"40px"+FONT,"black","center","middle");
                            if (caseData[caseArray[i]].t=="FOL") text(ctx,Math.max(caseData[caseArray[i]].v*(Math.floor(this.getFmul()/2)+1),Math.round(Math.min(bn(3,9),mdata.followers)*caseData[caseArray[i]].p)),initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"black","center","middle");
                            else if (caseData[caseArray[i]].t=="UM") text(ctx,caseData[caseArray[i]].v,initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"black","center","middle");
                            else if (caseData[caseArray[i]].t=="MUL")
                            {
                                    if (caseData[caseArray[i]].v/3600000 == 1) text(ctx,(caseData[caseArray[i]].v/3600000)+" Hour",initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"black","center","middle");
                                    else text(ctx,(caseData[caseArray[i]].v/3600000)+" Hours",initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"black","center","middle");
                            }
                            else if (caseData[caseArray[i]].t=="NRG") text(ctx,this.pn(data.stats.t.m.prod*caseData[caseArray[i]].v,"J")+" Hours",initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"black","center","middle");
                            else if (caseData[caseArray[i]].t=="DIS") text(ctx,caseData[caseArray[i]].v+" times",initx-xvel+T.width("0iku")/2,t2,"40px"+FONT,"black","center","middle");
                        }
                    }
                }
                initx+=distx;
            }
            xvel +=3*xacc;
            if (xacc > 4) xacc -= 0.03982;
            else if (xacc > 1) xacc -= 0.01;
            else if (xacc > 0.5) xacc -= 0.005;
            else if (xacc > 0) xacc -= randomEnd;
            else xacc = 0;
        }

        ctx.restore();

        T.draw(ctx,"0d7z",W*0.5-basew/2,H*0.4-baseh/2); // Tapa

        T.draw(ctx,arrow,W*0.5-arroww/2,H*0.265-arrowh/2);
        ctx.save();
        ctx.translate(W/2,H/2);
        ctx.scale(1,-1);
        T.draw(ctx,arrow,-arroww/2,-arrowh*0.85);
        ctx.restore();

        var popupbg = "04ey";
        var popupbgw = T.width(popupbg);
        var popupbgh = T.height(popupbg);

        if (BKS > 0 && BKS!==undefined && !BK){
            var x00=0.64;
            var y00=0.54;
            T.draw(ctx,popupbg,W*x00+popupbgw*0.125,H*y00+popupbgh*0.175,popupbgw*0.75,popupbgh*0.65);
            text(ctx,"Can open a free chest in:",W*x00+popupbgw/2,H*y00+popupbgh/2-20,"40px"+FONT,"white","center","middle");
            text(ctx,timer(BKS),W*x00+popupbgw/2,H*y00+popupbgh/2+10,"60px"+FONT,"white","center","middle");
        }
        // Hero chest
        var hcx0=W*0.7;
        var hcy0=H*0.7+15;
        T.draw(ctx,"03fa",hcx0+T.width("03fa")*0.738,hcy0-20);
        text(ctx,Math.floor(KU/10),hcx0+T.width("03fa")*0.738+T.width("03fa")/2,hcy0+5,"30px"+FONT,"rgba(78,44,13,1.0)","center","middle");
        T.draw(ctx,"03u2",hcx0,hcy0);
        var kup=[
            73,177,
            83,219,
            113,248,
            153,268,
            197,276,
            241,276,
            285,268,
            325,248,
            355,219,
            365,177
        ];
        var bw=T.width("06ur");
        var bh=T.height("06ur");
        for (var i=0; i<10&&i<KU; ++i) {
            T.draw(ctx,"06ur",hcx0+kup[i*2]/2-bw/2+1,hcy0+kup[i*2+1]/2-bh/2);
        }
        if (KU<10) {
            T.draw(ctx,"04y8",hcx0,hcy0);
        } else {
            if (openSync) {
                this.spinner(ctx,hcx0+T.width("03u2")/2,hcy0+T.height("03u2")/2.5,40);
            } else if (xacc !== 0) {
                T.draw(ctx,"04y8",hcx0,hcy0);
            } else {
                if ((Date.now()-chestTimer) >= 3000) {
                    var hrect=(new Rect(hcx0,hcy0,T.width("03u2"),T.height("03u2"))).small();
                    if (hrect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0a7y",hcx0,hcy0);
                        if (mulChest && KU > 19) {
                            if (KU > 19 && KU <= 100) this.addZone("mulchest",hrect,"mulchest",{"target":"hero","mul":Math.floor(KU/10)});
                            else this.addZone("mulchest",hrect,"mulchest",{"target":"hero","mul":10});
                        }
                        else this.addZone("hchest",hrect,"case",{"target":"hero"});
                    }
                    T.draw(ctx,"0034",hcx0,hcy0);
                }
                else {
                    text(ctx,timer(((chestTimer+3000)-Date.now())/1000),hcx0+T.width("03u2")*0.515,hcy0+T.height("03u2")*0.4,"40px"+FONT,"white","center","middle");
                }
            }
        }
        // keys
        T.draw(ctx,"01qr",W*0.5-T.width("0d7z")/2,H*0.68);
        text(ctx,PK,W*0.5-T.width("0d7z")/2+W*0.14+10,H*0.737,"70px"+FONT,"white","right","right");

        var err = 2;
        var BKrect = (new Rect(W*0.51-T.width("0d7z")/2-err,H*0.79,bkeyw*0.94,bkeyh*0.8)).small();
        if (BKrect.isInside(GM.x,GM.y)){
            T.draw(ctx,hkey,W*0.5-T.width("0d7z")/2-err,H*0.77);
            this.addZone("goshop",BKrect,"menu",{target:"shop",submenu:"home"});
        }
        else T.draw(ctx,bkey,W*0.5-T.width("0d7z")/2-err,H*0.77);

        T.draw(ctx,"0nww",W*0.912,H*0.145);
        var trect=(new Rect(W*0.912,H*0.145,T.width("0nww"),T.height("0nww"))).small();
        if (trect.isInside(GM.x,GM.y)) {
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(W, 0);
            ctx.lineTo(W, H);
            ctx.lineTo(0, H);
            ctx.lineTo(0, 0);
            ctx.closePath();

            // Keys
            ctx.moveTo(W*0.043, H*0.695);
            ctx.lineTo(W*0.043, H*0.78);
            ctx.lineTo(W*0.265, H*0.78);
            ctx.lineTo(W*0.265, H*0.695);
            ctx.lineTo(W*0.043, H*0.695);
            ctx.closePath();

            // Buy Keys
            ctx.moveTo(W*0.043, H*0.79);
            ctx.lineTo(W*0.043, H*0.916);
            ctx.lineTo(W*0.37, H*0.916);
            ctx.lineTo(W*0.37, H*0.79);
            ctx.lineTo(W*0.043, H*0.79);
            ctx.closePath();

            // Timer
            ctx.moveTo(W*0.745, H*0.615);
            ctx.lineTo(W*0.745, H*0.665);
            ctx.lineTo(W*0.89, H*0.665);
            ctx.lineTo(W*0.89, H*0.615);
            ctx.lineTo(W*0.745, H*0.615);
            ctx.closePath();

            // Hero Chest
            ctx.moveTo(W*0.7, H*0.7);
            ctx.lineTo(W*0.7, H*0.97);
            ctx.lineTo(W*0.918, H*0.97);
            ctx.lineTo(W*0.918, H*0.7);
            ctx.lineTo(W*0.7, H*0.7);
            ctx.closePath();


            ctx.fillStyle="rgba(0,0,0,0.6)";
            ctx.fill();

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.043-1,H*0.695-32-5-1,W*0.21+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.043,H*0.695-32-5,W*0.21,H*0.05);
            text(ctx,"Available keys to open chests",W*0.043+3,H*0.695-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.043-1,H*0.916+5-1,W*0.22+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.043,H*0.916+5,W*0.22,H*0.05);
            text(ctx,"Link to shop to buy more keys",W*0.043+3,H*0.916+16+5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.27-1,H*0.916+5-1,W*0.26+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.27,H*0.916+5,W*0.26,H*0.05);
            text(ctx,"Hold ctrl to use 10 keys in one click",W*0.27+3,H*0.916+16+5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.66-1,H*0.615-32-5-1,W*0.31+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.66,H*0.615-32-5,W*0.31,H*0.05);
            text(ctx,"You can open a free chest every 24 hours",W*0.66+3,H*0.615-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.63-1,H*0.90+5-1,W*0.36+2,H*0.09+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.63,H*0.90+5,W*0.36,H*0.09);
            text(ctx,"Every 10 chests opened, you'll receive a Hero Chest",W*0.63+3,H*0.90+16+5,"32px"+FONT,"white","left","middle");
            text(ctx,"Top number is the amount of available Hero Chests",W*0.63+3,H*0.90+16+5+27,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.1-2,H*0.05-2,W*0.8+4,H*0.45+4);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.1,H*0.05,W*0.8,H*0.45);

            text(ctx,"CHESTS PERCENTAGES:",W*0.38,H*0.1,"60px"+FONT,"white","center","middle");
            text(ctx,"12.0%",W*0.588,H*0.1,"60px"+FONT,"rgb(65,105,225)","center","middle");
            text(ctx,"6.0%",W*0.673,H*0.1,"60px"+FONT,"rgb(147,112,219)","center","middle");
            text(ctx,"2.0%",W*0.75,H*0.1,"60px"+FONT,"gold","center","middle");
            var c1=W*0.1+10;
            var c2=W*0.5+5;
            var CF = Math.max(400*(Math.floor(this.getFmul()/2)+1),Math.round(Math.min(bn(3,9),mdata.followers)*0.0001));
            var RF =Math.max(2000*(Math.floor(this.getFmul()/2)+1),Math.round(Math.min(bn(3,9),mdata.followers)*0.0005));
            var LF =Math.max(5000*(Math.floor(this.getFmul()/2)+1),Math.round(Math.min(bn(3,9),mdata.followers)*0.0015))
            // Column 1
            text(ctx,"* Common Disasters: x10 Disasters 20 Times",c1,H*0.19,"32px"+FONT,"rgb(65,105,225)","left","middle");
            text(ctx,"* Rare Disasters: x10 Disasters 50 Times",c1,H*0.19+22,"32px"+FONT,"rgb(147,112,219)","left","middle");
            text(ctx,"* Legendary Disasters: x10 Disasters 200 Times",c1,H*0.19+44,"32px"+FONT,"gold","left","middle");
            text(ctx,"* Common Followers: "+CF+" Followers",c1,H*0.19+66,"32px"+FONT,"rgb(65,105,225)","left","middle");
            text(ctx,"* Rare Followers: "+RF+" Followers",c1,H*0.19+88,"32px"+FONT,"rgb(147,112,219)","left","middle");
            text(ctx,"* Legendary Followers: "+LF+" Followers",c1,H*0.19+110,"32px"+FONT,"gold","left","middle");
            text(ctx,"* Common Universe Marbles: 20 Universe Marbles",c1,H*0.19+132,"32px"+FONT,"rgb(65,105,225)","left","middle");
            text(ctx,"* Rare Universe Marbles: 50 Universe Marbles",c1,H*0.19+154,"32px"+FONT,"rgb(147,112,219)","left","middle");

            // Column 2
            text(ctx,"* Legendary Universe Marbles: 200 Universe Marbles",c2,H*0.19,"32px"+FONT,"gold","left","middle");
            text(ctx,"* Common Multiplier: 1 Hour x3 Multiplier",c2,H*0.19+22,"32px"+FONT,"rgb(65,105,225)","left","middle");
            text(ctx,"* Rare Multiplier: 4 Hour x3 Multiplier",c2,H*0.19+44,"32px"+FONT,"rgb(147,112,219)","left","middle");
            text(ctx,"* Legendary Multiplier: 12 Hour x3 Multiplier",c2,H*0.19+66,"32px"+FONT,"gold","left","middle");
            text(ctx,"* Common Heroes: 1 Common Hero",c2,H*0.19+88,"32px"+FONT,"rgb(65,105,225)","left","middle");
            text(ctx,"* Rare Heroes: 1 Rare Hero",c2,H*0.19+110,"32px"+FONT,"rgb(147,112,219)","left","middle");
            text(ctx,"* Legendary Heroes: 1 Legendary Hero",c2,H*0.19+132,"32px"+FONT,"gold","left","middle");
        }

        //text(ctx,"* HINT: You can press ctrl to open 10 chests in one click!!",W*0.05,H*0.955,"24px"+FONT,"black","left","middle");

        // Multiple Chest Pop-UP
        if (mulChestArray !== undefined) {
            var bgw = W*0.96;
            var bgh = H*0.75;
            roundedRect(ctx,W*0.5-(bgw/2),H*0.5-(bgh/2),bgw,bgh,15,"rgba(216,233,255,1)");
            roundedRect(ctx,W*0.5-(bgw/2)+2,H*0.5-(bgh/2)+2,bgw-4,bgh-4,15,"rgba(33,33,33,1)");

            // Draw Prizes
            var counter = 0;
            for (var i=0; i<2; ++i) {
                for (var j=0; j<5; ++j) {
                    if (counter < mulChestArray.length) {
                        if (mulChestArray[counter]<-1) {
                            var hid=-(mulChestArray[counter]+2)
                            var box="0gci";
                            var title="Common Hero";
                            if (HERO[hid].rarity==1) {
                                title="Rare Hero";
                                box="00bz";
                            } else if (HERO[hid].rarity==2) {
                                title="Legendary Hero";
                                box="0iku";
                            }
        
                            T.draw(ctx,box,W*0.025+(j*W*0.19),H*0.175+(i*H*0.3));
                            this.drawMonster(ctx,mulChestArray[counter],W*0.025+(j*W*0.19)+T.width(box)/2,H*0.175+(i*H*0.3)+122,undefined,false,0.9,mdata.city.hero[hid]||1);
                            text(ctx,title,W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+160,"40px"+FONT,"black","center","middle");
                            text(ctx,HERO[hid].name,W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+180,"40px"+FONT,"black","center","middle");
                        } else {
                            T.draw(ctx,caseData[mulChestArray[counter]].box,W*0.025+(j*W*0.19),H*0.175+(i*H*0.3));
                            T.draw(ctx,caseData[mulChestArray[counter]].prize,W*0.025+(j*W*0.19),H*0.175+(i*H*0.3));
                            text(ctx,caseData[mulChestArray[counter]].name,W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+160,"40px"+FONT,"black","center","middle");
                            if (caseData[mulChestArray[counter]].t=="FOL") text(ctx,Math.max(caseData[mulChestArray[counter]].v*(Math.floor(this.getFmul()/2)+1),Math.round(Math.min(bn(3,9),mdata.followers)*caseData[mulChestArray[counter]].p)),W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+180,"40px"+FONT,"black","center","middle");
                            else if (caseData[mulChestArray[counter]].t=="UM") text(ctx,caseData[mulChestArray[counter]].v,W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+180,"40px"+FONT,"black","center","middle");
                            else if (caseData[mulChestArray[counter]].t=="MUL")
                            {
                                    if (caseData[mulChestArray[counter]].v/3600000 == 1) text(ctx,(caseData[mulChestArray[counter]].v/3600000)+" Hour",W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+180,"40px"+FONT,"black","center","middle");
                                    else text(ctx,(caseData[mulChestArray[counter]].v/3600000)+" Hours",W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+180,"40px"+FONT,"black","center","middle");
                            }
                            else if (caseData[mulChestArray[counter]].t=="NRG") text(ctx,this.pn(data.stats.t.m.prod*caseData[mulChestArray[counter]].v,"J")+" Hours",W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+180,"40px"+FONT,"black","center","middle");
                            else if (caseData[mulChestArray[counter]].t=="DIS") text(ctx,caseData[mulChestArray[counter]].v+" times",W*0.025+(j*W*0.19)+T.width("0iku")/2,H*0.175+(i*H*0.3)+180,"40px"+FONT,"black","center","middle");
                        }
                    }
                    ++counter;
                }   
            }

            // close
            var cw = T.width("0evr");
            var ch = T.height("0evr");
            var crect = (new Rect(W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13,cw,ch)).small();
            if (crect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
                this.addZone("cmulch",crect,"cmulch");
            }
            else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
        }

    }
    this.benefit2text = function (benefit) {
        if (benefit.cps!==undefined) return "+"+benefit.cps+" clicks per second";
        if (benefit.dps!==undefined) return "+"+benefit.dps+" disaster spawn rate";
        if (benefit.disaster!==undefined) return "+"+benefit.disaster+" clicks per disaster";
        if (benefit.td!==undefined) return "x"+benefit.td+" Energy Orbs multiplier";
    }
    this.drawMilestones = function (ctx) {
        var m0=0+milePage*10;
        var m1=Math.min(m0+10,milestones.length);
        var bw = T.width("0h9i");
        var bh = T.height("0h9i");
        var x = W/2-bw/2;
        var y = 125;
        var th = 0;

        var actMile = 0 + 10*milePage;
        var last = actMile+10;
        for (var i=m0; i<m1; ++i) {
            if (mdata.followers<milestones[i].amount) {
                last=i;
                th=mapf(mdata.followers,i>0?milestones[i-1].amount:0,milestones[i].amount,mileZones[i-m0]/2,mileZones[i-m0+1]/2);
                break;
            }
        }
        // draw bar
        T.draw(ctx,"0h9i",x,y);
        ctx.save();
        ctx.beginPath();
        ctx.rect(x,y+th,bw,bh-th);
        ctx.closePath();
        ctx.clip();
        T.draw(ctx,"0bmn",x,y);
        ctx.restore();
        T.draw(ctx,"0bpe",x,y);
        // draw left holders
        ctx.save();
        ctx.translate(W/2,0);
        ctx.scale(-1,1);
        // left
        for (var i=m0; i<m1; i+=2) {
            T.draw(ctx,"096q",140,150+Math.floor((i%10)/2)*95);
        }
        ctx.restore();
        for (var i=m0; i<m1; ++i) {
            var dir=1;
            var ry = 110+Math.floor((9-(i%10))/2)*95;
            if (i%2==0) {
                dir=-1;
                ry=150+Math.floor((9-(i%10))/2)*95;
            } else T.draw(ctx,"096q",W/2+140,ry);
            var color="#4C4C4C";
            if (i<last&&last!==-1) {
                color="#4C004C";
                T.draw(ctx,milestones[i].icon,W/2+90*dir-T.width(milestones[i].icon)/2,ry+T.height("0hiy")/2-T.height(milestones[i].icon)/1.88);
            } else {
                T.negative(ctx,milestones[i].icon,W/2+90*dir-T.width(milestones[i].icon)/2,ry+T.height("0hiy")/2-T.height(milestones[i].icon)/1.88);
            }
            text(ctx,milestones[i].amount,W/2+155*dir,ry+18,"36px"+FONT,color,i%2==0?"right":"left","middle",color,2);
            text(ctx,this.benefit2text(milestones[i].benefit),W/2+155*dir,ry+50,"32px"+FONT,color,i%2==0?"right":"left","middle");
            T.draw(ctx,"0hiy",W/2+90*dir-T.width("0hiy")/2,ry);
            actMile++;
        }


        var nw=T.width("09sg");
        var nh=T.height("09sg");
        if (milePage < Math.ceil(milestones.length/10)-1) {
            T.draw(ctx,"09sg",W*0.92,H*0.5);
            this.addZone("milenext",(new Rect(W*0.92,H*0.5,nw,nh)).small(),"arrowmile",{target:(milePage+1)});
        }
        ctx.save();
        ctx.translate(W*0.08-nw/2,H*0.5+nh/2)
        ctx.scale(-1,1);
        if (milePage > 0) {
            T.draw(ctx,"09sg",-nw/2,-nh/2);
            this.addZone("mileprev",(new Rect(W*0.08-nw,H*0.5,nw,nh)).small(),"arrowmile",{target:milePage-1});
        }
        ctx.restore();
    }

    this.drawCity = function (ctx) {
        if (fbattleSync+2*60*1000<Date.now()) this.fsync();
        var elements = ["0ihs", "0nig", "0n1n", "09m7", "0kda"]; //Air Water Trees Animals Hero
        var eSphere = ["03xz", "0l2b", "0cyo", "0ckv"];
        var tab2type = [0, 3, 1, 2];
        var tabON = "050s";
        var tabOFF = "0p2y";
        var avaHero = false;
        for (var i = 0; i < HERO.length; ++i) if (mdata.city.hero[i] != 0) avaHero = true;
        if (avaHero == false) elements.splice(4, 1);

        var btrect = (new Rect(W * 0.667, H * 0.12, T.width("0di2"), T.height("0di2") * 0.8)).small();
        if (btrect.isInside(GM.x, GM.y) && !simwbscreen) {
            T.draw(ctx, "04oc", W * 0.667, H * 0.12, T.width("0di2"), T.height("0di2") * 0.8);
            this.addZone("bts", btrect, "bts");
        }
        else T.draw(ctx, "0di2", W * 0.667, H * 0.12, T.width("0di2"), T.height("0di2") * 0.8);

        if (cityPage == "hourly") {
            text(ctx, "Playground", W * 0.667 + T.width("0di2") * 0.5, H * 0.12 + T.height("0di2") * 0.8 * 0.5, "38px" + FONT, "rgba(255,250,210,1)", "center", "middle");
            // Clear Grid
            var any = false;
            if (mdata.city !== undefined && mdata.city.setup !== undefined) {
                for (var i = 0; i < mdata.city.setup.length; ++i) {
                    if (mdata.city.setup[i] != -1) any = true;
                }
            }
            T.draw(ctx, "0gws", W * 0.173 - T.width("0gws"), H * 0.18 + T.height("08g3") - T.height("0gws"));
            if (placeSync == undefined && any) {
                this.addZone("clGrid", (new Rect(W * 0.185 - T.width("0gws"), H * 0.185 + T.height("08g3") - T.height("0gws"), T.width("0gws") * 0.85, T.height("0gws") * 0.85)).small(), "clGrid");
            }
            var bx = 1024 * 0.163;
            var by = 640 * 0.185;
            T.draw(ctx, "08g3", bx, by); // Fons Batalles

            // Win - Draw - Lost
            var xwdl = W * 0.66;
            var ywdl = H * 0.21 - T.height("06tv") + 45;
            T.draw(ctx, "06tv", xwdl, ywdl);
            text(ctx, "Win", xwdl + T.width("06tv") * 0.225, ywdl + T.height("06tv") * 0.4, "28px" + FONT, "black", "center", "middle");
            text(ctx, "Draw", xwdl + T.width("06tv") * 0.5, ywdl + T.height("06tv") * 0.4, "28px" + FONT, "black", "center", "middle");
            text(ctx, "Lost", xwdl + T.width("06tv") * 0.775, ywdl + T.height("06tv") * 0.4, "28px" + FONT, "black", "center", "middle");
            if (mdata.city !== undefined && mdata.city.result !== undefined) {
                text(ctx, mdata.city.result[0], xwdl + T.width("06tv") * 0.225, ywdl + T.height("06tv") * 0.7, "22px" + FONT, "rgb(0,82,135)", "center", "middle");
                text(ctx, mdata.city.result[1], xwdl + T.width("06tv") * 0.5, ywdl + T.height("06tv") * 0.7, "22px" + FONT, "rgb(39,62,78)", "center", "middle");
                text(ctx, mdata.city.result[2], xwdl + T.width("06tv") * 0.775, ywdl + T.height("06tv") * 0.7, "22px" + FONT, "rgb(124,53,53)", "center", "middle");
            }

            // Historial
            var btx = 1024 * 0.66;
            var bty = 640 * 0.185;
            var bw = T.width("0c2k");
            var bh = T.height("0c2k");
            T.draw(ctx, "0c2k", btx, bty + 45, bw, bh * 0.905);
            if (mdata.city !== undefined && mdata.city.log !== undefined) {
                var begin = Math.min(mdata.city.log.length, battlePage * 5);
                var end = Math.min(mdata.city.log.length, (battlePage + 1) * 5);
                var pw = T.width("0i93");
                var ph = T.height("0i93");
                var px = btx + bw / 2 - pw / 2;
                var py = bty + (bh - ph * 5) / 2;
                var brx = 20; // border x
                var bry = 20; // border y
                for (var i = 0; i < end - begin; ++i) {
                    var cpy = py + ph * 0.9 * i + 45;
                    T.draw(ctx, "0i93", px, cpy, pw, ph * 0.9);
                    var crect = (new Rect(px, cpy, pw, ph * 0.9)).small();
                    this.addZone("log_" + i, crect, "log", { target: begin + i });
                    var result = "WIN";
                    var rcolor = "rgb(0,82,135)";
                    if (mdata.city.log[begin + i].result == -1) {
                        result = "LOST";
                        rcolor = "rgb(124,53,53)";
                    } else if (mdata.city.log[begin + i].result == 0) {
                        result = "DRAW";
                        rcolor = "rgb(39,62,78)";
                    }

                    var rankd = mdata.city.log[begin + i].rankd;
                    if (rankd > 0) rankd = "+" + rankd;

                    var date = new Date(mdata.city.log[begin + i].date);
                    var dd = date.getDate();
                    var mm = date.getMonth() + 1;
                    var yyyy = date.getFullYear();
                    var hh = date.getHours();
                    var mn = (date.getMinutes() < 10 ? '0' : '') + date.getMinutes();

                    text(ctx, result, px + brx, cpy + bry, "32px" + FONT, rcolor, "left", "top");
                    text(ctx, " vs " + mdata.city.log[begin + i].enemy, px + brx + mtext(ctx, result, px + brx, cpy + bry, "32px" + FONT, "black", "left", "top"), cpy + bry + 2, "26px" + FONT, "black", "left", "top");
                    text(ctx, dd + "/" + mm + "/" + yyyy + " " + hh + ":" + mn, px + pw - brx, cpy + bry + 2, "26px" + FONT, "black", "right", "top");

                    text(ctx, "Gain " + mdata.city.log[begin + i].earn + " Star Dust", px + brx, cpy + ph - bry, "28px" + FONT, "black", "left", "bottom");
                    var textpx = 0;
                    text(ctx, ")", px + pw - brx - textpx, cpy + ph - bry, "28px" + FONT, "black", "right", "bottom");
                    textpx = textpx + mtext(ctx, ")", px + pw - brx - textpx, cpy + ph - bry, "28px" + FONT, "black", "right", "bottom");
                    if (mdata.city.log[begin + i].rankd > 0) text(ctx, rankd, px + pw - brx - textpx, cpy + ph - bry, "28px" + FONT, "green", "right", "bottom");
                    else text(ctx, rankd, px + pw - brx - textpx, cpy + ph - bry, "28px" + FONT, "red", "right", "bottom");
                    textpx = textpx + mtext(ctx, rankd, px + pw - brx - textpx, cpy + ph - bry, "28px" + FONT, "green", "right", "bottom");
                    text(ctx, "Ranking: " + mdata.city.log[begin + i].rank + "(", px + pw - brx - textpx, cpy + ph - bry, "28px" + FONT, "black", "right", "bottom");

                    if (crect.isInside(GM.x, GM.y)) {
                        ctx.fillStyle = "rgba(255,255,255,0.2)";
                        ctx.fillRect(px + pw * 0.02, cpy + ph * 0.05, pw * 0.96, ph * 0.845);
                    }
                }
                var ew = T.width("0f9n");
                var eh = T.height("0f9n");
                if (begin != 0) {
                    var x = 1024 * 0.66 + T.width("0c2k") / 2;
                    var y = 640 * 0.21 + eh / 2;
                    ctx.save();
                    ctx.translate(x, y);
                    ctx.scale(1, -1);
                    T.draw(ctx, "0f9n", -ew / 2, -eh / 2 - 45);
                    ctx.restore();
                    this.addZone("log_p", (new Rect(x - ew / 2, y - eh / 2 + 45, ew, eh)).small(), "logP", { target: battlePage - 1 });
                }

                if (end < mdata.city.log.length) {
                    var x = 1024 * 0.66 + T.width("0c2k") / 2 - ew / 2;
                    var y = 640 * 0.165 + T.height("0c2k") - eh;
                    T.draw(ctx, "0f9n", x, y);
                    this.addZone("log_m", (new Rect(x, y, ew, eh)).small(), "logP", { target: battlePage + 1 });
                }
            }

            this.drawMonsterTabs(ctx, "city");

            if (cityClick != undefined) {
                if (swapping) {
                    var mon = mdata.city.setup[cityClick.initPos];
                    if (mon < -1) {
                        var id = cityClick.id;
                        var img = HERO[(cityClick.id * -1) - 2].img;
                    }
                    else {
                        var id = cityClick.id;
                        var img = MONSTERS[cityClick.id].img;
                    }
                    var lvl = 1;
                    if (id < -1) lvl = mdata.city.hero[-(id + 2)];
                    this.drawMonster(ctx, id, GM.x, GM.y + T.height(img) / 2, undefined, false, 1, lvl);
                }
                else {
                    if (typeTab != 4 && !searchTab) {
                        var id = cityClick.id;
                        var img = MONSTERS[cityClick.id].img;
                    }
                    else {
                        var id = cityClick.id;
                        var img = HERO[(cityClick.id * -1) - 2].img;
                    }
                    var lvl = 1;
                    if (id < -1) lvl = mdata.city.hero[-(id + 2)];
                    this.drawMonster(ctx, id, GM.x, GM.y + T.height(img) / 2, undefined, false, 1, lvl);
                }
            }

            // helper tooltip
            var trect = (new Rect(W * 0.93, H * 0.135, T.width("0nww") * 0.85, T.height("0nww") * 0.85)).small();
            ctx.save();
            ctx.globalAlpha = 0.8;
            T.draw(ctx, "0nww", W * 0.93, H * 0.135, T.width("0nww") * 0.85, T.height("0nww") * 0.85);
            ctx.restore();
            if (trect.isInside(GM.x, GM.y)) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(W, 0);
                ctx.lineTo(W, H);
                ctx.lineTo(0, H);
                ctx.lineTo(0, 0);
                ctx.closePath();

                // Followers & Line Info
                ctx.moveTo(W*0.024, H*0.100);
                ctx.lineTo(W*0.024, H*0.195);
                ctx.lineTo(W*0.160, H*0.195);
                ctx.lineTo(W*0.160, H*0.100);
                ctx.lineTo(W*0.024, H*0.100);
                ctx.closePath();
                
                // Elements
                ctx.moveTo(W*0.170, H*0.035);
                ctx.lineTo(W*0.170, H*0.17);
                ctx.lineTo(W*0.252, H*0.17);
                ctx.lineTo(W*0.252, H*0.035);
                ctx.lineTo(W*0.170, H*0.035);
                ctx.closePath();

                ctx.moveTo(px, py + 40);
                ctx.lineTo(px, py + 40 + ph);
                ctx.lineTo(px + pw, py + 40 + ph);
                ctx.lineTo(px + pw, py + 40);
                ctx.lineTo(px, py + 40);
                ctx.closePath();

                ctx.moveTo(16 + bx, 15 + by + 320);
                ctx.lineTo(16 + bx, 15 + by + 400);
                ctx.lineTo(16 + bx + 480, 15 + by + 400);
                ctx.lineTo(16 + bx + 480, 15 + by + 320);
                ctx.lineTo(16 + bx, 15 + by + 320);
                ctx.closePath();

                ctx.moveTo(16 + bx + 80, 15 + by + 80);
                ctx.lineTo(16 + bx + 80, 15 + by + 160);
                ctx.lineTo(16 + bx + 160, 15 + by + 160);
                ctx.lineTo(16 + bx + 160, 15 + by + 80);
                ctx.lineTo(16 + bx + 80, 15 + by + 80);
                ctx.closePath();

                ctx.moveTo(W * 0.137, H * 0.908);
                ctx.lineTo(W * 0.137, H * 0.968);
                ctx.lineTo(W * 0.175, H * 0.968);
                ctx.lineTo(W * 0.175, H * 0.908);
                ctx.lineTo(W * 0.137, H * 0.908);
                ctx.closePath();

                ctx.fillStyle = "rgba(0,0,0,0.5)";
                ctx.fill();

                ctx.fillStyle = "rgba(36,36,36,0.95)";
                ctx.fillRect(W * 0.26, H * 0.12, W * 0.2, H * 0.05);
                text(ctx, "Counter elements table", (W * 0.26) + (W * 0.2) / 2, (H * 0.12) + (H * 0.05) / 2, "32px" + FONT, "white", "center", "middle");

                ctx.fillStyle = "rgba(36,36,36,0.95)";
                ctx.fillRect(W * 0.024, H * 0.20, W * 0.2, H * 0.05);
                text(ctx, "Followers & Line Info", (W * 0.024) + (W * 0.2) / 2, (H * 0.20) + (H * 0.05) / 2, "32px" + FONT, "white", "center", "middle");

                ctx.fillStyle = "rgba(36,36,36,0.95)";
                ctx.fillRect(px, py + 40 + ph, pw, ph);
                text(ctx, "Click the Log to view the Battle", px + pw / 2, py + 40 + ph + ph / 2, "32px" + FONT, "white", "center", "middle");

                this.drawMonster(ctx, 0, bx + 136, by + 175);
                ctx.fillStyle = "rgba(36,36,36,0.95)";
                ctx.fillRect(bx + 190, by + 95, 260, 80);
                text(ctx, "- Drag a monster to place it", 260 * 0.5 + bx + 190, 80 * 0.33 + by + 95, "32px" + FONT, "white", "center", "middle");
                text(ctx, "- Double click to remove it", 260 * 0.5 + bx + 190, 80 * 0.67 + by + 95, "32px" + FONT, "white", "center", "middle");

                ctx.fillStyle = "rgba(36,36,36,0.95)";
                ctx.fillRect(bx + 75, by + 275, 360, 40);
                text(ctx, "A row represents a team, fighting from right to left", 320 * 0.5 + bx + 80 + 15, 40 * 0.5 + by + 275, "32px" + FONT, "white", "center", "middle");

                ctx.fillStyle = "rgba(36,36,36,0.95)";
                ctx.fillRect(bx + 15, by + 435, 480, 40);
                text(ctx, "For each fight, 1 row of the 6 will be picked at random. Place 1 creature per row first", 320 * 0.5 + bx + 80 + 15, 40 * 0.5 + by + 435, "24px" + FONT, "white", "center", "middle");

                ctx.fillStyle = "rgba(36,36,36,0.95)";
                ctx.fillRect(W * 0.03, H * 0.908, 100, 40);
                text(ctx, "Clear Grid", W * 0.08, H * 0.94, "32px" + FONT, "white", "center", "middle");

                var nRow = 6;
                for (var i = 0; i < 6; i++) {
                    text(ctx, nRow + "º" + " turn", 40 + 16 + bx + 80 * i, 40 * 0.5 + by + 355, "32px" + FONT, "white", "center", "middle");
                    nRow--;
                }
            }
        }
        else {
            text(ctx, "Hourly", W * 0.667 + T.width("0di2") * 0.5, H * 0.12 + T.height("0di2") * 0.8 * 0.5, "38px" + FONT, "rgba(255,250,210,1)", "center", "middle");
            this.drawPlayground(ctx);
        }
    }
    this.drawMonsterTooltip = function (ctx,i,pos,maxnumpages,type,lvl,mArray,prom) {
        var elements = ["Air","Earth","Fire","Water","Void"];
        var elements_short = ["A","E","F","W","V"];
        var wTool = 300;
        var hTool = T.height("0c2t")*0.9;
        var xt = W*0.14;
        var yt = (640*(0.223+0.145*2))+T.height("0fj5")/2-hTool/2;
        var reposy=0;
        if (prom===undefined) prom=0;
        if (flashOpen || inDungeon) {
            xt=W*0.23;
            yt=(640*(0.223+0.145*2))+T.height("0fj5")/2-hTool/2-50;
            reposy=45;
        } else if (halloweenOpen) {
            xt=W*0.23;
            yt=(640*(0.223+0.145*2))+T.height("0fj5")/2-hTool/2-50-H*0.015;
            reposy=45;
        }
        ctx.fillStyle="rgba(60,60,60,0.8)";
        ctx.fillRect(xt,yt,wTool,hTool);
        

        if (type == "monster") {
            ctx.beginPath();
            ctx.moveTo(xt-W*0.02+0.4, (640*(0.223+0.145*pos))+T.height("0fj5")/2-reposy);
            ctx.lineTo(xt+0.4, ((640*(0.223+0.145*pos))+T.height("0fj5")/2)+H*0.02-reposy);
            ctx.lineTo(xt+0.4, ((640*(0.223+0.145*pos))+T.height("0fj5")/2)-H*0.02-reposy);
            ctx.closePath();
            ctx.fillStyle="rgba(60,60,60,0.8)";
            ctx.fill();
            var size = "50px"+FONT;
            if (i*1+monstersPage[typeTab]*20 >= 60) size = "46px"+FONT;
            text(ctx,mArray[i*1+monstersPage[typeTab]*20].name,xt+wTool/2,yt+hTool*0.05,size,"white","center","middle");
            text(ctx,"("+elements_short[mArray[i*1+monstersPage[typeTab]*20].type]+(Math.floor(i/4+monstersPage[typeTab]*5)+1)+")",xt+wTool/2,yt+hTool*0.1,"36px"+FONT,"white","center","middle");
            this.drawMonster(ctx,i*1+monstersPage[typeTab]*20,xt+wTool/2,yt+hTool*0.51,undefined,false,2);
            var mhp = mtext(ctx,mArray[i*1+monstersPage[typeTab]*20].hp,xt+wTool/2,yt+hTool*0.61,"36px"+FONT,"white","center","middle");
            text(ctx,mArray[i*1+monstersPage[typeTab]*20].hp,xt+wTool/2,yt+hTool*0.61,"36px"+FONT,"white","center","middle");
            T.draw(ctx,"0fuu",xt+wTool/2-T.width("0fuu")-mhp/2,yt+hTool*0.605-T.height("0fuu")/2);
            var matk = mtext(ctx,mArray[i*1+monstersPage[typeTab]*20].atk,xt+wTool/2,yt+hTool*0.705,"36px"+FONT,"white","center","middle");
            text(ctx,mArray[i*1+monstersPage[typeTab]*20].atk,xt+wTool/2,yt+hTool*0.71,"36px"+FONT,"white","center","middle");
            T.draw(ctx,"0e9t",xt+wTool/2-T.width("0e9t")-matk/2,yt+hTool*0.705-T.height("0e9t")/2);
            text(ctx,"COST: "+bint(mArray[i*1+monstersPage[typeTab]*20].cost,data.bintmode),xt+wTool/2,yt+hTool*0.81,"36px"+FONT,"white","center","middle");
            text(ctx,"ELEMENT: "+elements[mArray[i*1+monstersPage[typeTab]*20].type],xt+wTool/2,yt+hTool*0.91,"36px"+FONT,"white","center","middle");
        }
        else {
            ctx.beginPath();
            ctx.moveTo(xt-W*0.02+0.4, (640*(0.223+0.145*i))+T.height("0fj5")/2-reposy);
            ctx.lineTo(xt+0.4, ((640*(0.223+0.145*i))+T.height("0fj5")/2)+H*0.02-reposy);
            ctx.lineTo(xt+0.4, ((640*(0.223+0.145*i))+T.height("0fj5")/2)-H*0.02-reposy);
            ctx.closePath();
            ctx.fillStyle="rgba(60,60,60,0.8)";
            ctx.fill();
            var rhero = -(pos+2);
            if (rhero<0 || rhero>=HERO.length) return;
            var bonusHP=level2stats(rhero,lvl,prom).hp-HERO[rhero].hp;
            var bonusATK=level2stats(rhero,lvl,prom).atk-HERO[rhero].atk;
            text(ctx,HERO[rhero].name,xt+wTool/2,yt+hTool*0.05,"50px"+FONT,"white","center","middle");
            this.drawMonster(ctx,pos,xt+wTool/2,yt+hTool*0.46,undefined,false,2,lvl,true,true,prom);
            if (lvl >1) {
                var mhp = mtext(ctx,level2stats(rhero,lvl,prom).hp+" ("+HERO[rhero].hp+"+"+bonusHP+")",xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                text(ctx,level2stats(rhero,lvl,prom).hp+" ("+HERO[rhero].hp+"+"+bonusHP+")",xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                T.draw(ctx,"0fuu",xt+wTool/1.25-T.width("0fuu")-mhp/2,yt+hTool*0.555-T.height("0fuu")/2);
                text(ctx,level2stats(rhero,lvl,prom).atk+" ("+HERO[rhero].atk+"+"+bonusATK+")",xt+wTool/3.5,yt+hTool*0.56,"36px"+FONT,"white","center","right");
                T.draw(ctx,"0e9t",xt+wTool/6-T.width("0e9t"),yt+hTool*0.555-T.height("0e9t")/2);
            }
            else {
                var mhp = mtext(ctx,level2stats(rhero,lvl,prom).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                text(ctx,level2stats(rhero,lvl,prom).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
                T.draw(ctx,"0fuu",xt+wTool/1.25-T.width("0fuu")-mhp/2,yt+hTool*0.555-T.height("0fuu")/2);
                text(ctx,level2stats(rhero,lvl,prom).atk,xt+wTool/4,yt+hTool*0.56,"36px"+FONT,"white","center","right");
                T.draw(ctx,"0e9t",xt+wTool/4.5-T.width("0e9t"),yt+hTool*0.555-T.height("0e9t")/2);
            }
            text(ctx,"LEVEL: "+lvl,xt+wTool/2,yt+hTool*0.66,"36px"+FONT,"white","center","middle");
            text(ctx,"ELEMENT: "+elements[HERO[rhero].type],xt+wTool/2,yt+hTool*0.75,"36px"+FONT,"white","center","middle");
            mltext(ctx,"SKILL: "+this.skill2text(HERO[rhero].skill,lvl,false,promoData[rhero].skill,prom).short,xt+wTool/2,yt+hTool*0.82,"28px"+FONT,"white","center","middle");
            if (prom >= 6) mltext(ctx,this.passive2text(HERO[rhero].passive),xt+wTool/2,yt+hTool*0.92,"28px"+FONT,"white","center","middle");
        }
    }
    this.drawMonsterTabs = function (ctx,mode,tid) {
        var elements = ["0ihs","0nig","0n1n","09m7","0kda"]; //Air Water Earth Fire Hero
        var eSphere = ["03xz","0l2b","0cyo","0ckv"];
        var tab2type = [0,3,1,2];
        var tabON = "050s";
        var tabOFF = "0p2y";
        if (mode!=="flash" && mode!=="dungeon" && mode!=="halloween") T.draw(ctx,"065i",1024*0.16,(640*0.061)-T.height("0i5r")/2);
        var hmode=[
            "Your Heroes",
            "Boring Common & Rare",
            "Tanks",
            "Your Legendary",
            "Air & Fire",
            "Your Common",
            "Random Rare",
            "Super Legendary", 
            "Your Rare",
            "Random Chest",
            "Water & Earth",
        ];
        var followerLeft=undefined;
        if (mode!=="flash" && mode!="dungeon" && mode!=="halloween") T.draw(ctx,"0le4",1024*0.019,640*0.095);
        else {
            if (mode=="flash") T.draw(ctx,"0le4",W*0.385,H*0.678);
            else if (mode=="dungeon") T.draw(ctx,"0le4",W*0.68,H*0.545);
            //else if (mode=="halloween") T.draw(ctx,"0le4",W*0.385,H*0.678);
        }
        var heroes=mdata.city.hero.slice();
        for (var i=0;i<heroes.length&&i<HERO.length;++i) {
            if (HERO[i].rarity==5) heroes[i] = 0;
        }
        var promotion=mdata.city.promo.slice();
        for (var i=0;i<promotion.length&&i<HERO.length;++i) {
            if (HERO[i].rarity==5) promotion[i] = 0;
        }

        if (mode=="halloween") {
            heroes=mdata.city.halloween.hero.slice();
        }
    
        if (mode=="pve") {
            followerLeft=mdata.followers-this.getPveSpent();
            text(ctx,bint(this.getPveSpent())+"/"+bint(mdata.followers,data.bintmode),1024*0.019+T.width("0le4")/2,640*0.095+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
        } else if (mode=="city") {
            followerLeft=mdata.followers-this.getPvPSpent();
            text(ctx,bint(mdata.followers-this.getPvPSpent(),data.bintmode)+"/"+bint(mdata.followers,data.bintmode),1024*0.019+T.width("0le4")/2,640*0.095+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
        } else if (mode=="tournaments") {
            var fmode=tid2fol(tid);
            if (tournamentid==1) fmode = CQW.tour.current.followers;
            var _hmode=hmode[tid%hmode.length];
            for (var i=0; i<heroes.length; ++i) {
                heroes[i]=THERO[tid%THERO.length][i]==-1?heroes[i]:THERO[tid%THERO.length][i];
                promotion[i]=TPROMO[tid%THERO.length][i]==-1?mdata.city.promo[i]:TPROMO[tid%THERO.length][i];
            }
            followerLeft=fmode-this.getTournamentSpent();
            text(ctx,bint(fmode-this.getTournamentSpent(),data.bintmode)+"/"+bint(fmode,data.bintmode),1024*0.019+T.width("0le4")/2,640*0.095+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
        } else if (mode=="wb") {
            if (tid == 0) {
                for (var i=0; i<heroes.length; ++i) heroes[i]=0;
            } 
            followerLeft=mdata.followers-this.getWbSpent();
            text(ctx,bint(this.getWbSpent(),data.bintmode)+"/"+bint(mdata.followers,data.bintmode),1024*0.019+T.width("0le4")/2,640*0.095+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
        } else if (mode=="flash") {
            for (var i=0; i<heroes.length; ++i) {
                heroes[i]=CQW.flash.current.hero[i]==-1?heroes[i]:CQW.flash.current.hero[i];
                if (heroes[i]===undefined) {
                    heroes.splice(i,1);
                    --i;
                }
            }
            promotion=CQW.flash.current.promo.slice();
            followerLeft=CQW.flash.current.followers-this.getFlashSpent();
            text(ctx,bint(followerLeft,data.bintmode)+"/"+bint(CQW.flash.current.followers,data.bintmode),W*0.385+T.width("0le4")/2,H*0.678+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
        } else if (mode=="dungeon") {
            followerLeft=mdata.followers-this.getPveSpent();
            text(ctx,bint(this.getPveSpent(),data.bintmode)+"/"+bint(mdata.followers,data.bintmode),W*0.68+T.width("0le4")/2,H*0.545+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
        } else if (mode=="playground") {
            for (var i = 0; i < HERO.length; ++i) {
                heroes[i]=HERO[i].rarity==5?0:1;
                promotion[i]=0;
            }
            followerLeft = -1;
        } else if (mode=="extratournament") {
            for (var i = 0; i < HERO.length && i<CQW.tour.current.hero.length; ++i) {
                heroes[i]=CQW.tour.current.hero[i]==-1?heroes[i]:CQW.tour.current.hero[i];
                if (heroes[i]===undefined) {
                    heroes.splice(i,1);
                    --i;
                }
            }
            promotion=CQW.tour.current.promo.slice();
            followerLeft=CQW.tour.current.followers-this.getTournamentSpent();
            text(ctx,bint(followerLeft,data.bintmode)+"/"+bint(CQW.tour.current.followers,data.bintmode),1024*0.019+T.width("0le4")/2,640*0.095+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
        } else if (mode=="halloween") {
            promotion=Array(HERO.length).fill(0);
        }

        // Inline Info
        var inlineInfo=undefined;
        if (mode=="tournaments" || mode=="city" || mode=="extratournament"){
            var sizeH = H*0.128;
            var maxSize = 6;
            if (mode=="tournaments" || mode=="extratournament") {
                sizeH = H*0.137;
                maxSize = 5;
            }
            for (var i=0;i<maxSize;++i) {
                var infrect=(new Rect(W*0.175,H*0.2+(i*(sizeH)),W*0.48,sizeH)).small();
                if (infrect.isInside(GM.x,GM.y)) {
                    ctx.fillStyle="rgba(255,255,255,0.1)";
                    ctx.fillRect(W*0.175,H*0.2+(i*(sizeH)),W*0.48,sizeH);

                    var lsum=0;
                    for (var j=0;j<6;++j) {
                        var monsterPosition=(6*i)+j;
                        if (mode=="city") {
                            var unit=mdata.city.setup[monsterPosition];
                            if (unit!=-1) {
                                if (data.lineInfo==0) {
                                    if (unit>=0) {
                                        var rhp=MONSTERS[unit].hp;
                                        var ratk=MONSTERS[unit].atk;
                                        lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                                    }
                                    else {
                                        var rhero = -(unit+2);
                                        var rhp=level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).hp;
                                        var ratk=level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).atk;
                                        lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                                    }
                                }
                                else if (data.lineInfo==1) {
                                    if (unit>=0) {
                                        lsum=lsum+MONSTERS[unit].cost;
                                    }
                                }
                            }
                        } else if (mode=="tournaments" || mode=="extratournament") {
                            var unit=data.tour.setup[tournamentid][monsterPosition];
                            if (unit!=-1) {
                                if (data.lineInfo==0) {
                                    if (unit>=0) {
                                        var rhp=MONSTERS[unit].hp;
                                        var ratk=MONSTERS[unit].atk;
                                        lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                                    }
                                    else {
                                        var rhero = -(unit+2);
                                        var rhp=level2stats(rhero,heroes[rhero],promotion[rhero]).hp;
                                        var ratk=level2stats(rhero,heroes[rhero],promotion[rhero]).atk;
                                        lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                                    }
                                }
                                else if (data.lineInfo==1) {
                                    if (unit>=0) {
                                        lsum=lsum+MONSTERS[unit].cost;
                                    }
                                }
                            }
                        }
                    }
                    if (lsum!==0) inlineInfo=lsum;
                    else inlineInfo=0;
                }
            }
        }
        else if (mode=="pve") {
            var lsum=0;
            for (var i=0;i<6;++i) {
                var unit=data.pve[data.pveline][i];
                if (unit!=-1) {
                    if (data.lineInfo==0) {
                        if (unit>=0) {
                            var rhp=MONSTERS[unit].hp;
                            var ratk=MONSTERS[unit].atk;
                            lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                        }
                        else {
                            var rhero = -(unit+2);
                            var rhp=level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).hp;
                            var ratk=level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).atk;
                            lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                        }
                    }
                    else if (data.lineInfo==1) {
                        if (unit>=0) {
                            lsum=lsum+MONSTERS[unit].cost;
                        }
                    }
                }
            }
            if (lsum!==0) inlineInfo=lsum;
            else inlineInfo=0;
        } else if (mode=="wb") {
            var lsum=0;
            for (var i=0;i<6;++i) {
                var unit=data.wb[data.wbline][i];
                if (unit!=-1) {
                    if (data.lineInfo==0) {
                        if (unit>=0) {
                            var rhp=MONSTERS[unit].hp;
                            var ratk=MONSTERS[unit].atk;
                            lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                        }
                        else {
                            var rhero = -(unit+2);
                            var rhp=level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).hp;
                            var ratk=level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).atk;
                            lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                        }
                    }
                    else if (data.lineInfo==1) {
                        if (unit>=0) {
                            lsum=lsum+MONSTERS[unit].cost;
                        }
                    }
                }
            }
            if (lsum!==0) inlineInfo=lsum;
            else inlineInfo=0;
        } else if (mode=="halloween") {
            var lsum=0;
            for (var i=0;i<6;++i) {
                var unit=data.pve[data.pveline][i];
                if (unit!=-1) {
                    if (data.lineInfo==0) {
                        if (unit>=0) {
                            var rhp=MONSTERS[unit].hp;
                            var ratk=MONSTERS[unit].atk;
                            lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                        }
                        else {
                            var rhero = -(unit+2);
                            var rhp=level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).hp;
                            var ratk=level2stats(rhero,mdata.city.hero[rhero],mdata.city.promo[rhero]).atk;
                            lsum=lsum+(Math.ceil(rhp*ratk*Math.sqrt(rhp*ratk)));
                        }
                    }
                    else if (data.lineInfo==1) {
                        if (unit>=0) {
                            lsum=lsum+MONSTERS[unit].cost;
                        }
                    }
                }
            }
            if (lsum!==0) inlineInfo=lsum;
            else inlineInfo=0;
        }
        if (mode!=="flash" && mode!=="dungeon" && mode!=="halloween") {
            T.draw(ctx,"0le4",1024*0.019,640*0.145);
            if (inlineInfo==undefined) {
                text(ctx,"Put mouse over a line",1024*0.019+T.width("0le4")/2,640*0.145+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
            }
            else {
                if (inlineInfo==0) text(ctx,"Empty Line",1024*0.019+T.width("0le4")/2,640*0.145+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
                else {
                    if (data.lineInfo==0) text(ctx,"Strength: "+bint(inlineInfo,data.bintmode),1024*0.019+T.width("0le4")/2,640*0.145+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
                    else if(data.lineInfo==1) text(ctx,"Followers: "+bint(inlineInfo,data.bintmode),1024*0.019+T.width("0le4")/2,640*0.145+T.height("0le4")/2,"24px"+FONT,"rgb(130,233,255)","center","middle");
                }
            }
        }

        if (mode!=="flash" && mode!=="dungeon" && mode!=="halloween") {
            T.draw(ctx,"0c2t",1024*0.019,640*0.185); // Fons Monstres
            var avaHero=false;
            for (var i=0;i<HERO.length;++i) if (heroes[i]!==0 && heroes[i]!==undefined) avaHero=true;
            if (avaHero==false && (tournamentid!==1||mode!="tournaments")) elements.splice(4,1);
            for (var i=0;i<elements.length; ++i) {
                if (typeTab==i && !searchTab) T.draw(ctx,tabON,1024*0.125,640*(0.195+0.12*i));
                else T.draw(ctx,tabOFF,1024*0.125,640*(0.195+0.12*i));
                if ((new Rect(1024*0.125,640*(0.195+0.12*i),T.width(tabON),T.height(tabON))).small().isInside(GM.x,GM.y)&&typeTab!=i) {
                    T.draw(ctx,tabON,1024*0.125,640*(0.195+0.12*i))
                }
                T.draw(ctx,elements[i],1024*0.125,640*(0.195+0.12*i));
                this.addZone("sTab_"+i,(new Rect(1024*0.125,640*(0.195+0.12*i),T.width(tabON),T.height(tabON))).small(),"sTab",{target: i});
            }
            if ((mode!=="wb"||CQW.WB.mode==1) && (mode!=="tournaments"||hmode[tid%hmode.length]!=="No Heroes")) {
	            if (!searchTab) {
	                T.draw(ctx,tabOFF,1024*0.125,H*(0.195+0.6),T.width(tabOFF),T.height(tabOFF)*0.6);
	                this.addZone("osearchTab",(new Rect(1024*0.125,H*(0.195+0.6),T.width(tabOFF),T.height(tabOFF)*0.6)).small(),"ost",{target: true});
	            } else {
	                T.draw(ctx,tabON,1024*0.125,H*(0.195+0.6),T.width(tabON)*5,T.height(tabON)*0.6);
	            }
            }
        } else if (mode=="halloween") {
            var fx=W*0.12-5;
            var fy=H*0.085-3;
            var ftx=W*0.228-5;
            var fty=0.112;
            T.negative(ctx,"0c2t",fx,fy); // Fons Monstres
            var avaHero=false;
            for (var i=0;i<HERO.length;++i) if (heroes[i]!=0) avaHero=true;
            typeTab=4;
            for (var i=4;i<elements.length; ++i) {
                if (typeTab==i && !searchTab) T.negative(ctx,tabON,ftx,H*(fty+0.12*i+0.1)-3);
                else T.negative(ctx,tabOFF,ftx,H*(fty+0.12*i+0.1)-3);
                if ((new Rect(ftx,H*(fty+0.12*i+0.1)-3,T.width(tabON),T.height(tabON))).small().isInside(GM.x,GM.y)&&typeTab!=i) {
                    T.negative(ctx,tabON,ftx,H*(fty+0.12*i+0.1)-3)
                }
                T.negative(ctx,elements[i],ftx,H*(fty+0.12*i+0.1)-3);
                this.addZone("sTab_"+i,(new Rect(ftx,H*(fty+0.12*i+0.1),T.width(tabON),T.height(tabON))).small(),"sTab",{target: i});
            }
            if (!searchTab) {
                T.negative(ctx,tabOFF,ftx,H*(fty+0.7)-6,T.width(tabOFF),T.height(tabOFF)*0.6);
                this.addZone("osearchTab",(new Rect(ftx,H*(fty+0.7),T.width(tabOFF),T.height(tabOFF)*0.6)).small(),"ost",{target: true});
            } else {
                T.negative(ctx,tabON,ftx,H*(fty+0.7)-6,T.width(tabON)*5,T.height(tabON)*0.6);
            }
        } else {
            var fx=W*0.12-5;
            var fy=H*0.10-3;
            var ftx=W*0.228-5;
            var fty=0.112;
            T.draw(ctx,"0c2t",fx,fy); // Fons Monstres
            var avaHero=false;
            for (var i=0;i<HERO.length;++i) if (heroes[i]!=0) avaHero=true;
            if (avaHero==false) elements.splice(4,1);
            for (var i=0;i<elements.length; ++i) {
                if (typeTab==i && !searchTab) T.draw(ctx,tabON,ftx,H*(fty+0.12*i)-3);
                else T.draw(ctx,tabOFF,ftx,H*(fty+0.12*i)-3);
                if ((new Rect(ftx,H*(fty+0.12*i)-3,T.width(tabON),T.height(tabON))).small().isInside(GM.x,GM.y)&&typeTab!=i) {
                    T.draw(ctx,tabON,ftx,H*(fty+0.12*i)-3)
                }
                T.draw(ctx,elements[i],ftx,H*(fty+0.12*i)-3);
                this.addZone("sTab_"+i,(new Rect(ftx,H*(fty+0.12*i),T.width(tabON),T.height(tabON))).small(),"sTab",{target: i});
            }
            if (!searchTab) {
                T.draw(ctx,tabOFF,ftx,H*(fty+0.6),T.width(tabOFF),T.height(tabOFF)*0.6);
                this.addZone("osearchTab",(new Rect(ftx,H*(fty+0.6),T.width(tabOFF),T.height(tabOFF)*0.6)).small(),"ost",{target: true});
            } else {
                T.draw(ctx,tabON,ftx,H*(fty+0.6),T.width(tabON)*5,T.height(tabON)*0.6);
            }
        }

        var tooltipInfo=undefined;

        if (mode=="pve" || mode=="dungeon") {
            var x_move=0;
            var y_move=0;
            if (mode=="dungeon") {
                x_move=77;
                y_move=-105;
            }
            T.draw(ctx,"0gws",W*0.262-T.width("0gws")+x_move,H*0.175+T.height("08g3")-T.height("0gws")+y_move);

            var anyMonster=undefined;
            for (var j=0;j<data.pve[data.pveline].length;++j) if (data.pve[data.pveline][j]!=-1) anyMonster=true;

            if (anyMonster) this.addZone("clGridpve",(new Rect(W*0.274-T.width("0gws")+x_move,H*0.18+T.height("08g3")-T.height("0gws")+y_move,T.width("0gws")*0.85,T.height("0gws")*0.85)).small(),"clGrid");

            T.draw(ctx,"0lts",W*0.5-T.width("0lts")/2+x_move,H*0.98-T.height("0lts")+y_move);

            var y = H*0.98-16+y_move;
            var x0 = (W*0.5-T.width("0lts")/2);
            var xa = [101,261,421,580,740,900];
            for (var i=0;i<6;++i) {
                var x=x0+xa[i]/2+x_move;
                if (data.pve[data.pveline][i]!=-1) {
                    var lvl=1;
                    if (data.pve[data.pveline][i]<-1) {
                        lvl=mdata.city.hero[-(data.pve[data.pveline][i]+2)];
                        if ((new Rect(x-35,y-77,70,77)).small().isInside(GM.x,GM.y)) {
                            if (mode=="dungeon") tooltipInfo={skill: HERO[-(data.pve[data.pveline][i]+2)].skill, lvl: mdata.city.hero[-(data.pve[data.pveline][i]+2)],x:x-40,y:y-80,promote:promoData[-(data.pve[data.pveline][i]+2)].skill,plvl:mdata.city.promo[-(data.pve[data.pveline][i]+2)], passive: HERO[-(data.pve[data.pveline][i]+2)].passive};
                            else tooltipInfo={skill: HERO[-(data.pve[data.pveline][i]+2)].skill, lvl: mdata.city.hero[-(data.pve[data.pveline][i]+2)],x:x,y:y,promote:promoData[-(data.pve[data.pveline][i]+2)].skill,plvl:mdata.city.promo[-(data.pve[data.pveline][i]+2)], passive: HERO[-(data.pve[data.pveline][i]+2)].passive};
                        }
                    }
                    this.drawMonster(ctx,data.pve[data.pveline][i],x,y-5,undefined,false,0.9,lvl,true,true,mdata.city.promo[-(data.pve[data.pveline][i]+2)]);
                    if (!swapping) {
                        this.addZone("swap_"+i,(new Rect(x-35,y-77,70,77)).small(),"swap",{target: i,initGMx: GM.x,initGMy: GM.y,initPos: i});
                        this.addZone("mSetup_"+i,(new Rect(x-35,y-77,70,77)).small(),"mSetup",{target: i});
                    } 
                }
            }
        } else if (mode=="wb") {
            T.draw(ctx,"0gws",W*0.262-T.width("0gws"),H*0.175+T.height("08g3")-T.height("0gws"));

            var anyMonster=undefined;
            for (var j=0;j<data.wb[data.wbline].length;++j) if (data.wb[data.wbline][j]!=-1) anyMonster=true;

            if (anyMonster) this.addZone("clWbgrid",(new Rect(W*0.274-T.width("0gws"),H*0.18+T.height("08g3")-T.height("0gws"),T.width("0gws")*0.85,T.height("0gws")*0.85)).small(),"clGrid");
         
            T.draw(ctx,"0lts",W*0.5-T.width("0lts")/2,H*0.98-T.height("0lts"));

            var y = H*0.98-16;
            var x0 = (W*0.5-T.width("0lts")/2);
            var xa = [101,261,421,580,740,900];
            for (var i=0;i<6;++i) {
                var x=x0+xa[i]/2;
                if (data.wb[data.wbline][i]!=-1) {
                    var lvl=1;
                    if (data.wb[data.wbline][i]<-1) {
                        lvl=mdata.city.hero[-(data.wb[data.wbline][i]+2)];
                        if ((new Rect(x-35,y-77,70,77)).small().isInside(GM.x,GM.y)) {
                            tooltipInfo={skill: HERO[-(data.wb[data.wbline][i]+2)].skill, lvl: mdata.city.hero[-(data.wb[data.wbline][i]+2)],x:x,y:y,promote:promoData[-(data.wb[data.wbline][i]+2)].skill,plvl:mdata.city.promo[-(data.wb[data.wbline][i]+2)], passive: HERO[-(data.wb[data.wbline][i]+2)].passive};
                        }
                    }
                    this.drawMonster(ctx,data.wb[data.wbline][i],x,y-5,undefined,false,0.9,lvl,true,true,mdata.city.promo[-(data.wb[data.wbline][i]+2)]);
                    if (!swapping) {
                        this.addZone("swap_"+i,(new Rect(x-35,y-77,70,77)).small(),"swap",{target: i,initGMx: GM.x,initGMy: GM.y,initPos: i});
                        this.addZone("mSetup_"+i,(new Rect(x-35,y-77,70,77)).small(),"mSetup",{target: i});
                    } 
                }
            }
        } else if (mode=="tournaments" || mode=="extratournament") {
            var bx = 1024*0.163;
            var by = 640*0.185;
            var mp=0;
            var yfix=[0,5,13,20,27];
            cellStatus = undefined;
            for (var i=0;i<5;++i) {
                for (var j=0;j<6;++j) {
                    var x=16+bx+80*j;
                    var y=15+by+3+80*i;
                    if (tournamentid==1 && CQW!==undefined && CQW.tour!==undefined && CQW.tour.current.grid[mp]!==-1) {
                        if (CQW.tour.current.grid[mp] == 4) T.draw(ctx,"islj_"+(CQW.tour.current.grid[mp]),x+40-T.width("islj_0")*0.5+3,y+40+yfix[i]-T.height("islj_0")*0.5-2);
                        else T.draw(ctx,"islj_"+(CQW.tour.current.grid[mp]),x+40-T.width("islj_0")*0.5,y+40+yfix[i]-T.height("islj_0")*0.5);
                        if (CQW.tour.current.vals[mp]!==0 && CQW.tour.current.grid[mp]!==4 && CQW.tour.current.grid[mp]!==8) {
                            text(ctx,"  "+(CQW.tour.current.vals[mp]*100).toFixed(0)+"%",x+40+T.width("islj_0")*0.5,y+40+yfix[i]-T.height("islj_0")*0.5,"26px"+FONT,"rgba(255,255,255,0.5)","right","top");
                        }
                        if ((new Rect(x,y,80,80)).small().isInside(GM.x,GM.y)) {
                            //cellStatus = mp;
                            cellStatus = { n: mp, x: x, y: y};
                        }
                    } else if (tournamentid==1 && CQW!==undefined && CQW.tour!==undefined && CQW.tour.current.grid[mp]==-1) {
                        text(ctx,"No effect",x+40+3,y+40+yfix[i]-T.height("islj_0")*0.5,"26px"+FONT,"rgba(255,255,255,0.5)","center","top");
                    }
                    if (data.tour.setup[tournamentid][mp]!=-1) {
                        var lvl=1;
                        if (data.tour.setup[tournamentid][mp]<-1) lvl=heroes[-(data.tour.setup[tournamentid][mp]+2)];
                        var tpromo=0;
                        if (data.tour.setup[tournamentid][mp]<-1) tpromo=promotion[-(data.tour.setup[tournamentid][mp]+2)];
                        this.drawMonster(ctx,data.tour.setup[tournamentid][mp],x+40,y+80+yfix[i],undefined,false,1,lvl,true,true,tpromo);
                        if (data.tour.setup[tournamentid][mp]<-1) {
                            if ((new Rect(x,y,80,80)).small().isInside(GM.x,GM.y)) {
                                tooltipInfo={skill: HERO[-(data.tour.setup[tournamentid][mp]+2)].skill, lvl: heroes[-(data.tour.setup[tournamentid][mp]+2)],x:x,y:y,promote:promoData[-(data.tour.setup[tournamentid][mp]+2)].skill,plvl:promotion[-(data.tour.setup[tournamentid][mp]+2)], passive: HERO[-(data.tour.setup[tournamentid][mp]+2)].passive};
                            }
                        }    
                        if (!swapping) {
                            var joined = this.joinedTour();
                            if (!joined) {
                                this.addZone("swap_"+mp,(new Rect(x,y,80,80)).small(),"swap",{target: mp,initGMx: GM.x,initGMy: GM.y,initPos: mp});
                                this.addZone("mSetup_"+mp,(new Rect(x,y,80,80)).small(),"mSetup",{target: mp});
                            }
                        }
                    }
                    ++mp;
                }
            }
        } else if (mode=="flash") {
            var bx=W*0.33;
            var by=H*0.2;
            var mp=0;
            var xa = [101,261,421,580,740,900];
            for (var i=0;i<3;++i) {
                for (var j=0;j<6;++j) {
                    var x=bx+xa[j]/2;
                    var y=by+T.height("0lts")*0.83*(i+1)-(T.height("0lts")*0.1*i);                    
                    if (data.flash!==undefined && data.flash.setup[mp]!=-1) {
                        var lvl=1;
                        if (data.flash.setup[mp]<-1 && data.flash.setup[mp]!==undefined) lvl=heroes[-(data.flash.setup[mp]+2)];
                        var tpromo=0;
                        if (data.flash.setup[mp]<-1 && data.flash.setup[mp]!==undefined) tpromo=promotion[-(data.flash.setup[mp]+2)];
                        this.drawMonster(ctx,data.flash.setup[mp],x,y,undefined,false,1,lvl,true,true,tpromo);
                        if (data.flash.setup[mp]<-1) {
                            if ((new Rect(x-40,y-80,80,80)).small().isInside(GM.x,GM.y)) {
                                tooltipInfo={skill: HERO[-(data.flash.setup[mp]+2)].skill, lvl: CQW.flash.current.hero[-(data.flash.setup[mp]+2)],x:x-40,y:y-80,promote:promoData[-(data.flash.setup[mp]+2)].skill,plvl:CQW.flash.current.promo[-(data.flash.setup[mp]+2)], passive: HERO[-(data.flash.setup[mp]+2)].passive};
                            }
                        }
                        
                        if (!swapping) {
                            if (CQW.flash.current.joined == false && this.canJoinFlash()) {
                                this.addZone("swap_"+mp,(new Rect(x-40,y-80,80,80)).small(),"swap",{target: mp,initGMx: GM.x,initGMy: GM.y,initPos: mp});
                                this.addZone("mSetup_"+mp,(new Rect(x-40,y-80,80,80)).small(),"mSetup",{target: mp});
                            }
                        }
                    }
                    ++mp;
                }
            }
        } else if (mode=="playground") {
            // Player 1
            T.draw(ctx,"0gws",W*0.57-T.width("0lts")/2-T.width("0gws")+4,H*0.45-5-T.height("0gws"));
            var anyMonster=undefined;
            for (var i=0;i<data.playground[0].line.length;++i) if (data.playground[0].line[i]!=-1) anyMonster=true;
            if (anyMonster && !simwbscreen) this.addZone("clGridPlayg0",(new Rect(W*0.582-T.width("0lts")/2-T.width("0gws")+4,H*0.455-5-T.height("0gws"),T.width("0gws")*0.85,T.height("0gws")*0.85)).small(),"clGrid",{target:0});
            
            text(ctx,"Player 1",W*0.57-T.width("0lts")/2,H*0.45-T.height("0lts")-8,"40px"+FONT,"black","left","middle");
            T.draw(ctx,"0lts",W*0.57-T.width("0lts")/2,H*0.45-T.height("0lts"));
            var y1 = H*0.45-16;

            // Player 2
            T.draw(ctx,"0gws",W*0.57-T.width("0lts")/2-T.width("0gws")+4,H*0.75-5-T.height("0gws"));
            anyMonster=undefined;
            for (var i=0;i<data.playground[1].line.length;++i) if (data.playground[1].line[i]!=-1) anyMonster=true;
            if (anyMonster && !simwbscreen) this.addZone("clGridPlayg1",(new Rect(W*0.582-T.width("0lts")/2-T.width("0gws")+4,H*0.755-5-T.height("0gws"),T.width("0gws")*0.85,T.height("0gws")*0.85)).small(),"clGrid",{target:1});
            
            text(ctx,"Player 2",W*0.57-T.width("0lts")/2,H*0.75-T.height("0lts")-8,"40px"+FONT,"black","left","middle");
            T.draw(ctx,"0lts",W*0.57-T.width("0lts")/2,H*0.75-T.height("0lts"));
            var y2 = H*0.75-16;
            
            var x0 = (W*0.57-T.width("0lts")/2);
            var xa = [101,261,421,580,740,900];

            for (var i=0;i<6;++i) {
                var x=x0+xa[i]/2;
                if (data.playground[0].line[i]!=-1) {
                    this.drawMonster(ctx,data.playground[0].line[i],x,y1-5,undefined,false,0.9,data.playground[0].level[i],true,true,data.playground[0].promo[i]);
                    if (!swapping) {
                        this.addZone("swap1_"+i,(new Rect(x-35,y1-77,70,77)).small(),"swap",{target: i,initGMx: GM.x,initGMy: GM.y,initPos: i,line: 0, level: data.playground[0].level[i], promo: data.playground[0].promo[i]});
                        this.addZone("mSetup1_"+i,(new Rect(x-35,y1-77,70,77)).small(),"mSetup",{target: i,line: 0});
                    }
                    if (data.playground[0].line[i]<-1) {
                        if ((new Rect(x-35,y1-77,70,77)).small().isInside(GM.x,GM.y)) {
                            tooltipInfo={skill:HERO[-(data.playground[0].line[i]+2)].skill,lvl: data.playground[0].level[i],x:x-40,y:y1-80,promote:promoData[-(data.playground[0].line[i]+2)].skill,plvl:data.playground[0].promo[i],passive: HERO[-(data.playground[0].line[i]+2)].passive};
                        }
                    }
                }
                if (data.playground[1].line[i]!=-1) {
                    this.drawMonster(ctx,data.playground[1].line[i],x,y2-5,undefined,false,0.9,data.playground[1].level[i],true,true,data.playground[1].promo[i]);
                    if (!swapping) {
                        this.addZone("swap2_"+i,(new Rect(x-35,y2-77,70,77)).small(),"swap",{target: i,initGMx: GM.x,initGMy: GM.y,initPos: i,line: 1, level: data.playground[1].level[i], promo: data.playground[1].promo[i]});
                        this.addZone("mSetup2_"+i,(new Rect(x-35,y2-77,70,77)).small(),"mSetup",{target: i, line: 1});
                    }
                    if (data.playground[1].line[i]<-1) {
                        if ((new Rect(x-35,y2-77,70,77)).small().isInside(GM.x,GM.y)) {
                            tooltipInfo={skill:HERO[-(data.playground[1].line[i]+2)].skill,lvl: data.playground[1].level[i],x:x-40,y:y2-80,promote:promoData[-(data.playground[1].line[i]+2)].skill,plvl:data.playground[1].promo[i],passive: HERO[-(data.playground[1].line[i]+2)].passive};
                        }
                    }
                }
            }
        } else if (mode=="halloween") {
            var x_move=85;
            var y_move=-50;

            T.negative(ctx,"0gws",W*0.262-T.width("0gws")+x_move,H*0.175+T.height("08g3")-T.height("0gws")+y_move);

            var anyMonster=undefined;
            for (var j=0;j<data.halloween.length;++j) if (data.halloween[j]!=-1) anyMonster=true;

            if (anyMonster) this.addZone("clGridpve",(new Rect(W*0.274-T.width("0gws")+x_move,H*0.18+T.height("08g3")-T.height("0gws")+y_move,T.width("0gws")*0.85,T.height("0gws")*0.85)).small(),"clGrid");

            T.negative(ctx,"0lts",W*0.5-T.width("0lts")/2+x_move,H*0.98-T.height("0lts")+y_move);

            var y = H*0.98-16+y_move;
            var x0 = (W*0.5-T.width("0lts")/2);
            var xa = [101,261,421,580,740,900];
            for (var i=0;i<6;++i) {
                var x=x0+xa[i]/2+x_move;
                if (data.halloween[i]!=-1) {
                    var lvl=1;
                    if (data.halloween[i]<-1) {
                        lvl=mdata.city.halloween.hero[-(data.halloween[i]+2)];
                        if ((new Rect(x-35,y-77,70,77)).small().isInside(GM.x,GM.y)) {
                            tooltipInfo={skill: HERO[-(data.halloween[i]+2)].skill, lvl: mdata.city.halloween.hero[-(data.halloween[i]+2)],x:x-40,y:y-80,promote:promoData[-(data.halloween[i]+2)].skill,plvl:0, passive: HERO[-(data.halloween[i]+2)].passive};
                        }
                    }
                    this.drawMonster(ctx,data.halloween[i],x,y-5,undefined,false,0.9,lvl,true,true,0);
                    if (!swapping) {
                        this.addZone("swap_"+i,(new Rect(x-35,y-77,70,77)).small(),"swap",{target: i,initGMx: GM.x,initGMy: GM.y,initPos: i});
                        this.addZone("mSetup_"+i,(new Rect(x-35,y-77,70,77)).small(),"mSetup",{target: i});
                    } 
                }
            }
        } else {
            var bx = 1024*0.163;
            var by = 640*0.185;
            var mp=0;
            for (var i=0;i<6;++i) {
                for (var j=0;j<6;++j) {
                    var x=16+bx+80*j;
                    var y=15+by+80*i;
                    if (mdata.city!==undefined && mdata.city.setup!==undefined && mdata.city.setup[mp]!=-1) {
                        var lvl=1;
                        if (mdata.city.setup[mp]<-1) lvl=mdata.city.hero[-(mdata.city.setup[mp]+2)];
                        this.drawMonster(ctx,mdata.city.setup[mp],x+40,y+80,undefined,false,1,lvl,true,true,mdata.city.promo[-(mdata.city.setup[mp]+2)]);
                        if (mdata.city.setup[mp]<-1) {
                            if ((new Rect(x,y,80,80)).small().isInside(GM.x,GM.y)) {
                                tooltipInfo={skill: HERO[-(mdata.city.setup[mp]+2)].skill, lvl: mdata.city.hero[-(mdata.city.setup[mp]+2)], x:x,y:y,promote:promoData[-(mdata.city.setup[mp]+2)].skill,plvl:mdata.city.promo[-(mdata.city.setup[mp]+2)], passive: HERO[-(mdata.city.setup[mp]+2)].passive};   
                            }
                        }
                        if (!swapping) {
                            if (placeSync===undefined) {
                                this.addZone("mSetup_"+mp,(new Rect(x,y,80,80)).small(),"mSetup",{target: mp});
                            } else {
                                if (placeSync===mp || placeSync==-1) this.spinner(ctx,x+40,y+40,20);
                            }
                            if (swapSync[0]===undefined || swapSync[1]===undefined) {
                                this.addZone("swap_"+mp,(new Rect(x,y,80,80)).small(),"swap",{target: mp,initGMx: GM.x,initGMy: GM.y,initPos: mp});
                            } else {
                                if (swapSync[0]===mp || swapSync[1]===mp) this.spinner(ctx,x+40,y+40,20);
                            }
                        } 
                    } else if (placeSync===mp) this.spinner(ctx,x+40,y+40,20);
                    ++mp;
                }
            }
        }

        var begin,end;
        var numtabs=elements.length;
        var pos=0;
        var drawMonsters = [];
        var availableFollowers = mdata.followers;
        var initMons = 60;
        if (mode=="tournaments") {
            if (tournamentid==0) availableFollowers = tid2fol(tid);
            else availableFollowers = CQW.tour.current.followers;
        }
        else if (mode=="extratournament") availableFollowers = CQW.tour.current.followers;
        else if (mode=="flash") availableFollowers = CQW.flash.current.followers;
        else if (mode=="playground") availableFollowers = -1;
        else if (mode=="halloween") availableFollowers = 0;
        if (!data.hideafford) initMons = 180;
        for (var i=0;i<initMons;++i) drawMonsters.push(MONSTERS[i]);
        if (data.hideafford) {
            for (var i=60;i<MONSTERS.length;i=i+4) {
                var canAfford=false;
                for (var j=0;j<4;++j) {
                    if (availableFollowers == -1) canAfford = true;
                    else if (MONSTERS[i+j].cost <= availableFollowers) canAfford = true;
                }
                if (canAfford == true) {
                    for (var j=0;j<4;++j) drawMonsters.push(MONSTERS[i+j]);
                }
            }
        }
        if (searchTab) {
            var inithero=-2;
            var myHeroArray=[];
            var myHeroPos=[];
            for (var i=0;i<HERO.length;++i) {
                if (mode!=="tournaments" && mode!=="flash" && mode!=="extratournament" && mode!=="halloween"){
                    if (heroes[i]!=0 && (data.heroInfo[i]==true || (mode=="playground"&&data.showDisabled))) {
                        myHeroArray.push(heroes[i]);
                        myHeroPos.push(i);
                    }
                }
                else {
                    if (heroes[i]!=0 && heroes[i]!==undefined){
                        myHeroArray.push(heroes[i]);
                        myHeroPos.push(i);
                    }
                }
            }

            var fullHeroArray = [];
            for (var i = 0; i < myHeroArray.length; ++i) {
                var heroObject = {
                    pos: myHeroPos[i],
                    lvl: myHeroArray[i],
                    name: HERO[myHeroPos[i]].name,
                    percentages: 0,
                };
                fullHeroArray.push(heroObject);
            }

            var mx=W*0.0255;
            var my=0.227+0.008;
            var dmx=W*0.027;
            var dmy=0.223+0.008;
            if (mode=="flash" || mode=="dungeon") {
                mx=W*0.125-5;
                my=0.146;
                dmx=W*0.1265-5;
                dmy=0.142;
            } else if (mode=="halloween") {
                mx=W*0.125-5;
                my=0.131;
                dmx=W*0.1265-5;
                dmy=0.127;
            }

            var numheroes=fullHeroArray.length;
            var heroString = document.getElementById("herosearch").value;
            for (var i = 0; i < numheroes; ++i) fullHeroArray[i].percentages = similarity(heroString,fullHeroArray[i].name);
            fullHeroArray.sort((a,b) => (b.percentages > a.percentages) ? 1 : ((a.percentages > b.percentages) ? -1 : 0));

            for (var i = 0; i < 5; ++i ) {
                var mrect = (new Rect(mx,H*(my+0.145*i)-3,T.width("0fj5"),T.height("0fj5"))).small();
                if (mrect.isInside(GM.x,GM.y)&&cityClick==undefined) {
                    this.drawMonsterTooltip(ctx,i,inithero-fullHeroArray[i].pos,undefined,"hero",heroes[fullHeroArray[i].pos],undefined,promotion[fullHeroArray[i].pos]);
                }

                T.draw(ctx,"0fj5",mx,H*(my+0.145*i)-3);

                var available=true;
                if (mode=="city") {
                    for (var j=0;j<mdata.city.setup.length;++j) if (mdata.city.setup[j]==inithero-fullHeroArray[i].pos) available=false;
                } else if (mode=="tournaments" || mode =="extratournament") {
                    for (var j=0;j<data.tour.setup[tournamentid].length;++j) if (data.tour.setup[tournamentid][j]==inithero-fullHeroArray[i].pos) available=false;
                } else if (mode=="pve" || mode=="pved" || mode=="dungeon") {
                    for (var j=0;j<data.pve[data.pveline].length;++j) if (data.pve[data.pveline][j]==inithero-fullHeroArray[i].pos) available=false;
                } else if (mode=="wb") {
                    for (var j=0;j<data.wb[data.wbline].length;++j) if (data.wb[data.wbline][j]==inithero-fullHeroArray[i].pos) available=false;
                } else if (mode=="flash") {
                    for (var j=0;j<data.flash.setup.length;++j) if (data.flash.setup[j]==inithero-fullHeroArray[i].pos) available=false;
                } else if (mode=="playground") {
                    available=true;
                } else if (mode=="halloween") {
                    for (var j=0;j<data.halloween.length;++j) if (data.halloween[j]==inithero-fullHeroArray[i].pos) available=false;
                }
                this.drawMonster(ctx,inithero-fullHeroArray[i].pos,dmx+T.width("0fj5")/2,(640*(dmy+0.145*i))+T.height("0fj5")-3,undefined,false,0.9,myHeroArray[realpos],available,true,promotion[fullHeroArray[i].pos]);
                if (placeSync===undefined && available) {
                    if (mode=="flash") {
                        if (this.canJoinFlash()) {
                            this.addZone("sMon_"+i,mrect,"sMon",{target: inithero-fullHeroArray[i].pos});
                        }
                    }
                    else {
                        var joined = this.joinedTour();
                        if (!(mode=="tournaments" && joined)) {
                            this.addZone("sMon_"+i,mrect,"sMon",{target: inithero-fullHeroArray[i].pos});
                        }
                    }
                }
            }
        } else if (typeTab !=4) {
            var toDraw = 0;
            for (var i=0;i<drawMonsters.length;++i) if (drawMonsters[i].type==tab2type[typeTab]) toDraw++;
            var maxnumpages=Math.ceil(toDraw/5);
            if (mode=="tournaments" && monstersPage[typeTab] >= maxnumpages)  monstersPage[typeTab] = maxnumpages - 1;
            if (mode=="extratournament" && monstersPage[typeTab] >= maxnumpages)  monstersPage[typeTab] = maxnumpages - 1;
            if (mode=="flash" && monstersPage[typeTab] >= maxnumpages)  monstersPage[typeTab] = maxnumpages - 1;
            var quocient = toDraw%5;
            if (quocient == 0) quocient = 5;
            var toLoop = quocient*4;
            if (monstersPage[typeTab] < maxnumpages-1) toLoop = 20;
            var mx=W*0.0255;
            var my=0.227;
            var dmx=W*0.027;
            var dmy=0.223;
            if (mode=="flash" || mode=="dungeon") {
                mx=W*0.125-5;
                my=0.146;
                dmx=W*0.1265-5;
                dmy=0.142;
            } else if (mode=="halloween") {
                mx=W*0.125-5;
                my=0.131;
                dmx=W*0.1265-5;
                dmy=0.127;
            }
            for (var i=0;i<toLoop;++i) {
                if (i*1+monstersPage[typeTab]*Math.ceil(drawMonsters.length/maxnumpages) < drawMonsters.length) {
                    if (drawMonsters[i*1+monstersPage[typeTab]*toLoop].type==tab2type[typeTab]) {
                        begin=Math.min(drawMonsters.length/4,monstersPage[typeTab]*5);
                        end=Math.min(drawMonsters.length/4,(monstersPage[typeTab]+1)*5);

                        var mrect = (new Rect(mx,H*(my+0.145*pos)-3,T.width("0fj5"),T.height("0fj5"))).small();
                        if (mrect.isInside(GM.x,GM.y)&&cityClick==undefined) {
                            this.drawMonsterTooltip(ctx,i,pos,maxnumpages,"monster",0,drawMonsters);
                        }

                        T.draw(ctx,"0fj5",mx,H*(my+0.145*pos)-3);
                        this.drawMonster(ctx,i*1+monstersPage[typeTab]*20,dmx+T.width("0fj5")/2,(H*(dmy+0.145*pos))+T.height("0fj5")-3,undefined,false,0.9);
                        if (placeSync===undefined && followerLeft==-1) {
                            this.addZone("sMon_"+i,mrect,"sMon",{target: i*1+monstersPage[typeTab]*20});
                        } else if (placeSync===undefined && drawMonsters[i*1+monstersPage[typeTab]*20].cost<=followerLeft) {
                            if (mode=="flash"){
                                if (this.canJoinFlash()) {
                                    this.addZone("sMon_"+i,mrect,"sMon",{target: i*1+monstersPage[typeTab]*20});
                                }
                            }
                            else{
                                var joined = this.joinedTour();
                                if (!(mode=="tournaments" && joined)) {
                                    this.addZone("sMon_"+i,mrect,"sMon",{target: i*1+monstersPage[typeTab]*20});
                                } 
                            }
                        }
                        T.draw(ctx,"0klu",mx+T.width("0fj5")/2-T.width("0klu")/2,H*(my+0.145*pos)-3);
                        var color="rgb(120,120,120)";
                        var size = "24px"+FONT;
                        if (drawMonsters[i*1+monstersPage[typeTab]*20].cost<=followerLeft || followerLeft==-1) color="rgb(130,233,255)";
                        text(ctx,bint(drawMonsters[i*1+monstersPage[typeTab]*20].cost,data.bintmode),mx+T.width("0fj5")/2,H*(my+0.145*pos)+T.height("0klu")/2-3,size,color,"center","middle");
                        ++pos;
                    }
                }
            }
        }
        // Heroes
        else {
            var inithero=-2;
            var myHeroArray=[];
            var myHeroPos=[];
            for (var i=0;i<HERO.length;++i) {
                if (mode!=="tournaments" && mode!=="flash" && mode!=="extratournament" && mode!=="halloween"){
                    if (heroes[i]!=0 && (data.heroInfo[i]==true || (mode=="playground"&&data.showDisabled))) {
                        myHeroArray.push(heroes[i]);
                        myHeroPos.push(i);
                    }
                }
                else {
                    if (heroes[i]!=0 && heroes[i]!==undefined){
                        myHeroArray.push(heroes[i]);
                        myHeroPos.push(i);
                    }
                }
            }

            if (typeTab==4 && monstersPage[typeTab] > (Math.ceil(myHeroArray.length/5)-1)) {
                monstersPage[typeTab] = 0;
            }
            //var sortList=["species","abc","level","life","damage","rarity","Element","Strength"];
            if (data.typeSort==1) {
                var list = [];
                var names= [];
                for (var i = 0; i < myHeroPos.length; i++) names.push(HERO[myHeroPos[i]].name);
                for (var j = 0; j < myHeroArray.length; j++) list.push({'lvl': myHeroArray[j], 'name': names[j], 'pos': myHeroPos[j]});

                list.sort(function(a, b) {
                    if (data.sortDir==0) return ((a.name < b.name) ? -1 : ((a.name == b.name) ? 0 : 1));
                    else return ((a.name > b.name) ? -1 : ((a.name == b.name) ? 0 : 1));
                });

                for (var k = 0; k < list.length; k++) {
                    myHeroPos[k] = list[k].pos;
                    myHeroArray[k] = list[k].lvl;
                }
            } else if (data.typeSort==2) {
                var list = [];
                for (var j = 0; j < myHeroArray.length; j++) list.push({'lvl': myHeroArray[j], 'pos': myHeroPos[j]});

                list.sort(function(a, b) {
                    if (data.sortDir==0) return ((a.lvl < b.lvl) ? -1 : ((a.lvl == b.lvl) ? 0 : 1));
                    else return ((a.lvl > b.lvl) ? -1 : ((a.lvl == b.lvl) ? 0 : 1));
                });

                for (var k = 0; k < list.length; k++) {
                    myHeroPos[k] = list[k].pos;
                    myHeroArray[k] = list[k].lvl;
                }
            } else if (data.typeSort==3) {
                var list = [];
                var hp= [];
                for (var i = 0; i < myHeroPos.length; i++) hp.push(level2stats(myHeroPos[i],heroes[myHeroPos[i]],promotion[myHeroPos[i]]).hp);
                for (var j = 0; j < myHeroArray.length; j++) list.push({'lvl': myHeroArray[j], 'hp': hp[j], 'pos': myHeroPos[j]});

                list.sort(function(a, b) {
                    if (data.sortDir==0) return ((a.hp < b.hp) ? 1 : ((a.hp == b.hp) ? 0 : -1));
                    else return ((a.hp > b.hp) ? 1 : ((a.hp == b.hp) ? 0 : -1));
                });

                for (var k = 0; k < list.length; k++) {
                    myHeroPos[k] = list[k].pos;
                    myHeroArray[k] = list[k].lvl;
                }
            } else if (data.typeSort==4) {
                var list = [];
                var atk= [];
                for (var i = 0; i < myHeroPos.length; i++) atk.push(level2stats(myHeroPos[i],heroes[myHeroPos[i]],promotion[myHeroPos[i]]).atk);
                for (var j = 0; j < myHeroArray.length; j++) list.push({'lvl': myHeroArray[j], 'atk': atk[j], 'pos': myHeroPos[j]});

                list.sort(function(a, b) {
                    if (data.sortDir==0) return ((a.atk < b.atk) ? 1 : ((a.atk == b.atk) ? 0 : -1));
                    else return ((a.atk > b.atk) ? 1 : ((a.atk == b.atk) ? 0 : -1));
                });

                for (var k = 0; k < list.length; k++) {
                    myHeroPos[k] = list[k].pos;
                    myHeroArray[k] = list[k].lvl;
                }
            } else if (data.typeSort==5) {
                var list = [];
                var rarity= [];
                for (var i = 0; i < myHeroPos.length; i++) rarity.push(HERO[myHeroPos[i]].rarity);
                for (var j = 0; j < myHeroArray.length; j++) list.push({'lvl': myHeroArray[j], 'rarity': rarity[j], 'pos': myHeroPos[j]});

                list.sort(function(a, b) {
                    if (data.sortDir==0) return ((a.rarity < b.rarity) ? -1 : ((a.rarity == b.rarity) ? 0 : 1));
                    else return ((a.rarity > b.rarity) ? -1 : ((a.rarity == b.rarity) ? 0 : 1));
                });

                for (var k = 0; k < list.length; k++) {
                    myHeroPos[k] = list[k].pos;
                    myHeroArray[k] = list[k].lvl;
                }
            } else if (data.typeSort==6) {
                var list = [];
                var element= [];
                for (var i = 0; i < myHeroPos.length; i++) element.push(HERO[myHeroPos[i]].type);
                for (var j = 0; j < myHeroArray.length; j++) list.push({'lvl': myHeroArray[j], 'element': element[j], 'pos': myHeroPos[j]});

                list.sort(function(a, b) {
                    if (data.sortDir==0) return ((a.element < b.element) ? -1 : ((a.element == b.element) ? 0 : 1));
                    else return ((a.element > b.element) ? -1 : ((a.element == b.element) ? 0 : 1));
                });

                for (var k = 0; k < list.length; k++) {
                    myHeroPos[k] = list[k].pos;
                    myHeroArray[k] = list[k].lvl;
                }
            } else if (data.typeSort==7) {
                var list = [];
                var strength= [];
                for (var i = 0; i < myHeroPos.length; i++){
                    var rhp=level2stats(myHeroPos[i],heroes[myHeroPos[i]],promotion[myHeroPos[i]]).hp;
                    var ratk=level2stats(myHeroPos[i],heroes[myHeroPos[i]],promotion[myHeroPos[i]]).atk;
                    strength.push(rhp*ratk*Math.sqrt(rhp*ratk));
                }
                for (var j = 0; j < myHeroArray.length; j++) list.push({'lvl': myHeroArray[j], 'strength': strength[j], 'pos': myHeroPos[j]});

                list.sort(function(a, b) {
                    if (data.sortDir==0) return ((a.strength < b.strength) ? 1 : ((a.strength == b.strength) ? 0 : -1));
                    else return ((a.strength > b.strength) ? 1 : ((a.strength == b.strength) ? 0 : -1));
                });

                for (var k = 0; k < list.length; k++) {
                    myHeroPos[k] = list[k].pos;
                    myHeroArray[k] = list[k].lvl;
                }
            }

            var mx=W*0.0255;
            var my=0.227;
            var dmx=W*0.027;
            var dmy=0.223;
            if (mode=="flash" || mode=="dungeon") {
                mx=W*0.125-5;
                my=0.146;
                dmx=W*0.1265-5;
                dmy=0.142;
            } else if (mode=="halloween") {
                mx=W*0.125-5;
                my=0.131;
                dmx=W*0.1265-5;
                dmy=0.127;
            }

            var numheroes=myHeroArray.length;
            var maxnumpages=Math.ceil(numheroes/5);
            var toi = 5;
            if (monstersPage[typeTab]+1==maxnumpages && numheroes%5>0) toi=numheroes%5;
            begin=Math.min(numheroes,monstersPage[typeTab]*5);
            end=Math.min(numheroes,(monstersPage[typeTab]+1)*5);
            for (var i=0;i<toi;++i) {
                var realpos = i+begin;

                var mrect = (new Rect(mx,H*(my+0.145*pos)-3,T.width("0fj5"),T.height("0fj5"))).small();
                if (mrect.isInside(GM.x,GM.y)&&cityClick==undefined) {
                    this.drawMonsterTooltip(ctx,i,inithero-myHeroPos[realpos],maxnumpages,"hero",heroes[myHeroPos[realpos]],undefined,promotion[myHeroPos[realpos]]);
                }

                T.draw(ctx,"0fj5",mx,H*(my+0.145*pos)-3);

                var available=true;
                if (mode=="city") {
                    for (var j=0;j<mdata.city.setup.length;++j) if (mdata.city.setup[j]==inithero-myHeroPos[realpos]) available=false;
                } else if (mode=="tournaments" || mode =="extratournament") {
                    for (var j=0;j<data.tour.setup[tournamentid].length;++j) if (data.tour.setup[tournamentid][j]==inithero-myHeroPos[realpos]) available=false;
                } else if (mode=="pve" || mode=="pved" || mode=="dungeon") {
                    for (var j=0;j<data.pve[data.pveline].length;++j) if (data.pve[data.pveline][j]==inithero-myHeroPos[realpos]) available=false;
                } else if (mode=="wb") {
                    for (var j=0;j<data.wb[data.wbline].length;++j) if (data.wb[data.wbline][j]==inithero-myHeroPos[realpos]) available=false;
                } else if (mode=="flash") {
                    for (var j=0;j<data.flash.setup.length;++j) if (data.flash.setup[j]==inithero-myHeroPos[realpos]) available=false;
                } else if (mode=="playground") {
                    available=true;
                } else if (mode=="halloween") {
                    for (var j=0;j<data.halloween.length;++j) if (data.halloween[j]==inithero-myHeroPos[realpos]) available=false;
                }
                this.drawMonster(ctx,inithero-myHeroPos[realpos],dmx+T.width("0fj5")/2,(640*(dmy+0.145*pos))+T.height("0fj5")-3,undefined,false,0.9,myHeroArray[realpos],available,true,promotion[myHeroPos[realpos]]);
                if (placeSync===undefined && available) {
                    if (mode=="flash") {
                        if (this.canJoinFlash()) {
                            this.addZone("sMon_"+i,mrect,"sMon",{target: inithero-myHeroPos[realpos]});
                        }
                    }
                    else {
                        var joined = this.joinedTour();
                        if (!(mode=="tournaments" && joined)) {
                            this.addZone("sMon_"+i,mrect,"sMon",{target: inithero-myHeroPos[realpos]});
                        }
                    }
                }
                ++pos;
            }
        }

        if (!searchTab) {
            var ew=T.width("0f9n");
            var eh=T.height("0f9n");
            if (begin!=0) {
                var x=W*0.075;
                var y=H*0.205+eh/2;
                if (mode=="flash" || mode=="dungeon") {
                    x=W*0.175-5;
                    y=H*0.125+eh/2-3;
                } else if (mode=="halloween") {
                    x=W*0.175-5;
                    y=H*0.11+eh/2-3;
                }
                ctx.save();
                ctx.translate(x,y);
                ctx.scale(1,-1);
                if (mode=="halloween") T.negative(ctx,"0f9n",-ew/2,-eh/2);
                else T.draw(ctx,"0f9n",-ew/2,-eh/2);
                ctx.restore();
                this.addZone("m_up",(new Rect(T.width("0c2t")/2.4+x-ew/2,y-eh/2,T.width("0c2t")*0.9,eh)).small(),"monP",{target: monstersPage[typeTab]-1, type: typeTab});
            }
    
            var endpage=drawMonsters.length/4;
            if (typeTab==4) endpage=Math.round(numheroes);
            if (end<endpage) {
                var x=1024*0.075-ew/2;
                var y=640*0.165+T.height("0c2k")-eh;
                if (mode=="flash" || mode=="dungeon") {
                    x=1024*0.175-ew/2-5;
                    y=640*0.089+T.height("0c2k")-eh-3;
                } else if (mode=="halloween") {
                    x=1024*0.175-ew/2-5;
                    y=640*0.089+T.height("0c2k")-eh-3-H*0.015;
                }
                if (mode=="halloween") T.negative(ctx,"0f9n",x,y);
                else T.draw(ctx,"0f9n",x,y);
                this.addZone("m_down",(new Rect(x+T.width("0c2t")/2.4,y,T.width("0c2t")*0.9,eh)).small(),"monP",{target: monstersPage[typeTab]+1, type: typeTab});
            }
        }
        

        if (tooltipInfo!==undefined) {
            if (mode=="pve" || mode=="wb") {
                var x=tooltipInfo.x;
                var y=tooltipInfo.y;
                var extra=0;
                if (tooltipInfo.plvl>=6) extra=20;
                ctx.beginPath();
                ctx.moveTo(x,y-77);
                ctx.lineTo(x+12,y-93);
                ctx.lineTo(x-12,y-93);
                ctx.closePath();
                ctx.fillStyle="rgba(0,0,0,0.7)";
                ctx.fill();
                ctx.fillStyle="rgba(0,0,0,0.7)";
                ctx.fillRect(W*0.5-W*0.3,H*0.76-H*0.05-extra,W*0.6,H*0.1+extra);
                mltext(ctx,"SKILL: "+this.skill2text(tooltipInfo.skill,tooltipInfo.lvl,false,tooltipInfo.promote,tooltipInfo.plvl).short,W*0.5,H*0.76-10-extra,"34px"+FONT,"white","center","middle");
                if (tooltipInfo.plvl>=6) text(ctx,this.passive2text(tooltipInfo.passive,true),W*0.5,H*0.76-10+extra*1.2,"34px"+FONT,"white","center","middle");
            } else if (mode=="tournaments" || mode=="extratournament") {
                var x=tooltipInfo.x;
                var y=tooltipInfo.y;
                var extra=0;
                if (tooltipInfo.plvl>=6) extra=20;
                ctx.beginPath();
                ctx.moveTo(x+40,y);
                ctx.lineTo(x+40+12,y-12);
                ctx.lineTo(x+40-12,y-12);
                ctx.closePath();
                ctx.fillStyle="rgba(0,0,0,0.7)";
                ctx.fill();
                ctx.fillStyle="rgba(0,0,0,0.7)";
                ctx.fillRect(x+40-W*0.2,y-12-H*0.1-extra,W*0.4,H*0.1+extra);
                mltext(ctx,"SKILL: "+this.skill2text(tooltipInfo.skill,tooltipInfo.lvl,false,tooltipInfo.promote,tooltipInfo.plvl).short,x+40,y-12-H*0.05-10-extra,"34px"+FONT,"white","center","middle");
                if (tooltipInfo.plvl>=6) text(ctx,this.passive2text(tooltipInfo.passive,true),x+40,y-12-H*0.05-10+extra*1.2,"34px"+FONT,"white","center","middle");
            } else if (mode=="playground") {
                var x=tooltipInfo.x;
                var y=tooltipInfo.y;
                var extra=0;
                if (tooltipInfo.plvl>=6) extra=20;
                ctx.beginPath();
                ctx.moveTo(x+40,y);
                ctx.lineTo(x+40+12,y-12);
                ctx.lineTo(x+40-12,y-12);
                ctx.closePath();
                ctx.fillStyle="rgba(0,0,0,0.7)";
                ctx.fill();
                ctx.fillStyle="rgba(0,0,0,0.7)";
                ctx.fillRect(x+40-W*0.2,y-12-H*0.1-extra,W*0.4,H*0.1+extra);
                mltext(ctx,"SKILL: "+this.skill2text(tooltipInfo.skill,tooltipInfo.lvl,false,tooltipInfo.promote,tooltipInfo.plvl).short,x+40,y-12-H*0.05-10-extra,"34px"+FONT,"white","center","middle");
                if (tooltipInfo.plvl>=6) text(ctx,this.passive2text(tooltipInfo.passive,true),x+40,y-12-H*0.05-10+extra*1.2,"34px"+FONT,"white","center","middle");
            } else {
                var x=tooltipInfo.x;
                var y=tooltipInfo.y;
                var extra=0;
                if (tooltipInfo.plvl>=6) extra=20;
                ctx.beginPath();
                ctx.moveTo(x+40,y);
                ctx.lineTo(x+40+12,y-12);
                ctx.lineTo(x+40-12,y-12);
                ctx.closePath();
                ctx.fillStyle="rgba(0,0,0,0.7)";
                ctx.fill();
                ctx.fillStyle="rgba(0,0,0,0.7)";
                ctx.fillRect(x+40-W*0.2,y-12-H*0.1-extra,W*0.4,H*0.1+extra);
                mltext(ctx,"SKILL: "+this.skill2text(tooltipInfo.skill,tooltipInfo.lvl,false,tooltipInfo.promote,tooltipInfo.plvl).short,x+40,y-12-H*0.05-10-extra,"34px"+FONT,"white","center","middle");
                if (tooltipInfo.plvl>=6) text(ctx,this.passive2text(tooltipInfo.passive,true),x+40,y-12-H*0.05-10+extra*1.2,"34px"+FONT,"white","center","middle");
            }
        }
        if (cellStatus !== undefined) {
            var statusNames = ["Affinity","Angel","Armor","Damage","Block","DPS","Heal","Antimagic","Hero Block","Tank"];
            var statusDescriptions = [
                "Receives -"+(CQW.tour.current.vals[cellStatus.n]*100).toFixed(0)+"% damage from same element",
                "After dying revives al "+(CQW.tour.current.vals[cellStatus.n]*100).toFixed(0)+"% health",
                "Gains +"+(CQW.tour.current.vals[cellStatus.n]*100).toFixed(0)+"% from armor",
                "Gains +"+(CQW.tour.current.vals[cellStatus.n]*100).toFixed(0)+"% from damage increases",
                "No units can be placed here",
                "Increases damage dealt by "+(CQW.tour.current.vals[cellStatus.n]*100).toFixed(0)+"%",
                "Gains +"+(CQW.tour.current.vals[cellStatus.n]*100).toFixed(0)+"% from heals",
                "Receives -"+(CQW.tour.current.vals[cellStatus.n]*100).toFixed(0)+"% damage from skills",
                "No heroes can be placed here",
                "Increases health by "+(CQW.tour.current.vals[cellStatus.n]*100).toFixed(0)+"%",
            ];
            var fixDraw=[0,1,9,18,27];
            var line = Math.floor(cellStatus.n/6);
            var x=cellStatus.x+80;
            var y=cellStatus.y+40+fixDraw[line];
            var cStat = CQW.tour.current.grid[cellStatus.n];
            ctx.beginPath();
            ctx.moveTo(x,y);
            ctx.lineTo(x+12,y-12);
            ctx.lineTo(x+12,y+12);
            ctx.closePath();
            ctx.fillStyle="rgba(0,0,0,0.7)";
            ctx.fill();
            ctx.fillStyle="rgba(0,0,0,0.7)";
            ctx.fillRect(x+12,y-H*0.1*0.5,W*0.35,H*0.1);

            text(ctx,statusNames[cStat],x+12+W*0.35*0.5,y-H*0.1*0.5+18,"40px"+FONT,"white","center","middle");
            text(ctx,statusDescriptions[cStat],x+12+W*0.35*0.5,y-H*0.1*0.5+38,"30px"+FONT,"white","center","middle");
        }       
    }

    this.drawPVE = function (ctx) {
        var medals = ["02b9","0foh","0lbg","0jir"];
        var px = [W*0.24,W*0.34,W*0.5,W*0.66,W*0.76];
        var py = [H*0.4,H*0.61,H*0.67,H*0.61,H*0.4];
        var dx=[-T.width("08wd")/3.5,0,T.width("08wd")/3.5];
        var dy=[T.height("08wd")/3.65,T.height("08wd")/2.7,T.height("08wd")/3.65];

        var paths=["0m7u","055h","09to","09pm"];
        var pthx=px[0];
        var pthy=py[0];

        var maxUnlocked=0;
        if (mdata.city!==undefined) maxUnlocked=mdata.city.quests.length;

        for (var i=0;i<4;++i) {
            if (i+pvepage*5<maxUnlocked) T.draw(ctx,paths[i],pthx,pthy);
            else T.negative(ctx,paths[i],pthx,pthy);
            pthx+=10;
        }
        // Draw Islands
        var cw=T.width("0gqq");
        var ch=T.height("0gqq");
        for (var i=0;i<5;++i) {
            if (i+pvepage*5<PVE.length) {
                var curr=PVE[i+pvepage*5];
                var enabled=false;
                if (mdata.city!==undefined && mdata.city.quests!==undefined && mdata.city.quests.length>=i+pvepage*5) enabled=true;
                if (pveselected==i+pvepage*5) {
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(px[i],py[i]);
                    ctx.arc(px[i],py[i],cw/2.7,0,2*Math.PI);
                    ctx.closePath();
                    ctx.clip();
                    var s=T.getImage(curr.bg);
                    try {
                        ctx.drawImage(s.source,s.x+curr.x,s.y+curr.y,cw*curr.s,ch*curr.s,px[i]-cw/2,py[i]-ch/2,cw,ch);
                    } catch (e) {

                    }
                    ctx.restore();
                    T.draw(ctx,"0gqq",px[i]-T.width("0gqq")/2,py[i]-T.height("0gqq")/2);
                    if (enabled) this.addZone("sPve_"+i,(new Rect(px[i]-T.width("0gqq")/2,py[i]-T.height("0gqq")/2,T.width("0gqq"),T.height("0gqq"))).small(),"sPve",{target: -1});
                }
                else {
                    var rect = (new Rect(px[i]-T.width("08wd")/2,py[i]-T.height("08wd")/2,T.width("08wd"),T.height("08wd"))).small();
                    if (enabled && rect.isInside(GM.x,GM.y)) {
                        var ew=T.width("07ma")*0.77;
                        var eh=T.width("07ma")*0.77;
                        T.draw(ctx,"07ma",px[i]-ew/2,py[i]-eh/2,ew,eh);
                    }
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(px[i],py[i]);
                    ctx.arc(px[i],py[i],cw/2.9,0,2*Math.PI);
                    ctx.closePath();
                    ctx.clip();
                    if (enabled) {
                        var s=T.getImage(curr.bg);
                        try {
                            ctx.drawImage(s.source,s.x+curr.x,s.y+curr.y,cw*curr.s,ch*curr.s,px[i]-cw/2,py[i]-ch/2,cw,ch);
                        } catch (e) {

                        }
                    } else {
                        if (curr.cache===undefined) {
                            var s=T.getImage(curr.bg);
                            try {
                                curr.cache=doNegative(s.source,s.x+curr.x,s.y+curr.y,cw*curr.s,ch*curr.s,cw,ch);
                            } catch (e) {

                            }
                        }
                        ctx.drawImage(curr.cache,0,0,cw,ch,px[i]-cw/2,py[i]-ch/2,cw,ch);
                    }
                    ctx.restore();
                    T.draw(ctx,"08wd",px[i]-T.width("08wd")/2,py[i]-T.height("08wd")/2,T.width("08wd"),T.height("08wd"));
                    if (enabled) this.addZone("sPve_"+i,rect,"sPve",{target: i+pvepage*5});
                }
                if (enabled) {
                    var prmedal=[3,3,3];
                    if ((mdata.city.quests[i+pvepage*5]&4)>0) prmedal[2]=2;
                    if ((mdata.city.quests[i+pvepage*5]&2)>0) prmedal[1]=1;
                    if ((mdata.city.quests[i+pvepage*5]&1)>0) prmedal[0]=0;

                    for (var j=0;j<3;++j){
                        T.draw(ctx,medals[prmedal[j]],px[i]-T.width("0jir")/2+dx[j],py[i]+dy[j]);
                    }
                }
            }
        }

        if (pveselected!==-1) {
            T.draw(ctx,"04tf",W*0.5-T.width("04ey")/2,H*0.3-T.height("04ey")/2);
            if (pvesync!==false) {
                this.spinner(ctx,W*0.5,H*0.48,40);
            } else {
                var crect=(new Rect(W*0.422,H*0.43,167,65)).small();
                if (crect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"0n4y",W*0.5-T.width("04ey")/2,H*0.3-T.height("04ey")/2);
                    this.addZone("pvefight",crect,"pvefight",{target: pveselected});

                    var x=W*0.5-T.width("0lts")/2;
                    T.draw(ctx,"0lts",x,H*0.55);
                    for (var i=0;i<PVE[pveselected].setup.length;i++) {
                        this.drawMonster(ctx,PVE[pveselected].setup[(PVE[pveselected].setup.length-1)-i],x+12+40+i*80,H*0.71,undefined,true,1,1000);
                    }
                }
                else T.draw(ctx,"0iru",W*0.5-T.width("04ey")/2,H*0.3-T.height("04ey")/2);
            }

            var texts=["Win with 6 monsters or less","Win with 5 monsters or less","Win with 4 monsters or less"];
            var hbase = 0.23;
            for (var i=0;i<3;++i) {
                if (mdata.city!==undefined && mdata.city.quests !==undefined && pveselected<mdata.city.quests.length && (mdata.city.quests[pveselected]&(1<<i))>0) {
                    T.draw(ctx,medals[i],W*0.33,H*hbase);
                    text(ctx,PVE[pveselected].r[i],W*0.67,H*(hbase+0.0675/2),"36px"+FONT,"rgb(51,255,255)","right","center");
                    text(ctx,texts[i],W*0.38,H*(hbase+0.0675/2),"32px"+FONT,"white","left","center");
                } else {
                    T.draw(ctx,medals[3],W*0.33,H*hbase);
                    text(ctx,PVE[pveselected].r[i],W*0.67,H*(hbase+0.0675/2),"36px"+FONT,"white","right","center");
                    text(ctx,texts[i],W*0.38,H*(hbase+0.0675/2),"32px"+FONT,"silver","left","center");
                }
                hbase+=0.0675;
            }
        }

        ctx.save();
        ctx.translate(W*0.5,H*0.5);
        ctx.rotate(-Math.PI/2);
        T.draw(ctx,"04ey",-W*0.18,H*0.643,T.width("04ey"),T.height("04ey")*0.85);
        ctx.restore();

        var nw=T.width("09sg");
        var nh=T.height("09sg");

        if ((pvepage < Math.ceil(PVE.length/5)-1)&&maxUnlocked>=5*(pvepage+1)) {
            T.draw(ctx,"09sg",W*0.93,H*0.6);
            this.addZone("pvenext",(new Rect(W*0.93,H*0.6,nw,nh)).small(),"arrowpve",{target:pvepage+1});
        }
        if ((pvepage < Math.ceil(PVE.length/5)-1)&&maxUnlocked>=5*(pvepage+1)) {
            T.draw(ctx,"09sg",W*0.92,H*0.45);
            T.draw(ctx,"09sg",W*0.94,H*0.45);
            this.addZone("pvenext2",(new Rect(W*0.93,H*0.45,nw,nh)).small(),"arrowpve",{target:Math.min(PVE.length/5-1,Math.floor(maxUnlocked/5))});
        }
        ctx.save();
        ctx.translate(W*0.5,H*0.5)
        ctx.scale(-1,1);
        if (pvepage > 0) {
            T.draw(ctx,"09sg",-W*0.46,-H*0.225);
            this.addZone("pveprev",(new Rect(W*0.92,H*0.275,nw,nh)).small(),"arrowpve",{target:(pvepage-1)});
        }
        ctx.restore();
        text(ctx,(pvepage+1)+"/"+Math.ceil(PVE.length/5),W*0.95,H*0.76,"32px"+FONT,"white","center","middle");

        this.drawMonsterTabs(ctx,"pve");

        // Claim Hero
        var pverewards=[3,4,5,6,19,27,28,29,39,40,41,54,55,56,57,58,88,89,90,91,114,115,116,117,118,119,120,121,122,123,124,125,157,158,159,160];
        var clrect = (new Rect(W*0.87-T.width("0ij7")/2,H*0.89-T.height("0ij7")/2,T.width("0ij7"),T.height("0ij7"))).small();
        var isMapCompleted=true;
        for (var i=5*pvepage; i<5*(pvepage+1); ++i) {
            if (mdata.city.quests[i]!==7) isMapCompleted=false;
        }
        if (isMapCompleted) {
            if (mdata.city.hero[pverewards[pvepage]] == 0 ) {
                if (clrect.isInside(GM.x,GM.y) && !claimHSync) {
                    T.draw(ctx,"0iqy",W*0.87-T.width("0ij7")/2,H*0.89-T.height("0ij7")/2);
                    this.addZone("clmhero",clrect,"clmhero",{target: 3+pvepage});
                } else T.draw(ctx,"0ljk",W*0.87-T.width("0ij7")/2,H*0.89-T.height("0ij7")/2);
                this.drawMonster(ctx,-2-pverewards[pvepage],W*0.797,H*0.95,undefined,false,0.85,1);
            } else {
                T.draw(ctx,"4bbd",W*0.87-T.width("4bbd")/2,H*0.89-T.height("4bbd")/2);
                this.drawMonster(ctx,-2-pverewards[pvepage],W*0.797,H*0.95,undefined,false,0.85,1,false);
            }
        } else {
            T.draw(ctx,"0ij7",W*0.87-T.width("0ij7")/2,H*0.89-T.height("0ij7")/2);
            this.drawMonster(ctx,-2-pverewards[pvepage],W*0.797,H*0.95,undefined,false,0.85,1,false);
        }

        for (var i=0;i<2;++i) {
            if (i==1) {
                if (data.pveline==i) roundedRect(ctx,W*0.1623-25+i*W*0.043-2,H*0.905-2,W*0.035+4,W*0.035+4,10,"rgba(255,255,255,0.8)");
                roundedRect(ctx,W*0.1623-25+i*W*0.043,H*0.905,W*0.035,W*0.035,10,"rgba(25,52,58,1)");
                T.draw(ctx,"l1qq",W*0.1623-25+i*W*0.043+W*0.035*0.5-T.width("l1qq")*0.8*0.5,H*0.905+W*0.035*0.5-T.height("l1qq")*0.8*0.5,T.width("l1qq")*0.8,T.height("l1qq")*0.8);
            } else {
                if (data.pveline==i) roundedRect(ctx,W*0.1623-25+i*W*0.043-2,H*0.905-2,W*0.035+4,W*0.035+4,10,"rgba(255,255,255,0.8)");
                roundedRect(ctx,W*0.1623-25+i*W*0.043,H*0.905,W*0.035,W*0.035,10,"rgba(25,52,58,1)");
                text(ctx,i+1,W*0.1623-25+i*W*0.043+W*0.035*0.5,H*0.905+W*0.035*0.5,"34px"+FONT,"white","center","middle");
                var lineRect=(new Rect(W*0.1623-25+i*W*0.043,H*0.905,W*0.035,W*0.035)).small();
                if (lineRect.isInside(GM.x,GM.y) && data.pveline!==i) {
                    roundedRect(ctx,W*0.1623-25+i*W*0.043,H*0.905,W*0.035,W*0.035,10,"rgba(255,255,255,0.6)");
                    this.addZone("pveline_"+i,lineRect,"pveline",{target: i});
                }
            }
        }
        if (pveselected!==-1 && mdata.city !== undefined && mdata.city.easter !== undefined && mdata.city.easter.questsolver !== 0) {
            var sx = W*0.123;
            var sy = H*0.82;
            var sw = T.width("091m")*0.6;
            var sh = T.height("091m")*0.6;
            var srect=(new Rect(sx,sy,sw,sh)).small();
            if (srect.isInside(GM.x,GM.y)) {
                this.addZone("solver",srect,"solver",{
                    setup: PVE[pveselected].setup,
                    shero: Array(HERO.length).fill(1000),  
                    spromo: Array(HERO.length).fill(0), 
                    grid: data.pve[data.pveline],
                });
                T.draw(ctx,"0eni",sx,sy,sw,sh);
            } else {
                T.draw(ctx,"091m",sx,sy,sw,sh);
            }
            text(ctx,"Solve!!",sx+sw/2,sy+sh/2,"50px"+FONT,"white","center","middle");
            T.draw(ctx,"0m9x",sx,sy,sw,sh);
        }
        // Hero Tooltip
        if (clrect.isInside(GM.x,GM.y) && mdata.city.hero[pverewards[pvepage]] == 0) {
            var rhero=undefined;
            var elements = ["Air","Earth","Fire","Water","Void"];
            var wTool = 300;
            var hTool = T.height("0c2t")*0.9;
            var xt = W*0.5-wTool/2;
            var yt = 20+(640*(0.223+0.145*2))+T.height("0fj5")/2-hTool/2;
            ctx.fillStyle="rgba(60,60,60,0.8)";
            ctx.fillRect(xt,yt,wTool,hTool);

            rhero=pverewards[pvepage];

            var hpos = -2-rhero;

            text(ctx,HERO[rhero].name,xt+wTool/2,yt+hTool*0.05,"50px"+FONT,"white","center","middle");
            this.drawMonster(ctx,hpos,xt+wTool/2,yt+hTool*0.5,undefined,false,2,1);

            var mhp = mtext(ctx,level2stats(rhero,1).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
            text(ctx,level2stats(rhero,1).hp,xt+wTool/1.25,yt+hTool*0.56,"36px"+FONT,"white","center","left");
            T.draw(ctx,"0fuu",xt+wTool/1.25-T.width("0fuu")-mhp/2,yt+hTool*0.555-T.height("0fuu")/2);
            text(ctx,level2stats(rhero,1).atk,xt+wTool/4,yt+hTool*0.56,"36px"+FONT,"white","center","right");
            T.draw(ctx,"0e9t",xt+wTool/4.5-T.width("0e9t"),yt+hTool*0.555-T.height("0e9t")/2);

            text(ctx,"LEVEL: "+1,xt+wTool/2,yt+hTool*0.66,"36px"+FONT,"white","center","middle");
            text(ctx,"ELEMENT: "+elements[HERO[rhero].type],xt+wTool/2,yt+hTool*0.76,"36px"+FONT,"white","center","middle");
            mltext(ctx,"SKILL: "+this.skill2text(HERO[rhero].skill,mdata.city.hero[rhero],false).short,xt+wTool/2,yt+hTool*0.86,"28px"+FONT,"white","center","middle");
        }

        if (cityClick!=undefined) {
            if (swapping) {
                var mon = data.pve[data.pveline][cityClick.initPos];
                if (mon < -1) {
                    var id=cityClick.id;
                    var img=HERO[(cityClick.id*-1)-2].img;
                }
                else {
                    var id = cityClick.id;
                    var img=MONSTERS[cityClick.id].img;
                }
                var lvl=1;
                if (id<-1) lvl=mdata.city.hero[-(id+2)];
                this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,mdata.city.promo[-(id+2)]);
            }
            else {
                if (typeTab!=4 && !searchTab) {
                    var id = cityClick.id;
                    var img=MONSTERS[cityClick.id].img;
                }
                else{
                    var id=cityClick.id;
                    var img=HERO[(cityClick.id*-1)-2].img;
                }
                var lvl=1;
                if (id<-1) lvl=mdata.city.hero[-(id+2)];
                this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,mdata.city.promo[-(id+2)]);
            }
        }

    }
    this.drawPVED = function (ctx) {
        data.pveline = 0;
        var skillInfo=undefined;
        var bw=T.width("02xp");
        var bh=T.height("02xp");
        var bx=W*0.55-bw/2;
        var by=H*0.45-bh/2;
        
        T.draw(ctx,"0cp8",bx+bw-T.width("0cp8")-5,by-54+bh);
        T.draw(ctx,"02xp",bx,by-44);

        T.draw(ctx,"072r",bx+bw/2-T.width("072r")/2,by-44+bh-6);
        T.draw(ctx,"072r",bx+5,by-44+bh-6);
        if (pvedsync!==false) {
            this.spinner(ctx,bx+T.width("072r")/2,by+bh*0.94,40);
            this.spinner(ctx,bx+bw/2,by+bh*0.94,40);
        } else {
            var frect=(new Rect(bx+bw/2-T.width("072r")/2,by-44+bh-6,T.width("072r")*0.97,T.height("072r")*0.9)).small();
            if (frect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0hfl",bx+bw/2-T.width("0hfl")/2,by-44+bh-12);
                this.addZone("pved",frect,"pved");
            } else T.draw(ctx,"0du4",bx+bw/2-T.width("0du4")/2,by-44+bh-12);

            if ((Date.now()-fmTimer) >= 5000) {
                var fmrect=(new Rect(bx+6,by-44+bh-6,T.width("072r")*0.97,T.height("072r")*0.9)).small();
                if (fmrect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"0kqi",bx-5,by-44+bh-19);
                    this.addZone("fmax",fmrect,"fmax");
                } else T.draw(ctx,"0nxd",bx-5,by-44+bh-19);
            } else {
                text(ctx,timer(((fmTimer+5000)-Date.now())/1000),bx-5+T.width("0kqi")*0.5,by-44+bh-19+T.height("0kqi")*0.5,"30px"+FONT,"white","center","middle");
            }

            
        }

        T.draw(ctx,"0ca2",bx+bw/2-T.width("0ca2")/2,by+bh+30);
        
        var clvl=1;
        var resetTime=60*60*1000;
        if (mdata.city.daily!==undefined) {
            if (mdata.city.daily.timer2>Date.now()) {
                clvl=mdata.city.daily.lvl;
                text(ctx,timer((mdata.city.daily.timer2-Date.now())/1000),bx+bw-T.width("0cp8")/2-5,by-54+bh+42,"32px"+FONT,"white","center","middle");
            }
            
            if (mdata.city.daily.setup!==undefined && mdata.city.daily.timer2>Date.now()) {
                for (var i=mdata.city.daily.setup.length-1; i>=0; --i) {
                    var hid=-(mdata.city.daily.setup[4-i]+2);
                    if (mdata.city.daily.setup[4-i]>-1) this.drawMonster(ctx,mdata.city.daily.setup[4-i],bx+bw*(1/8)+(i*bw/5.37),by+bh*0.7,undefined,true,1.3);
                    else if (mdata.city.daily.setup[4-i]<-1) this.drawMonster(ctx,mdata.city.daily.setup[4-i],bx+bw*(1/8)+(i*bw/5.37),by+bh*0.7,undefined,true,1.3,mdata.city.daily.hero[hid]);
                    //Check if tooltip should be drawn
                    var mw = T.width(HERO[0].img)*1.3;
                    var mh = T.height(HERO[0].img)*1.3;
                    var hrect = (new Rect(bx+bw*(1/8)+(i*bw/5.37)-mw/2,by+bh*0.7-mh,mw,mh)).small();
                    if (hrect.isInside(GM.x,GM.y) && mdata.city.daily.setup[4-i]!=-1 && mdata.city.daily.setup[4-i]!=undefined) {
                        skillInfo=i;
                    }
                }
            }
        }

        var levelsToGo = (clvl%5);
        var reachable = clvl+(5-clvl%5);
        if (levelsToGo==0 && clvl!=0) {
            levelsToGo = 5;
            reachable -= 5;
        }
        var series = ((reachable/5)-1)%6;
        var bubPos = bx + W*0.2578;
        for (var i=0;i<levelsToGo;++i) {
            T.draw(ctx,"06ur",bubPos+(W*0.022*i),by+bh+84,T.width("06ur")*0.75,T.height("06ur")*0.75);
        }
        if (series==0 || series==3) {
            text(ctx,"Beat level "+reachable+" to obtain 50",bx+bw/2-(T.width("0dvo")*0.3)*0.5,by+bh+55,"38px"+FONT,"white","center","middle");
            T.draw(ctx,"0dvo",bx+bw/2+W*0.085,by+bh+55-(T.height("0dvo")*0.3)*0.5-3,T.width("0dvo")*0.3,T.height("0dvo")*0.3);
        } else if (series==1 || series==4) {
            text(ctx,"Beat level "+reachable+" to obtain 10",bx+bw/2-(T.width("0dvo")*0.3)*0.5,by+bh+55,"38px"+FONT,"white","center","middle");
            T.draw(ctx,"0ap1",bx+bw/2+W*0.091,by+bh+55-(T.height("0ap1")*0.5)*0.5-2,T.width("0ap1")*0.5,T.height("0ap1")*0.5);
        } else if (series==2) {
            text(ctx,"Beat level "+reachable+" to obtain 1 Key",bx+bw/2,by+bh+55,"38px"+FONT,"white","center","middle");
        } else if (series==5) {
            text(ctx,"Beat level "+reachable+" to obtain 1 Hero Chest",bx+bw/2,by+bh+55,"38px"+FONT,"white","center","middle");
        }

        text(ctx,clvl,bx + 250,by-6,"64px"+FONT,"white","right","middle");
        text(ctx,(0.1*clvl).toFixed(1)+"%",bx+580,by-6,"64px"+FONT,"white","right","middle");

        this.drawMonsterTabs(ctx,"pve");

        if (cityClick!=undefined) {
            if (swapping) {
                var mon = data.pve[data.pveline][cityClick.initPos];
                if (mon < -1) {
                    var id=cityClick.id;
                    var img=HERO[(cityClick.id*-1)-2].img;
                }
                else {
                    var id = cityClick.id;
                    var img=MONSTERS[cityClick.id].img;
                }
                var lvl=1;
                if (id<-1) lvl=mdata.city.hero[-(id+2)];
                this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,mdata.city.promo[-(id+2)]);
            }
            else {
                if (typeTab!=4 && !searchTab) {
                    var id = cityClick.id;
                    var img=MONSTERS[cityClick.id].img;
                }
                else{
                    var id=cityClick.id;
                    var img=HERO[(cityClick.id*-1)-2].img;
                }
                var lvl=1;
                if (id<-1) lvl=mdata.city.hero[-(id+2)];
                this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,mdata.city.promo[-(id+2)]);
            }
        }
        if (mdata.city !== undefined && mdata.city.easter !== undefined && mdata.city.easter.dailysolver !== 0) { 
            var sx = W*0.78;
            var sy = H*0.85;
            var sw = T.width("091m")*0.8;
            var sh = T.height("091m")*0.8;
            var srect=(new Rect(sx,sy,sw,sh)).small();
            if (srect.isInside(GM.x,GM.y)) {
                this.addZone("solver",srect,"solver",{
                    setup: mdata.city.daily.setup,
                    shero: mdata.city.daily.hero,  
                    spromo: Array(HERO.length).fill(0), 
                    grid: data.pve[data.pveline],
                });
                T.draw(ctx,"0eni",sx,sy,sw,sh);
            } else {
                T.draw(ctx,"091m",sx,sy,sw,sh);
            }
            text(ctx,"Solve!!",sx+sw/2,sy+sh/2,"64px"+FONT,"white","center","middle");
            T.draw(ctx,"0m9x",sx,sy,sw,sh);
        }

        T.draw(ctx,"0nww",W*0.925,H*0.196);
        var trect=(new Rect(W*0.925,H*0.196,T.width("0nww"),T.height("0nww"))).small();
        if (trect.isInside(GM.x,GM.y)) {
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(W, 0);
            ctx.lineTo(W, H);
            ctx.lineTo(0, H);
            ctx.lineTo(0, 0);
            ctx.closePath();

            // LEVEL
            ctx.moveTo(W*0.28, H*0.239);
            ctx.lineTo(W*0.28, H*0.288);
            ctx.lineTo(W*0.496, H*0.288);
            ctx.lineTo(W*0.496, H*0.239);
            ctx.lineTo(W*0.28, H*0.239);
            ctx.closePath();

            // BONUS
            ctx.moveTo(W*0.28+W*0.321, H*0.239);
            ctx.lineTo(W*0.28+W*0.321, H*0.288);
            ctx.lineTo(W*0.496+W*0.321, H*0.288);
            ctx.lineTo(W*0.496+W*0.321, H*0.239);
            ctx.lineTo(W*0.28+W*0.321, H*0.239);
            ctx.closePath();

            // FIGHT MAX
            ctx.moveTo(W*0.24, H*0.55);
            ctx.lineTo(W*0.24, H*0.66);
            ctx.lineTo(W*0.44, H*0.66);
            ctx.lineTo(W*0.44, H*0.55);
            ctx.lineTo(W*0.24, H*0.55);
            ctx.closePath();

            // FIGHT
            ctx.moveTo(W*0.24+W*0.209, H*0.55);
            ctx.lineTo(W*0.24+W*0.209, H*0.66);
            ctx.lineTo(W*0.44+W*0.209, H*0.66);
            ctx.lineTo(W*0.44+W*0.209, H*0.55);
            ctx.lineTo(W*0.24+W*0.209, H*0.55);
            ctx.closePath();

            // TIMER
            ctx.moveTo(W*0.24+W*0.209*2+5, H*0.55);
            ctx.lineTo(W*0.24+W*0.209*2+5, H*0.636);
            ctx.lineTo(W*0.44+W*0.209*2+1, H*0.636);
            ctx.lineTo(W*0.44+W*0.209*2+1, H*0.55);
            ctx.lineTo(W*0.24+W*0.209*2+5, H*0.55);
            ctx.closePath();

            // PRIZES
            ctx.moveTo(W*0.4, H*0.69);
            ctx.lineTo(W*0.4, H*0.74);
            ctx.lineTo(W*0.7, H*0.74);
            ctx.lineTo(W*0.7, H*0.69);
            ctx.lineTo(W*0.4, H*0.69);
            ctx.closePath();

            // CLEAR
            ctx.moveTo(W*0.225, H*0.90);
            ctx.lineTo(W*0.225, H*0.967);
            ctx.lineTo(W*0.26, H*0.967);
            ctx.lineTo(W*0.26, H*0.90);
            ctx.lineTo(W*0.225, H*0.90);
            ctx.closePath();

            ctx.fillStyle="rgba(0,0,0,0.6)";
            ctx.fill();

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.28-1,H*0.239-32-5-1,W*0.2+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.28,H*0.239-32-5,W*0.2,H*0.05);
            text(ctx,"Current level reached on DQ",W*0.28+3,H*0.239-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.28-1+W*0.321,H*0.239-32-5-1,W*0.25+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.28+W*0.321,H*0.239-32-5,W*0.25,H*0.05);
            text(ctx,"Current followers bonus production",W*0.28+3+W*0.321,H*0.239-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.22-1,H*0.55-32-5-1,W*0.22+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.22,H*0.55-32-5,W*0.22,H*0.05);
            text(ctx,"Fight till you can't beat the line",W*0.22+3,H*0.55-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.24+W*0.209-1,H*0.55-32-5-1,W*0.2+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.24+W*0.209,H*0.55-32-5,W*0.2,H*0.05);
            text(ctx,"Fight against the enemy line",W*0.24+W*0.209+3,H*0.55-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.24+W*0.209*2+5-1,H*0.55-32-5-1,W*0.18+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.24+W*0.209*2+5,H*0.55-32-5,W*0.18,H*0.05);
            text(ctx,"Time left till reset the DQ",W*0.24+W*0.209*2+5+3,H*0.55-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.4-1,H*0.74+2,W*0.25+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.4,H*0.74+2,W*0.25,H*0.05);
            text(ctx,"Every 5 levels you'll receive a prize",W*0.4+3,H*0.74+16+2,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.4-1,H*0.74+2-1,W*0.25+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.4,H*0.74+2,W*0.25,H*0.05);
            text(ctx,"Every 5 levels you'll receive a prize",W*0.4+3,H*0.74+16+2,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.1-1,H*0.9+2-1,W*0.11+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.1,H*0.9+2,W*0.11,H*0.05);
            text(ctx,"Clear your line",W*0.1+3,H*0.9+16+2,"32px"+FONT,"white","left","middle");
        }

        if (skillInfo!=undefined) {
            ctx.beginPath();
            ctx.moveTo(bx+bw*(1/8)+(skillInfo*bw/5.37),by+bh*0.7-mh-30);
            ctx.lineTo(bx+bw*(1/8)+(skillInfo*bw/5.37)+12,by+bh*0.7-mh-42);
            ctx.lineTo(bx+bw*(1/8)+(skillInfo*bw/5.37)-12,by+bh*0.7-mh-42);
            ctx.closePath();
            ctx.fillStyle="rgba(0,0,0,0.7)";
            ctx.fill();
        	if (mdata.city.daily.setup[4-skillInfo] < -1) {//Hero
	            ctx.fillStyle="rgba(0,0,0,0.7)";
	            ctx.fillRect(bx+bw*(1/8)+(skillInfo*bw/5.37)-W*0.3,by+bh*0.7-mh-42-H*0.1-20,W*0.6,H*0.1+20);
	            text(ctx,HERO[-(mdata.city.daily.setup[4-skillInfo]+2)].name,bx+bw*(1/8)+(skillInfo*bw/5.37),by+bh*0.7-mh-42-(H*0.05)-20-10,"40px"+FONT,"white","center","middle");
	            mltext(ctx,"SKILL: "+this.skill2text(HERO[-(mdata.city.daily.setup[4-skillInfo]+2)].skill,mdata.city.daily.hero[-(mdata.city.daily.setup[4-skillInfo]+2)],false,promoData[-(mdata.city.daily.setup[4-skillInfo]+2)].skill,0).short,bx+bw*(1/8)+(skillInfo*bw/5.37),by+bh*0.7-mh-42-(H*0.05)-10,"34px"+FONT,"white","center","middle");
        	} else {//Monster
	            ctx.fillStyle="rgba(0,0,0,0.7)";
	            ctx.fillRect(bx+bw*(1/8)+(skillInfo*bw/5.37)-20,by+bh*0.7-mh-42-H*0.1+20,40,H*0.1-20);
	            var elements_short =["A","E","F","W"];
	            var mobname = elements_short[mdata.city.daily.setup[4-skillInfo]%4] + (Math.floor(mdata.city.daily.setup[4-skillInfo]/4)+1);
	            text(ctx,mobname,bx+bw*(1/8)+(skillInfo*bw/5.37),by+bh*0.7-mh-42-(H*0.05)+10,"40px"+FONT,"white","center","middle");
        	}
        }
    }

    this.drawTournaments = function (ctx) {
        if (bdata==undefined && !bsynking) this.bsync();
        if (viewbattle!==-1) {
            var bx = W*0.014;
            var by = H*0.12;
            var bw = T.width("01nq")*0.45;
            var bh = T.height("01nq")*0.8;
            var battlerect = (new Rect(bx,by,bw,bh)).small();
            if (battlerect.isInside(GM.x,GM.y) && bdata!==undefined) {
                T.draw(ctx,"0jmt",bx,by,bw,bh);
                this.addZone("viewbattle",battlerect,"viewbattle",{target:-1});
            }
            else T.draw(ctx,"01nq",bx,by,bw,bh);
            text(ctx,"RETURN",bx+bw/2,by+bh/2,"40px"+FONT,"white","center","middle");
            if (bdata[viewbattle]!==undefined) {
                var keys = [];
                for (var key in bdata[viewbattle]) {
                    keys.push(key);
                }
                text(ctx,"Tournament "+(viewbattle-17347),W*0.5,H*0.23,"50px"+FONT,"black","center","middle");
                keys.sort(function (a,b) {return a-b});
                var x0 = W*0.02;
                var y0 = H*0.27;
                var zw = W*0.19;
                var zh = H*0.1;
                var ROWS = 5;
                if (keys.length<10) {
                    zw = W*0.3;
                    zh = H*0.166;
                    ROWS = 3;
                } else if (keys.length<25) {
                    zw = W*0.24;
                    zh = H*0.13;
                    ROWS = 4;
                } else if (keys.length>=36) {
                    zw = W*0.15;
                    zh = H*0.07;
                    ROWS = 6;
                }
                var fs = Math.round(zh*0.4);
                var b = Math.round((W-(x0*2+zw*ROWS))/(ROWS-1));
                for (var i=0; i<keys.length; ++i) {
                    var col = i%ROWS;
                    var row = Math.floor(i/ROWS);
                    var x = x0 + col*zw+b*(col);
                    var y = y0 + row*zh+b*(row);
                    var rect = (new Rect(x,y,zw,zh)).small();
                    if (rect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0eni",x,y,zw,zh);
                        this.addZone("pbat_"+i,rect,"playbattle",{target:keys[i]});
                    } else {
                        T.draw(ctx,"091m",x,y,zw,zh);
                    }
                    text(ctx,"Round "+(parseInt(keys[i])+1),x+zw*0.5,y+zh*0.3,fs+"px"+FONT,"white","center","middle");

                    text(ctx,bdata[viewbattle][keys[i]].left+" vs "+bdata[viewbattle][keys[i]].right,x+zw*0.5,y+zh*0.55,fs+"px"+FONT,"white","center","middle");

                    text(ctx,bdata[viewbattle][keys[i]].winner+" WINS",x+zw*0.5,y+zh*0.8,fs+"px"+FONT,"white","center","middle");
                }
            } else {
                text(ctx,"No data",W*0.5,H*0.5,"60px"+FONT,"black","center","middle");                
            }
            return;
        }
        var tmode=["Page Rank","5 Lives","Lane League"];
        var hmode=[
            "Your Heroes",
            "Boring Common & Rare",
            "Tanks",
            "Your Legendary",
            "Air & Fire",
            "Your Common",
            "Random Rare",
            "Super Legendary", 
            "Your Rare",
            "Random Chest",
            "Water & Earth",
        ];
        var btx=1024*0.66;
        var bty=640*0.185;
        var bw=T.width("0cq8");
        var bh=T.height("0cq8");
        T.draw(ctx,"0cq8",btx,bty+80);
        var tid=Math.floor((Date.now()/(24*60*60*1000)))+TIDoffset;
        var fmode=tid2fol(tid).toLocaleString();
        if (ranquing==undefined || Date.now()-ranquing.time>5*60*1000) this.updateRanking();

        // Tournament ID (0,1)
        var idtrect = (new Rect(btx,bty-40,T.width("0di2"),T.height("0di2"))).small();
        if (idtrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"04oc",btx,bty-40);
            if (CQW !== undefined && CQW.tour !== undefined) this.addZone("idr",idtrect,"idr");
        }
        else T.draw(ctx,"0di2",btx,bty-40);
        text(ctx, "Tournament " + (tournamentid + 1),btx+T.width("0di2")*0.5,bty-40+T.height("0di2")*0.5,"50px"+FONT,"rgba(255,250,210,1)","center","middle");

        // Last tournaments results
        var ltrect = (new Rect(btx,bty+20,T.width("0di2"),T.height("0di2"))).small();
        if (ltrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"04oc",btx,bty+20);
            this.addZone("ltr",ltrect,"ltr");
        }
        else T.draw(ctx,"0di2",btx,bty+20);
        if (tournamentPage=="join") T.draw(ctx,"0jhv",btx,bty+20);
        else T.draw(ctx,"0id7",btx,bty+20);
        
        if (tournamentPage=="join") {
            // Clear Grid
            var any=false;
            if (mdata.city!==undefined && data.tour.setup[tournamentid]!==undefined) {
                for (var i=0; i<data.tour.setup[tournamentid].length; ++i) {
                    if (data.tour.setup[tournamentid][i]!=-1) any=true;
                }
            }
            T.draw(ctx,"0gws",W*0.173-T.width("0gws"),H*0.10+T.height("08g3")-T.height("0gws"));
            var joined = this.joinedTour();
            if (placeSync==undefined && any && !joined) {
                this.addZone("clGrid",(new Rect(W*0.185-T.width("0gws"),H*0.105+T.height("08g3")-T.height("0gws"),T.width("0gws")*0.85,T.height("0gws")*0.85)).small(),"clGrid");
            }

            // Fons Batalles
            var bx = 1024*0.163;
            var by = 640*0.185;
            T.draw(ctx,"0jao",bx,by); 

            // Timer
            var tleft=(24*60*60*1000)-(Date.now()%(24*60*60*1000));
            if (tournamentid == 1) tleft=(24*60*60*1000)-((Date.now()-12*60*60*1000)%(24*60*60*1000));

            T.draw(ctx,"04ey",W*0.14,H*0.905,T.width("04ey")*0.5,T.height("04ey")*0.4);
            text(ctx,timer(tleft/1000),W*0.14+(T.width("04ey")*0.5)*0.5,H*0.905+(T.height("04ey")*0.4)*0.5,"60px"+FONT,"white","center","middle");

            // Join Tournaments
            if (tournamentid == 0) {
                if (hmode[tid%hmode.length]=="No Heroes" && typeTab==4) typeTab=0;
                var price=["06rf","06rf","0jo1","0db8","06rf","06rf","FREE"];
                var jrect = (new Rect(W*0.32,H*0.88,T.width("00u3"),T.height("00u3"))).small();
                if (tleft>10*60*1000 && tleft<23*60*60*1000+50*60*1000) {
                    if (!joined) {
                        if (jrect.isInside(GM.x,GM.y) && !registerSync) {
                            T.draw(ctx,"0nko",W*0.32,H*0.88);
                            this.addZone("join",jrect,"join",{target:tid});
                        }
                        else T.draw(ctx,"00u3",W*0.32,H*0.88);
                    } else {
                        if (jrect.isInside(GM.x,GM.y) && !registerSync && joined) {
                            T.draw(ctx,"0amu",W*0.32,H*0.88+10);
                            this.addZone("cltour",jrect,"cltour");
                        }
                        else T.draw(ctx,"04j6",W*0.32,H*0.88+10);
                    }
                } else {
                    T.negative(ctx,"00u3",W*0.32,H*0.88);
                }
                if (17349<tid) {
                    if (price[tid%7]=="FREE") {
                        if (!joined) text(ctx,"FREE",W*0.555,H*0.92,"40px"+FONT,"white","left","top");
                    } else {
                        if (!joined) {
                            //T.draw(ctx,price[tid%7],W*0.545,H*0.875);
                            text(ctx,TPRICE[tid%7],W*0.545+T.width("06rf")/2-5,H*0.875+T.height("06rf")/2+3,"50px"+FONT,"white","center","middle","lightblue",3);
                        }
                    }
                }
            } else {
                var jrect = (new Rect(W*0.32,H*0.88,T.width("00u3"),T.height("00u3"))).small();
                if (tleft>10*60*1000 && tleft<23*60*60*1000+50*60*1000){
                    if (!joined) {
                        if (jrect.isInside(GM.x,GM.y) && !registerSync) {
                            T.draw(ctx,"0nko",W*0.32,H*0.88);
                            this.addZone("joinet",jrect,"joinet");
                        } else T.draw(ctx,"00u3",W*0.32,H*0.88);
                        text(ctx,"FREE",W*0.555,H*0.92,"40px"+FONT,"white","left","top");
                    } else {
                        if (jrect.isInside(GM.x,GM.y) && !registerSync && joined) {
                            T.draw(ctx,"0amu",W*0.32,H*0.88+10);
                            this.addZone("cltour",jrect,"cltour");
                        }
                        else T.draw(ctx,"04j6",W*0.32,H*0.88+10);
                    }
                }
            }
            
            // Right information
            text(ctx,"RULES",btx+T.width("0cq8")/2,bty+120,"40px"+FONT,"black","center","middle");
            if (tournamentid == 0) {
                text(ctx,"Mode: "+tmode[tid%tmode.length],btx+30,bty+145,"40px"+FONT,"black","left","middle");
                text(ctx,"Heroes: "+hmode[tid%hmode.length],btx+30,bty+170,"40px"+FONT,"black","left","middle");
                text(ctx,"Followers: "+fmode,btx+30,bty+195,"40px"+FONT,"black","left","middle");
            } else {
                text(ctx,"Followers: "+CQW.tour.current.followers.toLocaleString(),btx+30,bty+145,"40px"+FONT,"black","left","middle");
            }
            

            text(ctx,"PRIZE TABLE",btx+T.width("0cq8")/2,bty+230,"40px"+FONT,"black","center","middle");
            if (tournamentid==0) {
                var yprice = TPRICE[tid%7];
                var pgr = [
                    {text: "Top 1 - 10", reward: TPG[yprice][0], type:"0j14"},
                    {text: "Top 11 - 25", reward: TPG[yprice][1], type:"0j14"},
                    {text: "Top 26 - 50", reward: TPG[yprice][2], type:"0j14"},
                    {text: "Top 51 - 100", reward: TPG[yprice][3], type:"0j14"},
                    {text: "Top 101 - 200", reward: TPG[yprice][4], type:"0j14"},
                    {text: "Top 201 - 400", reward: TPG[yprice][5], type:"0j14"},
                    {text: "Top 401 - 600", reward: TPG[yprice][6], type:"0j14"},
                    {text: "Top 601 - 1000", reward: TPG[yprice][7], type:"0j14"},
                    {text: "Top 1001+", reward: TPG[yprice][8], type:"0j14"},
                ];
                
            } else {
                var pgr = getPrizeLimits(CQW.tour.current.players);
            }
            for (var i=0; i<pgr.length; ++i) {
                text(ctx,pgr[i].text,pgr[i].center?btx+T.width("0cq8")/2:btx+30,bty+250+22*i,"34px"+FONT,"black",pgr[i].center?"center":"left","middle");
                if (pgr[i].reward!==undefined) text(ctx,pgr[i].reward,btx+T.width("0cq8")-40-T.width("0j14")*0.6,bty+250+22*i,"34px"+FONT,"black","right","middle");
                if (pgr[i].type!==undefined) T.draw(ctx,pgr[i].type,btx+T.width("0cq8")-30-T.width("0j14")*0.6,bty+250+22*i-T.height("0j14")*0.6/2,T.width("0j14")*0.6,T.height("0j14")*0.6);
            }
            text(ctx,"Status: "+(joined?"Joined":"Not joined yet"),btx+30,bty+480,"40px"+FONT,"black","left","middle");
            
            if (tournamentid == 0) this.drawMonsterTabs(ctx,"tournaments",tid);
            else this.drawMonsterTabs(ctx,"extratournament",tid);
            
            if (mdata.city !== undefined && mdata.city.easter !== undefined && mdata.city.easter.tournamentsolver !== 0 && tournamentid==0) {
                var sx = W*0.4;
                var sy = H*0.12;
                var sw = T.width("091m")*0.7;
                var sh = T.height("091m")*0.7;
                var srect=(new Rect(sx,sy,sw,sh)).small();
                if (srect.isInside(GM.x,GM.y)) {
                    this.addZone("solver",srect,"tsolver",{
                        grid: data.tour.setup[tournamentid],
                        followers: tid2fol(tid),
                        phero: mdata.city.hero,  
                        ppromo: mdata.city.promo, 
                        thero: THERO[tid%THERO.length],
                        tpromo: TPROMO[tid%TPROMO.length],
                        mode: "tournament"
                    });
                    T.draw(ctx,"0eni",sx,sy,sw,sh);
                } else {
                    T.draw(ctx,"091m",sx,sy,sw,sh);
                }
                text(ctx,"Solve!!",sx+sw/2,sy+sh/2,"64px"+FONT,"white","center","middle");
                T.draw(ctx,"0m9x",sx,sy,sw,sh);
            }

            if (cityClick!=undefined) {
                var id = cityClick.id;
                var heroes=mdata.city.hero.slice();
                for (var i=0;i<heroes.length;++i) {
                    if (HERO[i].rarity==5) heroes[i] = 0;
                }
                var promotion=[];
                for (var i=0; i<heroes.length; ++i) {
                    heroes[i]=THERO[tid%THERO.length][i]==-1?heroes[i]:THERO[tid%THERO.length][i];
                    promotion[i]=TPROMO[tid%THERO.length][i]==-1?mdata.city.promo[i]:TPROMO[tid%THERO.length][i];
                }
                var lvl = 1;
                if (id<-1) lvl=heroes[-(id+2)];
                if (swapping) {
                    var mon = data.tour.setup[tournamentid][cityClick.initPos];
                    if (mon < -1) {
                        var img=HERO[(cityClick.id*-1)-2].img;
                    }
                    else {
                        var img=MONSTERS[cityClick.id].img;
                    }
                    this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,promotion[-(id+2)]);
                }
                else {
                    if (typeTab!=4 && !searchTab) {
                        var img=MONSTERS[cityClick.id].img;
                    }
                    else{
                        var img=HERO[(cityClick.id*-1)-2].img;
                    }
                    this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,promotion[-(id+2)]);
                }
            }
        }
        else {
            // Days
            var dayx = W*0.04;
            var ddist = (T.height("0cz1")*0.65)*1.1;
            if (tdata==undefined) {
                this.spinner(ctx,W*0.14,H*0.5,40);
            } else {
                for (var i=0;i<tdata.length;++i) {
                    var dayrect = (new Rect(dayx,H*0.25+ddist*i,T.width("0cz1")*0.6,T.height("0cz1")*0.65)).small();
                    T.draw(ctx,"0cz1",dayx,H*0.25+ddist*i,T.width("0cz1")*0.6,T.height("0cz1")*0.65);

                    var date = new Date(tdata[i].tid*(24*60*60*1000));
                    var dd = date.getDate();
                    var mm = date.getMonth()+1;
                    var yyyy = date.getFullYear();

                    text(ctx,dd+"/"+mm+"/"+yyyy,dayx+(T.width("0cz1")*0.6)*0.5,H*0.25+ddist*i+(T.height("0cz1")*0.65)*0.5,"60px"+FONT,"white","center","middle");
                    if (dayrect.isInside(GM.x,GM.y)){
                        this.addZone("sdays_"+i,dayrect,"sday",{target: i});
                        ctx.fillStyle="rgba(255,255,255,0.2)";
                        ctx.fillRect(dayx,H*0.25+ddist*i,T.width("0cz1")*0.6,T.height("0cz1")*0.65);
                    }             
                }
            }
            // Top 10
            text(ctx,"TOP 10",btx+bw/2,bty+120,"50px"+FONT,"black","center","middle");
            if (tdata==undefined) this.spinner(ctx,btx+bw/2,bty+420,20);
            else if (tdata.length>0) {
                for (var j=0;j<10;++j) {
                    var yprice=TPRICE[tdata[showDay].tid%7];
                    if (tdata[showDay].tid<=17349&&yprice==0) yprice=10;
                    var reward=cn(tprize(j+1,tdata[showDay].amount,Math.max(50,yprice)));
                    text(ctx,(j+1),btx+36,bty+150+35*j,"36px"+FONT,"black","left","middle");
                    text(ctx,tdata[showDay].top10[j],btx+66,bty+150+35*j,"36px"+FONT,"black","left","middle");
                    text(ctx,reward,btx+270,bty+150+35*j,"36px"+FONT,"black","right","middle");
                    T.draw(ctx,"k2mi",btx+275,bty+148+35*j-0.8*T.height("0j14")/2,0.8*T.width("0j14"),0.8*T.height("0j14"));
                }
            }

            var xpos = W*0.44;
            if (CQW!==undefined && CQW.tournament!==undefined && CQW.tournament.score!==undefined) {
                var tscore=CQW.tournament.score; // TODO
                text(ctx,"Tournaments Score: "+tscore.toLocaleString(),xpos,H*0.195,"50px"+FONT,"black","center","middle");
            }
            T.draw(ctx,"0el1",xpos-T.width("0el1")/2,H*0.23);
            // Info Player
            if (tdata!==undefined&&tdata.length>0) {
                var tpos=-1;
                for (var i=0; i<mdata.city.tour.length; ++i) {
                    if (mdata.city.tour[i].tid==tdata[showDay].tid) {
                        tpos=i;
                        break;
                    }
                }
                   
                if (tpos==-1) {
                    text(ctx,"You didn't participate in this tournament",xpos,H*0.5,"26px"+FONT,"black","center","middle");
                } else if (mdata.city.tour[tpos].top==-1) {
                    text(ctx,"Tournament hadn't finished",xpos,H*0.5,"26px"+FONT,"black","center","middle");
                } else {
                    var yprice=TPRICE[tdata[showDay].tid%7];
                    if (mdata.city.tour[tpos].tid<=17349&&yprice==0) yprice=50;
                    var yourReward=tprize(mdata.city.tour[tpos].top,mdata.city.tour[tpos].amount,Math.max(50,yprice)); // #56
                    var pranas=TPG[yprice];
                    var yourPos=mdata.city.tour[tpos].top;
                    var yourPranas=pranas[0];
                    if (yourPos>10 && yourPos<26) yourPranas=pranas[1];
                    else if (yourPos>=26 && yourPos<51) yourPranas=pranas[2];
                    else if (yourPos>=51 && yourPos<101) yourPranas=pranas[3];
                    else if (yourPos>=101 && yourPos<201) yourPranas=pranas[4];
                    else if (yourPos>=201 && yourPos<401) yourPranas=pranas[5];
                    else if (yourPos>=401 && yourPos<601) yourPranas=pranas[6];
                    else if (yourPos>=601 && yourPos<1001) yourPranas=pranas[7];
                    else if (yourPos>=1001) yourPranas=pranas[8];
                    text(ctx,cn(mdata.city.tour[tpos].top)+" of "+cn(mdata.city.tour[tpos].amount)+" players",xpos,H*0.42,"36px"+FONT,"black","center","middle");
                    text(ctx,"Reward: "+cn(yourReward)+" SD",xpos,H*0.42+30,"36px"+FONT,"black","center","middle");
                    text(ctx,"Prana Gems: "+yourPranas+" PG",xpos,H*0.42+60,"36px"+FONT,"black","center","middle");
                    //text(ctx,"Star Dust: "+yourPranas+" SD",xpos,H*0.42+60,"36px"+FONT,"black","center","middle");
                    if (mdata.city.tour[tpos].wr!==undefined) text(ctx,"Win ratio: "+(mdata.city.tour[tpos].wr*100).toFixed(2)+"%",xpos,H*0.42+90,"36px"+FONT,"black","center","middle");
                    var battlerect = (new Rect(xpos-T.width("01nq")*0.6/2,H*0.6,T.width("01nq")*0.6,T.height("01nq")*0.8)).small();
                    if (battlerect.isInside(GM.x,GM.y) && bdata!==undefined) {
                        T.draw(ctx,"0jmt",xpos-T.width("0jmt")*0.6/2,H*0.6,T.width("01nq")*0.6,T.height("01nq")*0.8);
                        this.addZone("viewbattle",battlerect,"viewbattle",{target:tdata[showDay].tid});
                    }
                    else T.draw(ctx,"01nq",xpos-T.width("01nq")*0.6/2,H*0.6,T.width("01nq")*0.6,T.height("01nq")*0.8);
                    if (bdata==undefined) {
                        this.spinner(ctx,xpos,H*0.6+T.height("01nq")*0.4,30);
                    } else {
                        text(ctx,"VIEW BATTLES",xpos,H*0.6+T.height("01nq")*0.4,"40px"+FONT,"white","center","middle");
                    }
                }
            }
            
            // Buttons
            var webrect = (new Rect(xpos-T.width("01nq")/2,H*0.77,T.width("01nq"),T.height("01nq"))).small();
            if (webrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0jmt",xpos-T.width("0jmt")/2,H*0.77);
                this.addZone("web",webrect,"web");
            }
            else T.draw(ctx,"01nq",xpos-T.width("01nq")/2,H*0.77);
           // T.draw(ctx,"0h78",xpos-T.width("0jmt")/2,H*0.77);
			text(ctx,"VISIT TOURNAMENT WEB",xpos,H*0.755+T.height("01nq")*0.7,"50px"+FONT,"white","center","middle");

            var ibrect = (new Rect(xpos-T.width("01nq")/2,H*0.87,T.width("01nq"),T.height("01nq"))).small();
            if (ibrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0jmt",xpos-T.width("0jmt")/2,H*0.87);
                this.addZone("ibattle",ibrect,"ibattle");
            }
            else T.draw(ctx,"01nq",xpos-T.width("01nq")/2,H*0.87);
           // T.draw(ctx,"0ig7",xpos-T.width("0jmt")/2,H*0.87);
			//text(ctx,"IMPORT BATTLE",xpos,H*0.6+T.height("01nq")*0.4,"40px"+FONT,"white","center","middle");
				text(ctx,"IMPORT BATTLE",xpos,H*0.855+T.height("01nq")*0.7,"50px"+FONT,"white","center","middle");
        }

        T.draw(ctx,"0nww",W*0.925,H*0.196);
        var trect=(new Rect(W*0.925,H*0.196,T.width("0nww"),T.height("0nww"))).small();
        if (trect.isInside(GM.x,GM.y)) {
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(W, 0);
            ctx.lineTo(W, H);
            ctx.lineTo(0, H);
            ctx.lineTo(0, 0);
            ctx.closePath();

            if (tournamentPage=="join") {
                // Points
                ctx.moveTo(W*0.024, H*0.100);
                ctx.lineTo(W*0.024, H*0.195);
                ctx.lineTo(W*0.160, H*0.195);
                ctx.lineTo(W*0.160, H*0.100);
                ctx.lineTo(W*0.024, H*0.100);
                ctx.closePath();

                // Elements
                ctx.moveTo(W*0.170, H*0.035);
                ctx.lineTo(W*0.170, H*0.17);
                ctx.lineTo(W*0.252, H*0.17);
                ctx.lineTo(W*0.252, H*0.035);
                ctx.lineTo(W*0.170, H*0.035);
                ctx.closePath();

                // Toggle
                ctx.moveTo(W*0.665, H*0.225);
                ctx.lineTo(W*0.665, H*0.31);
                ctx.lineTo(W*0.915, H*0.31);
                ctx.lineTo(W*0.915, H*0.225);
                ctx.lineTo(W*0.665, H*0.225);
                ctx.closePath();

                // Rules
                ctx.moveTo(W*0.670, H*0.39);
                ctx.lineTo(W*0.670, H*0.51);
                ctx.lineTo(W*0.980, H*0.51);
                ctx.lineTo(W*0.980, H*0.39);
                ctx.lineTo(W*0.670, H*0.39);
                ctx.closePath();

                // Prizes
                ctx.moveTo(W*0.670, H*0.56);
                ctx.lineTo(W*0.670, H*0.865);
                ctx.lineTo(W*0.980, H*0.865);
                ctx.lineTo(W*0.980, H*0.56);
                ctx.lineTo(W*0.670, H*0.56);
                ctx.closePath();

                // Timer
                ctx.moveTo(W*0.14, H*0.906);
                ctx.lineTo(W*0.14, H*0.97);
                ctx.lineTo(W*0.32, H*0.97);
                ctx.lineTo(W*0.32, H*0.906);
                ctx.lineTo(W*0.14, H*0.906);
                ctx.closePath();

                // Join
                ctx.moveTo(W*0.327, H*0.9);
                ctx.lineTo(W*0.327, H*0.975);
                ctx.lineTo(W*0.655, H*0.975);
                ctx.lineTo(W*0.655, H*0.9);
                ctx.lineTo(W*0.327, H*0.9);
                ctx.closePath();

                ctx.fillStyle="rgba(0,0,0,0.6)";
                ctx.fill();

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.024-1,H*0.100-32-5-1,W*0.125+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.024,H*0.100-32-5,W*0.125,H*0.05);
                text(ctx,"Followers & Info",W*0.024+3,H*0.100-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.257-1,H*0.100-32-5-1,W*0.175+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.257,H*0.100-32-5,W*0.175,H*0.05);
                text(ctx,"Counter Elements Table",W*0.257+3,H*0.100-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.665-1,H*0.225-32-5-1,W*0.165+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.665,H*0.225-32-5,W*0.165,H*0.05);
                text(ctx,"Tournaments / Results",W*0.665+3,H*0.225-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.670-1,H*0.39-32-5-1,W*0.14+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.670,H*0.39-32-5,W*0.14,H*0.05);
                text(ctx,"Tournament Rules",W*0.670+3,H*0.39-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.670-1,H*0.93-32-5-1,W*0.14+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.670,H*0.93-32-5,W*0.14,H*0.05);
                text(ctx,"Tournament Prizes",W*0.670+3,H*0.93-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.14-1,H*0.906-32-5-1,W*0.135+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.14,H*0.906-32-5,W*0.135,H*0.05);
                text(ctx,"Next Tournament",W*0.14+3,H*0.906-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.327-1,H*0.9-32-5-1,W*0.173+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.327,H*0.9-32-5,W*0.173,H*0.05);
                text(ctx,"Join Tournament Button",W*0.327+3,H*0.9-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.03-2,H*0.3-2,W*0.6+4,H*0.45+4);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.03,H*0.3,W*0.6,H*0.45);

                var xleft=W*0.04;
                text(ctx,"HOW TOURNAMENTS WORKS",W*0.03+W*0.6*0.5,H*0.34,"60px"+FONT,"white","center","middle");

                text(ctx,"1- Check the RULES of the current tournament on the right side.",xleft,H*0.4,"32px"+FONT,"white","left","middle");
                text(ctx,"2- Fill the grid with available units to fight in the tournament.",xleft,H*0.4+25,"32px"+FONT,"white","left","middle");
                text(ctx,"3- The join button will display the tournament register fee.",xleft,H*0.4+50,"32px"+FONT,"white","left","middle");
                text(ctx,"4- If you are ready, click on Join tournament on the bottom.",xleft,H*0.4+75,"32px"+FONT,"white","left","middle");

                text(ctx,"* You will be able to join on the tournament until 23:50 GMT.",xleft,H*0.4+125,"32px"+FONT,"white","left","middle");
                text(ctx,"* You can't edit your setup after joining the tournament.",xleft,H*0.4+150,"32px"+FONT,"white","left","middle");
                text(ctx,"* All participants will be rewarded with Star Dust based on performance.",xleft,H*0.4+175,"32px"+FONT,"white","left","middle");
                text(ctx,"* Wednesday FREE. Monday, Tuesday, Thursday, Friday 125 UM. Saturday 250, Sunday 400 UM",xleft,H*0.4+200,"28px"+FONT,"white","left","middle");
            } else {
                // Log
                ctx.moveTo(W*0.040, H*0.350);
                ctx.lineTo(W*0.040, H*0.445);
                ctx.lineTo(W*0.220, H*0.445);
                ctx.lineTo(W*0.220, H*0.350);
                ctx.lineTo(W*0.040, H*0.350);
                ctx.closePath();

                // Results
                ctx.moveTo(W*0.342, H*0.395);
                ctx.lineTo(W*0.342, H*0.585);
                ctx.lineTo(W*0.540, H*0.585);
                ctx.lineTo(W*0.540, H*0.395);
                ctx.lineTo(W*0.342, H*0.395);
                ctx.closePath();

                // Battles
                ctx.moveTo(W*0.342, H*0.605);
                ctx.lineTo(W*0.342, H*0.670);
                ctx.lineTo(W*0.540, H*0.670);
                ctx.lineTo(W*0.540, H*0.605);
                ctx.lineTo(W*0.342, H*0.605);
                ctx.closePath();

                // Web
                ctx.moveTo(W*0.280, H*0.780);
                ctx.lineTo(W*0.280, H*0.855);
                ctx.lineTo(W*0.605, H*0.855);
                ctx.lineTo(W*0.605, H*0.780);
                ctx.lineTo(W*0.280, H*0.780);
                ctx.closePath();

                // Import
                ctx.moveTo(W*0.280, H*0.880);
                ctx.lineTo(W*0.280, H*0.955);
                ctx.lineTo(W*0.605, H*0.955);
                ctx.lineTo(W*0.605, H*0.880);
                ctx.lineTo(W*0.280, H*0.880);
                ctx.closePath();

                // Toggle
                ctx.moveTo(W*0.665, H*0.225);
                ctx.lineTo(W*0.665, H*0.31);
                ctx.lineTo(W*0.915, H*0.31);
                ctx.lineTo(W*0.915, H*0.225);
                ctx.lineTo(W*0.665, H*0.225);
                ctx.closePath();

                // Top10
                ctx.moveTo(W*0.680, H*0.400);
                ctx.lineTo(W*0.680, H*0.930);
                ctx.lineTo(W*0.965, H*0.930);
                ctx.lineTo(W*0.965, H*0.400);
                ctx.lineTo(W*0.680, H*0.400);
                ctx.closePath();

                ctx.fillStyle="rgba(0,0,0,0.6)";
                ctx.fill();

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.040-1,H*0.350-32-5-1,W*0.07+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.040,H*0.350-32-5,W*0.07,H*0.05);
                text(ctx,"Days Log",W*0.040+3,H*0.350-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.342-1,H*0.395-32-5-1,W*0.16+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.342,H*0.395-32-5,W*0.16,H*0.05);
                text(ctx,"Tournament Results",W*0.342+3,H*0.395-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.342-1,H*0.735-32-5-1,W*0.10+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.342,H*0.735-32-5,W*0.10,H*0.05);
                text(ctx,"View Battles",W*0.342+3,H*0.735-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.105-1,H*0.850-32-5-1,W*0.17+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.105,H*0.850-32-5,W*0.17,H*0.05);
                text(ctx,"Visit CQ Web",W*0.105+3,H*0.850-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.105-1,H*0.950-32-5-1,W*0.17+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.105,H*0.950-32-5,W*0.17,H*0.05);
                text(ctx,"Import Battle from Web",W*0.105+3,H*0.950-16-5,"32px"+FONT,"white","left","middle");

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.665-1,H*0.225-32-5-1,W*0.165+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.665,H*0.225-32-5,W*0.165,H*0.05);
                text(ctx,"Tournaments / Results",W*0.665+3,H*0.225-16-5,"32px"+FONT,"white","left","middle");

                /*ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.665-1,H*0.195-32-5-1,W*0.165+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.665,H*0.195-32-5,W*0.165,H*0.05);
                text(ctx,"Tournaments / Results",W*0.665+3,H*0.195-16-5,"32px"+FONT,"white","left","middle");*/

                ctx.fillStyle="rgba(255,255,255,0.95)";
                ctx.fillRect(W*0.680-1,H*0.400-32-5-1,W*0.148+2,H*0.05+2);
                ctx.fillStyle="rgba(36,36,36,0.95)";
                ctx.fillRect(W*0.680,H*0.400-32-5,W*0.148,H*0.05);
                text(ctx,"TOP 10 Tournament",W*0.680+3,H*0.400-16-5,"32px"+FONT,"white","left","middle");
            }
        }
    }

    this.drawPrana = function (ctx) {
        var MARR = [ //heroes in the hero manager, in order of appearance
            7,8,9,
            10,11,12,
            13,14,15,
            16,17,18,
            21,22,23,
            24,25,26,
            30,31,32,
            36,37,38,
            45,46,47,
            62,63,64,
            77,78,79,
            93,94,95,
            110,111,112,
            140,141,142,
            149,150,151,
            165,166,167,
            176,177,178,
            181,182,183,
            191,192,193,
            3,4,5,
            6,19,27,
            28,29,39,
            40,41,54,
            55,56,57,
            58,88,89,
            90,91,114,
            115,116,117,
            118,119,120,
            121,122,123,
            124,125,157,
            158,159,160,
            33,34,35,
            48,49,50,
            59,60,61,
            83,84,85,
            103,104,105,
            133,134,135,
            144,145,146,
            170,171,172,
            187,188,189,
            210,211,212,
            230,231,232,
            42,43,44,
            51,52,53,
            127,128,129,
            195,196,197,
            198,
            234,235,236,
			237,
            97,98,99,
            161,162,163,
            164,206,207,
            208,209,214,
            215,216,217,
            218,219,220,
            221,222,223,
            224,225,226,
            227,228,229,
            73,74,75,
            137,138,139,
            200,201,202,
            203,
            76,136,199,
            65, 
            66,67,68, 
            69,70,71, 
            81,82,86,
            92,100,131,
            143,174,169,
            179,184,194,
            102,132,
            147,173,190,
            213,233,
            0,1,2,80,
            20,180,96,
            205,
            148,101,
            107,108,109,
            113,130,152,
            204,
            153,154,155,
            156,168,175,
            185
        ];
        var PVEH = [ //heroes that can be leveled up with PG&CC or AS&CC
            0,1,2,
            51,52,53,
            127,128,129,
            3,4,5,
            6,19,27,
            28,29,39,
            40,41,54,
            55,56,57,
            58,88,89, 
            90,91,96,
            113,114,115,
            116,117,118,
            119,120,121,
            122,123,124,
            125,127,128,
            129,148,152,
            157,158,159,
            160,161,162,
            163,164,168,
            204,205,
        ];
        // Season Cleaner
        var SEHE = [ //heroes that get removed from hero manager if you don't own them
            33,34,35,
            48,49,50,
            51,52,53,
            127,128,129,
            97,98,99,
            161,162,163,
            164,
            59,60,61,
            65,66,67,
            68,69,70,
            71,73,74,
            75,76,81,
            82,83,84,
            85,86,92,
            100,103,104,
            133,134,135,
            144,145,146,
            105,20,96,
            101,131,
            143,174,169,
            107,108,109,
            136,137,
            138,139,146,
            148,152,153,
            154,155,156,
            168,170,171,
            172,179,187,
            188,189,195,
            196,197,198,
            199,200,201,
            202,203,204,
            205,206,207,
            208,209,210,
            211,212,214,
            215,216,217,
            218,219,220,
            221,222,223,
            224,225,226,
            227,228,229,
            230,231,232,
			234,235,236,
			237,
			184,194,
			180,113,130,185,175,
        ];

        for (var i = MARR.length - 1; i >= 0; --i) {
            var clean = false;
            for (var j = 0; j < SEHE.length; ++j) {
                if (mdata.city.hero[MARR[i]] == 0 && mdata.city.promo[MARR[i]] == 0 && MARR[i] == SEHE[j] && clean==false) {
                    MARR.splice(i, 1);
                    clean = true;
                }
            }
        }

        // Apply Filters
        var listToDraw = ["Rarity","Element","Promotion","Levels","Leveling"];
        var filterList = {
            Rarity: ["Common","Rare","Legendary","Ascended"],
            Element: ["Air","Water","Earth","Fire","Void"],
            Promotion: ["0","1","2","3","4","5","6"],
            Levels: ["ALL","LVL 1","LVL 1-98","LVL 99"],
            Leveling: ["PG","CC","AS","OTHER"],
        };
        var conditional = {
            Rarity: [0,1,2,3],
            Element: [0,3,1,2,4],
            Promotion: [0,1,2,3,4,5,6],
            Leveling: [0,1,2,3],
        }
        for (var i = MARR.length - 1; i >= 0; --i) {
            var clean = false;
            for (var j = 0; j < filterList.Rarity.length; ++j) {
                if (!clean && !data.filterStatus.Rarity[j] && HERO[MARR[i]].rarity == conditional.Rarity[j]) {
                    MARR.splice(i, 1);
                    clean = true;
                }
            }
        }
        for (var i = MARR.length - 1; i >= 0; --i) {
            var clean = false;
            for (var j = 0; j < filterList.Element.length; ++j) {
                if (!clean && !data.filterStatus.Element[j] && HERO[MARR[i]].type == conditional.Element[j]) {
                    MARR.splice(i, 1);
                    clean = true;
                }
            }
        }
        for (var i = MARR.length - 1; i >= 0; --i) {
            var clean = false;
            for (var j = 0; j < filterList.Promotion.length; ++j) {
                if (!clean && !data.filterStatus.Promotion[j] && mdata.city.promo[MARR[i]] == conditional.Promotion[j]) {
                    MARR.splice(i, 1);
                    clean = true;
                }
            }
        }
        for (var i = MARR.length - 1; i >= 0; --i) {
            if (!((data.filterStatus.Leveling[0] && HERO[MARR[i]].upgrade["pg"] == 1) || (data.filterStatus.Leveling[1] && HERO[MARR[i]].upgrade["cc"] == 1) || (data.filterStatus.Leveling[2] && HERO[MARR[i]].upgrade["as"] == 1) || (data.filterStatus.Leveling[3] && (HERO[MARR[i]].upgrade["um"] == 1 || HERO[MARR[i]].upgrade["none"] == 1)))) {
                MARR.splice(i, 1);
            }
        }
        for (var i = MARR.length - 1; i >= 0; --i) {
            if ((data.filterStatus.Levels[1] && mdata.city.hero[MARR[i]] !== 1) || (data.filterStatus.Levels[2] && (mdata.city.hero[MARR[i]] === 99 || mdata.city.hero[MARR[i]] === 0)) || (data.filterStatus.Levels[3] && mdata.city.hero[MARR[i]] !== 99)) {
                MARR.splice(i, 1);
            }
        }

        /*for (var i = 0; i < listToDraw.length; ++i) {
            for (var j = 0; j < filterList[listToDraw[i]].length-1; ++j) {
                var clean = false;
                for (var k = MARR.length - 1; k >= 0; --k) {
                    if (!clean && data.filterStatus[listToDraw[i]][j] == false && HERO[MARR[k]].rarity == conditional[listToDraw[i]][j]) {
                        MARR.splice(i, 1);
                        clean = true;
                    }
                    else if (!clean && data.filterStatus[listToDraw[i]][j] == false && HERO[MARR[k]].type == conditional[listToDraw[i]][j]) {
                        MARR.splice(i, 1);
                        clean = true;
                    }
                    else if (!clean && data.filterStatus[listToDraw[i]][j] == false && mdata.city.promo[MARR[k]] == conditional[listToDraw[i]][j]) {
                        MARR.splice(i, 1);
                        clean = true;
                    }
                }
            }
        }*/


        if (showHero==undefined) {
            var any=true;
            var n=0;
            while(any) {
                if (mdata.city.hero[MARR[n]] != 0) {
                    showHero=MARR[n];
                    any=false;
                }
                ++n;
            }
        }
        
        var MLENGTH = MARR.length;
        var maxHero = Math.min(18,MLENGTH);
        var maxPages= Math.ceil((MARR.length)/18);
        
        var btx=W*0.05;
        var bty=H*0.13;
        var bw=T.width("0etg");
        var bh=T.height("0etg");

        // Filter Button
        var grd = ctx.createLinearGradient(W*0.025,H*0.17,W*0.2,H*0.8);
        grd.addColorStop(0, "rgb(255,223,0)");
        grd.addColorStop(1, "rgba(0,0,0,0.6)");
        var frect = (new Rect(W*0.025,H*0.17,W*0.04,H*0.2)).small();
        if (frect.isInside(GM.x,GM.y)) {
            roundedRect(ctx,W*0.025-3,H*0.17-3,W*0.05+6,H*0.2+6,5,"rgba(0,0,0,0.6)");
            roundedRect(ctx,W*0.025-2,H*0.17-2,W*0.05+4,H*0.2+4,5,"rgba(255,255,255,0.8)");
            roundedRect(ctx,W*0.025-1,H*0.17-1,W*0.05+2,H*0.2+2,5,"rgb(255,215,0)");
            roundedRect(ctx,W*0.025,H*0.17,W*0.05,H*0.2,5,grd);
            ctx.save();
            ctx.translate(W*0.5,H*0.5);
            ctx.rotate(-90*Math.PI/180);
            text(ctx,"FILTER",W*0.145,-H*0.730,"60px"+EFONT,"black","center","middle");
            ctx.restore();
            if (!filterOpen) this.addZone("filO",frect,"filO",{target:true});
            else this.addZone("filO",frect,"filO",{target:false});
        } else {
            roundedRect(ctx,W*0.025-3,H*0.17-3,W*0.05+6,H*0.2+6,5,"rgba(0,0,0,0.3)");
            roundedRect(ctx,W*0.025-2,H*0.17-2,W*0.05+4,H*0.2+4,5,"rgba(255,255,255,0.4)");
            roundedRect(ctx,W*0.025-1,H*0.17-1,W*0.05+2,H*0.2+2,5,"rgb(255,215,0)");
            roundedRect(ctx,W*0.025,H*0.17,W*0.05,H*0.2,5,grd);
            ctx.save();
            ctx.translate(W*0.5,H*0.5);
            ctx.rotate(-90*Math.PI/180);
            text(ctx,"FILTER",W*0.145,-H*0.730,"60px"+EFONT,"rgb(47,79,79)","center","middle");
            ctx.restore();
        }
        
        if (promHero === undefined) T.draw(ctx,"0dud",btx+bw-T.width("0dud")*0.75,bty+bh/2-T.height("0dud")/2-20);
        T.draw(ctx,"0etg",btx,bty);

        if (promHero === undefined) {
            var nw=T.width("09sg");
            var nh=T.height("09sg");
            ctx.save();
            ctx.translate(W*0.5,H*0.5);
            ctx.rotate(-90*Math.PI/180);
            T.draw(ctx,"09sg",0,W*0.088,nw*0.5,nh*0.5);
            ctx.restore();
            ctx.save();
            ctx.translate(W*0.5,H*0.5);
            ctx.rotate(90*Math.PI/180);
            T.draw(ctx,"09sg",H*0.123,-W*0.088-nh*0.51,nw*0.5,nh*0.5);
            ctx.restore();
            this.addZone("shprev",(new Rect(btx+bw-8,bty+bh/2-nh*0.5-20,nh*0.5,nw*0.5)).small(),"pageh",{target:(pranaPage-1+maxPages)%maxPages});
            this.addZone("shnext",(new Rect(btx+bw-8,bty+bh/2+nh*0.5,nh*0.5,nw*0.5)).small(),"pageh",{target:(pranaPage+1)%maxPages});
        }

        var yh=bty+25+80;
        if (promHero === undefined && filterOpen === false) {
            for (var x=0;x<MARR.length;++x) {
                if (x<maxHero) {
                    var j=x%3;
                    var i=Math.floor(x/3);
                    var base = true;
                    var mid=MARR[x+18*pranaPage];
                    if (mid==showHero) T.draw(ctx,"0gkd",btx+bw/2+4+j*85,bty+16+i*87);
                    if (mdata.city.hero[mid] == 0 && mdata.city.promo[mid] !== 5) base = false;
                    if (data.heroInfo[mid]) this.drawMonster(ctx,-2-mid,btx+bw/2+12+40+85*j,yh+87*i,undefined,false,1,mdata.city.hero[mid],true,base,mdata.city.promo[mid]);
                    else this.drawMonster(ctx,-2-mid,btx+bw/2+12+40+85*j,yh+87*i,undefined,false,1,mdata.city.hero[mid],false,base,mdata.city.promo[mid]);
                    var selrect = (new Rect(btx+bw/2+12+85*j,yh-87+87*i,85,85)).small();
                    if (base) this.addZone("shero_"+mid,selrect,"shero",{target:mid});
                }
            }
        }
    
        if (!filterOpen && showHero!==undefined) {
            this.drawMonster(ctx,-2-showHero,btx+bw/4+15,bty+bh/3,undefined,false,1.5,mdata.city.hero[showHero],true,true,mdata.city.promo[showHero],true);
            var asize = mtext(ctx," -> ",btx+bw/4+15,bty+bh/3+70,"40px"+FONT,"white","center","middle");
            if (HERO[showHero].rarity==3 || showHero == 108) text(ctx,HERO[showHero].name,btx+bw/4+15,bty+bh/3+40,"56px"+FONT,"rgb(73,174,183)","center","middle");
            else if (showHero == 133 || showHero == 134 || showHero == 135 || showHero == 174 || showHero == 201 || showHero == 205 || showHero == 184 || 
                showHero == 226 || showHero == 227 || showHero == 228 || showHero == 229) text(ctx,HERO[showHero].name,btx+bw/4+15,bty+bh/3+40,"52px"+FONT,"rgb(73,174,183)","center","middle");
            else {
                if (showHero == 0) text(ctx,HERO[showHero].name,btx+bw/4+15,bty+bh/3+40,"56px"+FONT,"rgb(73,174,183)","center","middle");
                else text(ctx,HERO[showHero].name,btx+bw/4+15,bty+bh/3+40,"70px"+FONT,"rgb(73,174,183)","center","middle");
            }
    
            var tsize="28px"+FONT;
            var stext=this.skill2text(HERO[showHero].skill,mdata.city.hero[showHero],false,promoData[showHero].skill,mdata.city.promo[showHero]).short;
            var wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),btx+bw/4+15,bty+bh/3+185,"28px"+FONT,"rgb(151,246,255)","center","middle");
            if (wtext >= W*0.25) tsize="24px"+FONT;
            wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),btx+bw/4+15,bty+bh/3+185,"24px"+FONT,"rgb(151,246,255)","center","middle");
            if (wtext >= W*0.25) tsize="22px"+FONT;
            wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),btx+bw/4+15,bty+bh/3+185,"22px"+FONT,"rgb(151,246,255)","center","middle");
            if (wtext >= W*0.25) tsize="20px"+FONT;
            wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),btx+bw/4+15,bty+bh/3+185,"20px"+FONT,"rgb(151,246,255)","center","middle");
            if (wtext >= W*0.25) tsize="18px"+FONT;

            var ttextw = wtext=mtext(ctx,stext.substr(0,stext.indexOf("/")),btx+bw/4+15,bty+bh/3+185,tsize,"rgb(151,246,255)","center","middle");
            mltext(ctx,this.skill2text(HERO[showHero].skill,mdata.city.hero[showHero],false,promoData[showHero].skill,mdata.city.promo[showHero]).short,btx+bw/4+15,bty+bh/3+185,tsize,"rgb(151,246,255)","center","middle");
            
            roundedRect(ctx,btx+bw/4+15-ttextw*0.5-W*0.03,bty+bh/3+185-W*0.02*0.5,W*0.02,W*0.02,5,"black");
            roundedRect(ctx,btx+bw/4+15-ttextw*0.5-W*0.03+1,bty+bh/3+185-W*0.02*0.5+1,W*0.02-2,W*0.02-2,5,"rgba(255,255,255,0.8");
            text(ctx,"?",btx+bw/4+15-ttextw*0.5-W*0.03+W*0.02*0.5,bty+bh/3+185,"32px"+FONT,"black","center","middle");

            var longRect = (new Rect(btx+bw/4+15-ttextw*0.5-W*0.03,bty+bh/3+185-W*0.02*0.5,W*0.02,W*0.02)).small();
            if (longRect.isInside(GM.x,GM.y)) {
                roundedRect(ctx,btx+bw/4+15-ttextw*0.5-W*0.03+1,bty+bh/3+185-W*0.02*0.5+1,W*0.02-2,W*0.02-2,5,"rgba(0,0,0,0.3");
                longskill = this.skill2text(HERO[showHero].skill,mdata.city.hero[showHero],false,promoData[showHero].skill,mdata.city.promo[showHero]);
            } else longskill = undefined;

            if (mdata.city.hero[showHero]==99 && HERO[showHero].super!==0 && mdata.city.promo[showHero]==6) {
                var tsize="28px"+FONT;
                var stext=this.passive2text(HERO[showHero].passive);
                var wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),btx+bw/4+15,bty+bh/3+235,"28px"+FONT,"rgb(151,246,255)","center","middle");
                if (wtext >= W*0.25) tsize="24px"+FONT;
                wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),btx+bw/4+15,bty+bh/3+235,"24px"+FONT,"rgb(151,246,255)","center","middle");
                if (wtext >= W*0.25) tsize="22px"+FONT;
                wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),btx+bw/4+15,bty+bh/3+235,"22px"+FONT,"rgb(151,246,255)","center","middle");
                if (wtext >= W*0.25) tsize="20px"+FONT;
                wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),btx+bw/4+15,bty+bh/3+235,"20px"+FONT,"rgb(151,246,255)","center","middle");
                if (wtext >= W*0.25) tsize="18px"+FONT;

                text(ctx,"_________________________________",btx+bw/4+15,bty+bh/3+215,"30px"+FONT,"rgb(151,246,255)","center","middle");
                mltext(ctx,this.passive2text(HERO[showHero].passive),btx+bw/4+15,bty+bh/3+235,tsize,"rgb(151,246,255)","center","middle");
            }
    
            // Toggle active Hero
            if (data.heroInfo[showHero]) {
                T.draw(ctx,"0oh5",btx+T.width("0oh5")*0.8,bty+T.height("0oh5")*0.8);
            } 
            else {
                T.draw(ctx,"0o0x",btx+T.width("0o0x")*0.8,bty+T.height("0o0x")*0.8);
            }
    
            var actRect = (new Rect(btx+T.width("0oh5")*0.8,bty+T.height("0oh5")*0.8,T.width("0oh5"),T.height("0oh5"))).small();
            if (actRect.isInside(GM.x,GM.y)) {
                ctx.fillStyle="rgba(255,255,255,0.2)";
                ctx.fillRect(btx+T.width("0oh5")*0.8,bty+T.height("0oh5")*0.8,T.width("0oh5"),T.height("0oh5"));
                this.addZone("heroInfo",actRect,"heroInfo",{target:showHero});
    
                ctx.beginPath();
                ctx.moveTo(btx+T.width("0oh5")*0.8+T.width("0oh5")*0.5,bty+20);
                ctx.lineTo(btx+T.width("0oh5")*0.8+T.width("0oh5"),bty+6);
                ctx.lineTo(btx+T.width("0oh5")*0.8,bty+6);
                ctx.closePath();
                ctx.fillStyle="rgba(0,0,0,0.8)";
                ctx.fill();
    
                ctx.fillStyle="rgba(0,0,0,0.8)";
                ctx.fillRect(btx-W*0.01,bty-H*0.04,W*0.880,H*0.05);
                text(ctx,"Hide the selected hero on the left panel for pvp, pve and disables it for the solver. (Doesn't work in Tournaments)",btx-W*0.01+5,bty-H*0.04+H*0.025,"36px"+FONT,"white","left","middle");
            }

            // Hero Decomposer Tool
            var drect = (new Rect(btx+T.width("0oh5")*0.8,bty+T.height("0oh5")*0.8+50,T.width("0kle")*0.65,T.height("0kle")*0.65)).small();
            if (drect.isInside(GM.x,GM.y) && mdata.city.hero[showHero]>1 && mdata.city.recycle !== undefined) {
                T.draw(ctx,"0kle",btx+T.width("0oh5")*0.8+3,bty+T.height("0oh5")*0.8+50+3,T.width("0kle")*0.6,T.height("0kle")*0.6);
                this.addZone("decompose",drect,"decompose",{target:showHero});
            } else T.draw(ctx,"0kle",btx+T.width("0oh5")*0.8,bty+T.height("0oh5")*0.8+50,T.width("0kle")*0.65,T.height("0kle")*0.65);
        }

        var isPve=false;
        for (var i=0;i<PVEH.length;++i) if (PVEH[i]==showHero) isPve=true;
        
        // Button to add Prana
        
        var price=1;
        if (showHero!==undefined) {
            if (HERO[showHero].rarity==1) price=3;
            else if (HERO[showHero].rarity==2) price=12;

            if (mulLvl) price = price * 10;
        }

        // Texer Numbers
        var tNumbers = ["0onu","099n","01ad","008j","0msl","0lnj","0fl8","04sa","0kdl","0dhg"];

        // Descomposed number for Max Level
        var dNumber = {
            PG: [],
            CC: []
        };

        var maxAffoard = undefined;

        var ngems="099n";
        if (showHero!==undefined) {
            if (mulLvl) {
                if (HERO[showHero].rarity==0) ngems="0brt";
                else if (HERO[showHero].rarity==1) ngems="095q";
                else if (HERO[showHero].rarity==2) ngems="0fvb";
            }
            else if (maxLvl) {
                var needLevels = 99 - mdata.city.hero[showHero];
                if (HERO[showHero].rarity==0) {
                    // PG
                    if (PG >= needLevels) maxAffoard = needLevels;
                    else maxAffoard = PG * 1;
                    if (maxAffoard<10) dNumber.PG.push(tNumbers[maxAffoard]);
                    else {
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                    }
                    // CC
                    if (CC >= needLevels) maxAffoard = needLevels;
                    else maxAffoard = CC * 1;
                    if (maxAffoard<10) dNumber.CC.push(tNumbers[maxAffoard]);
                    else {
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                    }
                }
                else if (HERO[showHero].rarity==1) {
                    // PG
                    var pgNeed = needLevels * 3;
                    if (PG  >= pgNeed) maxAffoard = pgNeed;
                    else maxAffoard = Math.floor(PG / 3) * 3;
                    if (maxAffoard<10) dNumber.PG.push(tNumbers[maxAffoard]);
                    else if (maxAffoard<100) {
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                    }
                    else {
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/100%10)]);
                    }
                    // CC
                    var ccNeed = needLevels * 3;
                    if (CC  >= ccNeed) maxAffoard = ccNeed;
                    else maxAffoard = Math.floor(CC / 3) * 3;
                    if (maxAffoard<10) dNumber.CC.push(tNumbers[maxAffoard]);
                    else if (maxAffoard<100) {
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                    }
                    else {
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/100%10)]);
                    }
                }
                else if (HERO[showHero].rarity==2) {
                    // PG
                    var pgNeed = needLevels * 12;
                    if (PG >= pgNeed) maxAffoard = pgNeed;
                    else maxAffoard = Math.floor(PG / 12) * 12;
                    if (maxAffoard<10) dNumber.PG.push(tNumbers[maxAffoard]);
                    else if (maxAffoard<100) {
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                    }
                    else if (maxAffoard<1000){
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/100%10)]);
                    }
                    else {
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/100%10)]);
                        dNumber.PG.push(tNumbers[Math.floor(maxAffoard/1000%10)]);
                    }
                    // CC
                    var ccNeed = needLevels * 12;
                    if (CC >= ccNeed) maxAffoard = ccNeed;
                    else maxAffoard = Math.floor(CC / 12) * 12;
                    if (maxAffoard<10) dNumber.CC.push(tNumbers[maxAffoard]);
                    else if (maxAffoard<100) {
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                    }
                    else if (maxAffoard<1000) {
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/100%10)]);
                    }
                    else {
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/10%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/100%10)]);
                        dNumber.CC.push(tNumbers[Math.floor(maxAffoard/1000%10)]);
                    }
                }
            }
            else { 
                if (HERO[showHero].rarity==1) ngems="008j";
                else if (HERO[showHero].rarity==2) ngems="0g8p";
            }
        }

        if (filterOpen) {
            T.draw(ctx,"08g3",W*0.052,H*0.137,T.width("08g3")*1.09,T.height("08g3")*1.065);
            var ix = W*0.09;
            var iy = H*0.2;
            
            for (var i = 0; i < listToDraw.length; ++i) {
                text(ctx,listToDraw[i]+":",W*0.09,iy,"70px"+FONT,"rgb(73,174,183)","left","middle");
                for (var j = 0; j < filterList[listToDraw[i]].length; ++j) {
                    if (j==4) iy+=45;
                    var icon=data.filterStatus[listToDraw[i]][j]?"0oh5":"0o0x";
                    T.draw(ctx,icon,ix+((j%4)*W*0.122),iy+25,T.width(icon)*0.9,T.height(icon)*0.9);
                    text(ctx,filterList[listToDraw[i]][j],ix+((j%4)*W*0.122)+T.width(icon)*0.9+4,iy+25+T.height(icon)*0.9*0.5,"36px"+FONT,"white","left","middle");
                    var frect = (new Rect(ix+((j%4)*W*0.122),iy+25,T.width(icon)*0.9,T.height(icon)*0.9)).small();
                    if (frect.isInside(GM.x,GM.y)) {
                        ctx.fillStyle = "rgba(255,255,255,0.2)";
                        ctx.fillRect(ix+((j%4)*W*0.122)+2,iy+25+2,T.width(icon)*0.80,T.height(icon)*0.80);
                        this.addZone("filter",frect,"filter",{i: i, j: j});
                    }
                }
                iy+=H*0.13;
            }            
        } else if (!filterOpen && showHero!==undefined) {
            if (mdata.city.hero[showHero] == 0 && mdata.city.promo[showHero] == 5) {
                text(ctx,mdata.city.hero[showHero]+" ",btx+bw/4+15-asize/2,bty+bh/3+70,"40px"+FONT,"rgb(73,174,183)","right","middle");
                text(ctx,"-> "+(mdata.city.hero[showHero]+1),btx+bw/4+15-asize/2,bty+bh/3+70,"40px"+FONT,"rgb(151,246,255)","left","middle");
                T.draw(ctx,"8whj",btx+bw/4+15-110,bty+bh/3+115-T.height("8whj")*0.5);
                text(ctx,"This hero is training to become stronger!",btx+bw/4+15,bty+bh/1.25,"28px"+FONT,"white","center","middle");
                text(ctx,"Time Left: "+timer((mdata.city.training.time-Date.now())/1000),btx+bw/4+15,bty+bh/1.25+20,"28px"+FONT,"white","center","middle");
            } else if (mdata.city.hero[showHero]<99){
                text(ctx,mdata.city.hero[showHero]+" ",btx+bw/4+15-asize/2,bty+bh/3+70,"40px"+FONT,"rgb(73,174,183)","right","middle");
                text(ctx,"-> "+(mdata.city.hero[showHero]+1),btx+bw/4+15-asize/2,bty+bh/3+70,"40px"+FONT,"rgb(151,246,255)","left","middle");
                T.draw(ctx,"8whj",btx+bw/4+15-110,bty+bh/3+115-T.height("8whj")*0.5);
                text(ctx,level2stats(showHero,mdata.city.hero[showHero],mdata.city.promo[showHero]).atk+" ",btx+bw/4+15-asize/2,bty+bh/3+115,"50px"+FONT,"rgb(73,174,183)","right","middle");
                text(ctx,"-> "+level2stats(showHero,mdata.city.hero[showHero]+1,mdata.city.promo[showHero]).atk,btx+bw/4+15-asize/2,bty+bh/3+115,"50px"+FONT,"rgb(151,246,255)","left","middle");
                T.draw(ctx,"dcl8",btx+bw/4+15-110,bty+bh/3+150-T.height("dcl8")*0.5);
                text(ctx,level2stats(showHero,mdata.city.hero[showHero],mdata.city.promo[showHero]).hp+" ",btx+bw/4+15-asize/2,bty+bh/3+150,"50px"+FONT,"rgb(73,174,183)","right","middle");
                text(ctx,"-> "+level2stats(showHero,mdata.city.hero[showHero]+1,mdata.city.promo[showHero]).hp,btx+bw/4+15-asize/2,bty+bh/3+150,"50px"+FONT,"rgb(151,246,255)","left","middle");
    
                if (isPve) {
                    if (HERO[showHero].rarity==3) {
                        var numbers = ["0onu","099n","01ad","008j","0msl","0lnj","0fl8","04sa","0kdl","0dhg"];
                        var lvlupPriceAS = mdata.city.hero[showHero];
                        if (mulLvl) {
                            lvlupPriceAS = ASLVL(mdata.city.hero[showHero],10);
                            T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+250-T.height("0fp5")/2);
                            T.draw(ctx,"bs0n",btx+bw/4+15+60+T.width("bs0n")*0.5,bty+bh/3+250-T.height("0fp5")/2+T.height("bs0n")*0.7);
                        } else if (maxLvl) {
                            var nextlvl = MAXASLVL(mdata.city.hero[showHero],AS);
                            lvlupPriceAS = ASLVL(mdata.city.hero[showHero],nextlvl);
                            T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+250-T.height("0fp5")/2);
                            T.draw(ctx,"rzf8",btx+bw/4+15+60+T.width("rzf8")*0.5,bty+bh/3+250-T.height("0fp5")/2+T.height("rzf8")*0.7);
                        }
    
                        var lvlupPriceCC = mdata.city.hero[showHero];
                        if (mulLvl) {
                            lvlupPriceCC = ASLVL(mdata.city.hero[showHero],10);
                            T.draw(ctx,"05aa",btx+bw/4+15+60,bty+bh/3+320-T.height("0ork")/2);
                            T.draw(ctx,"h6bl",btx+bw/4+15+60+T.width("h6bl")*0.5,bty+bh/3+320-T.height("0ork")/2+T.height("h6bl")*0.7);
                        } else if (maxLvl) {
                            var nextlvl = MAXASLVL(mdata.city.hero[showHero],CC);
                            lvlupPriceCC = ASLVL(mdata.city.hero[showHero],nextlvl);
                            T.draw(ctx,"05aa",btx+bw/4+15+60,bty+bh/3+320-T.height("0ork")/2);
                            T.draw(ctx,"wy1k",btx+bw/4+15+60+T.width("wy1k")*0.5,bty+bh/3+320-T.height("0ork")/2+T.height("wy1k")*0.7);
                        }
    
                        var asrrect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+250-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                        if (asrrect.isInside(GM.x,GM.y) && AS >= lvlupPriceAS && !lvlupSync) {
                            T.draw(ctx,"07zw",btx+bw/4+15-T.width("07zw")/2,bty+bh/3+250-T.height("07zw")/2);
                            if (mulLvl) this.addZone("lvlupas",asrrect,"lvlupas",{target:showHero,mul:true});
                            else if (maxLvl) this.addZone("lvlupas",asrrect,"lvlupas",{target:showHero,max:true});
                            else this.addZone("lvlupas",asrrect,"lvlupas",{target:showHero,mul:false});
                        } else T.draw(ctx,"0d0l",btx+bw/4+15-T.width("0d0l")/2,bty+bh/3+250-T.height("0d0l")/2);
                        T.draw(ctx,"0bz6",btx+bw/4-15-T.width("0bz6")/2,bty+bh/3+250-T.height("0bz6")/2);
                        if (lvlupPriceAS<10) T.draw(ctx,numbers[lvlupPriceAS],btx+bw/4+17,1+bty+bh/3+250-T.height(numbers[lvlupPriceAS])/2);
                        else if (lvlupPriceAS < 100) {
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS/10)],btx+bw/4+13,1+bty+bh/3+250-T.height(numbers[Math.floor(lvlupPriceAS/10)])/2);
                            T.draw(ctx,numbers[lvlupPriceAS%10],btx+bw/4+27,1+bty+bh/3+250-T.height(numbers[lvlupPriceAS%10])/2);
                        } else if (lvlupPriceAS < 1000) {
                            var sc = 0.7;
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS/100%10)],btx+bw/4+12,5+bty+bh/3+250-T.height(numbers[Math.floor(lvlupPriceAS/100%10)])/2,T.width(numbers[Math.floor(lvlupPriceAS/100%10)])*sc,T.height(numbers[Math.floor(lvlupPriceAS/100%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS/10%10)],btx+bw/4+22,4+bty+bh/3+250-T.height(numbers[Math.floor(lvlupPriceAS/10%10)])/2,T.width(numbers[Math.floor(lvlupPriceAS/10%10)])*sc,T.height(numbers[Math.floor(lvlupPriceAS/10%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS%10)],btx+bw/4+32,4+bty+bh/3+250-T.height(numbers[Math.floor(lvlupPriceAS%10)])/2,T.width(numbers[Math.floor(lvlupPriceAS%10)])*sc,T.height(numbers[Math.floor(lvlupPriceAS%10)])*sc);
                        } else {
                            var sc = 0.6;
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS/1000%10)],btx+bw/4+11,6+bty+bh/3+250-T.height(numbers[Math.floor(lvlupPriceAS/1000%10)])/2,T.width(numbers[Math.floor(lvlupPriceAS/1000%10)])*sc,T.height(numbers[Math.floor(lvlupPriceAS/1000%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS/100%10)],btx+bw/4+20,6+bty+bh/3+250-T.height(numbers[Math.floor(lvlupPriceAS/100%10)])/2,T.width(numbers[Math.floor(lvlupPriceAS/100%10)])*sc,T.height(numbers[Math.floor(lvlupPriceAS/100%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS/10%10)],btx+bw/4+29,6+bty+bh/3+250-T.height(numbers[Math.floor(lvlupPriceAS/10%10)])/2,T.width(numbers[Math.floor(lvlupPriceAS/10%10)])*sc,T.height(numbers[Math.floor(lvlupPriceAS/10%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS%10)],btx+bw/4+38,6+bty+bh/3+250-T.height(numbers[Math.floor(lvlupPriceAS%10)])/2,T.width(numbers[Math.floor(lvlupPriceAS%10)])*sc,T.height(numbers[Math.floor(lvlupPriceAS%10)])*sc);
                        }
    
                        var prrect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+320-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                        if (prrect.isInside(GM.x,GM.y) && CC >= lvlupPriceCC && !lvlupSync) {
                            T.draw(ctx,"03rz",btx+bw/4+15-T.width("03rz")/2,bty+bh/3+320-T.height("03rz")/2);
                            if (mulLvl) this.addZone("lvlupas",prrect,"lvlupas",{target:showHero,mul:true,cc:true});
                            else if (maxLvl) this.addZone("lvlupas",prrect,"lvlupas",{target:showHero,max:true,cc:true});
                            else this.addZone("lvlupas",prrect,"lvlupas",{target:showHero,mul:false,cc:true});
                        } else T.draw(ctx,"0ork",btx+bw/4+15-T.width("0ork")/2,bty+bh/3+320-T.height("0ork")/2);
                        T.draw(ctx,"0bz6",btx+bw/4-15-T.width("0bz6")/2,bty+bh/3+320-T.height("0bz6")/2);
                        if (lvlupPriceCC<10) T.draw(ctx,numbers[lvlupPriceCC],btx+bw/4+17,1+bty+bh/3+320-T.height(numbers[lvlupPriceCC])/2);
                        else if (lvlupPriceCC < 100) {
                            T.draw(ctx,numbers[Math.floor(lvlupPriceAS/10)],btx+bw/4+13,1+bty+bh/3+320-T.height(numbers[Math.floor(lvlupPriceCC/10)])/2);
                            T.draw(ctx,numbers[lvlupPriceCC%10],btx+bw/4+27,1+bty+bh/3+320-T.height(numbers[lvlupPriceCC%10])/2);
                        } else if (lvlupPriceCC < 1000) {
                            var sc = 0.7;
                            T.draw(ctx,numbers[Math.floor(lvlupPriceCC/100%10)],btx+bw/4+12,5+bty+bh/3+320-T.height(numbers[Math.floor(lvlupPriceCC/100%10)])/2,T.width(numbers[Math.floor(lvlupPriceCC/100%10)])*sc,T.height(numbers[Math.floor(lvlupPriceCC/100%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceCC/10%10)],btx+bw/4+22,4+bty+bh/3+320-T.height(numbers[Math.floor(lvlupPriceCC/10%10)])/2,T.width(numbers[Math.floor(lvlupPriceCC/10%10)])*sc,T.height(numbers[Math.floor(lvlupPriceCC/10%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceCC%10)],btx+bw/4+32,4+bty+bh/3+320-T.height(numbers[Math.floor(lvlupPriceCC%10)])/2,T.width(numbers[Math.floor(lvlupPriceCC%10)])*sc,T.height(numbers[Math.floor(lvlupPriceCC%10)])*sc);
                        } else {
                            var sc = 0.6;
                            T.draw(ctx,numbers[Math.floor(lvlupPriceCC/1000%10)],btx+bw/4+11,6+bty+bh/3+320-T.height(numbers[Math.floor(lvlupPriceCC/1000%10)])/2,T.width(numbers[Math.floor(lvlupPriceCC/1000%10)])*sc,T.height(numbers[Math.floor(lvlupPriceCC/1000%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceCC/100%10)],btx+bw/4+20,6+bty+bh/3+320-T.height(numbers[Math.floor(lvlupPriceCC/100%10)])/2,T.width(numbers[Math.floor(lvlupPriceCC/100%10)])*sc,T.height(numbers[Math.floor(lvlupPriceCC/100%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceCC/10%10)],btx+bw/4+29,6+bty+bh/3+320-T.height(numbers[Math.floor(lvlupPriceCC/10%10)])/2,T.width(numbers[Math.floor(lvlupPriceCC/10%10)])*sc,T.height(numbers[Math.floor(lvlupPriceCC/10%10)])*sc);
                            T.draw(ctx,numbers[Math.floor(lvlupPriceCC%10)],btx+bw/4+38,6+bty+bh/3+320-T.height(numbers[Math.floor(lvlupPriceCC%10)])/2,T.width(numbers[Math.floor(lvlupPriceCC%10)])*sc,T.height(numbers[Math.floor(lvlupPriceCC%10)])*sc);
                        }
                    }
                    else {
                        if (mulLvl) {
                            T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+250-T.height("0fp5")/2);
                            T.draw(ctx,"bs0n",btx+bw/4+15+60+T.width("bs0n")*0.5,bty+bh/3+250-T.height("0fp5")/2+T.height("bs0n")*0.7);
                        }
                        else if (maxLvl) {
                            T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+250-T.height("0fp5")/2);
                            T.draw(ctx,"rzf8",btx+bw/4+15+60+T.width("rzf8")*0.5,bty+bh/3+250-T.height("0fp5")/2+T.height("rzf8")*0.7);
                        }
                        var prrect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+250-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                        if (prrect.isInside(GM.x,GM.y) && price <= PG && !lvlupSync) {
                            T.draw(ctx,"0cs9",btx+bw/4+15-T.width("0fp5")/2,bty+bh/3+250-T.height("0fp5")/2);
                            ctx.fillStyle="rgba(0,0,0,0.8)";
                            ctx.fillRect(btx+bw/4+15-T.width("0fp5")/2*0.9-9,bty+bh/3+250-T.height("0fp5")/2*0.81-33-30,W*0.2,H*0.05+30);
                            text(ctx,"Press shift to x10 mode",btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+250-T.height("0fp5")/2*0.81-28-30,"36px"+FONT,"white","left","top");
                            text(ctx,"Press ctrl to Max mode",btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+250-T.height("0fp5")/2*0.81-28,"36px"+FONT,"white","left","top");
                            if (mulLvl) this.addZone("lvlup",prrect,"lvlup",{target:showHero,mul:true});
                            else if (maxLvl) this.addZone("lvlup",prrect,"lvlup",{target:showHero,max:true});
                            else this.addZone("lvlup",prrect,"lvlup",{target:showHero,mul:false});
                        }
                        else T.draw(ctx,"0fp5",btx+bw/4+15-T.width("0fp5")/2,bty+bh/3+250-T.height("0fp5")/2);
                        
                        if (mulLvl) {
                            T.draw(ctx,"05aa",btx+bw/4+15+60,bty+bh/3+320-T.height("0ork")/2);
                            T.draw(ctx,"h6bl",btx+bw/4+15+60+T.width("h6bl")*0.5,bty+bh/3+320-T.height("0ork")/2+T.height("h6bl")*0.7);
                        }
                        else if (maxLvl) {
                            T.draw(ctx,"05aa",btx+bw/4+15+60,bty+bh/3+320-T.height("0ork")/2);
                            T.draw(ctx,"wy1k",btx+bw/4+15+60+T.width("wy1k")*0.5,bty+bh/3+320-T.height("0ork")/2+T.height("wy1k")*0.7);
                        }
                        var ccrect = (new Rect(btx+bw/4+15-T.width("0ork")/2*0.9,bty+bh/3+320-T.height("0ork")/2*0.81,T.width("0ork")*0.9,T.height("0ork")*0.82)).small();
                        if (ccrect.isInside(GM.x,GM.y) && price <= CC && !lvlupSync) {
                            T.draw(ctx,"0ork",btx+bw/4+15-T.width("0ork")/2,bty+bh/3+320-T.height("0ork")/2);
                            ctx.fillStyle="rgba(0,0,0,0.8)";
                            ctx.fillRect(btx+bw/4+15-T.width("0ork")/2*0.9-9,bty+bh/3+320-T.height("0ork")/2*0.81-33-30,W*0.2,H*0.05+30);
                            text(ctx,"Press shift to x10 mode",btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+320-T.height("0ork")/2*0.81-28-30,"36px"+FONT,"white","left","top");
                            text(ctx,"Press ctrl to Max mode",btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+320-T.height("0ork")/2*0.81-28,"36px"+FONT,"white","left","top");
                            if (mulLvl) this.addZone("lvlupcc",ccrect,"lvlupcc",{target:showHero,mul:true});
                            else if (maxLvl) this.addZone("lvlupcc",ccrect,"lvlupcc",{target:showHero,max:true});
                            else this.addZone("lvlupcc",ccrect,"lvlupcc",{target:showHero,mul:false});
                        }
                        else T.draw(ctx,"03rz",btx+bw/4+15-T.width("03rz")/2,bty+bh/3+320-T.height("03rz")/2);
    
                        if (maxLvl) {
                            T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+250-T.height("0bz6")*0.8/2,T.width("0bz6")*0.8,T.height("0bz6")*0.8);
                            for (var i=0;i<dNumber.PG.length;++i) T.draw(ctx,dNumber.PG[i],btx+bw/4+35-(i*10),bty+bh/3+250-T.height(dNumber.PG[i])*0.8/2,T.width(dNumber.PG[i])*0.8,T.height(dNumber.PG[i])*0.8);
                            T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+320-T.height("0bz6")*0.8/2,T.width("0bz6")*0.8,T.height("0bz6")*0.8);
                            for (var i=0;i<dNumber.CC.length;++i) T.draw(ctx,dNumber.CC[i],btx+bw/4+35-(i*10),bty+bh/3+320-T.height(dNumber.CC[i])*0.8/2,T.width(dNumber.CC[i])*0.8,T.height(dNumber.CC[i])*0.8);
                        }
                        else {
                            T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+250-T.height("0bz6")/2);
                            T.draw(ctx,ngems,btx+bw/4+15,bty+bh/3+250-T.height(ngems)/2);
                            
                            T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+320-T.height("0bz6")/2);
                            T.draw(ctx,ngems,btx+bw/4+15,bty+bh/3+320-T.height(ngems)/2); 
                        }
                    }
    
                } else if (showHero == 42 || showHero == 43 || showHero == 44 || showHero == 101) {//UM-levelable
                    var price = 750;
    
                    var prrect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+320-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                    if (prrect.isInside(GM.x,GM.y) && price <= UM && !lvlupSync) {
                        T.draw(ctx,"0cs9",btx+bw/4+15-T.width("0fp5")/2,bty+bh/3+320-T.height("0fp5")/2);
                        this.addZone("lvldev",prrect,"lvldev",{target:showHero});
                    }
                    else T.draw(ctx,"0fp5",btx+bw/4+15-T.width("0fp5")/2,bty+bh/3+320-T.height("0fp5")/2);
                    T.draw(ctx,"0dvo",btx+bw/4+38,bty+bh/3+320-T.height("0fp5")/2+12,T.width("0dvo")*0.6,T.height("0dvo")*0.6);
    
                    T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+320-T.height("0bz6")/2,T.width("0bz6")*0.9,T.height("0bz6"));
    
                    T.draw(ctx,"0ghk",btx+bw/4+4,bty+bh/3+320-T.height("0ghk")/2-3.8,T.width("0ghk"),T.height("0ghk")*1.5);
                    
                    if (mulLvl) {
                        T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+250-T.height("0fp5")/2);
                        T.draw(ctx,"bs0n",btx+bw/4+15+60+T.width("bs0n")*0.5,bty+bh/3+250-T.height("0fp5")/2+T.height("bs0n")*0.7);
                    }
                    else if (maxLvl) {
                        T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+250-T.height("0fp5")/2);
                        T.draw(ctx,"rzf8",btx+bw/4+15+60+T.width("rzf8")*0.5,bty+bh/3+250-T.height("0fp5")/2+T.height("rzf8")*0.7);
                    }
                    var prrect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+250-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                    if (prrect.isInside(GM.x,GM.y) && 12 <= PG && !lvlupSync) {
                        T.draw(ctx,"0cs9",btx+bw/4+15-T.width("0fp5")/2,bty+bh/3+250-T.height("0fp5")/2);
                        ctx.fillStyle="rgba(0,0,0,0.8)";
                        ctx.fillRect(btx+bw/4+15-T.width("0fp5")/2*0.9-9,bty+bh/3+250-T.height("0fp5")/2*0.81-33-30,W*0.2,H*0.05+30);
                        text(ctx,"Press shift to x10 mode",btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+250-T.height("0fp5")/2*0.81-28-30,"36px"+FONT,"white","left","top");
                        text(ctx,"Press ctrl to Max mode",btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+250-T.height("0fp5")/2*0.81-28,"36px"+FONT,"white","left","top");
                        if (mulLvl) this.addZone("lvlup",prrect,"lvlup",{target:showHero,mul:true});
                        else if (maxLvl) this.addZone("lvlup",prrect,"lvlup",{target:showHero,max:true});
                        else this.addZone("lvlup",prrect,"lvlup",{target:showHero,mul:false});
                    }
                    else T.draw(ctx,"0fp5",btx+bw/4+15-T.width("0fp5")/2,bty+bh/3+250-T.height("0fp5")/2);
        
                    if (maxLvl) {
                        T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+250-T.height("0bz6")*0.8/2,T.width("0bz6")*0.8,T.height("0bz6")*0.8);
                        for (var i=0;i<dNumber.PG.length;++i) T.draw(ctx,dNumber.PG[i],btx+bw/4+35-(i*10),bty+bh/3+250-T.height(dNumber.PG[i])*0.8/2,T.width(dNumber.PG[i])*0.8,T.height(dNumber.PG[i])*0.8);
                    }
                    else {
                        T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+250-T.height("0bz6")/2);
                        T.draw(ctx,ngems,btx+bw/4+15,bty+bh/3+250-T.height(ngems)/2);
                    }
                } else if (showHero == 73 || showHero == 74 || showHero == 75 || showHero == 97 || showHero == 98 || showHero == 99 || showHero == 137 || 
                    showHero == 138 || showHero == 139 || showHero == 200 || showHero == 201 || showHero == 202 || showHero == 203 || showHero == 206 || 
                    showHero == 207 || showHero == 208 || showHero == 209 || showHero == 218 || showHero == 219 || showHero == 220 || showHero == 221 || 
                    showHero == 222 || showHero == 223 || showHero == 224 || showHero == 225 || showHero == 226 || showHero == 227 || showHero == 228 || 
                    showHero == 229) {
                    text(ctx,"Only levelable as a Gift Opening",btx+bw/4+5,bty+bh/1.25,"28px"+FONT,"white","center","middle");
                } else if (showHero == 153 || showHero == 154 || showHero == 155 || showHero == 156){
                    text(ctx,"Only levelable on Auction House",btx+bw/4+5,bty+bh/1.25,"28px"+FONT,"white","center","middle");
                } else if (HERO[showHero].rarity >=3) {
                    var numbers = ["0onu","099n","01ad","008j","0msl","0lnj","0fl8","04sa","0kdl","0dhg"];
                    var lvlupPrice = mdata.city.hero[showHero];
                    if (mulLvl) {
                        lvlupPrice = ASLVL(mdata.city.hero[showHero],10);
                        T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+300-T.height("0fp5")/2);
                        T.draw(ctx,"bs0n",btx+bw/4+15+60+T.width("bs0n")*0.5,bty+bh/3+300-T.height("0fp5")/2+T.height("bs0n")*0.7);
                    } else if (maxLvl) {
                        var nextlvl = MAXASLVL(mdata.city.hero[showHero],AS);
                        lvlupPrice = ASLVL(mdata.city.hero[showHero],nextlvl);
                        T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+300-T.height("0fp5")/2);
                        T.draw(ctx,"rzf8",btx+bw/4+15+60+T.width("rzf8")*0.5,bty+bh/3+300-T.height("0fp5")/2+T.height("rzf8")*0.7);
                    }
                    var prrect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+300-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                    if (prrect.isInside(GM.x,GM.y) && AS >= lvlupPrice && !lvlupSync) {
                        T.draw(ctx,"07zw",btx+bw/4+15-T.width("07zw")/2,bty+bh/3+300-T.height("07zw")/2);
                        if (mulLvl) this.addZone("lvlupas",prrect,"lvlupas",{target:showHero,mul:true});
                        else if (maxLvl) this.addZone("lvlupas",prrect,"lvlupas",{target:showHero,max:true});
                        else this.addZone("lvlupas",prrect,"lvlupas",{target:showHero,mul:false});
                    } else T.draw(ctx,"0d0l",btx+bw/4+15-T.width("0d0l")/2,bty+bh/3+300-T.height("0d0l")/2);
                    T.draw(ctx,"0bz6",btx+bw/4-15-T.width("0bz6")/2,bty+bh/3+300-T.height("0bz6")/2);
                    if (lvlupPrice<10) T.draw(ctx,numbers[lvlupPrice],btx+bw/4+17,1+bty+bh/3+300-T.height(numbers[lvlupPrice])/2);
                    else if (lvlupPrice < 100) {
                        T.draw(ctx,numbers[Math.floor(lvlupPrice/10)],btx+bw/4+13,1+bty+bh/3+300-T.height(numbers[Math.floor(lvlupPrice/10)])/2);
                        T.draw(ctx,numbers[lvlupPrice%10],btx+bw/4+27,1+bty+bh/3+300-T.height(numbers[lvlupPrice%10])/2);
                    } else if (lvlupPrice < 1000) {
                        var sc = 0.7;
                        T.draw(ctx,numbers[Math.floor(lvlupPrice/100%10)],btx+bw/4+12,5+bty+bh/3+300-T.height(numbers[Math.floor(lvlupPrice/100%10)])/2,T.width(numbers[Math.floor(lvlupPrice/100%10)])*sc,T.height(numbers[Math.floor(lvlupPrice/100%10)])*sc);
                        T.draw(ctx,numbers[Math.floor(lvlupPrice/10%10)],btx+bw/4+22,4+bty+bh/3+300-T.height(numbers[Math.floor(lvlupPrice/10%10)])/2,T.width(numbers[Math.floor(lvlupPrice/10%10)])*sc,T.height(numbers[Math.floor(lvlupPrice/10%10)])*sc);
                        T.draw(ctx,numbers[Math.floor(lvlupPrice%10)],btx+bw/4+32,4+bty+bh/3+300-T.height(numbers[Math.floor(lvlupPrice%10)])/2,T.width(numbers[Math.floor(lvlupPrice%10)])*sc,T.height(numbers[Math.floor(lvlupPrice%10)])*sc);
                    } else {
                        var sc = 0.6;
                        T.draw(ctx,numbers[Math.floor(lvlupPrice/1000%10)],btx+bw/4+11,6+bty+bh/3+300-T.height(numbers[Math.floor(lvlupPrice/1000%10)])/2,T.width(numbers[Math.floor(lvlupPrice/1000%10)])*sc,T.height(numbers[Math.floor(lvlupPrice/1000%10)])*sc);
                        T.draw(ctx,numbers[Math.floor(lvlupPrice/100%10)],btx+bw/4+20,6+bty+bh/3+300-T.height(numbers[Math.floor(lvlupPrice/100%10)])/2,T.width(numbers[Math.floor(lvlupPrice/100%10)])*sc,T.height(numbers[Math.floor(lvlupPrice/100%10)])*sc);
                        T.draw(ctx,numbers[Math.floor(lvlupPrice/10%10)],btx+bw/4+29,6+bty+bh/3+300-T.height(numbers[Math.floor(lvlupPrice/10%10)])/2,T.width(numbers[Math.floor(lvlupPrice/10%10)])*sc,T.height(numbers[Math.floor(lvlupPrice/10%10)])*sc);
                        T.draw(ctx,numbers[Math.floor(lvlupPrice%10)],btx+bw/4+38,6+bty+bh/3+300-T.height(numbers[Math.floor(lvlupPrice%10)])/2,T.width(numbers[Math.floor(lvlupPrice%10)])*sc,T.height(numbers[Math.floor(lvlupPrice%10)])*sc);
                    }
    
                } else {
                    if (mulLvl) {
                        T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+300-T.height("0fp5")/2);
                        T.draw(ctx,"bs0n",btx+bw/4+15+60+T.width("bs0n")*0.5,bty+bh/3+300-T.height("0fp5")/2+T.height("bs0n")*0.7);
                    }
                    else if (maxLvl) {
                        T.draw(ctx,"06yd",btx+bw/4+15+60,bty+bh/3+300-T.height("0fp5")/2);
                        T.draw(ctx,"rzf8",btx+bw/4+15+60+T.width("rzf8")*0.5,bty+bh/3+300-T.height("0fp5")/2+T.height("rzf8")*0.7);
                    }
                    var prrect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+300-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                    if (prrect.isInside(GM.x,GM.y) && price <= PG && !lvlupSync) {
                        T.draw(ctx,"0cs9",btx+bw/4+15-T.width("0fp5")/2,bty+bh/3+300-T.height("0fp5")/2);
                        ctx.fillStyle="rgba(0,0,0,0.8)";
                        ctx.fillRect(btx+bw/4+15-T.width("0fp5")/2*0.9-9,bty+bh/3+300-T.height("0fp5")/2*0.81-33-30,W*0.2,H*0.05+30);
                        text(ctx,"Press shift to x10 mode",btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+300-T.height("0fp5")/2*0.81-28-30,"36px"+FONT,"white","left","top");
                        text(ctx,"Press ctrl to Max mode",btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+300-T.height("0fp5")/2*0.81-28,"36px"+FONT,"white","left","top");
                        if (mulLvl) this.addZone("lvlup",prrect,"lvlup",{target:showHero,mul:true});
                        else if (maxLvl) this.addZone("lvlup",prrect,"lvlup",{target:showHero,max:true});
                        else this.addZone("lvlup",prrect,"lvlup",{target:showHero,mul:false});
                    }
                    else T.draw(ctx,"0fp5",btx+bw/4+15-T.width("0fp5")/2,bty+bh/3+300-T.height("0fp5")/2);
        
                    if (maxLvl) {
                        T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+300-T.height("0bz6")*0.8/2,T.width("0bz6")*0.8,T.height("0bz6")*0.8);
                        for (var i=0;i<dNumber.PG.length;++i) T.draw(ctx,dNumber.PG[i],btx+bw/4+35-(i*10),bty+bh/3+300-T.height(dNumber.PG[i])*0.8/2,T.width(dNumber.PG[i])*0.8,T.height(dNumber.PG[i])*0.8);
                    }
                    else {
                        T.draw(ctx,"0bz6",btx+bw/4+15-T.width("0bz6"),bty+bh/3+300-T.height("0bz6")/2);
                        T.draw(ctx,ngems,btx+bw/4+15,bty+bh/3+300-T.height(ngems)/2); 
                    }
                }
            }
            else {
                if (mdata.city !== undefined && mdata.city.promo !== undefined) {
                    if (mdata.city.promo[showHero]===1) T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                    else if (mdata.city.promo[showHero]===2) {
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5-20,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5+20,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                    } else if (mdata.city.promo[showHero]===3) {
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5-40,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5+40,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                    } else if (mdata.city.promo[showHero]===4) {
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5-20,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5+20,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5-60,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                        T.draw(ctx,"l1qq",btx+bw/4+15-T.width("l1qq")*1.5*0.5+60,bty+bh/3+52,T.width("l1qq")*1.5,T.height("l1qq")*1.5);
                    } else if (mdata.city.promo[showHero]===5) T.draw(ctx,"bn4f",btx+bw/4+15-T.width("bn4f")*1.4*0.5,bty+bh/3+40,T.width("bn4f")*1.4,T.height("bn4f")*1.4);
                    else if (mdata.city.promo[showHero]===6) T.draw(ctx,"e8d4",btx+bw/4+15-T.width("e8d4")*1.1*0.5,bty+bh/3+48,T.width("e8d4")*1.1,T.height("e8d4")*1.1);
                }
                T.draw(ctx,"8whj",btx+bw/4+15-70,bty+bh/3+115-T.height("8whj")*0.5);
                text(ctx,level2stats(showHero,mdata.city.hero[showHero],mdata.city.promo[showHero]).atk,btx+bw/4+15,bty+bh/3+115,"50px"+FONT,"rgb(73,174,183)","center","middle");
                T.draw(ctx,"dcl8",btx+bw/4+15-70,bty+bh/3+150-T.height("dcl8")*0.5);
                text(ctx,level2stats(showHero,mdata.city.hero[showHero],mdata.city.promo[showHero]).hp,btx+bw/4+15,bty+bh/3+150,"50px"+FONT,"rgb(73,174,183)","center","middle");
    
                if (HERO[showHero].rarity <=3 && mdata.city.hero[HERO[showHero].super] == 0 && !isPve) {
                    var ascendPrice = 100;
                    var prrect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+300-T.height("0fp5")/2*0.81+15,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                    if (prrect.isInside(GM.x,GM.y) && AS >= ascendPrice && !ascendSync) {
                        T.draw(ctx,"07zw",btx+bw/4+15-T.width("07zw")/2,bty+bh/3+300-T.height("07zw")/2+15);
                        this.addZone("ascendhero",prrect,"ascendhero",{target:showHero});
                    } else T.draw(ctx,"0d0l",btx+bw/4+15-T.width("0d0l")/2,bty+bh/3+300-T.height("0d0l")/2+15);
                    T.draw(ctx,"07bb",btx+bw/4-22-T.width("07bb")/2,bty+bh/3+300-T.height("07bb")/2+15);
                    T.draw(ctx,"099n",btx+bw/4+5,1+bty+bh/3+300-T.height("0lnj")/2+15);
                    T.draw(ctx,"0onu",btx+bw/4+18,1+bty+bh/3+300-T.height("0onu")/2+15);
                    T.draw(ctx,"0onu",btx+bw/4+32,1+bty+bh/3+300-T.height("0onu")/2+15);
    
                    var prorect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+250-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                    if (prorect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"8rkl",btx+bw/4+15-T.width("8rkl")/2,bty+bh/3+250-T.height("8rkl")/2);
                        this.addZone("promote",prorect,"promote",{target:showHero});
                    } else T.draw(ctx,"qbcw",btx+bw/4+15-T.width("qbcw")/2,bty+bh/3+250-T.height("qbcw")/2);
                } else {
                    var prorect = (new Rect(btx+bw/4+15-T.width("0fp5")/2*0.9,bty+bh/3+310-T.height("0fp5")/2*0.81,T.width("0fp5")*0.9,T.height("0fp5")*0.82)).small();
                    if (prorect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"8rkl",btx+bw/4+15-T.width("8rkl")/2,bty+bh/3+310-T.height("8rkl")/2);
                        this.addZone("promote",prorect,"promote",{target:showHero});
                    } else T.draw(ctx,"qbcw",btx+bw/4+15-T.width("qbcw")/2,bty+bh/3+310-T.height("qbcw")/2);
                }
    
                if (mdata.city !== undefined && mdata.city.promo !== undefined && promHero !== undefined) {
                    var y = H*0.25;
                    var x = W*0.335;
                    for (var i = 0; i < 6; ++i) {
                        var tab = undefined;
                        if (mdata.city.promo[promHero] == i) {
                            T.draw(ctx,"gazg",x,y-2);
                            tab = "gazg";
                            var umrect = (new Rect(x+T.width(tab)*0.5-T.width("nskb")*0.5,y+T.height(tab)*0.4-T.height("nskb")*0.5,T.width("nskb"),T.height("nskb"))).small();
                            var currentPrice = promPrice[i][1][HERO[promHero].rarity];
                            if (promPrice[i][0][HERO[promHero].rarity] == "WB") currentPrice=promPrice[i][1][HERO[promHero].rarity] - ((promPrice[i][1][HERO[promHero].rarity]/(HERO[promHero].rarity+1))*mdata.city.herowb[promHero]);
                            if (promPrice[i][0][HERO[promHero].rarity] == "WB" && mdata.city.easter.points>=125000) currentPrice=0;

                            var useToken = (i == 3 && mdata.city.promotokens !== undefined && mdata.city.promotokens.promo4 !== undefined && mdata.city.promotokens.promo4>=1) || (i == 5 && mdata.city.promotokens !== undefined && mdata.city.promotokens.promo6 !== undefined && mdata.city.promotokens.promo6>=1);
                            if (umrect.isInside(GM.x,GM.y) && !promsync && ((UM >= currentPrice) || useToken)) {
                                T.draw(ctx,"5k8m",x+T.width(tab)*0.5-T.width("5k8m")*0.5,y+T.height(tab)*0.4-T.height("5k8m")*0.5);
                                if (i !== 5)  this.addZone("umprom",umrect,"promo",{target:promHero,mode:true});
                                else this.addZone("umprom",umrect,"train",{target:promHero,mode:true});
                            } else T.draw(ctx,"nskb",x+T.width(tab)*0.5-T.width("nskb")*0.5,y+T.height(tab)*0.4-T.height("nskb")*0.5);
                            if (i == 3 && useToken) {
                            	text(ctx,"Free Promo",x+T.width(tab)*0.5,y+T.height(tab)*0.4,"28px"+FONT,"rgb(255,255,240)","center","middle");
                            } else if (i == 5 && useToken) {
                            	text(ctx,"Instant Promo",x+T.width(tab)*0.5,y+T.height(tab)*0.4,"28px"+FONT,"rgb(255,255,240)","center","middle");
                            } else {
		                        text(ctx,"Unlock by ",x+T.width(tab)*0.225,y+T.height(tab)*0.4,"28px"+FONT,"rgb(255,255,240)","left","middle");
		                        text(ctx,currentPrice,x+T.width(tab)*0.48,y+T.height(tab)*0.4,"38px"+FONT,"rgb(255,255,240)","left","middle");
		                        T.draw(ctx,"02c9",x+T.width(tab)*0.63,y+T.height(tab)*0.4-T.height("02c9")*0.5*0.5-2,T.width("02c9")*0.5,T.height("02c9")*0.5);
                            }
                            
                            text(ctx,"OR",x+T.width(tab)*0.5,y+T.height(tab)*0.615,"38px"+FONT,"rgba(255,250,210,1)","center","middle");
    
                            var obrect = (new Rect(x+T.width(tab)*0.5-T.width("nskb")*0.5,y+T.height(tab)*0.8-T.height("nskb")*0.5,T.width("nskb"),T.height("nskb"))).small();
                            if (obrect.isInside(GM.x,GM.y)) {
                                T.draw(ctx,"zvml",x+T.width(tab)*0.5-T.width("zvml")*0.5,y+T.height(tab)*0.8-T.height("zvml")*0.5);
                            } T.draw(ctx,"3ush",x+T.width(tab)*0.5-T.width("3ush")*0.5,y+T.height(tab)*0.8-T.height("3ush")*0.5);
                            var currencies = [{icon:"0ap1",curr:"CC",scale:1.0,x:0.67,_c:CC},undefined,{icon:"0j14",curr:"PG",scale:1.0,x:0.67,_c:PG},undefined,{icon:"08y7",curr:"AS",scale:0.75,x:0.635,_c:AS}];
                            if (i == 5) {
                                /*
                                var p6c = [{icon:"0ap1",curr:"CC",scale:1.0,x:0.67,_c:CC},{icon:"0j14",curr:"PG",scale:1.0,x:0.67,_c:PG},{icon:"08y7",curr:"AS",scale:0.75,x:0.635,_c:AS},{icon:"sqtx",curr:"AS",scale:0.75,x:0.635}];
                                text(ctx,"Unlock by ",x+T.width(tab)*0.245,y+T.height(tab)*0.8,"28px"+FONT,"rgb(255,255,240)","left","middle");
                                text(ctx,promPrice[i][0][HERO[promHero].rarity],x+T.width(tab)*0.5,y+T.height(tab)*0.8,"38px"+FONT,"rgb(255,255,240)","left","middle");
                                */
                                var hours = [6,12,24,48];
                                text(ctx,"Train for "+hours[HERO[promHero].rarity]+" Hours",x+T.width(tab)*0.5,y+T.height(tab)*0.8,"28px"+FONT,"rgb(255,255,240)","center","middle");
                                //T.draw(ctx,p6c[HERO[promHero].rarity].icon,x+T.width(tab)*p6c[HERO[promHero].rarity].x,y+T.height(tab)*0.8-T.height(p6c[HERO[promHero].rarity].icon)*p6c[HERO[promHero].rarity].scale*0.5,T.width(p6c[HERO[promHero].rarity].icon)*p6c[HERO[promHero].rarity].scale,T.height(p6c[HERO[promHero].rarity].icon)*p6c[HERO[promHero].rarity].scale);
                                
                                if (obrect.isInside(GM.x,GM.y) && !promsync) {
                                    this.addZone("train",obrect,"train",{target:promHero,mode:false});
                                }
                            } else if (promPrice[i][0][HERO[promHero].rarity] !== "QUEST" && promPrice[i][0][HERO[promHero].rarity] !== "WB") {
                                text(ctx,"Unlock by ",x+T.width(tab)*0.245,y+T.height(tab)*0.8,"28px"+FONT,"rgb(255,255,240)","left","middle");
                                text(ctx,promPrice[i][0][HERO[promHero].rarity],x+T.width(tab)*0.5,y+T.height(tab)*0.8,"38px"+FONT,"rgb(255,255,240)","left","middle");
                                T.draw(ctx,currencies[i].icon,x+T.width(tab)*currencies[i].x,y+T.height(tab)*0.8-T.height(currencies[i].icon)*currencies[i].scale*0.5,T.width(currencies[i].icon)*currencies[i].scale,T.height(currencies[i].icon)*currencies[i].scale);
                                if (obrect.isInside(GM.x,GM.y) && (currencies[i]._c >= promPrice[i][0][HERO[promHero].rarity]) && !promsync) {
                                    this.addZone("obprom",obrect,"promo",{target:promHero,mode:false});
                                }
                            } else {
                                if (promPrice[i][0][HERO[promHero].rarity] == "QUEST") {
                                    text(ctx,"Beat Quest "+(promoData[promHero].quest+1)+" with "+HERO[promHero].name,x+T.width(tab)*0.5,y+T.height(tab)*0.8-5,"20px"+FONT,"rgb(255,255,240)","center","middle");
                                    text(ctx,"*Use max 3 Units",x+T.width(tab)*0.5,y+T.height(tab)*0.8+8,"18px"+FONT,"rgb(255,255,240)","center","middle");
                                    if (obrect.isInside(GM.x,GM.y) && !promsync) this.addZone("pveprom",obrect,"pveprom",{target:promHero});
                                } else {
                                    text(ctx,"Attack WB with "+HERO[promHero].name,x+T.width(tab)*0.5,y+T.height(tab)*0.8-5,"20px"+FONT,"rgb(255,255,240)","center","middle");
                                    text(ctx,mdata.city.herowb[promHero]+"/"+(HERO[promHero].rarity+1)+" times",x+T.width(tab)*0.5,y+T.height(tab)*0.8+8,"18px"+FONT,"rgb(255,255,240)","center","middle");
                                    if (obrect.isInside(GM.x,GM.y) && mdata.city.herowb[promHero]<(HERO[promHero].rarity+1) &&!promsync) this.addZone("wbprom",obrect,"wbprom",{target:promHero});
                                }
                            }
                        } else {
                            T.draw(ctx,"ssd8",x,y);
                            tab = "ssd8";
                        }
    
                        if (i == 4) {
                            if (mdata.city.promo[promHero] >= i+1) T.draw(ctx,"bn4f",x+W*0.005,y+T.height("ssd8")*0.5-T.height("bn4f")*0.5);
                            else T.draw(ctx,"kid0",x+W*0.005,y+T.height("ssd8")*0.5-T.height("kid0")*0.5);
                        } else if (i == 5) {
                            if (mdata.city.promo[promHero] == i+1) T.draw(ctx,"e8d4",x+W*0.005,y+T.height("ssd8")*0.5-T.height("e8d4")*0.5);
                            else T.draw(ctx,"45fl",x+W*0.005,y+T.height("ssd8")*0.5-T.height("45fl")*0.5);
                        } else {
                            for (var j = 0; j <= i; ++j) {
                                if (mdata.city.promo[promHero] <= i) {
                                    T.draw(ctx,"pkic",x+W*0.015+(j*(T.width("pkic")*0.93+2)),y+T.height("ssd8")*0.5-T.height("pkic")*0.5);
                                } else {
                                    T.draw(ctx,"l1qq",x+W*0.015+(j*(T.width("l1qq")*0.93+2)),y+T.height("ssd8")*0.5-T.height("l1qq")*0.5);
                                }
                            }
                        }  
                        
                        var icons = ["dcl8","8whj"];
                        var pdatas = [promoData[promHero].hp,promoData[promHero].atk];
                        if (i==0 || i==1) {
                            T.draw(ctx,icons[i],x+T.width("ssd8")-T.width(icons[i])*1.25,y+T.height("ssd8")*0.5-T.height(icons[i])*0.5);
                            text(ctx,"+"+pdatas[i],x+T.width("ssd8")-T.width(icons[i])*1.25-5,y+T.height("ssd8")*0.5,"38px"+FONT,"rgba(255,250,210,1)","right","middle");
                        } else if (i==2) {
                            text(ctx,"+"+(HERO[promHero].rarity+1)+" stat"+(HERO[promHero].rarity?"s":"")+" per Level",x+T.width("ssd8")-10,y+T.height("ssd8")*0.5,"32px"+FONT,"rgba(255,250,210,1)","right","middle");
                        } else if (i==3) {
                            T.draw(ctx,icons[0],x+T.width("ssd8")-T.width(icons[0])*1.25,y+T.height("ssd8")*0.5-T.height(icons[0])*0.5);
                            T.draw(ctx,icons[1],x+T.width("ssd8")-T.width(icons[1])*1.25*1.8,y+T.height("ssd8")*0.5-T.height(icons[1])*0.5);
                            text(ctx,"+"+promoData[promHero].both,x+T.width("ssd8")-T.width(icons[0])*1.25*1.8-3,y+T.height("ssd8")*0.5,"38px"+FONT,"rgba(255,250,210,1)","right","middle");
                        } else if (i==4) {
                            var tsize="30px"+FONT;
                            var stext=this.skill2text(HERO[promHero].skill,99,false,promoData[promHero].skill,5).short;
                            var wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),x+T.width("ssd8")-10,y+T.height("ssd8")*0.5-8.5,"28px"+FONT,"rgb(151,246,255)","center","middle");
                            if (wtext >= W*0.2) tsize="24px"+FONT;
                            wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),x+T.width("ssd8")-10,y+T.height("ssd8")*0.5-8.5,"24px"+FONT,"rgb(151,246,255)","center","middle");
                            if (wtext >= W*0.2) tsize="18px"+FONT;
                            mltext(ctx,this.skill2text(HERO[promHero].skill,99,false,promoData[promHero].skill,5).short,x+T.width("ssd8")-10,y+T.height("ssd8")*0.5-8.5,tsize,"rgba(255,250,210,1)","right","middle",undefined,undefined,18);
                        } else if (i==5) {
                            var tsize="30px"+FONT;
                            var stext=this.passive2text(HERO[promHero].passive);
                            var wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),x+T.width("ssd8")-10,y+T.height("ssd8")*0.5-8.5,"28px"+FONT,"rgb(151,246,255)","center","middle");
                            if (wtext >= W*0.2) tsize="24px"+FONT;
                            wtext=mtext(ctx,stext.substr(stext.indexOf("/n")),x+T.width("ssd8")-10,y+T.height("ssd8")*0.5-8.5,"24px"+FONT,"rgb(151,246,255)","center","middle");
                            if (wtext >= W*0.2) tsize="18px"+FONT;
                            mltext(ctx,this.passive2text(HERO[promHero].passive),x+T.width("ssd8")-10,y+T.height("ssd8")*0.5-8.5,tsize,"rgba(255,250,210,1)","right","middle",undefined,undefined,18);
                        }
                        y+=T.height(tab);
                    }
                    var clrect = (new Rect(W*0.54,H*0.158,T.width("0bi9"),T.height("0bi9"))).small();
                    if (clrect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"lwnp",W*0.54,H*0.158);
                        this.addZone("promote",clrect,"promote",{target:undefined});
                    } else T.draw(ctx,"0bi9",W*0.54,H*0.158);
                }
            }   
        }

        // Currency information
        var cx = W*0.659;
        var cy = H*0.147;
        var cw = W*0.306;
        var ch = H*0.728;;
        
        ctx.fillStyle = "rgba(0,0,0,0.2)";
        ctx.fillRect(cx-2,cy-2,cw+4,ch+4);
        
        ctx.fillStyle = "rgb(0,121,157)";
        ctx.fillRect(cx,cy,cw,ch);
        
        ctx.fillStyle = "rgb(0,109,143)";
        ctx.fillRect(cx+3,cy+3,cw-6,ch-6);

        ctx.fillStyle = "rgb(0,121,157)";
        ctx.fillRect(cx+10,cy+10,cw-20,ch-20);

        ctx.fillStyle = "rgb(0,109,143)";
        ctx.fillRect(cx+13,cy+13,cw-26,ch-26);

        roundedRect(ctx,cx+cw*0.5-cw*0.85*0.5-2,cy+ch*0.27-ch*0.45*0.5-2,cw*0.85+4,ch*0.390+4,10,"rgba(255,255,255,0.2)");
        roundedRect(ctx,cx+cw*0.5-cw*0.85*0.5,cy+ch*0.27-ch*0.45*0.5,cw*0.85,ch*0.390,10,"rgb(0,78,132)");

        roundedRect(ctx,cx+cw*0.25-cw*0.29*0.5,cy+ch*0.100-ch*0.08*0.5,cw*0.29,ch*0.08,3,"rgb(0,53,104)");
        T.draw(ctx,"08y7",cx+cw*0.25-T.height("08y7")*0.76*0.5-40,cy+ch*0.100-T.height("08y7")*0.76*0.5,T.width("08y7")*0.76,T.height("08y7")*0.76);

        roundedRect(ctx,cx+cw*0.75-cw*0.29*0.5,cy+ch*0.100-ch*0.08*0.5,cw*0.29,ch*0.08,3,"rgb(0,53,104)");
        T.draw(ctx,"0j14",cx+cw*0.75-T.height("0j14")*0.5-26,cy+ch*0.100-T.height("0j14")*0.5);

        T.draw(ctx,"09sg",cx+cw*0.5-T.width("09sg")*0.5*0.5,cy+ch*0.100-T.height("09sg")*0.5*0.5,T.width("09sg")*0.5,T.height("09sg")*0.5);

        roundedRect(ctx,cx+cw*0.25-cw*0.29*0.5,cy+ch*0.290-ch*0.08*0.5,cw*0.29,ch*0.08,3,"rgb(0,53,104)");
        T.draw(ctx,"08y7",cx+cw*0.25-T.height("08y7")*0.76*0.5-40,cy+ch*0.290-T.height("08y7")*0.76*0.5,T.width("08y7")*0.76,T.height("08y7")*0.76);

        roundedRect(ctx,cx+cw*0.75-cw*0.29*0.5,cy+ch*0.290-ch*0.08*0.5,cw*0.29,ch*0.08,3,"rgb(0,53,104)");
        T.draw(ctx,"0ap1",cx+cw*0.75-T.height("0ap1")*0.5-26,cy+ch*0.290-T.height("0ap1")*0.5);

        T.draw(ctx,"09sg",cx+cw*0.5-T.width("09sg")*0.5*0.5,cy+ch*0.290-T.height("09sg")*0.5*0.5,T.width("09sg")*0.5,T.height("09sg")*0.5);

        var curr = ["0dvo","0j14","0ap1","08y7"];
        var titles = [["UNIVERSE","MARBLES"],["PRANA","GEMS"],["COSMIC","COINS"],["ASCENSION","SPHERES"]];
        var cr = [UM,PG,CC,AS];
        for (var i=0; i<4; ++i) {
            roundedRect(ctx,cx+cw*0.5-cw*0.85*0.5-2,cy+ch*0.515+(i*ch*0.130)-ch*0.11*0.5-2,cw*0.85+4,ch*0.11+4,8,"rgba(255,255,255,0.2)");
            roundedRect(ctx,cx+cw*0.5-cw*0.85*0.5,cy+ch*0.515+(i*ch*0.130)-ch*0.11*0.5,cw*0.85,ch*0.11,8,"rgb(0,78,132)");

            roundedRect(ctx,cx+cw*0.43-1,cy+ch*0.515+(i*ch*0.130)-ch*0.08*0.5-1,cw*0.25+2,ch*0.08+2,5,"rgb(0,119,192)");
            roundedRect(ctx,cx+cw*0.43,cy+ch*0.515+(i*ch*0.130)-ch*0.08*0.5,cw*0.25,ch*0.08,5,"rgb(0,53,104)");

            if (i==3) T.draw(ctx,curr[i],cx+cw*0.43+cw*0.25-6,cy+ch*0.515+(i*ch*0.130)-ch*0.08*0.5-5);
            else if (i==2 || i==1) T.draw(ctx,curr[i],cx+cw*0.43+cw*0.25+14,cy+ch*0.515+(i*ch*0.130)-ch*0.08*0.5-5,T.width(curr[i])*1.3,T.height(curr[i])*1.3);
            else T.draw(ctx,curr[i],cx+cw*0.43+cw*0.25-7,cy+ch*0.515+(i*ch*0.130)-ch*0.08*0.5-18,T.width(curr[i])*0.8,T.height(curr[i])*0.8);

            text(ctx,titles[i][0],cx+cw*0.25,cy+ch*0.515+(i*ch*0.130)-10,"38px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,titles[i][1],cx+cw*0.25,cy+ch*0.515+(i*ch*0.130)+10,"38px"+FONT,"rgb(151,246,255)","center","middle");

            text(ctx,cr[i],W*0.67+165-2,cy+ch*0.515+(i*ch*0.130),"46px"+FONT,"rgb(151,246,255)","center","middle");
        }

        // AS to PG Converter
        var _AS = 1;
        var _PG = 1;

        if (mulLvl) {
            _AS = 10;
            _PG = 10;
            T.draw(ctx,"lg0o",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.267);
            T.draw(ctx,"hzy4",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.267);
        } else if (maxLvl) {
            _AS = AS;
            _PG = AS;
            T.draw(ctx,"lg0o",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.267);
            T.draw(ctx,"l7u9",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.267);
        } else if (x100) {
            _AS = 100;
            _PG = 100;
            T.draw(ctx,"lg0o",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.267,T.width("lg0o")*1.2,T.height("lg0o"));
            T.draw(ctx,"2p37",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.267);
        }
    
        text(ctx,_AS,W*0.588+165,H*0.220,"46px"+FONT,"rgb(151,246,255)","center","middle");
        text(ctx,_PG,W*0.74+165,H*0.220,"46px"+FONT,"rgb(151,246,255)","center","middle");
        
        var cvrect=(new Rect(W*0.65+165-2-T.width("0h7a")/2,H*0.245,T.width("0h7a"),T.height("0h7a"))).small();
        if (cvrect.isInside(GM.x,GM.y) && AS>=_AS && !toPgSync) {
            T.draw(ctx,"09ln",W*0.65+165-2-T.width("09ln")/2,H*0.245);
            if (mulLvl) this.addZone("toPG",cvrect,"toPG", {target: true});
            else if (maxLvl) this.addZone("toPG",cvrect,"toPG", {target: true, max: true, x100: false});
            else if (x100) this.addZone("toPG",cvrect,"toPG", {target: true, max: false , x100: true});
            else this.addZone("toPG",cvrect,"toPG", {target: false});
        }
        else {
            if (AS>=_AS) T.draw(ctx,"0h7a",W*0.65+165-2-T.width("0h7a")/2,H*0.245);
            else T.negative(ctx,"0h7a",W*0.65+165-2-T.width("0h7a")/2,H*0.245);
        }

        // AS to CC Converter
        var _AS = 1;
        var _CC = 3;

        if (mulLvl) {
            _AS = 10;
            _CC = 30;
            T.draw(ctx,"lg0o",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.405);
            T.draw(ctx,"hzy4",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.405);
        } else if (maxLvl) {
            _AS = AS;
            _CC = AS * 3;
            T.draw(ctx,"lg0o",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.405);
            T.draw(ctx,"l7u9",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.405);
        }
        else if (x100) {
            _AS = 100;
            _CC = 300;
            T.draw(ctx,"lg0o",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.405,T.width("lg0o")*1.2,T.height("lg0o"));
            T.draw(ctx,"2p37",W*0.65+165-2+T.width("09ln")/2*0.8,H*0.405);
        }

        text(ctx,_AS,W*0.588+165,H*0.357,"46px"+FONT,"rgb(151,246,255)","center","middle");
        text(ctx,_CC,W*0.74+165,H*0.357,"46px"+FONT,"rgb(151,246,255)","center","middle");

        var cvrect=(new Rect(W*0.65+165-2-T.width("0h7a")/2,H*0.380,T.width("0h7a"),T.height("0h7a"))).small();
        if (cvrect.isInside(GM.x,GM.y) && AS>=_AS && !toPgSync) {
            T.draw(ctx,"09ln",W*0.65+165-2-T.width("09ln")/2,H*0.380);
            if (mulLvl) this.addZone("toCC",cvrect,"toCC", {target: true});
            else if (maxLvl) this.addZone("toCC",cvrect,"toCC", {target: true, max: true, x100: false});
            else if (x100) this.addZone("toCC",cvrect,"toCC", {target: true, max: false, x100: true});
            else this.addZone("toCC",cvrect,"toCC", {target: false});
        }
        else {
            if (AS>=_AS) T.draw(ctx,"0h7a",W*0.65+165-2-T.width("0h7a")/2,H*0.380);
            else T.negative(ctx,"0h7a",W*0.65+165-2-T.width("0h7a")/2,H*0.380);
        }

        // Update Currencies
    
        var updrect=(new Rect(W*0.65+165-T.width("01nq")/2*0.9,H*0.886,T.width("01nq")*0.9,T.height("01nq")*0.9)).small();
        var actualStamp = Date.now();
        if (updateCurrStamp===undefined || actualStamp >= updateCurrStamp+60000) {
            if (updrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0jmt",W*0.65+165-T.width("01nq")/2*0.9,H*0.886,T.width("01nq")*0.9,T.height("01nq")*0.9);
                this.addZone("updCur",updrect,"updCur");
            } else T.draw(ctx,"01nq",W*0.65+165-T.width("01nq")/2*0.9,H*0.886,T.width("01nq")*0.9,T.height("01nq")*0.9);
            text(ctx,"Update Currencies",W*0.65+165,H*0.886+T.height("01nq")*0.5*0.9,"54px"+FONT,"rgb(151,246,255)","center","middle");
        }
        else {
            T.negative(ctx,"01nq",W*0.65+165-T.width("01nq")/2*0.9,H*0.886,T.width("01nq")*0.9,T.height("01nq")*0.9);
            text(ctx,timer(60-(actualStamp-updateCurrStamp)/1000),W*0.65+165,H*0.886+T.height("01nq")*0.5*0.9,"54px"+FONT,"rgb(151,246,255)","center","middle");
        }

        if (showDecompose!==undefined) this.drawDecomposer(ctx);
        if (longskill !== undefined) {
            ctx.fillStyle = "rgba(230,230,250,1)";
            ctx.fillRect(W*0.33-1,H*0.155-1,W*0.255+2,H*0.82+2);
            ctx.fillStyle = "rgba(255,255,255,1)";
            ctx.fillRect(W*0.33,H*0.155,W*0.255,H*0.82);
            ctx.fillStyle = "rgba(0,0,255,0.1)";
            ctx.fillRect(W*0.33,H*0.155,W*0.255,H*0.82);


            

            var tsize="50px"+FONT;
            var skillName = longskill.short.substr(0,longskill.short.indexOf("/"));
            var wtext=mtext(ctx,skillName,btx+bw/4+15,bty+bh/3+235,"40px"+FONT,"rgb(151,246,255)","center","middle");
            if (wtext >= W*0.25) tsize="24px"+FONT;
            wtext=mtext(ctx,skillName,btx+bw/4+15,bty+bh/3+235,"30px"+FONT,"rgb(151,246,255)","center","middle");
            if (wtext >= W*0.25) tsize="22px"+FONT;
            wtext=mtext(ctx,skillName,btx+bw/4+15,bty+bh/3+235,"20px"+FONT,"rgb(151,246,255)","center","middle");
            if (wtext >= W*0.25) tsize="20px"+FONT;

            text(ctx,longskill.short.substr(0,longskill.short.indexOf("/")),W*0.33+W*0.255*0.5,H*0.2,tsize,"black","center","middle");
            etext(ctx,longskill.long,W*0.335,H*0.25,"34px"+FONT,"black","left","middle",undefined, undefined,W*0.250);
        }
    }
    this.drawDecomposer = function (ctx) {
        var hid = showDecompose;
        var HERODROP = [
            7,8,9,
            10,11,12,
            13,14,15,
            16,17,18,
            21,22,23,
            24,25,26,
            30,31,32,
            36,37,38,
            45,46,47,
            62,63,64,
            77,78,79,
            93,94,95,
            110,111,112,
            140,141,142,
            149,150,151,
            165,166,167,
            176,177,178,
            181,182,183,
            191,192,193,
        ];

        ctx.fillStyle="rgba(0,0,0,0.5)";
        ctx.fillRect(0,0,W,H);

        roundedRect(ctx,W*0.5-W*0.7*0.5,H*0.5-H*0.7*0.5,W*0.7,H*0.7,5,"black");
        roundedRect(ctx,W*0.5-W*0.7*0.5+2,H*0.5-H*0.7*0.5+2,W*0.7-4,H*0.7-4,5,"white");
        roundedRect(ctx,W*0.5-W*0.7*0.5+4,H*0.5-H*0.7*0.5+4,W*0.7-8,H*0.7-8,5,"black");
        roundedRect(ctx,W*0.5-W*0.7*0.5+6,H*0.5-H*0.7*0.5+6,W*0.7-12,H*0.7-12,5,"rgba(255,250,210,1)");
        roundedRect(ctx,W*0.5-W*0.7*0.5+6,H*0.5-H*0.7*0.5+6,W*0.7-12,H*0.7-12,5,"rgba(0,0,0,0.15)");

        text(ctx,"HERO RECYCLING SYSTEM",W*0.5,H*0.21,"70px"+FONT,"black","center","middle");

        var name = HERO[hid].name;
        var nSize = 60;
        var fixSize = true;
        while (fixSize) {
            if (mtext(ctx,name,0,0,nSize+"px"+FONT,"black","center","middle") > W*0.225) nSize-=1;
            else fixSize = false;
        }
        ctx.fillStyle = "rgba(0,0,0,1)";
        ctx.fillRect(W*0.3-T.width("0gkd")*2*0.5-20-2,H*0.55-T.height("0gkd")*2*0.5-20-30-2,W*0.228+4,H*0.42+4);
        ctx.fillStyle = "rgba(255,250,210,1)";
        ctx.fillRect(W*0.3-T.width("0gkd")*2*0.5-20,H*0.55-T.height("0gkd")*2*0.5-20-30,W*0.228,H*0.42);
        T.draw(ctx,"0gkd",W*0.3-T.width("0gkd")*2*0.5,H*0.55-T.height("0gkd")*2*0.5,T.width("0gkd")*2,T.height("0gkd")*2);
        text(ctx,HERO[hid].name,W*0.3,H*0.55-T.height("0gkd")*2*0.5-20,nSize+"px"+FONT,"rgb(73,174,183)","center","middle");
        this.drawMonster(ctx,-2-hid,W*0.3,H*0.55+T.height("0gkd")*2*0.5-30,undefined,false,1.5,mdata.city.hero[hid],true,base,mdata.city.promo[hid],true);

        var fee = 0;
        for (var i = 0; i < HERODROP.length; ++i) {
            if (hid == HERODROP[i]) {
                if (HERO[hid].rarity < 2) fee=45;
                else fee=60;
            }
        }

        if (HERO[hid].rarity==0 || HERO[hid].rarity==1) text(ctx,"Service Charges: "+(15+fee)+"%",W*0.45,H*0.35,"50px"+FONT,"black","left","middle");
        else text(ctx,"Service Charges: "+(15+fee)+"%",W*0.45,H*0.35,"50px"+FONT,"black","left","middle");

        var cost = ["FREE","5000 UM","100 Kred","FREE"];

        var kindOfHero = undefined;
        if (HERO[hid].rarity<=2 && HERO[hid].upgrade.pg==1 && HERO[hid].upgrade.cc==0) kindOfHero = 0;
        else if (HERO[hid].rarity<=2 && HERO[hid].upgrade.pg==1 && HERO[hid].upgrade.cc==1) kindOfHero = 1;
        else if (HERO[hid].rarity==3 && HERO[hid].upgrade.as==1 && HERO[hid].upgrade.cc==0) kindOfHero = 2;
        else if (HERO[hid].rarity==3 && HERO[hid].upgrade.as==1 && HERO[hid].upgrade.cc==1) kindOfHero = 3;
        else if (HERO[hid].upgrade.none==1) kindOfHero = 4;

        if (mdata.city.recycle.stage < 4) text(ctx,"Service Cost: "+cost[mdata.city.recycle.stage],W*0.45,H*0.35+30,"50px"+FONT,"black","left","middle");
        else text(ctx,"Service Cost: Not Available",W*0.45,H*0.35+30,"50px"+FONT,"black","left","middle");

        var rCosts = [1,3,12];
        var service = [15,15,10,10];
        var levelsToGive = mdata.city.hero[hid] - 1;
    
        if (mdata.city.recycle.stage > 3) {
            text(ctx,"SERVICE NOT AVAILABLE",W*0.63,H*0.55,"50px "+FONT,"black","center","middle");
        } else if (mdata.city.recycle.stage == 2) {
            var cvrect = (new Rect(W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
            if (cvrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0eni",W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5);
                this.addZone("doRecycle_0",cvrect,"doRecycle",{target: hid, choice: 0});           
            } else T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5);
            text(ctx,"UNLOCK FOR 100KRED",W*0.63,H*0.55,"36px "+FONT,"white","center","middle");
        } else {
            if (kindOfHero == 0) {
                var toGive = Math.ceil((levelsToGive * rCosts[HERO[hid].rarity]) - (levelsToGive * rCosts[HERO[hid].rarity] * (service[HERO[hid].rarity]+fee) / 100));
                if (!recycleSync) {
                    var cvrect = (new Rect(W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
                    if (cvrect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0eni",W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5);
                        this.addZone("doRecycle_0",cvrect,"doRecycle",{target: hid, choice: 0});           
                    } else T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5);
                    text(ctx,toGive,W*0.63-20,H*0.55,"50px "+FONT,"white","center","middle");
                    T.draw(ctx,"0j14",W*0.63+20,H*0.55-T.height("0j14")*0.5);
                } else {
                    T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5);
                    this.spinner(ctx,W*0.63,H*0.55,30);
                }
                
            } else if (kindOfHero == 1) {
                var toGive = Math.ceil((levelsToGive * rCosts[HERO[hid].rarity]) - (levelsToGive * rCosts[HERO[hid].rarity] * service[HERO[hid].rarity] / 100));
                var toGive2 = Math.round(toGive/3);
    
                if (!recycleSync) {
                    var cvrect1 = (new Rect(W*0.63-T.width("091m")*0.5-100,H*0.55-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
                    if (cvrect1.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0eni",W*0.63-T.width("091m")*0.5-100,H*0.55-T.height("091m")*0.5);
                        this.addZone("doRecycle_0",cvrect1,"doRecycle",{target: hid, choice: 0});           
                    } else T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5-100,H*0.55-T.height("091m")*0.5);
                    text(ctx,toGive,W*0.63-20-100,H*0.55,"50px "+FONT,"white","center","middle");
                    T.draw(ctx,"0ap1",W*0.63+20-100,H*0.55-T.height("0ap1")*0.5);
    
                    var cvrect2 = (new Rect(W*0.63-T.width("091m")*0.5+105,H*0.55-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
                    if (cvrect2.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0eni",W*0.63-T.width("091m")*0.5+105,H*0.55-T.height("091m")*0.5);
                        this.addZone("doRecycle_1",cvrect2,"doRecycle",{target: hid, choice: 1});           
                    } else T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5+105,H*0.55-T.height("091m")*0.5);
                    text(ctx,toGive2,W*0.63-20+105,H*0.55,"50px "+FONT,"white","center","middle");
                    T.draw(ctx,"0j14",W*0.63+20+105,H*0.55-T.height("0j14")*0.5);
                } else {
                    T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5-100,H*0.55-T.height("091m")*0.5);
                    this.spinner(ctx,W*0.63-100,H*0.55,30);
                    T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5+105,H*0.55-T.height("091m")*0.5);
                    this.spinner(ctx,W*0.63+105,H*0.55,30);
                }
            } else if (kindOfHero == 2) {
                var toGive = Math.ceil((levelsToGive*(levelsToGive+1)/2) - ((levelsToGive*(levelsToGive+1)/2) * service[HERO[hid].rarity] / 100));
                
                if (!recycleSync) {
                    var cvrect = (new Rect(W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
                    if (cvrect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0eni",W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5);
                        this.addZone("doRecycle_0",cvrect,"doRecycle",{target: hid, choice: 0});           
                    } else T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5);
                    text(ctx,toGive,W*0.63-20,H*0.55,"50px "+FONT,"white","center","middle");
                    T.draw(ctx,"08y7",W*0.63+20,H*0.55-T.height("08y7")*0.5);
                } else {
                    T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5,H*0.55-T.height("091m")*0.5);
                    this.spinner(ctx,W*0.63,H*0.55,30);
                }
            } else if (kindOfHero == 3) {
                var toGive = Math.ceil((levelsToGive*(levelsToGive+1)/2) - ((levelsToGive*(levelsToGive+1)/2) * service[HERO[hid].rarity] / 100));
                var toGive2 = Math.round(toGive/3);
    
                if (!recycleSync) {
                    var cvrect1 = (new Rect(W*0.63-T.width("091m")*0.5-100,H*0.55-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
                    if (cvrect1.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0eni",W*0.63-T.width("091m")*0.5-100,H*0.55-T.height("091m")*0.5);
                        this.addZone("doRecycle_0",cvrect1,"doRecycle",{target: hid, choice: 0});           
                    } else T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5-100,H*0.55-T.height("091m")*0.5);
                    text(ctx,toGive,W*0.63-20-100,H*0.55,"50px "+FONT,"white","center","middle");
                    T.draw(ctx,"0ap1",W*0.63+20-100,H*0.55-T.height("0ap1")*0.5);
    
                    var cvrect2 = (new Rect(W*0.63-T.width("091m")*0.5+105,H*0.55-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
                    if (cvrect2.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0eni",W*0.63-T.width("091m")*0.5+105,H*0.55-T.height("091m")*0.5);
                        this.addZone("doRecycle_1",cvrect2,"doRecycle",{target: hid, choice: 1});           
                    } else T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5+105,H*0.55-T.height("091m")*0.5);
                    text(ctx,toGive2,W*0.63-20+105,H*0.55,"50px "+FONT,"white","center","middle");
                    T.draw(ctx,"08y7",W*0.63+20+105,H*0.55-T.height("08y7")*0.5);
                } else {
                    T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5-100,H*0.55-T.height("091m")*0.5);
                    this.spinner(ctx,W*0.63-100,H*0.55,30);
                    T.draw(ctx,"091m",W*0.63-T.width("091m")*0.5+105,H*0.55-T.height("091m")*0.5);
                    this.spinner(ctx,W*0.63+105,H*0.55,30);
                }
            } else if (kindOfHero == 4) {
                text(ctx,"You can't recycle this hero.",W*0.63,H*0.55,"60px "+FONT,"red","center","middle");
            }
    
            var obj = [[25,100,300,600],["QUEST","QUEST","QUEST","QUEST"],[50,200,600,1200],["WB","WB","WB","WB"],[100,400,1200,2400]];
            var pas = Math.round(obj[4][HERO[hid].rarity]-(obj[4][HERO[hid].rarity]*50/100));
            var ppg = Math.round(obj[2][HERO[hid].rarity]-(obj[2][HERO[hid].rarity]*50/100));
            var pcc = Math.round(obj[0][HERO[hid].rarity]-(obj[0][HERO[hid].rarity]*50/100));
            if (mdata.city.promo[hid] == 5) {
                text(ctx,"For the promotion you will receive: "+pas+"AS, "+ppg+"PG, "+pcc+"CC",W*0.63,H*0.65,"32px"+FONT,"black","center","middle");
            } else if (mdata.city.promo[hid] >= 3) {
                text(ctx,"For the promotion you will receive: "+ppg+"PG, "+pcc+"CC",W*0.63,H*0.65,"32px"+FONT,"black","center","middle");
            } else if (mdata.city.promo[hid] >= 1) {
                text(ctx,"For the promotion you will receive: "+pcc+"CC",W*0.63,H*0.65,"32px"+FONT,"black","center","middle");
            }
        }

        if (mdata.city.recycle.next-Date.now() <= 0) mltext(ctx,"Spend your free recycle to start the countdown.",W*0.5,H*0.8,"50px"+FONT,"black","center","middle");
        else if ((mdata.city.recycle.next-Date.now())>86400000) text(ctx,"Time till next FREE recycle: "+Math.ceil((mdata.city.recycle.next-Date.now())/86400000)+" Days",W*0.5,H*0.8,"50px"+FONT,"black","center","middle");
        else text(ctx,"Time till next FREE recycle: "+timer((mdata.city.recycle.next-Date.now())/1000),W*0.5,H*0.8,"50px"+FONT,"black","center","middle");
        // close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var clrect = (new Rect(W*0.5+W*0.7*0.52-cw*1.2-15,H*0.5-H*0.7*0.5+ch*0.13+3,cw,ch)).small();
        if (clrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0o6b",W*0.5+W*0.7*0.52-cw*1.2-15,H*0.5-H*0.7*0.5+ch*0.13+3);
            this.addZone("decompose",clrect,"decompose");
        }
        else T.draw(ctx,"0evr",W*0.5+W*0.7*0.52-cw*1.2-15,H*0.5-H*0.7*0.5+ch*0.13+3);
    }
    this.drawRanking = function (ctx) {
        var rxtop = 0.18;
        var rxhof = 0.5;
        var rxplayer = 0.82;
        var rystart = 0.45;
        var rydistance = 0.05;
        var fSize = "42px";
        var numSpace = mtext(ctx,"000000",0,0,fSize+FONT,"rgb(130,233,255)","left","middle");
        var numberOfSeasons=0;
        var trophies = ["1hng","a0jn","nppo","cx52","d3vp"];

        if (CQW!==undefined && CQWS!==undefined) {
            numberOfSeasons=CQWS.length;
        }

        if (ranquing==undefined || Date.now()-ranquing.time>5*60*1000) this.updateRanking();

        T.draw(ctx,"0c2k",(1024*rxtop)-T.width("0c2k")/2,640*0.25,T.width("0c2k"),T.height("0c2k")*0.9);
        T.draw(ctx,"0cz1",(1024*rxtop)-T.width("0i93")/2+1,640*0.27);
        T.draw(ctx,"04tv",(1024*rxtop)-T.width("0i93")/2+1,640*0.27);

        T.draw(ctx,"0c2k",(1024*rxplayer)-T.width("0c2k")/2,640*0.25,T.width("0c2k"),T.height("0c2k")*0.9);
        T.draw(ctx,"0cz1",(1024*rxplayer)-T.width("0i93")/2+1,640*0.27);
        if (showRanking==0) T.draw(ctx,"0ici",(1024*rxplayer)-T.width("0i93")/2+1,640*0.27);
        else T.draw(ctx,"07nc",(1024*rxplayer)-T.width("0i93")/2+1,640*0.27);

        if (showRanking==0) {
            if (ranquing.top!=undefined){
                try {
                    var begin=Math.min(ranquing.top.length,rankingPage*10);
                    var end=Math.min(ranquing.top.length,(rankingPage+1)*10);
                    for (var i=0;i<Math.min(end-begin);++i) {
                        var crect=(new Rect((1024*rxtop)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)-10),T.width("0c2k")*0.91,20)).small();
                        var rtoppos = undefined;
                        if (rTopSeason !== undefined) {
                            for (var j = 0; j < rTopSeason.length; ++j) {
                                if (ranquing.top[begin+i].DisplayName == rTopSeason[j].name) {
                                    var best = 0;
                                    rtoppos = j;
                                    if (rTopSeason[j].top[0] == 0) {
                                        var diamond = 0;
                                        for (var k = 0; k < rTopSeason[j].top.length; ++k) if (rTopSeason[j].top[k] == 0) ++diamond;
                                        if (diamond >= 3) best = 4;
                                    } else {
                                        if (rTopSeason[j].top[0] < 3) best = rTopSeason[j].top[0];
                                        else best = 3;
                                    }
                                    if (!crect.isInside(GM.x,GM.y)) T.draw(ctx,trophies[best],(1024*rxtop)-T.width("0c2k")/2.2+50-T.width(trophies[best])*0.5,(640*(rystart+i*rydistance))-T.height(trophies[best])*0.5);
                                }
                            }
                        } 
                        if (rtoppos !== undefined && crect.isInside(GM.x,GM.y)) {
                            ctx.fillStyle="rgba(255,255,255,0.2)";
                            ctx.fillRect((1024*rxtop)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)-15),T.width("0c2k")*0.91,30);
                            var topRecord = [0,0,0,0];
                            for (var j = 0; j < rTopSeason[rtoppos].top.length; ++j) {
                                if (rTopSeason[rtoppos].top[j] >= 3) ++topRecord[3];
                                else ++topRecord[rTopSeason[rtoppos].top[j]];
                            }

                            for (var j = 0; j < 4; ++j) {
                                if (j==3) T.draw(ctx,trophies[j],(1024*rxtop)-T.width("0c2k")/2.2+20+(75*j)-T.width(trophies[3])*0.5,(640*(rystart+i*rydistance))-T.height(trophies[3])*0.5);
                                else T.draw(ctx,trophies[j],(1024*rxtop)-T.width("0c2k")/2.2+20+(75*j)-T.width(trophies[0])*0.5,(640*(rystart+i*rydistance))-T.height(trophies[0])*0.5);
                                text(ctx,"x"+topRecord[j],(1024*rxtop)-T.width("0c2k")/2.2+55+(75*j)-T.width(trophies[0])*0.5,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                            }
                        } else {
                            if (pfdata.PlayFabId == ranquing.top[begin+i].PlayFabId){
                                text(ctx,ranquing.top[begin+i].Position+1,(1024*rxtop)-T.width("0c2k")/2.2+2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                                text(ctx,ranquing.top[begin+i].DisplayName,numSpace+(1024*rxtop)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                                text(ctx,ranquing.top[begin+i].StatValue,(1024*rxtop)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","right","middle");
                            }
                            else {
                                text(ctx,ranquing.top[begin+i].Position+1,(1024*rxtop)-T.width("0c2k")/2.2+2,(640*(rystart+i*rydistance)),fSize+FONT,"black","left","middle");
                                text(ctx,ranquing.top[begin+i].DisplayName,numSpace+(1024*rxtop)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","left","middle");
                                text(ctx,ranquing.top[begin+i].StatValue,(1024*rxtop)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","right","middle");
                            }
                        }
                    }
                    var ew=T.width("0f9n");
                    var eh=T.height("0f9n");
                    if (begin!=0) {
                        var x=1024*0.02+T.width("0c2k")/2;
                        var y=640*0.2+eh/2;
                        ctx.save();
                        ctx.translate(x,y);
                        ctx.scale(1,-1);
                        T.draw(ctx,"0f9n",-ew/2,-eh/2 - 125);
                        ctx.restore();
                        this.addZone("rank_p",(new Rect(x-ew/2,125+y-eh/2,ew,eh)).small(),"rankP",{target: rankingPage-1});
                    }
                    if ((rankingPage+1)*10<ranquing.top.length) {
                        var x=1024*0.02+T.width("0c2k")/2-ew/2;
                        var y=640*0.165+T.height("0c2k")-eh;
                        T.draw(ctx,"0f9n",x,y-10);
                        this.addZone("rank_m",(new Rect(x,y-10,ew,eh)).small(),"rankP",{target: rankingPage+1});
                    }
                } catch (e) {
                    ranquing.top = undefined;
                }
            }
            else {
                this.spinner(ctx,1024*rxtop,640*0.5,40);
            }
        

            var hofy = H*0.275;
            var hofdis = T.height("0i93")*0.95;
            var hofNames =["Bloodbath","Hero","Optimus Prime","Survivor","By the skin of teeth"];
            var hofTexts =["Draw with more points in play","Win with highest point difference","Win with highest % difference","Draw with highest point difference","Draw with highest % difference"];
            var keys=["blod","hero","oppr","surv","skin"];
            var fSizeHof="32px";

            //Draw tabs
            T.draw(ctx,"0c2k",(1024*rxhof)-T.width("0c2k")/2,640*0.25,T.width("0c2k"),T.height("0c2k")*0.9);
            ctx.save();
            ctx.translate((1024*rxhof)-T.width("0c2k")/2,640*0.25);
            ctx.rotate(-Math.PI / 2);
            var rect1 = (new Rect((1024*rxhof)-T.width("0c2k")/2+2,640*0.25-24,108,T.width("050s")*0.9)).small()
            var rect2 = (new Rect((1024*rxhof)-T.width("0c2k")/2+112,640*0.25-24,108,T.width("050s")*0.9)).small()
            if (hofTab=="alltime" || rect1.isInside(GM.x,GM.y)) T.draw(ctx,"050s",-11,2,T.width("050s"),118);
            else T.draw(ctx,"0p2y",-11,2,T.width("050s"),118);
            if (hofTab=="daily"|| rect2.isInside(GM.x,GM.y)) T.draw(ctx,"050s",-11,105,T.width("050s"),118);
            else T.draw(ctx,"0p2y",-11,105,T.width("050s"),118);
            ctx.restore();
            text(ctx,"ALL TIME",(1024*rxhof)-T.width("0c2k")/2+25,640*0.25-5,fSizeHof+FONT,"black","left","middle");
            text(ctx,"DAILY",(1024*rxhof)-T.width("0c2k")/2+143,640*0.25-5,fSizeHof+FONT,"black","left","middle");

            this.addZone("hofTab_"+0,rect1,"hofTab",{target: "alltime"});
            this.addZone("hofTab_"+1,rect2,"hofTab",{target: "daily"});

            if (ranquing.hof!=undefined){
                try {
                    for (var i=0;i<5;++i) {
                        var date = new Date(ranquing.hof[hofTab][keys[i]].date);
                        var dd = date.getDate();
                        var mm = date.getMonth()+1;
                        var yyyy = date.getFullYear();
                        var hh = date.getHours();
                        var mn = (date.getMinutes()<10?'0':'') + date.getMinutes();
                        var p1 = setupCost(ranquing.hof[hofTab][keys[i]].setup,ranquing.hof[hofTab][keys[i]].shero,ranquing.hof[hofTab][keys[i]].spromo);
                        //for(var j in ranquing.hof[hofTab][keys[i]].setup) { if (ranquing.hof[hofTab][keys[i]].setup[j]!=-1) p1 += MONSTERS[ranquing.hof[hofTab][keys[i]].setup[j]].cost; }
                        var p2 = setupCost(ranquing.hof[hofTab][keys[i]].player,ranquing.hof[hofTab][keys[i]].phero,ranquing.hof[hofTab][keys[i]].ppromo);
                        //for(var j in ranquing.hof[hofTab][keys[i]].player) { if (ranquing.hof[hofTab][keys[i]].player[j]!=-1) p2 += MONSTERS[ranquing.hof[hofTab][keys[i]].player[j]].cost; }

                        T.draw(ctx,"0i93",W*rxhof-T.width("0i93")/2,hofy+i*hofdis,T.width("0i93"),T.height("0i93")*0.95);
                        text(ctx,hofNames[i],10+(1024*rxhof)-T.width("0c2k")/2.2,20+hofy+i*hofdis,"34px"+FONT,"rgb(0,82,135)","left","middle");
                        text(ctx,dd+"/"+mm+"/"+yyyy+" "+hh+":"+mn,(1024*rxhof)+T.width("0c2k")/2.3,20+hofy+i*hofdis,"26px"+FONT,"black","right","middle");
                        text(ctx,hofTexts[i],W*rxhof,45+hofy+i*hofdis,"24px"+FONT,"black","center","middle");
                        text(ctx,ranquing.hof[hofTab][keys[i]].left,10+(1024*rxhof)-T.width("0c2k")/2.2,70+hofy+i*hofdis,"26px"+FONT,"rgb(0,82,135)","left","middle");
                        text(ctx,bint(p1,data.bintmode)+" vs "+bint(p2,data.bintmode),W*rxhof,70+hofy+i*hofdis,"24px"+FONT,"black","center","middle");
                        if (hofNames[i] == "Bloodbath") text(ctx,ranquing.hof[hofTab][keys[i]].enemy,(1024*rxhof)+T.width("0c2k")/2.3,70+hofy+i*hofdis,"26px"+FONT,"rgb(0,82,135)","right","middle");

                        var crect=(new Rect(W*rxhof-T.width("0i93")/2,hofy+i*hofdis,T.width("0i93"),T.height("0i93")*0.90)).small();
                        if (!showingSeasons) this.addZone("hof_"+i,crect,"hof",{target: keys[i]});
                        if (crect.isInside(GM.x,GM.y)) {
                            ctx.fillStyle="rgba(255,255,255,0.2)";
                            ctx.fillRect(W*rxhof-T.width("0i93")/2+4,hofy+i*hofdis+4,T.width("0i93")-8,T.height("0i93")*0.95-8);
                        }
                    }
                } catch (e) {
                    console.log(e);
                    ranquing.hof=undefined;
                }
            }
            else {
                this.spinner(ctx,1024*rxhof,640*0.5,40);
            }

            if (ranquing.player!=undefined){
                try {
                    for (var i=0;i<Math.min(10,ranquing.player.length);++i) {
                        if (pfdata.PlayFabId == ranquing.player[i].PlayFabId){
                            text(ctx,ranquing.player[i].Position+1,(1024*rxplayer)-T.width("0c2k")/2.2+2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                            text(ctx,ranquing.player[i].DisplayName,numSpace+(1024*rxplayer)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                            text(ctx,ranquing.player[i].StatValue,(1024*rxplayer)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","right","middle");
                        }
                        else {
                            if (oponent===undefined) {}
                            text(ctx,ranquing.player[i].Position+1,(1024*rxplayer)-T.width("0c2k")/2.2+2,(640*(rystart+i*rydistance)),fSize+FONT,"black","left","middle");
                            text(ctx,ranquing.player[i].DisplayName,numSpace+(1024*rxplayer)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","left","middle");

                            var crect=(new Rect((1024*rxplayer)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)-10),T.width("0c2k")*0.91,20)).small();
                            if (crect.isInside(GM.x,GM.y) && this.isEnabled("pve") && mdata.city.pvp.attacks > 0) {
                                // Show Timer or Fight Button
                                ctx.fillStyle="rgba(255,255,255,0.2)";
                                ctx.fillRect((1024*rxplayer)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)-15),T.width("0c2k")*0.91,30);
                                var canAttack = undefined;
                                for (var j = 0; j < mdata.city.pvp.lasts.length; ++j) {
                                    if (ranquing.player[i].DisplayName == mdata.city.pvp.lasts[j].name && ((Date.now()-mdata.city.pvp.lasts[j].time)<15*60*1000)) canAttack = j;
                                }
                                if (oponent===undefined && canAttack === undefined) {
                                    text(ctx,"FIGHT",(1024*rxplayer)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(124,53,53)","right","middle");
                                    this.addZone("fight_"+i,crect,"fight",{target:ranquing.player[i].PlayFabId});
                                } else if (oponent!==undefined) {
                                    this.spinner(ctx,(1024*rxplayer)+T.width("0c2k")/2.2-20,(640*(rystart+i*rydistance)),20);
                                } else {
                                    text(ctx,stimer((mdata.city.pvp.lasts[canAttack].time+15*60*1000-Date.now())/1000),(1024*rxplayer)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","right","middle");
                                }
                            } else {
                                text(ctx,ranquing.player[i].StatValue,(1024*rxplayer)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","right","middle");
                            }

                        }
                        if (rTopSeason !== undefined) {
                            for (var j = 0; j < rTopSeason.length; ++j) {
                                if (ranquing.player[i].DisplayName == rTopSeason[j].name) {
                                    var best = 0;
                                    if (rTopSeason[j].top[0] == 0) {
                                        var diamond = 0;
                                        for (var k = 0; k < rTopSeason[j].top.length; ++k) if (rTopSeason[j].top[k] == 0) ++diamond;
                                        if (diamond >= 3) best = 4;
                                    } else {
                                        if (rTopSeason[j].top[0] < 3) best = rTopSeason[j].top[0];
                                        else best = 3;
                                    }
                                    T.draw(ctx,trophies[best],(1024*rxplayer)-T.width("0c2k")/2.2+50-T.width(trophies[best])*0.5,(640*(rystart+i*rydistance))-T.height(trophies[best])*0.5);
                                }
                            }
                        }
                    }
                } catch (e) {
                    console.log(e);
                    ranquing.player=undefined;
                }
            }
            else {
                this.spinner(ctx,1024*rxplayer,640*0.5,40);
            }
        } else {
            if (CQW!==undefined && CQWS!==undefined) {
                if (CQWS[showRanking-1].ranking!==undefined) {
                    var begin=Math.min(CQWS[showRanking-1].ranking.length,rankingPage*10);
                    var end=Math.min(CQWS[showRanking-1].ranking.length,(rankingPage+1)*10);
                    for (var i=0;i<Math.min(end-begin);++i) {
                        if (pfdata.PlayFabId == CQWS[showRanking-1].ranking[begin+i].PlayFabId){
                            text(ctx,i+10*rankingPage+1,(1024*rxtop)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                            text(ctx,CQWS[showRanking-1].ranking[begin+i][0],numSpace+(1024*rxtop)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                            text(ctx,bint(CQWS[showRanking-1].ranking[begin+i][1],data.bintmode),(1024*rxtop)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","right","middle");
                        }
                        else {
                            text(ctx,i+10*rankingPage+1,(1024*rxtop)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","left","middle");
                            text(ctx,CQWS[showRanking-1].ranking[begin+i][0],numSpace+(1024*rxtop)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","left","middle");
                            text(ctx,bint(CQWS[showRanking-1].ranking[begin+i][1],data.bintmode),(1024*rxtop)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","right","middle");
                        }
                        if (rTopSeason !== undefined) {
                            for (var j = 0; j < rTopSeason.length; ++j) {
                                if (CQWS[showRanking-1].ranking[begin+i][0] == rTopSeason[j].name) {
                                    var best = 0;
                                    rtoppos = j;
                                    if (rTopSeason[j].top[0] == 0) {
                                        var diamond = 0;
                                        for (var k = 0; k < rTopSeason[j].top.length; ++k) if (rTopSeason[j].top[k] == 0) ++diamond;
                                        if (diamond >= 3) best = 4;
                                    } else {
                                        if (rTopSeason[j].top[0] < 3) best = rTopSeason[j].top[0];
                                        else best = 3;
                                    }
                                    T.draw(ctx,trophies[best],(1024*rxtop)-T.width("0c2k")/2.2+50-T.width(trophies[best])*0.5,(640*(rystart+i*rydistance))-T.height(trophies[best])*0.5);
                                }
                            }
                        } 
                    }
                    
                    var ew=T.width("0f9n");
                    var eh=T.height("0f9n");
                    if (begin!=0) {
                        var x=1024*0.02+T.width("0c2k")/2;
                        var y=640*0.2+eh/2;
                        ctx.save();
                        ctx.translate(x,y);
                        ctx.scale(1,-1);
                        T.draw(ctx,"0f9n",-ew/2,-eh/2 - 125);
                        ctx.restore();
                        this.addZone("rank_p",(new Rect(x-ew/2,125+y-eh/2,ew,eh)).small(),"rankP",{target: rankingPage-1});
                    }
                    if ((rankingPage+1)*10<CQWS[showRanking-1].ranking.length) {
                        var x=1024*0.02+T.width("0c2k")/2-ew/2;
                        var y=640*0.165+T.height("0c2k")-eh;
                        T.draw(ctx,"0f9n",x,y-10);
                        this.addZone("rank_m",(new Rect(x,y-10,ew,eh)).small(),"rankP",{target: rankingPage+1});
                    }
                } else {
                    this.spinner(ctx,1024*rxtop,640*0.5,40);
                }

                if (CQWS[showRanking-1].tournament!==undefined) {
                    var begin=Math.min(CQWS[showRanking-1].tournament.length,rankingPageT*10);
                    var end=Math.min(CQWS[showRanking-1].tournament.length,(rankingPageT+1)*10);
                    for (var i=0;i<Math.min(end-begin);++i) {
                        if (pfdata.PlayFabId == CQWS[showRanking-1].tournament[begin+i].PlayFabId){
                            text(ctx,i+10*rankingPageT+1,(1024*rxplayer)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                            text(ctx,CQWS[showRanking-1].tournament[begin+i][0],numSpace+(1024*rxplayer)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","left","middle");
                            text(ctx,bint(CQWS[showRanking-1].tournament[begin+i][1],data.bintmode),(1024*rxplayer)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"rgb(3,80,150)","right","middle");
                        }
                        else {
                            text(ctx,i+10*rankingPageT+1,(1024*rxplayer)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","left","middle");
                            text(ctx,CQWS[showRanking-1].tournament[begin+i][0],numSpace+(1024*rxplayer)-T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","left","middle");
                            text(ctx,bint(CQWS[showRanking-1].tournament[begin+i][1],data.bintmode),(1024*rxplayer)+T.width("0c2k")/2.2,(640*(rystart+i*rydistance)),fSize+FONT,"black","right","middle");
                        }
                    }
                    var ew=T.width("0f9n");
                    var eh=T.height("0f9n");
                    if (begin!=0) {
                        var x=1024*0.66+T.width("0c2k")/2;
                        var y=640*0.2+eh/2;
                        ctx.save();
                        ctx.translate(x,y);
                        ctx.scale(1,-1);
                        T.draw(ctx,"0f9n",-ew/2,-eh/2 - 125);
                        ctx.restore();
                        this.addZone("rank_pT",(new Rect(x-ew/2,125+y-eh/2,ew,eh)).small(),"rankPT",{target: rankingPageT-1});
                    }
                    if ((rankingPageT+1)*10<CQWS[showRanking-1].tournament.length) {
                        var x=1024*0.66+T.width("0c2k")/2-ew/2;
                        var y=640*0.165+T.height("0c2k")-eh;
                        T.draw(ctx,"0f9n",x,y-10);
                        this.addZone("rank_mT",(new Rect(x,y-10,ew,eh)).small(),"rankPT",{target: rankingPageT+1});
                    }
                } else {
                    this.spinner(ctx,1024*rxplayer,640*0.5,40);
                }

            }
        }

        // Season Pass Button
        var sprect=(new Rect(W*0.07,H*0.165,T.width("1f3r")*0.9,T.height("1f3r"))).small();
        if (sprect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"u7c5",W*0.07,H*0.165,T.width("1f3r")*0.9,T.height("1f3r"));
            this.addZone("tgsp",sprect,"tgsp",{target:true});
        }
        else T.draw(ctx,"1f3r",W*0.07,H*0.165,T.width("1f3r")*0.9,T.height("1f3r"));

        // Seasons Button
        var srect=(new Rect(W*0.22,H*0.176,T.width("0di2")*0.45,T.height("0di2")*0.78)).small();
        if (showingSeasons) srect=(new Rect(W*0.22,H*0.176,T.width("0di2")*0.45+5+6*(T.width("0di2")*0.15+5),(T.height("0di2")*0.78)*Math.ceil(numberOfSeasons/6))).small();
        if (srect.isInside(GM.x,GM.y)) {
            showingSeasons = true;
            roundedRect(ctx,W*0.22-3,H*0.176-2,T.width("0di2")*0.45+5+6*(T.width("0di2")*0.15+5)-15,(T.height("0di2")*0.78)*Math.ceil(numberOfSeasons/6)+4,5,"rgba(0,0,0,0.6)");
            T.draw(ctx,"04oc",W*0.22,H*0.176,T.width("0di2")*0.45,T.height("0di2")*0.78);
            this.addZone("current",srect,"season",{target: 0});
            text(ctx,"Current",W*0.22+T.width("0di2")*0.45*0.5,H*0.176+T.height("0di2")*0.78*0.5,"38px"+FONT,"rgba(255,250,210,1)","center","middle");
        }
        else {
            showingSeasons = false;
            T.draw(ctx,"0di2",W*0.22,H*0.176,T.width("0di2")*0.45,T.height("0di2")*0.78);
            text(ctx,"Seasons",W*0.22+T.width("0di2")*0.45*0.5,H*0.176+T.height("0di2")*0.78*0.5,"38px"+FONT,"rgba(255,250,210,1)","center","middle");
        }

        if (showingSeasons) {
            for (var j = 0; j < (Math.ceil(numberOfSeasons/6)); ++j) {
                for (var i = 0; i < 6; ++i) {
                    if (i+(j*6) < numberOfSeasons){
                        var nsrect=(new Rect(W*0.22+T.width("0di2")*0.45+5+(i*T.width("0di2")*0.15+5),H*0.176+j*H*0.08,T.width("0di2")*0.15,T.height("0di2")*0.78)).small();
                        if (nsrect.isInside(GM.x,GM.y)){
                            T.draw(ctx,"0kkv",W*0.22+T.width("0di2")*0.45+5+(i*T.width("0di2")*0.15+5),H*0.176+j*H*0.08,T.width("0di2")*0.15,T.height("0di2")*0.78);
                            this.addZone("season_"+i,nsrect,"season",{target: i+1+(j*6)});
                        } else T.draw(ctx,"0k0o",W*0.22+T.width("0di2")*0.45+5+(i*T.width("0di2")*0.15+5),H*0.176+j*H*0.08,T.width("0di2")*0.15,T.height("0di2")*0.78);
                        text(ctx,i+1+(j*6),W*0.22+T.width("0di2")*0.45+5+(i*T.width("0di2")*0.15+5)+T.width("0di2")*0.15*0.5,H*0.176+T.height("0di2")*0.78*0.5+j*H*0.08,"38px"+FONT,"rgba(255,250,210,1)","center","middle");
                    }
                }
            }
            
        }

        // PVP Energy System
        var PVPT = Math.max(0,(mdata.city.pvp.next+60*60*1000-Date.now())/1000);
        ctx.fillStyle="rgba(0,0,0,1)";
        ctx.fillRect(W*0.668,H*0.13,W*0.31,H*0.05);
        ctx.fillStyle="rgba(0,0,0,0.6)";
        ctx.fillRect(W*0.668,H*0.13,W*0.31,H*0.13);
        T.draw(ctx,"04oc",W*0.66,H*0.113,W*0.325,H*0.153);
        text(ctx,"Next Attack in: "+timer(PVPT),W*0.685,H*0.15,"40px"+FONT,"rgba(255,250,210,1)","left","top");
        for (var i =  0; i < 8; ++i) {
            ctx.save();
            ctx.beginPath();
            ctx.rect(W*0.70+(i*W*0.0318),H*0.175+7,T.width("0kda")*0.9-11,T.height("0kda")*0.65-13);
            ctx.closePath();
            ctx.clip();
            if (i < mdata.city.pvp.attacks) T.draw(ctx,"0kda",W*0.70+(i*W*0.0318),H*0.175,T.width("0kda")*0.9,T.height("0kda")*0.65);
            else T.negative(ctx,"0kda",W*0.70+(i*W*0.0318),H*0.175,T.width("0kda")*0.9,T.height("0kda")*0.65);
            ctx.restore();
        }

        var trect=(new Rect(W*0.027,H*0.176,T.width("0nww"),T.height("0nww"))).small();
        if (trect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0nww",W*0.027,H*0.176);

            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(W, 0);
            ctx.lineTo(W, H);
            ctx.lineTo(0, H);
            ctx.lineTo(0, 0);
            ctx.closePath();

            // Current Season
            ctx.moveTo(W*0.222, H*0.185);
            ctx.lineTo(W*0.222, H*0.253);
            ctx.lineTo(W*0.336, H*0.253);
            ctx.lineTo(W*0.336, H*0.185);
            ctx.lineTo(W*0.222, H*0.185);
            ctx.closePath();

            // Season Pass
            ctx.moveTo(W*0.08, H*0.185);
            ctx.lineTo(W*0.08, H*0.253);
            ctx.lineTo(W*0.215, H*0.253);
            ctx.lineTo(W*0.215, H*0.185);
            ctx.lineTo(W*0.08, H*0.185);
            ctx.closePath();

            // Neighbour
            ctx.moveTo(W*0.67, H*0.43);
            ctx.lineTo(W*0.67, H*0.465);
            ctx.lineTo(W*0.975, H*0.465);
            ctx.lineTo(W*0.975, H*0.43);
            ctx.lineTo(W*0.67, H*0.43);
            ctx.closePath();

            ctx.fillStyle="rgba(0,0,0,0.6)";
            ctx.fill();

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.22-1,H*0.185-32-5-1,W*0.13+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.22,H*0.185-32-5,W*0.13,H*0.05);
            text(ctx,"Seasons Data",W*0.22+3,H*0.18-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.08-1,H*0.185-32-5-1,W*0.13+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.08,H*0.185-32-5,W*0.13,H*0.05);
            text(ctx,"Season Pass",W*0.08+3,H*0.185-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.67-1,H*0.43-32-5-1,W*0.28+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.67,H*0.43-32-5,W*0.28,H*0.05);
            text(ctx,"Click any neighbour to fight against him",W*0.67+3,H*0.43-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.05-1,H*0.65-32-5-1,W*0.28+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.05,H*0.65-32-5,W*0.28,H*0.05);
            text(ctx,"TOP100 PVP players",W*0.05+3,H*0.65-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.36-1,H*0.65-32-5-1,W*0.28+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.36,H*0.65-32-5,W*0.28,H*0.05);
            text(ctx,"Best fights replays",W*0.36+3,H*0.65-16-5,"32px"+FONT,"white","left","middle");

            ctx.fillStyle="rgba(255,255,255,0.95)";
            ctx.fillRect(W*0.68-1,H*0.65-32-5-1,W*0.28+2,H*0.05+2);
            ctx.fillStyle="rgba(36,36,36,0.95)";
            ctx.fillRect(W*0.68,H*0.65-32-5,W*0.28,H*0.05);
            text(ctx,"Your current position in actual ranking",W*0.68+3,H*0.65-16-5,"32px"+FONT,"white","left","middle");

            /*ctx.fillStyle="rgba(36,36,36,0.9)";
            ctx.fillRect(W*0.5-W*0.4,H*0.5-H*0.4,W*0.8,H*0.8);
            
            var xleft=W*0.5-W*0.4+50;
            text(ctx,"RANKING",W*0.5,H*0.18,"90px"+FONT,"white","center","middle");

            text(ctx,"Here you can see the TOP100, Your Ranking and the Hall of Fame.",xleft,H*0.3,"46px"+FONT,"white","left","middle");
            text(ctx,"On the Hall of Fame, you can visualize the most epic battles",xleft,H*0.3+60,"46px"+FONT,"white","left","middle");
            text(ctx,"of Cosmos Quest. You can navigate between Daily HoF and All time.",xleft,H*0.3+90,"46px"+FONT,"white","left","middle");
            text(ctx,"On your Ranking zone, if you click over a neighbour name, you will ",xleft,H*0.3+150,"46px"+FONT,"white","left","middle");
            text(ctx,"be able to fight against him (Hourly Battle). This battle, is available",xleft,H*0.3+180,"46px"+FONT,"white","left","middle");
            text(ctx,"every one hour.",xleft,H*0.3+210,"46px"+FONT,"white","left","middle");*/
        } else {
            ctx.save();
            ctx.globalAlpha=0.8;
            T.draw(ctx,"0nww",W*0.027,H*0.176);
            ctx.restore();
        }  
    }

    this.drawWorldBoss = function (ctx) {
        if (CQW.WB===undefined||mdata===undefined) return;
        if (ranquing==undefined || Date.now()-ranquing.time>5*60*1000) this.updateRanking();

        // Last World Bosses results
        var btx=1024*0.775;
        var bty=640*0.175;
        var ltrect = (new Rect(btx,bty,T.width("0di2")*0.8,T.height("0di2")*1.2)).small();
        if (ltrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"04oc",btx,bty,T.width("04oc")*0.8,T.height("04oc")*1.2);
            this.addZone("lwb",ltrect,"lwb");
        }
        else T.draw(ctx,"0di2",btx,bty,T.width("0di2")*0.8,T.height("0di2")*1.2);
        
        if (wbosspage=="fight") T.draw(ctx,"00xm",btx+20,bty+13);
        else T.draw(ctx,"022s",btx+20,bty+13);

        var btx=1024*0.66;
        var bty=640*0.185;
        var bw=T.width("0cq8");
        var bh=T.height("0cq8");
        var modes = ["No Heroes","Heroes Allowed"];
        var damageDone = CQW.WB.dealt;
        var damageTotal = CQW.WB.dmg;
        var wbLvl = CQW.WB.lvl;
        var modifier = parseFloat(CQW.WB.modifier) || 1;
        var rewardBase = Math.log(CQW.WB.dmg/modifier)*modifier;
        var reward = rewardBase*750;
        if (modes[CQW.WB.mode]=="No Heroes") {
            reward = rewardBase*1700;
        } else {
            if (CQW.WB.id==72) reward = rewardBase*950;
            else if (CQW.WB.id==87) reward = rewardBase*900;
            else if (CQW.WB.id==106) reward = rewardBase*750;
            else if (CQW.WB.id==126) reward = rewardBase*1700;
            else if (CQW.WB.id==186) reward = rewardBase*1700;
        }
        reward = Math.max(reward,0);
        if (CQW.WB.name.indexOf("SUPER")!==-1) reward*=2;
        if (modes[CQW.WB.mode]=="No Heroes" && typeTab==4) typeTab=0;

        var ELEM = ["Air","Earth","Fire","Water","Void"];

        if (wbosspage=="fight") {
            var bgx=W*0.217;
            var bgy=H*0.15;
            T.draw(ctx,"08yf",bgx,bgy);
            if (CQW.WB.id==87) { //moak
            	if (CQW.WB.name=="SUPER MOTHER OF ALL KODAMAS") {
            		text(ctx,"SUPER",bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.15-22,"38px"+FONT,"rgb(151,246,255)","center","middle");
            		text(ctx,"MOTHER OF ALL KODAMAS",bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.15,"38px"+FONT,"rgb(151,246,255)","center","middle");
            	} else text(ctx,CQW.WB.name,bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.15,"38px"+FONT,"rgb(151,246,255)","center","middle");
            } else text(ctx,CQW.WB.name,bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.15,"50px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,"PRIZE POOL: "+Math.round(reward).toLocaleString()+" AS",bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.25,"40px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,"Damage Done:",bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.35-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,bint(damageDone,data.bintmode)+" ["+(damageDone/damageTotal*100).toFixed(2)+"%]",bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.40-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,"Attacks left: "+CQW.WB.atk,bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.45-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            
            text(ctx,"Total damage:",bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.52-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,bint(CQW.WB.dmg,data.bintmode),bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.57-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,"LVL: "+wbLvl,bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.65-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,"MODE: "+modes[CQW.WB.mode],bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.70-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,"ELEMENT: "+ELEM[HERO[CQW.WB.id].type],bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.75-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            text(ctx,"ATTACK: "+(HERO[CQW.WB.id].atk+WBatk(CQW.WB.lvl)),bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.80-15,"40px"+FONT,"rgb(151,246,255)","center","middle");
            mltext(ctx,"SKILL: "+this.skill2text(HERO[CQW.WB.id].skill,wbLvl,true).short,bgx+T.width("08yf")*0.26,bgy+T.height("08yf")*0.84-15,"24px"+FONT,"rgb(151,246,255)","center","middle");

            roundedRect(ctx,bgx+T.width("08yf")*0.48,bgy+T.height("08yf")*0.10,T.width("08yf")*0.445,T.height("08yf")*0.755,10,null,HERO[CQW.WB.id].img,T.width(HERO[CQW.WB.id].img)*0.75,T.height(HERO[CQW.WB.id].img)*0.75,true);

            var numberOfAttacks = mdata.city.WB.atks;
            var atkRect = (new Rect(W*0.775,bgy+T.height("08yf")*0.5-T.height("0omo")*0.5,T.width("0omo"),T.height("0omo"))).small();
            if (atkRect.isInside(GM.x,GM.y) && !fightWBsync && numberOfAttacks>0) {
                T.draw(ctx,"0omo",W*0.775,bgy+T.height("08yf")*0.5-T.height("0omo")*0.5);
                this.addZone("wbfight",atkRect,"wbfight");
            } else T.draw(ctx,"01p2",W*0.775,bgy+T.height("08yf")*0.5-T.height("01p2")*0.5);

            var WBT = Math.max(0,(mdata.city.WB.next-Date.now())/1000);
            if (numberOfAttacks==7) WBT=0;
            var popupbg = "04ey";
            var popupbgw = T.width(popupbg);
            var popupbgh = T.height(popupbg);
            T.draw(ctx,popupbg,W*0.775,bgy+T.height("08yf")*0.5-T.height("0omo")*0.5+110,popupbgw*0.57,popupbgh*0.65);
            text(ctx,"Obtain a new attack in:",W*0.775+popupbgw/2*0.57,bgy+T.height("08yf")*0.5-T.height("0omo")*0.5+110+20,"36px"+FONT,"white","center","middle");
            text(ctx,timer(WBT),W*0.775+popupbgw/2*0.57,bgy+T.height("08yf")*0.5-T.height("0omo")*0.5+110+45,"50px"+FONT,"white","center","middle");

            
            T.draw(ctx,popupbg,W*0.775,bgy+T.height("08yf")*0.5-T.height("0omo")*0.5+180,popupbgw*0.57,popupbgh*0.20);
            for (var i=0;i<7;++i) {
                if (i<numberOfAttacks) T.draw(ctx,"06ur",W*0.78+(i*W*0.0272),bgy+T.height("08yf")*0.5-T.height("0omo")*0.5+173);
                else T.negative(ctx,"06ur",W*0.78+(i*W*0.0272),bgy+T.height("08yf")*0.5-T.height("0omo")*0.5+173);
            }

            text(ctx,"World Boss Line Slot",W*0.775+popupbgw/2*0.57,bgy+T.height("08yf")*0.5-T.height("0omo")*0.5+245-W*0.02,"40px"+FONT,"black","center","middle");
            for (var i=0;i<10;++i) {
            	if (i==9) {
                    if (data.wbline==i) roundedRect(ctx,W*0.801-25+(i%5)*W*0.043-2,H*0.87-2+Math.floor(i/5)*W*0.043-W*0.022,W*0.035+4,W*0.035+4,10,"rgba(255,255,255,0.8)");
                    roundedRect(ctx,W*0.801-25+(i%5)*W*0.043,H*0.87+Math.floor(i/5)*W*0.043-W*0.022,W*0.035,W*0.035,10,"rgba(25,52,58,1)");
                    T.draw(ctx,"bn4f",W*0.801-25+(i%5)*W*0.043+W*0.035*0.5-T.width("bn4f")*0.75*0.5,H*0.87+W*0.035*0.5-T.height("bn4f")*0.75*0.5+Math.floor(i/5)*W*0.043-W*0.022,T.width("bn4f")*0.75,T.height("bn4f")*0.75);
                } else {
                    if (data.wbline==i) roundedRect(ctx,W*0.801-25+(i%5)*W*0.043-2,H*0.87-2+Math.floor(i/5)*W*0.043-W*0.022,W*0.035+4,W*0.035+4,10,"rgba(255,255,255,0.8)");
                    roundedRect(ctx,W*0.801-25+(i%5)*W*0.043,H*0.87+Math.floor(i/5)*W*0.043-W*0.022,W*0.035,W*0.035,10,"rgba(25,52,58,1)");
                    text(ctx,i+1,W*0.801-25+(i%5)*W*0.043+W*0.035*0.5,H*0.87+W*0.035*0.5+Math.floor(i/5)*W*0.043-W*0.022,"34px"+FONT,"white","center","middle");
                    var lineRect=(new Rect(W*0.801-25+(i%5)*W*0.043,H*0.87+Math.floor(i/5)*W*0.043-W*0.022,W*0.035,W*0.035)).small();
                    if (lineRect.isInside(GM.x,GM.y) && data.wbline!==i) {
                        roundedRect(ctx,W*0.801-25+(i%5)*W*0.043,H*0.87+Math.floor(i/5)*W*0.043-W*0.022,W*0.035,W*0.035,10,"rgba(255,255,255,0.6)");
                        this.addZone("wbline_"+i,lineRect,"wbline",{target: i});
                    }
                }
            }

            if (data.wbline!==-1 && mdata.city !== undefined && mdata.city.easter !== undefined && mdata.city.easter.wbsolver !== 0) {
                var sx = W*0.81;
                var sy = H*0.31;
                var sw = T.width("091m")*0.6;
                var sh = T.height("091m")*0.6;
                var srect=(new Rect(sx,sy,sw,sh)).small();
                if (srect.isInside(GM.x,GM.y)) {
                    this.addZone("solver",srect,"solver",{
                        setup: [-1,-1,-1,-1,-(2+parseInt(CQW.WB.id)),-1],
                        shero: Array(HERO.length).fill(1),  
                        spromo: Array(HERO.length).fill(0), 
                        grid: data.wb[data.wbline],
                        mode: "wb",
                        allowhero: CQW.WB.mode,
                    });
                    T.draw(ctx,"0eni",sx,sy,sw,sh);
                } else {
                    T.draw(ctx,"091m",sx,sy,sw,sh);
                }
                text(ctx,"Solve!!",sx+sw/2,sy+sh/2,"50px"+FONT,"white","center","middle");
                T.draw(ctx,"0m9x",sx,sy,sw,sh);
            }

            if (this.isStGeorge() && mdata.city !== undefined && mdata.city.WB !== undefined) {
                var xb = W*0.785;
                var yb = H*0.385;
                roundedRect(ctx,xb,yb,W*0.185,H*0.065,5,"rgb(219,112,147)");
                roundedRect(ctx,xb+4,yb+4,W*0.185-8,H*0.065-8,5,"white");
                roundedRect(ctx,xb+6,yb+6,W*0.185-12,H*0.065-12,5,"rgb(219,112,147)");
                if (mdata.city.WB.atks < 7) {
                    text(ctx,"Buy WB attack for 500",xb+W*0.185*0.5-10,yb+H*0.065*0.5,"28px"+FONT,"white","center","middle");
                    T.draw(ctx,"0dvo",xb+W*0.185*0.5+55,yb+H*0.065*0.5-15,T.width("0dvo")*0.3,T.height("0dvo")*0.3)
                    var bwrect=(new Rect(xb,yb,W*0.185,H*0.065)).small();
                    if (bwrect.isInside(GM.x,GM.y) && !bwsync) {
                        roundedRect(ctx,xb,yb,W*0.185,H*0.065,5,"rgb(255,255,255,0.3)");
                        this.addZone("bwbuy",bwrect,"bwbuy")
                    }
                } else {
                    text(ctx,"Can't buy more attacks",xb+W*0.185*0.5,yb+H*0.065*0.5,"28px"+FONT,"white","center","middle");
                }
                
            }

            this.drawMonsterTabs(ctx,"wb",CQW.WB.mode);
            if (cityClick!=undefined) {
                if (swapping) {
                    var mon = data.wb[data.wbline][cityClick.initPos];
                    if (mon < -1) {
                        var id=cityClick.id;
                        var img=HERO[(cityClick.id*-1)-2].img;
                    }
                    else {
                        var id = cityClick.id;
                        var img=MONSTERS[cityClick.id].img;
                    }
                    var lvl=1;
                    if (id<-1) lvl=mdata.city.hero[-(id+2)];
                    this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,mdata.city.promo[-(id+2)]);
                }
                else {
                    if (typeTab!=4 && !searchTab) {
                        var id = cityClick.id;
                        var img=MONSTERS[cityClick.id].img;
                    }
                    else{
                        var id=cityClick.id;
                        var img=HERO[(cityClick.id*-1)-2].img;
                    }
                    var lvl=1;
                    if (id<-1) lvl=mdata.city.hero[-(id+2)];
                    this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,mdata.city.promo[-(id+2)]);
                }
            }
        } else if (wbosspage=="results") {
            // Days
            var dayx = W*0.04;
            var ddist = (T.height("0cz1")*0.65)*1.1;
            if (mdata.city.WB.log==undefined) {
                this.spinner(ctx,W*0.14,H*0.5,40);
            } else {
                for (var i=0;i<mdata.city.WB.log.length;++i) {
                    var dayrect = (new Rect(dayx,H*0.25+ddist*i,T.width("0cz1")*0.6,T.height("0cz1")*0.65)).small();
                    T.draw(ctx,"0cz1",dayx,H*0.25+ddist*i,T.width("0cz1")*0.6,T.height("0cz1")*0.65);

                    var date = new Date(mdata.city.WB.log[i].killed*(1000));
                    var dd = date.getDate();
                    var mm = date.getMonth()+1;
                    var yyyy = date.getFullYear();

                    text(ctx,dd+"/"+mm+"/"+yyyy,dayx+(T.width("0cz1")*0.6)*0.5,H*0.25+ddist*i+(T.height("0cz1")*0.65)*0.5,"60px"+FONT,"white","center","middle");
                    if (dayrect.isInside(GM.x,GM.y)){
                        this.addZone("sdays_"+i,dayrect,"sboss",{target: i});
                        ctx.fillStyle="rgba(255,255,255,0.2)";
                        ctx.fillRect(dayx,H*0.25+ddist*i,T.width("0cz1")*0.6,T.height("0cz1")*0.65);
                    }             
                }
            }

            // Top 10
            T.draw(ctx,"0cq8",btx,bty+80);
            text(ctx,"TOP 10",btx+bw/2,bty+120,"50px"+FONT,"black","center","middle");
            if (mdata.city.WB==undefined) this.spinner(ctx,btx+bw/2,bty+420,20);
            else if (mdata.city.WB.log.length>0) {
                for (var j=0;j<10;++j) {
                    text(ctx,(j+1),btx+36,bty+150+35*j,"36px"+FONT,"black","left","middle");
                    text(ctx,mdata.city.WB.log[showBoss].top10[j][0],btx+66,bty+150+35*j,"36px"+FONT,"black","left","middle");
                    text(ctx,bint(mdata.city.WB.log[showBoss].top10[j][1],data.bintmode),btx+295,bty+150+35*j,"36px"+FONT,"black","right","middle");
                }
            }

            // Player Results
            var xpos = W*0.44;
            
            T.draw(ctx,"0el1",xpos-T.width("0el1")/2,H*0.3);
            if (mdata.city.WB.log!==undefined&&mdata.city.WB.log.length>0) {
                var talive = mdata.city.WB.log[showBoss].killed-mdata.city.WB.log[showBoss].spawn;
                var top = mdata.city.WB.log[showBoss].top;
                var rwd = mdata.city.WB.log[showBoss].AS;
                var date = new Date(mdata.city.WB.log[showBoss].killed*(1000));
                var dd = date.getDate();
                var mm = date.getMonth()+1;
                var yyyy = date.getFullYear();

                if (mdata.city.WB.log[showBoss].name=="MOTHER OF ALL KODAMAS") text(ctx,mdata.city.WB.log[showBoss].name,xpos,H*0.45,"36px"+FONT,"black","center","middle");
                else if (mdata.city.WB.log[showBoss].name=="SUPER MOTHER OF ALL KODAMAS") {
                    text(ctx,"SUPER",xpos,H*0.435,"36px"+FONT,"black","center","middle");
                    text(ctx,"MOTHER OF ALL KODAMAS",xpos,H*0.465,"36px"+FONT,"black","center","middle");
                } else text(ctx,mdata.city.WB.log[showBoss].name,xpos,H*0.45,"46px"+FONT,"black","center","middle");
                text(ctx,"Level: "+mdata.city.WB.log[showBoss].level,xpos,H*0.50,"36px"+FONT,"black","center","middle");
                text(ctx,"Mode: "+modes[mdata.city.WB.log[showBoss].mode],xpos,H*0.54,"36px"+FONT,"black","center","middle");
                text(ctx,"Damage Done: "+bint(mdata.city.WB.log[showBoss].dealt,data.bintmode),xpos,H*0.58,"36px"+FONT,"black","center","middle");
                text(ctx,"Date: "+dd+"/"+mm+"/"+yyyy,xpos,H*0.62,"36px"+FONT,"black","center","middle");
                text(ctx,"Time Alive: "+timer(talive),xpos,H*0.66,"36px"+FONT,"black","center","middle");
                text(ctx,"Top: "+top,xpos,H*0.70,"36px"+FONT,"black","center","middle");
                text(ctx,"Reward: "+rwd,xpos,H*0.74,"36px"+FONT,"black","center","middle");
                T.draw(ctx,"08y7",xpos+T.width("0el1")*0.12,H*0.718,T.width("08y7")*0.55,T.height("08y7")*0.55);
            } 
        }
    }

    this.drawDailyEvent = function (ctx) {
		var demode = this.isDailyEvent().mode;
        if (demode!==undefined) {
            if (demode=="flash") {
                if (CQW!==undefined && CQW.flash!==undefined) {
                    flashOpen=true;
                    this.drawFlash(ctx);
                } else showDaily=false;
            }
            else if (demode=="cc") {
                eventCCopen=true;
                this.drawEventCC(ctx);
            }
            else if (demode=="adventure") {
                adventureOpen=true;
                this.drawAdventure(ctx);
            }
            else if (demode=="pge") {
                var attempts = 10;
                var pg = 0;
                if (mdata.city !== undefined && mdata.city.pge !== undefined && mdata.city.pge.attempts !== undefined && mdata.city.pge.pg !== undefined) {
                    attempts = mdata.city.pge.attempts;
                    pg = mdata.city.pge.pg;
                }
                var bgw=W*0.92;
                var bgh=H*0.92;

                ctx.fillStyle = "rgba(0,0,0,0.4)";
                ctx.fillRect(0,0,W,H);

                ctx.save();
                ctx.beginPath();
                ctx.rect(W*0.5-bgw*0.97*0.5+5,H*0.5-bgh*0.97*0.5+2,bgw*0.97,bgh*0.97);
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,"08g3",W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);
                ctx.restore();

                ctx.fillStyle = "rgba(7,125,255,0.2)";
                ctx.fillRect(W*0.5-bgw*0.97*0.5+5,H*0.5-bgh*0.97*0.5+2,bgw*0.97,bgh*0.97);

                var cardSize = W*0.095;
                var x = W*0.133;
                var y = H*0.34;

                text(ctx,"Match Pairs Game",W*0.5,H*0.12,"80px"+FONT,"white","center","middle");

                T.draw(ctx,"0klu",W*0.085,H*0.16,W*0.2,H*0.1);
                text(ctx,"Attempts: "+attempts,W*0.085+13,H*0.16+23,"40px"+FONT,"white","left","middle");
                text(ctx,"PG: "+pg,W*0.085+13,H*0.16+43,"40px"+FONT,"white","left","middle");

                var cards = Array(32).fill(-1);
                var picked = Array(32).fill(false);
                var tid=Math.floor(Date.now()/(24*60*60*1000));
                if (mdata.city.pge !== undefined && mdata.city.pge.cards !== undefined && mdata.city.pge.picks !== undefined && mdata.city.pge.tid==tid) {
                    cards = mdata.city.pge.cards;
                    picked = mdata.city.pge.picks;
                }

                var c = 0;
                for (var i = 0; i < 4; ++i) {
                    for (var j = 0; j < 8; ++j) {
                        if (picked[c] == true) {
                            ctx.fillStyle = "rgba(255,215,0,1)";
                            ctx.fillRect(x-cardSize*0.93*0.5+(j*cardSize*1.115)-1,y-cardSize*0.93*0.5+(i*cardSize*1.115)-1,cardSize*0.93+2,cardSize*0.93+2);
                        }
                        if (cards[c] == -1) {
                            T.draw(ctx,"0gkd",x-cardSize*0.5+(j*cardSize*1.115),y-cardSize*0.5+(i*cardSize*1.115),cardSize,cardSize);
                            T.draw(ctx,"0j14",x+(j*cardSize*1.115)-T.width("0j14")*2*0.5+1,y+(i*cardSize*1.115)-T.height("0j14")*2*0.5,T.width("0j14")*2,T.height("0j14")*2); 
                        } else {
                            if (mdata.city !== undefined && mdata.city.pge !== undefined) {
                                if (mdata.city.pge.choice[0] == c || mdata.city.pge.choice[1] == c) {
                                    ctx.fillStyle = "rgba(255,255,255,0.75)";
                                    ctx.fillRect(x-cardSize*0.93*0.5+(j*cardSize*1.115)-1,y-cardSize*0.93*0.5+(i*cardSize*1.115)-1,cardSize*0.93+2,cardSize*0.93+2);
                                }
                            }
                            //T.draw(ctx,"0gkd",x-cardSize*0.5+(j*cardSize*1.115),y-cardSize*0.5+(i*cardSize*1.115),cardSize,cardSize);
                            T.draw(ctx,"0fj5",x-cardSize*0.92*0.5+(j*cardSize*1.115)-2,y-cardSize*0.92*0.5+(i*cardSize*1.115),cardSize*0.92,cardSize*0.92);
                            this.drawMonster(ctx,-2-cards[c],x+(j*cardSize*1.115),y+(i*cardSize*1.115)+cardSize*0.4,undefined,false,0.88,1);
                        }

                        var canPick = true;
                        if (mdata.city !== undefined && mdata.city.pge !== undefined && mdata.city.pge.choice !== undefined) {
                            if (mdata.city.pge.choice[0] == c) canPick = false;
                        }

                        if (picked[c] == false && canPick && !pgesync && Date.now() >= (readytopge+10000)) {
                            var crect = (new Rect(x-cardSize*0.5+(j*cardSize*1.115),y-cardSize*0.5+(i*cardSize*1.115),cardSize,cardSize)).small();
                            if (crect.isInside(GM.x,GM.y)) {
                                ctx.fillStyle = "rgba(255,255,255,0.1)";
                                ctx.fillRect(x-cardSize*0.93*0.5+(j*cardSize*1.115),y-cardSize*0.93*0.5+(i*cardSize*1.115),cardSize*0.93,cardSize*0.93);
                                this.addZone("pge",crect,"pge",{target:c});
                            }
                        } else if (Date.now() < (readytopge+10000)) {
                            text(ctx,timer(((readytopge+10000)-Date.now())/1000),x+(j*cardSize*1.115),y+(i*cardSize*1.115),"24px"+FONT,"white","center","middle");
                        }
                        ++c;
                    }
                }
                
                // Close
                var cw = T.width("0evr");
                var ch = T.height("0evr");
                var crect = (new Rect(W*0.5+bgw*0.97*0.5-cw*1.1-2,H*0.5-bgh*0.97*0.5+13,cw,ch)).small();
                if (crect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"0o6b",W*0.5+bgw*0.97*0.5-cw*1.1-2,H*0.5-bgh*0.97*0.5+13,cw,ch);
                    this.addZone("doDaily",crect,"doDaily",{target:false});
                }
                else T.draw(ctx,"0evr",W*0.97*0.5+bgw*0.5-cw*1.1-2,H*0.5-bgh*0.97*0.5+13,cw,ch);
            } 
            else if (CQW.keys!==undefined) {
                var tAttempts = 5;
                for (var i = 0; i < CQW.keys.length; ++i) {
                    if (CQW.keys[i] == 1) --tAttempts;
                }

                var bw=W*0.6;
                var bh=H*0.6;
                roundedRect(ctx,W*0.5-(bw*0.5)-2,H*0.5-(bh*0.5)-2,bw+4,bh+4,5,"rgb(14,158,241)");

                ctx.save();
                ctx.beginPath();
                ctx.rect(W*0.5-(bw*0.5),H*0.5-(bh*0.5),bw,bh);
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,"0k2u",W*0.5-(bw*0.5),H*0.5-(bh*0.5),W*0.929,bh);
                ctx.restore();

                text(ctx,"Keys Tower",W*0.5,H*0.25,"60px"+FONT,"white","center","middle");

                var bosses = ["0nfc","uf59","wdwa","pm0s"];
                var floor = 0;
                if (CQW.keys!==undefined) floor=CQW.keys.length;
                
                var stage = Math.floor(floor/4);

                var bgx=W*0.275;
                var bgy=H*0.135;

                if (stage >= bosses.length) roundedRect(ctx,bgx+T.width("08yf")*0.48-40,bgy+T.height("08yf")*0.10,T.width("08yf")*0.445+40,T.height("08yf")*0.755,10,null,bosses[0]);
                else roundedRect(ctx,bgx+T.width("08yf")*0.48-40,bgy+T.height("08yf")*0.10,T.width("08yf")*0.445+40,T.height("08yf")*0.755,10,null,bosses[stage]);

                roundedRect(ctx,W*0.22-1,H*0.305-1,W*0.12+2,H*0.45+2,5,"rgba(255,255,255,0.7)");
                roundedRect(ctx,W*0.22,H*0.305,W*0.12,H*0.45,5,"rgba(0,0,85,0.8)");

                for (var i=0; i<4; ++i) {
                    // Frame
                    ctx.fillStyle = "rgba(255,255,255,1)";
                    ctx.fillRect(W*0.23-1,H*0.648-(H*0.109*i)-1,W*0.10+2,H*0.091+2); 
                    // Current
                    if (floor == (i+(stage*4))) {
                        ctx.fillStyle = "rgb(255,105,180)";
                        ctx.fillRect(W*0.23,H*0.648-(H*0.109*i),W*0.10,H*0.091);
                    }
                    // Fill
                    if (CQW.keys !== undefined && ((i+(stage*4)) < CQW.keys.length)){
                        if (CQW.keys[(i+(stage*4))] === 0) {
                            ctx.fillStyle = "rgba(50,205,50,1)";
                            ctx.fillRect(W*0.23+2,H*0.648-(H*0.109*i)+2,W*0.10-4,H*0.091-4);
                        } else {
                            ctx.fillStyle = "rgba(205,92,92,1)";
                            ctx.fillRect(W*0.23+2,H*0.648-(H*0.109*i)+2,W*0.10-4,H*0.091-4);
                        }
                    } else {
                        ctx.fillStyle = "rgba(14,158,241,1)";
                        ctx.fillRect(W*0.23+2,H*0.648-(H*0.109*i)+2,W*0.10-4,H*0.091-4);
                    }
                    if (i == 3) {
                        T.draw(ctx,"2dmk",W*0.24,H*0.648-(H*0.109*i),T.width("2dmk")*0.7,T.height("2dmk")*0.7);
                    } else {
                        T.draw(ctx,"n0bh",W*0.24,H*0.648-(H*0.109*i),T.width("n0bh")*0.7,T.height("n0bh")*0.7);
                    }
                }
                if (tAttempts > 0) {
                    text(ctx,"Pick One",W*0.43,H*0.45,"60px"+FONT,"white","center","middle");
                    if (tLevelTimer+2000 <= Date.now() || CQW.keys===undefined) {
                        for (var i=0; i<2; ++i) {
                            var trect = (new Rect(W*0.36+i*W*0.08,H*0.48,T.width("06gt"),T.height("06gt"))).small();
                            if (trect.isInside(GM.x,GM.y) && !towerSync) {
                                ctx.save();
                                ctx.globalAlpha=0.8;
                                T.draw(ctx,"06gt",W*0.36+i*W*0.08,H*0.48);
                                ctx.restore();
                                this.addZone("doTower",trect,"doTower",{target:i});
                            } else T.draw(ctx,"06gt",W*0.36+i*W*0.08,H*0.48);
                        }   
                    } else {
                        // Show Old Data
                        ctx.save();
                        ctx.globalAlpha=0.8;
                        T.draw(ctx,"06gt",W*0.36,H*0.48);
                        T.draw(ctx,"06gt",W*0.36+W*0.08,H*0.48);
                        ctx.restore();
                        if (CQW.keys[floor-1] === 1 && lastTower === 1) T.negative(ctx,"n0bh",W*0.36,H*0.48+5,T.width("06gt"),T.height("06gt")*0.8);
                        else if (CQW.keys[floor-1] === 0 && lastTower === 0) T.draw(ctx,"n0bh",W*0.36,H*0.48+5,T.width("06gt"),T.height("06gt")*0.8);
                        else if (CQW.keys[floor-1] === 1 && lastTower === 0) T.negative(ctx,"n0bh",W*0.36+W*0.08,H*0.48+5,T.width("06gt"),T.height("06gt")*0.8);
                        else if (CQW.keys[floor-1] === 0 && lastTower === 1) T.draw(ctx,"n0bh",W*0.36+W*0.08,H*0.48+5,T.width("06gt"),T.height("06gt")*0.8);
                    }
                    text(ctx,"Lives: "+tAttempts,W*0.37,H*0.65,"40px"+FONT,"white","left","middle");
                    text(ctx,"Boss: "+(stage+1),W*0.37,H*0.65+22,"40px"+FONT,"white","left","middle");
                } else {
                    if (stage > bosses.length) T.draw(ctx,"0i33",W*0.318+W*0.26*0.5-T.width("0lkd")*0.5*0.3,H*0.45,T.width("0lkd")*0.3,T.height("0lkd")*0.3);
                    else T.draw(ctx,"0lkd",W*0.318+W*0.26*0.5-T.width("0lkd")*0.5*0.3,H*0.45,T.width("0lkd")*0.3,T.height("0lkd")*0.3);
                    text(ctx,"Keys: "+(floor-Math.floor(floor/4)),W*0.318+W*0.26*0.5,H*0.65,"40px"+FONT,"white","center","middle");
                    text(ctx,"HKeys: "+(Math.floor(floor/4)),W*0.318+W*0.26*0.5,H*0.65+22,"40px"+FONT,"white","center","middle");
                }

                // Close
                var cw = T.width("0evr");
                var ch = T.height("0evr");
                var crect = (new Rect(W*0.81-cw*1.2-10,H*0.195+10,cw,ch)).small();
                if (crect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"7otr",W*0.81-cw*1.2+2-10,H*0.195+2+10,cw-4,ch-4);
                    this.addZone("doDaily",crect,"doDaily",{target:false});
                }
                else T.draw(ctx,"7otr",W*0.81-cw*1.2-10,H*0.195+10,cw,ch);

            }
            else if (CQW.followers!==undefined) {
                var bw=W*0.7;
                var bh=H*0.7;
                roundedRect(ctx,W*0.5-(bw*0.5)-2,H*0.5-(bh*0.5)-2,bw+4,bh+4,5,"rgb(255,255,255)");

                ctx.save();
                ctx.beginPath();
                ctx.rect(W*0.5-(bw*0.5),H*0.5-(bh*0.5),bw,bh);
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,"0ko4",W*0.5-(bw*0.5),H*0.5-(bh*0.5),bw,bh);
                ctx.restore();

                // Close
                var cw = T.width("0evr");
                var ch = T.height("0evr");
                var crect = (new Rect(W*0.852-cw*1.2,H*0.16,cw,ch)).small();
                if (crect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"7otr",W*0.852-cw*1.2+2,H*0.16+2,cw-4,ch-4);
                    this.addZone("doDaily",crect,"doDaily",{target:false});
                }
                else T.draw(ctx,"7otr",W*0.852-cw*1.2,H*0.16,cw,ch);

                text(ctx,"Lucky Followers",W*0.5,H*0.25,"60px"+FONT,"white","center","middle");
                text(ctx,"You can open 3 cells every 15 minutes. Three of them have an amazing amount of followers!",W*0.5,H*0.75,"30px"+FONT,"black","center","middle");
                if (CQW.followers.completed!==undefined) text(ctx,"You used "+CQW.followers.completed+" out of 8 attempts.",W*0.5,H*0.79,"30px"+FONT,"black","center","middle");
                
                var cw=W*0.095*0.8;
                var ch=H*0.15*0.8;
                var cx=W*0.233;
                var cy=H*0.4;
                var dx=W*0.135*0.8;
                var dy=H*0.2*0.8;

                var unlocked = CQW.followers.open.length;

                var cell=0;
                for (var i=0; i<6; ++i) {
                    for (var j=0; j<2; ++j) {
                        ctx.fillStyle = "rgba(1,1,1,1)";
                        ctx.fillRect(cx+(i*dx)-cw*0.5,cy+(j*dy)-H*0.1*0.5,cw,ch);

                        ctx.fillStyle = "rgba(255,255,255,1)";
                        ctx.fillRect(cx+(i*dx)-cw*0.5+2,cy+(j*dy)-H*0.1*0.5+2,cw-4,ch-4);

                        if (unlocked<3) {
                            if (CQW.followers.current[cell]!==-1) {
                                text(ctx,CQW.followers.current[cell]*(Math.floor(this.getFmul()/2)+1),cx+(i*dx),cy+(j*dy)+2,"25px"+FONT,"black","center","middle");
                                text(ctx,"FOLLOWERS",cx+(i*dx),cy+(j*dy)+17,"25px"+FONT,"black","center","middle");
                                ctx.fillStyle = "rgba(0,255,0,0.2)";
                                ctx.fillRect(cx+(i*dx)-cw*0.5+2,cy+(j*dy)-H*0.1*0.5+2,cw-4,ch-4);

                            } else {
                                var srect = (new Rect(cx+(i*dx)-cw*0.5+2,cy+(j*dy)-H*0.1*0.5+2,cw-4,ch-4)).small();
                                if (srect.isInside(GM.x,GM.y)) {
                                    ctx.save();
                                    ctx.beginPath();
                                    ctx.rect(cx+(i*dx)-cw*0.5+2,cy+(j*dy)-H*0.1*0.5+2,cw-4,ch-4);
                                    ctx.closePath();
                                    ctx.clip();
                                    ctx.globalAlpha=0.8;
                                    T.draw(ctx,"05zy",cx+(i*dx)-cw*0.5,cy+(j*dy)-H*0.1*0.5,cw+1,ch+1);
                                    ctx.restore();
                                    this.addZone("sfcell_"+cell,srect,"sfcell",{target:cell});
                                } else {
                                    ctx.save();
                                    ctx.beginPath();
                                    ctx.rect(cx+(i*dx)-cw*0.5+2,cy+(j*dy)-H*0.1*0.5+2,cw-4,ch-4);
                                    ctx.closePath();
                                    ctx.clip();
                                    T.draw(ctx,"05zy",cx+(i*dx)-cw*0.5,cy+(j*dy)-H*0.1*0.5,cw+1,ch+1);
                                    ctx.restore();
                                }
                            }
                        } else {
                            text(ctx,CQW.followers.current[cell]*(Math.floor(this.getFmul()/2)+1),cx+(i*dx),cy+(j*dy)+5,"25px"+FONT,"black","center","middle");
                            text(ctx,"FOLLOWERS",cx+(i*dx),cy+(j*dy)+17,"25px"+FONT,"black","center","middle");
                            if (CQW.followers.open[0]==cell || CQW.followers.open[1]==cell || CQW.followers.open[2]==cell){
                                ctx.fillStyle = "rgba(0,255,0,0.2)";
                                ctx.fillRect(cx+(i*dx)-cw*0.5+2,cy+(j*dy)-H*0.1*0.5+2,cw-4,ch-4);
                            } else {
                                ctx.fillStyle = "rgba(255,0,0,0.2)";
                                ctx.fillRect(cx+(i*dx)-cw*0.5+2,cy+(j*dy)-H*0.1*0.5+2,cw-4,ch-4);
                            }
                        }
                        cell++;
                    }
                }
                if (unlocked === 3) {
                    if (CQW.followers.timeleft<Date.now()) this.wsync();
                    else text(ctx,"New opening available in: "+timer((CQW.followers.timeleft-Date.now())/1000),W*0.5,H*0.3,"40px"+FONT,"black","center","middle");
                }
            }
            else if (demode=="lottery") {
                var bw=W*0.6;
                var bh=H*0.6;
                roundedRect(ctx,W*0.5-(bw*0.5)-2,H*0.5-(bh*0.5)-2,bw+4,bh+4,5,"rgb(255,255,255)");

                ctx.save();
                ctx.beginPath();
                ctx.rect(W*0.5-(bw*0.5),H*0.5-(bh*0.5),bw,bh);
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,"0k2u",W*0.5-(bw*0.5),H*0.5-(bh*0.5),W*0.929,bh);
                ctx.restore();
                
                // Close
                var cw = T.width("0evr");
                var ch = T.height("0evr");
                var crect = (new Rect(W*0.81-cw*1.2,H*0.195,cw,ch)).small();
                if (crect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"7otr",W*0.81-cw*1.2+2,H*0.195+2,cw-4,ch-4);
                    this.addZone("doDaily",crect,"doDaily",{target:false});
                }
                else T.draw(ctx,"7otr",W*0.81-cw*1.2,H*0.195,cw,ch);

                text(ctx,"CosmosQuest Lottery",W*0.5,H*0.25,"60px"+FONT,"white","center","middle");

                ctx.fillStyle = "rgba(1,1,1,1)";
                ctx.fillRect(W*0.5-W*0.5*0.5-2,H*0.6-2,W*0.5+4,H*0.175+4);
                ctx.fillStyle = "rgba(160,160,160,1)";
                ctx.fillRect(W*0.5-W*0.5*0.5,H*0.6,W*0.5,H*0.175);

                if (CQW!==undefined && CQW.lottery!==undefined) {
                    text(ctx,"- Each lottery ticket costs 1 Ascension Sphere",W*0.5-bw*0.5+10,H*0.3,"36px"+FONT,"white","left","middle");
                    text(ctx,"- You can buy 1000 lottery tickets; quick buy: ctrl x10, shift x100",W*0.5-bw*0.5+10,H*0.3+20,"36px"+FONT,"white","left","middle");
                    text(ctx,"- Prize Pool is 105% of total lottery tickets income. Currently: "+CQW.lottery.pool.toFixed(0)+" AS",W*0.5-bw*0.5+10,H*0.3+40,"36px"+FONT,"white","left","middle");
                    text(ctx,"* 40%/20%/10%/5%/5%/5%/5%/5%/5%/5% (10 winners).",W*0.5-bw*0.5+10,H*0.3+60,"36px"+FONT,"white","left","middle");
                    text(ctx,"* "+(0.4*CQW.lottery.pool).toFixed(0)+"/"+(0.2*CQW.lottery.pool).toFixed(0)+"/"+(0.1*CQW.lottery.pool).toFixed(0)+"/"+(0.05*CQW.lottery.pool).toFixed(0)+"/"+(0.05*CQW.lottery.pool).toFixed(0)+"/"+(0.05*CQW.lottery.pool).toFixed(0)+"/"+(0.05*CQW.lottery.pool).toFixed(0)+"/"+(0.05*CQW.lottery.pool).toFixed(0)+"/"+(0.05*CQW.lottery.pool).toFixed(0)+"/"+(0.05*CQW.lottery.pool).toFixed(0)+" AS",W*0.5-bw*0.5+10,H*0.3+80,"36px"+FONT,"white","left","middle");
                    text(ctx,"- This event will end tonight at 23:59 GMT. Time left: ~"+timer(CQW.lottery.expires/1000),W*0.5-bw*0.5+10,H*0.3+100,"36px"+FONT,"white","left","middle");

                    var buyrect=(new Rect(W*0.5-T.width("091m")/2,H*0.52-T.height("091m")/2,T.width("091m"),T.height("091m"))).small();
                    if (buyrect.isInside(GM.x,GM.y)){
                        T.draw(ctx,"0eni",W*0.5-T.width("091m")/2,H*0.52-T.height("091m")/2);
                        this.addZone("buylot",buyrect,"buylot");
                    } else T.draw(ctx,"091m",W*0.5-T.width("091m")/2,H*0.52-T.height("091m")/2);
                    text(ctx,"BUY TICKET x"+(mulChest ? 10 : (x100 ? 100 : 1)),W*0.5-20,H*0.52,"36px"+FONT,"white","center","middle");
                    T.draw(ctx,"08y7",W*0.5+35,H*0.52-T.height("091m")/2,T.width("02c9")*0.6,T.height("02c9")*0.6);

                    if (CQW.lottery.numbers!==undefined && CQW.lottery.numbers.length>0) {
                        var lotteryPages = Math.ceil(CQW.lottery.numbers.length/6);
                        var ticket=6*lotteryPage;
                        for (var i=0;i<6;++i){
                            if ((ticket+i)<CQW.lottery.numbers.length) {
                                T.draw(ctx,"6q32",W*0.5-W*0.5*0.5+15+(W*0.08*i),H*0.6+H*0.025-2);
                                text(ctx,CQW.lottery.numbers[ticket+i],W*0.5-W*0.5*0.5+15+W*0.07*0.5+(W*0.08*i),H*0.6+H*0.025+H*0.125*0.5,"50px"+FONT,"black","center","middle");
                            } 
                        }

                        if (CQW.lottery.numbers.length >= 6){
                            var nw=T.width("09sg");
                            var nh=T.height("09sg");
                            T.draw(ctx,"09sg",W*0.775-nw/2,H*0.6+H*0.025+H*0.125*0.5-nh/2);
                            ctx.save();
                            ctx.translate(W*0.225,H*0.6+H*0.025+H*0.125*0.5)
                            ctx.scale(-1,1);
                            T.draw(ctx,"09sg",-nw/2,-nh/2);
                            ctx.restore();
                            var posrect=(new Rect(W*0.775-nw/2,H*0.6+H*0.025+H*0.125*0.5-nh/2,nw,nh)).small();
                            var prerect=(new Rect(W*0.225-nw/2,H*0.6+H*0.025+H*0.125*0.5-nh/2,nw,nh)).small();
                            if (posrect.isInside(GM.x,GM.y)) this.addZone("lotnext",posrect,"arrowlot",{target:(lotteryPage+1)%lotteryPages});
                            if (prerect.isInside(GM.x,GM.y)) this.addZone("lotprev",prerect,"arrowlot",{target:(lotteryPage-1+lotteryPages)%lotteryPages});
                        }  
                    }
                    else {
                        ctx.fillStyle = "rgba(1,1,1,0.6)";
                        ctx.fillRect(W*0.5-W*0.5*0.5,H*0.6,W*0.5,H*0.175);
                        text(ctx,"You don't have any ticket",W*0.5,H*0.69,"48px"+FONT,"white","center","middle");
                    }
                }
            }
            else if (demode=="dungeon") {
                data.pveline = 0;
                var skillInfo=undefined;
                inDungeon=true;
                T.draw(ctx,"l07h",W*0.5-T.width("l07h")/2,H*0.5-T.height("l07h")/2);
                // close
                var cw = T.width("0evr");
                var ch = T.height("0evr");
                var crect = (new Rect(W*0.9-cw*1.2,H*0.11,cw,ch)).small();
                if (crect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"7otr",W*0.9-cw*1.2+2,H*0.11+2,cw-4,ch-4);
                    this.addZone("doDaily",crect,"doDaily",{target:false});
                }
                else T.draw(ctx,"7otr",W*0.9-cw*1.2,H*0.11,cw,ch);

                // Central Zone of Quest
                var center=W*0.573;
                var bgh=H*0.37;
                var bw=T.width("02xp");
                var bh=T.height("02xp");

                /*roundedRect(ctx,W*0.76-1,H*0.815-1,W*0.12+2,H*0.06+2,10,"black");
                roundedRect(ctx,W*0.76,H*0.815,W*0.12,H*0.06,10,"rgb(240,230,140)");
                var tgRect=(new Rect(W*0.76,H*0.815,W*0.12,H*0.06)).small();
                if (tgRect.isInside(GM.x,GM.y)) {
                    roundedRect(ctx,W*0.76,H*0.815,W*0.12,H*0.06,10,"rgba(255,255,255,0.6)");
                    this.addZone("dPage",tgRect,"dPage");
                }*/

                text(ctx,"CQ DUNGEON",center,H*0.18,"64px"+FONT,"black","center","middle");

                if (dunPage=="fight") {
                    //text(ctx,"Ranking",W*0.76+W*0.12*0.5,H*0.815+H*0.06*0.5,"36px"+FONT,"black","center","middle");
                    T.draw(ctx,"02xp",center-bw*0.9*0.5,bgh-bh*0.9*0.5,bw*0.9,bh*0.9);

                    // Fight Buttons (Normal and Max)
                    var btw=T.width("072r");
                    var bth=T.height("072r");
                    T.draw(ctx,"072r",center-btw*0.9*0.5,bgh+bh*0.9*0.5-5,btw*0.9,bth*0.9);
                    T.draw(ctx,"072r",center-bw*0.9*0.5+5,bgh+bh*0.9*0.5-5,btw*0.9,bth*0.9);
                    if (dunsync!==false) {
                        this.spinner(ctx,center,bgh+bh*0.9*0.5-5+bth*0.9*0.5,40);
                        this.spinner(ctx,center-bw*0.9*0.5+5+btw*0.9*0.5,bgh+bh*0.9*0.5-5+bth*0.9*0.5,40);
                    } else {
                        var frect=(new Rect(center-btw*0.9*0.5,bgh+bh*0.9*0.5-5,btw*0.9,bth*0.9)).small();
                        if (frect.isInside(GM.x,GM.y)) {
                            T.draw(ctx,"0hfl",center-T.width("0hfl")*0.9*0.5,bgh+bh*0.9*0.5+bth*0.9*0.5-T.height("0hfl")*0.9*0.5-5,T.width("0hfl")*0.9,T.height("0hfl")*0.9);
                            this.addZone("dungeon",frect,"dungeon",{target:0});
                        } else T.draw(ctx,"0du4",center-T.width("0du4")*0.9*0.5,bgh+bh*0.9*0.5+bth*0.9*0.5-T.height("0du4")*0.9*0.5-5,T.width("0du4")*0.9,T.height("0du4")*0.9);
                        
                        if ((Date.now()-fmTimer) >= 5000) {
                            var fmrect=(new Rect(center-bw*0.9*0.5+5,bgh+bh*0.9*0.5-5,btw*0.9,bth*0.9)).small();
                            if (fmrect.isInside(GM.x,GM.y)) {
                                T.draw(ctx,"0kqi",center-bw*0.9*0.5+btw*0.9*0.5-T.width("0kqi")*0.9*0.5,bgh+bh*0.9*0.5+bth*0.9*0.5-T.height("0kqi")*0.9*0.5-8,T.width("0kqi")*0.9,T.height("0kqi")*0.9);
                                this.addZone("maxDung",fmrect,"dungeon",{target:1});
                            } else T.draw(ctx,"0nxd",center-bw*0.9*0.5+btw*0.9*0.5-T.width("0nxd")*0.9*0.5,bgh+bh*0.9*0.5+bth*0.9*0.5-T.height("0nxd")*0.9*0.5-8,T.width("0nxd")*0.9,T.height("0nxd")*0.9);
                        } else {
                            text(ctx,timer(((fmTimer+5000)-Date.now())/1000),center-bw*0.9*0.5+btw*0.9*0.5,bgh+bh*0.9*0.5+bth*0.9*0.5,"30px"+FONT,"black","center","middle");
                        }

                         
                    }

                    // Monsters for Dungeon Fights
                    if (CQW.dungeon!==undefined && mdata!==undefined && mdata.city!==undefined) {
                        if (CQW.dungeon.setup!==undefined) {
                            for (var i=CQW.dungeon.setup.length-1; i>=0; --i) {
                                var hid=-(CQW.dungeon.setup[4-i]+2);
                                if (CQW.dungeon.setup[4-i]>-1) this.drawMonster(ctx,CQW.dungeon.setup[4-i],center-bw*0.9*0.5+72+(i*110),bgh+80,undefined,true,1.2);
                                else if (CQW.dungeon.setup[4-i]<-1) this.drawMonster(ctx,CQW.dungeon.setup[4-i],center-bw*0.9*0.5+72+(i*110),bgh+80,undefined,true,1.2,CQW.dungeon.hero[hid],true,true,CQW.dungeon.promo[hid]);
                                var mw = T.width(HERO[0].img)*1.2;
                                var mh = T.height(HERO[0].img)*1.2;
                                var hrect = (new Rect(center-bw*0.9*0.5+72+(i*110)-mw/2,bgh+80-mh,mw,mh)).small();
                                if (hrect.isInside(GM.x,GM.y) && CQW.dungeon.setup[4-i]!=undefined && CQW.dungeon.setup[4-i]!=-1) {
                                    skillInfo=i;
                                }
                            }
                            if (mdata.city !== undefined && mdata.city.easter !== undefined && mdata.city.easter.dungeonsolver !== 0) {
                                var sx = W*0.75;
                                var sy = H*0.82;
                                var sw = T.width("091m")*0.6;
                                var sh = T.height("091m")*0.6;
                                var srect=(new Rect(sx,sy,sw,sh)).small();
                                if (srect.isInside(GM.x,GM.y)) {
                                    this.addZone("solver",srect,"solver",{
                                        setup: CQW.dungeon.setup,
                                        shero: CQW.dungeon.hero,  
                                        spromo: CQW.dungeon.promo, 
                                        grid: data.pve[data.pveline],
                                    });
                                    T.draw(ctx,"0eni",sx,sy,sw,sh);
                                } else {
                                    T.draw(ctx,"091m",sx,sy,sw,sh);
                                }
                                text(ctx,"Solve!!",sx+sw/2,sy+sh/2,"50px"+FONT,"white","center","middle");
                                T.draw(ctx,"0m9x",sx,sy,sw,sh);
                            }
                        }
                    }

                    // Show Level
                    if (CQW.dungeon!==undefined && CQW.dungeon.lvl!==undefined) {
                        text(ctx,CQW.dungeon.lvl,W*0.49,H*0.263,"56px"+FONT,"white","right","middle");
                        text(ctx,"---",W*0.775,H*0.263,"56px"+FONT,"white","right","middle");


                        ctx.fillStyle = "rgba(10,10,10,0.6)";
                        ctx.fillRect(center-W*0.35*0.5-1,H*0.815-1,W*0.35+2,H*0.06+2);

                        ctx.fillStyle = "rgba(220,220,220,0.8)";
                        ctx.fillRect(center-W*0.35*0.5,H*0.815,W*0.35,H*0.06);

                        text(ctx,"Total SD obtained on today's dungeon: "+((CQW.dungeon.lvl-1)*2500),center,H*0.815+H*0.06*0.5,"30px"+FONT,"black","center","middle");
                    }
                    
                    // Left Menu of Heroes and Drag System
                    this.drawMonsterTabs(ctx,"dungeon");
                    if (cityClick!=undefined) {
                        if (swapping) {
                            var mon = data.pve[data.pveline][cityClick.initPos];
                            if (mon < -1) {
                                var id=cityClick.id;
                                var img=HERO[(cityClick.id*-1)-2].img;
                            }
                            else {
                                var id = cityClick.id;
                                var img=MONSTERS[cityClick.id].img;
                            }
                            var lvl=1;
                            if (id<-1) lvl=mdata.city.hero[-(id+2)];
                            this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,mdata.city.promo[-(id+2)]);
                        }
                        else {
                            if (typeTab!=4 && !searchTab) {
                                var id = cityClick.id;
                                var img=MONSTERS[cityClick.id].img;
                            }
                            else{
                                var id=cityClick.id;
                                var img=HERO[(cityClick.id*-1)-2].img;
                            }
                            var lvl=1;
                            if (id<-1) lvl=mdata.city.hero[-(id+2)];
                            this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,mdata.city.promo[-(id+2)]);
                        }
                    }

                    // Skill and Name info
                    if (skillInfo!=undefined) {
                    	var mh = T.height(HERO[0].img)*1.2;
                        ctx.beginPath();
                        ctx.moveTo(center-bw*0.9*0.5+72+(skillInfo*110),bgh+80-mh-30);
                        ctx.lineTo(center-bw*0.9*0.5+72+(skillInfo*110)+12,bgh+80-mh-42);
                        ctx.lineTo(center-bw*0.9*0.5+72+(skillInfo*110)-12,bgh+80-mh-42);
                        ctx.closePath();
                        ctx.fillStyle="rgba(0,0,0,0.7)";
                        ctx.fill();
                    	if (CQW.dungeon.setup[4-skillInfo] < -1) {//Hero
            	            ctx.fillStyle="rgba(0,0,0,0.7)";
            	            ctx.fillRect(center-bw*0.9*0.5+72+(skillInfo*110)-W*0.3,bgh+80-mh-42-H*0.1-20,W*0.6,H*0.1+20);
                            text(ctx,HERO[-(CQW.dungeon.setup[4-skillInfo]+2)].name,center-bw*0.9*0.5+72+(skillInfo*110),bgh+80-mh-42-(H*0.05)-20-10,"40px"+FONT,"white","center","middle");
            	            mltext(ctx,"SKILL: "+this.skill2text(HERO[-(CQW.dungeon.setup[4-skillInfo]+2)].skill,CQW.dungeon.hero[-(CQW.dungeon.setup[4-skillInfo]+2)],false,promoData[-(CQW.dungeon.setup[4-skillInfo]+2)].skill,CQW.dungeon.promo[-(CQW.dungeon.setup[4-skillInfo]+2)]).short,center-bw*0.9*0.5+72+(skillInfo*110),bgh+80-mh-42-(H*0.05)-10,"34px"+FONT,"white","center","middle");
                    	} else {//Monster
                    		ctx.fillStyle="rgba(0,0,0,0.7)";
            	            ctx.fillRect(center-bw*0.9*0.5+72+(skillInfo*110)-20,bgh+80-mh-42-H*0.1+20,40,H*0.1-20);
            	            var elements_short =["A","E","F","W"];
            	            var mobname = elements_short[CQW.dungeon.setup[4-skillInfo]%4] + (Math.floor(CQW.dungeon.setup[4-skillInfo]/4)+1);
            	            text(ctx,mobname,center-bw*0.9*0.5+72+(skillInfo*110),bgh+80-mh-42-(H*0.05)+10,"40px"+FONT,"white","center","middle");
                    	}
                    }
                }
                else {
                    /*var dataArray = [];
                    for (var i=0;i<100;++i) {
                        var dataStructure = {
                            pos: i+1,
                            name: "Player_"+(i+1),
                            reward: 10000,
                        };
                        dataArray.push(dataStructure);
                    }

                    text(ctx,"Dungeon",W*0.76+W*0.12*0.5,H*0.815+H*0.06*0.5,"36px"+FONT,"black","center","middle");
                    for (var i=0;i<10;++i) {
                        text(ctx,"TOP "+(i+1),W*0.3,H*0.26+(i*30),"40px"+FONT,"black","left","middle"); 
                        text(ctx,dataArray[i].name,center,H*0.26+(i*30),"40px"+FONT,"black","center","middle"); 
                        text(ctx,dataArray[i].reward+" SD",W*0.85,H*0.26+(i*30),"40px"+FONT,"black","right","middle"); 
                    }
                    for (var i=0;i<dataArray.length;++i) {
                        if (dataArray[i].name===kongregate.services.getUsername()) {
                            ctx.fillStyle = "rgba(10,10,10,0.6)";
                            ctx.fillRect(center-W*0.6*0.5-1,H*0.72-1,W*0.6+2,H*0.06+2);

                            ctx.fillStyle = "rgba(220,220,220,0.8)";
                            ctx.fillRect(center-W*0.6*0.5,H*0.72,W*0.6,H*0.06);

                            text(ctx,dataArray[i].pos,W*0.3,H*0.75,"40px"+FONT,"black","left","middle"); 
                            text(ctx,dataArray[i].name,center,H*0.75,"40px"+FONT,"black","center","middle"); 
                            text(ctx,dataArray[i].reward+" SD",W*0.85,H*0.75,"40px"+FONT,"black","right","middle"); 
                        }
                    }*/
                    
                }

                var trect=(new Rect(W*0.27,H*0.14,T.width("0nww"),T.height("0nww"))).small();
                if (trect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"0nww",W*0.27,H*0.14);
                    ctx.fillStyle="rgba(36,36,36,0.9)";
                    ctx.fillRect(center-W*0.5*0.5,H*0.5-H*0.3,W*0.5,H*0.6);
                    
                    var xleft=center-W*0.5*0.5+20;
                    text(ctx,"CQ DUNGEON",center,H*0.28,"90px"+FONT,"white","center","middle");

                    text(ctx,"- Complete levels with the objective to reach",xleft,H*0.4,"40px"+FONT,"white","left","middle");
                    text(ctx,"the maxium floor.",xleft,H*0.4+40,"40px"+FONT,"white","left","middle");
                    text(ctx,"- For every completed level, you will receive 2500 SD",xleft,H*0.4+80,"40px"+FONT,"white","left","middle");
                } else {
                    ctx.save();
                    ctx.globalAlpha=0.8;
                    T.draw(ctx,"0nww",W*0.27,H*0.14);
                    ctx.restore();
                }  
            }
        } else {
        	this.doAction("doDaily", false);
            popup={
                    text:"Congratulations, you've finished today's event.",
                    mode:"alert",
                }
        }
    }
    this.drawFlash = function (ctx) {
        if (monstersPage[4]>=2) monstersPage[4]=1;
        ctx.fillStyle = "rgba(1,1,1,1)";
        ctx.fillRect(W*0.1-2,H*0.1-2,W*0.8+4+1,H*0.8+4);
        T.draw(ctx,"l07h",W*0.5-T.width("l07h")*0.5,H*0.5-T.height("l07h")*0.5);

        var tgrect = (new Rect(W*0.687,H*0.803,T.width("04oc")*0.75,T.height("04oc")*0.8)).small();
        if (tgrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"04oc",W*0.687,H*0.803,T.width("04oc")*0.75,T.height("04oc")*0.8);
            this.addZone("tgPage",tgrect,"pFlash");
        } else T.draw(ctx,"0di2",W*0.687,H*0.803,T.width("0di2")*0.75,T.height("0di2")*0.8);
        if (flashPage=="fight") T.draw(ctx,"0jhv",W*0.687,H*0.803,T.width("0di2")*0.75,T.height("0di2")*0.8);
        else T.draw(ctx,"0id7",W*0.687,H*0.803,T.width("0di2")*0.75,T.height("0di2")*0.8);
        // close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.9-cw*1.2,H*0.11,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"7otr",W*0.9-cw*1.2+2,H*0.11+2,cw-4,ch-4);
            this.addZone("clflash",crect,"clFlash",{target:false});
        }
        else T.draw(ctx,"7otr",W*0.9-cw*1.2,H*0.11,cw,ch);

        if (flashPage=="fight") {
            text(ctx,"FLASH TOURNAMENTS",W*0.58,H*0.175,"40px"+FONT,"black","center","middle");

            if (CQW!==undefined) {
                // Clear Grid
                var any=false;
                if (CQW!==undefined && data.flash.setup!==undefined) {
                    for (var i=0; i<data.flash.setup.length; ++i) {
                        if (data.flash.setup[i]!=-1) any=true;
                    }
                }
                T.draw(ctx,"0gws",W*0.287,H*0.575);
                if (placeSync==undefined && any && this.canJoinFlash()) {
                    this.addZone("clGrid",(new Rect(W*0.287,H*0.575,T.width("0gws")*0.85,T.height("0gws")*0.85)).small(),"clGrid");
                }
            }

            var bx=W*0.33;
            var by=H*0.2;
            for (var i=0;i<3;++i) T.draw(ctx,"0lts",bx,by+(T.height("0lts")*0.725*i));

            if (CQW===undefined) {
                this.spinner(ctx,W*0.58,H*0.44,40);
            }
            else {
                // Join Button
                var jrect=(new Rect(W*0.6,H*0.67,T.width("01nq")*0.6,T.height("01nq")*0.7)).small();
                if (this.canJoinFlash()){
                    if (jrect.isInside(GM.x,GM.y) && !registerSync) {
                        T.draw(ctx,"0jmt",W*0.6,H*0.67,T.width("0jmt")*0.6,T.height("0jmt")*0.7);
                        this.addZone("jflash",jrect,"jflash");
                    } else T.draw(ctx,"01nq",W*0.6,H*0.67,T.width("01nq")*0.6,T.height("01nq")*0.7);
                    var price="100";
                    text(ctx,"JOIN for "+price+" UM",W*0.59+W*0.227*0.5,H*0.68+H*0.05*0.5,"30px"+FONT,"white","center","middle");
                    T.draw(ctx,"02c9",W*0.755,H*0.68,T.width("02c9")*0.35,T.height("02c9")*0.35);
                }
                else {
                    T.negative(ctx,"01nq",W*0.6,H*0.67,T.width("01nq")*0.6,T.height("01nq")*0.7);
                    if (CQW.flash.current.joined) text(ctx,"Already Joined!",W*0.59+W*0.227*0.5,H*0.68+H*0.05*0.5,"30px"+FONT,"white","center","middle");
                    else text(ctx,"Can't Join to tournament",W*0.59+W*0.227*0.5,H*0.68+H*0.05*0.5,"30px"+FONT,"white","center","middle");
                }

                text(ctx,"Players: "+CQW.flash.current.players+"/64",W*0.59+W*0.227*0.5,H*0.68+H*0.05*0.5+30,"30px"+FONT,"black","center","middle");

                // helper tooltip
                var trect=(new Rect(W*0.30,H*0.70,T.width("0nww")*0.85,T.height("0nww")*0.85)).small();
                ctx.save();
                ctx.globalAlpha=0.8;
                T.draw(ctx,"0nww",W*0.30,H*0.70,T.width("0nww")*0.85,T.height("0nww")*0.85);
                ctx.restore();
                
                if (this.canJoinFlash()==false) {
                    this.drawMonsterTabs(ctx,"flash");
                    if (!CQW.flash.current.joined && mdata.city.flash>Date.now()) {
                        ctx.fillStyle = "rgba(1,1,1,0.7)";
                        ctx.fillRect(bx,by+10,T.width("0lts"),T.height("0lts")*2.3);
                        text(ctx,"Wait to join the next tournament.",bx+T.width("0lts")*0.5,by+135,"50px"+FONT,"white","center","middle");
                        text(ctx,"Time left: "+timer((mdata.city.flash-Date.now())/1000),bx+T.width("0lts")*0.5,by+165,"50px"+FONT,"white","center","middle");
                    }                    
                }
                else {
                    this.drawMonsterTabs(ctx,"flash");
                    if (cityClick!=undefined) {
                        var id = cityClick.id;
                        var heroes=CQW.flash.current.hero.slice();
                        for (var i=0;i<heroes.length;++i) {
                            if (HERO[i].rarity==5) heroes[i] = 0;
                        }
                        var promotion = CQW.flash.current.promo.slice();
                        var lvl = 1;
                        if (id<-1) lvl=heroes[-(id+2)];
                        if (swapping) {
                            var mon = data.flash.setup[cityClick.initPos];
                            if (mon < -1) {
                                var img=HERO[(cityClick.id*-1)-2].img;
                            }
                            else {
                                var img=MONSTERS[cityClick.id].img;
                            }
                            this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,promotion[-(id+2)]);
                        }
                        else {
                            if (typeTab!=4 && !searchTab) {
                                var img=MONSTERS[cityClick.id].img;
                            }
                            else{
                                var img=HERO[(cityClick.id*-1)-2].img;
                            }
                            this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,promotion[-(id+2)]);
                        }
                    }
                    if (mdata.city !== undefined && mdata.city.easter !== undefined && mdata.city.easter.flashsolver !== 0) {
                        var sx = W*0.5;
                        var sy = H*0.81;
                        var sw = T.width("091m")*0.7;
                        var sh = T.height("091m")*0.7;
                        var srect=(new Rect(sx,sy,sw,sh)).small();
                        if (srect.isInside(GM.x,GM.y)) {
                            this.addZone("solver",srect,"tsolver",{
                                grid: data.flash.setup,
                                followers: CQW.flash.current.followers,
                                phero: CQW.flash.current.hero,  
                                ppromo: CQW.flash.current.promo, 
                                thero: CQW.flash.current.hero,
                                tpromo: CQW.flash.current.promo,
                                mode: "tournament"
                            });
                            T.draw(ctx,"0eni",sx,sy,sw,sh);
                        } else {
                            T.draw(ctx,"091m",sx,sy,sw,sh);
                        }
                        text(ctx,"Solve!!",sx+sw/2,sy+sh/2,"64px"+FONT,"white","center","middle");
                        T.draw(ctx,"0m9x",sx,sy,sw,sh);
                    }
                }  
                
                if (trect.isInside(GM.x,GM.y)) {
                    var tw=W*0.61;
                    var th=H*0.665;
                    ctx.fillStyle="rgba(1,1,1,0.9)";
                    ctx.fillRect(W*0.572-tw*0.5,H*0.472-th*0.5,tw,th);

                    text(ctx,"FLASH TOURNAMENT RULES",W*0.572,H*0.2,"50px"+FONT,"white","center","middle");
                    text(ctx,"- You will be able to join a tournament once per hour",W*0.572-tw*0.5+15,H*0.27,"36px"+FONT,"white","left","middle");
                    text(ctx,"- Each tournament will cost 100 Universe Marbles",W*0.572-tw*0.5+15,H*0.27+20,"36px"+FONT,"white","left","middle");
                    text(ctx,"- The tournament will start when 64 players have joined",W*0.572-tw*0.5+15,H*0.27+40,"36px"+FONT,"white","left","middle");
                    text(ctx,"- In results page, you can see each individual battle",W*0.572-tw*0.5+15,H*0.27+60,"36px"+FONT,"white","left","middle");
                    text(ctx,"- Top 16 will get a Season 9 Hero",W*0.572-tw*0.5+15,H*0.27+80,"36px"+FONT,"white","left","middle");
                    text(ctx,"- All participants will get 150.000 Star Dust and 5 VIP points",W*0.572-tw*0.5+15,H*0.27+100,"36px"+FONT,"white","left","middle");
                    text(ctx,"- Top 10 players will get 850, 765, 680, 595, 510, 425, 340, 255, 170, 85 UM",W*0.572-tw*0.5+15,H*0.27+130,"36px"+FONT,"white","left","middle");

                    text(ctx,"1st-4th",W*0.572-tw*0.5+tw*0.2,H*0.745,"32px"+FONT,"white","center","middle");
                    text(ctx,"5th-9th",W*0.572-tw*0.5+tw*0.5,H*0.745,"32px"+FONT,"white","center","middle");
                    text(ctx,"10th-16th",W*0.572-tw*0.5+tw*0.8,H*0.745,"32px"+FONT,"white","center","middle");

                    this.drawMonster(ctx,-191,W*0.572-tw*0.5+tw*0.2,H*0.77-35,undefined,false,1.5);
                    this.drawMonster(ctx,-190,W*0.572-tw*0.5+tw*0.5,H*0.77-35,undefined,false,1.5);
                    this.drawMonster(ctx,-189,W*0.572-tw*0.5+tw*0.8,H*0.77-35,undefined,false,1.5);
                }
            }
        } else if (flashPage=="results") {
            if (!wsynking && CQW===undefined && CQW.flash===undefined ) {
                this.wsync();
            }
            
            // Days
            var dayx = W*0.11;
            var ddist = (T.height("0cz1")*0.65)*1.1;
            if (CQW===undefined) {
                this.spinner(ctx,W*0.20,H*0.5,40);
            } else {
                for (var i=0;i<CQW.flash.history.length;++i) {
                    var dayrect = (new Rect(dayx,H*0.15+ddist*i,T.width("0cz1")*0.52,T.height("0cz1")*0.65)).small();
                    T.draw(ctx,"0cz1",dayx,H*0.15+ddist*i,T.width("0cz1")*0.52,T.height("0cz1")*0.65);

                    var date = new Date(CQW.flash.history[i].date);
                    var dd = date.getDate();
                    var mm = date.getMonth()+1;
                    var yyyy = date.getFullYear();
                    var h = date.getHours();
                    var m = date.getMinutes();
                    var s = date.getSeconds();
                    if (s<10) s="0"+s;

                    text(ctx,dd+"/"+mm+"/"+yyyy+"-"+h+":"+m+":"+s,dayx+(T.width("0cz1")*0.52)*0.5,H*0.15+ddist*i+(T.height("0cz1")*0.65)*0.5-10,"32px"+FONT,"white","center","middle");
                    
                    var user=undefined;
                    for (var j=0;j<CQW.flash.history[i].players.length;++j) if (CQW.flash.history[i].players[j].name==kongregate.services.getUsername()) user=j;
                    if (user!==undefined) text(ctx,"Pos: "+(user+1)+", WR: "+CQW.flash.history[i].players[user].wr,dayx+(T.width("0cz1")*0.52)*0.5,H*0.15+ddist*i+(T.height("0cz1")*0.65)*0.5+10,"26px"+FONT,"white","center","middle");

                    if (dayrect.isInside(GM.x,GM.y)){
                        this.addZone("sflash_"+i,dayrect,"sflash",{target: i});
                        ctx.fillStyle="rgba(255,255,255,0.2)";
                        ctx.fillRect(dayx,H*0.15+ddist*i,T.width("0cz1")*0.52,T.height("0cz1")*0.65);
                    }             
                }
            }
            var userID = undefined;
            if (CQW.flash.history[showFlash]!==undefined) {
                for (var i=0;i<64;++i) if (CQW.flash.history[showFlash].players[i].name===kongregate.services.getUsername()) userID=i;

                // Players List
                if (CQW===undefined) {
                    this.spinner(ctx,W*0.58,H*0.5,40);
                }
                else {
                    var num=0;
                    for (var i=0;i<5;++i) {
                        for (var j=0;j<13;++j) {
                            if (num<64) {
                                if (CQW.flash.history[showFlash].players[num].name!==kongregate.services.getUsername()) {
                                    text(ctx,(num+1)+"."+CQW.flash.history[showFlash].players[num].name,W*0.345+(W*0.11*i),H*0.19+(30*j),"28px"+FONT,"white","center","middle");
                                }
                                else {
                                    text(ctx,(num+1)+"."+CQW.flash.history[showFlash].players[num].name,W*0.345+(W*0.11*i),H*0.19+(30*j),"28px"+FONT,"black","center","middle");
                                }
                                var prect = (new Rect(W*0.345-W*0.05+(W*0.11*i),H*0.19-H*0.02+(30*j),W*0.1,H*0.04)).small();
                                if (prect.isInside(GM.x,GM.y) && (CQW.flash.history[showFlash].players[num].name!==kongregate.services.getUsername())){
                                    this.addZone("plsel_"+i,prect,"plflash",{target: num, player:userID});
                                    ctx.fillStyle="rgba(1,1,1,0.25)";
                                    ctx.fillRect(W*0.345-W*0.05+(W*0.11*i),H*0.19-H*0.02+(30*j),W*0.1,H*0.04);
                                }
                            }
                            num++;
                        }
                    }
                }
            } else {
                text(ctx,"No results yet",W*0.58,H*0.5,"32px"+FONT,"black","center","middle");
            }

        }
    }
    this.drawEventCC = function (ctx) {
        if (cc_data.attempts == undefined) cc_data.attempts = 3;
        var bgw = W*0.943;
        var bgh = H*0.95;

        ctx.save();
        ctx.beginPath();
        ctx.rect(W*0.5-bgw*0.97*0.5+5,H*0.5-bgh*0.97*0.5+2,bgw*0.97,bgh*0.97);
        ctx.closePath();
        ctx.clip();
        T.draw(ctx,"08g3",W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);
        ctx.restore();

        ctx.fillStyle = "rgba(7,125,255,0.2)";
        ctx.fillRect(W*0.5-bgw*0.97*0.5+5,H*0.5-bgh*0.97*0.5+2,bgw*0.97,bgh*0.97);

        T.draw(ctx,"0klu",W*0.18-T.width("0klu")*3.2*0.5,H*0.1-T.height("0klu")*2.4*0.5,T.width("0klu")*3.2,T.height("0klu")*2.4);
        text(ctx,"TIMER: ",W*0.18-T.width("0klu")*3.2*0.5+15,H*0.1,"36px"+FONT,"white","left","middle");
        text(ctx,cc_data.timer+" seconds",W*0.18+T.width("0klu")*3.2*0.5-15,H*0.1,"36px"+FONT,"white","right","middle");

        T.draw(ctx,"0klu",W*0.385-T.width("0klu")*3.2*0.5,H*0.1-T.height("0klu")*2.4*0.5,T.width("0klu")*3.2,T.height("0klu")*2.4);
        text(ctx,"COSMIC COINS: ",W*0.385-T.width("0klu")*3.2*0.5+15,H*0.1,"36px"+FONT,"white","left","middle");
        text(ctx,cc_data.points,W*0.385+T.width("0klu")*3.2*0.5-15,H*0.1,"36px"+FONT,"white","right","middle");

        T.draw(ctx,"0klu",W*0.59-T.width("0klu")*3.2*0.5,H*0.1-T.height("0klu")*2.4*0.5,T.width("0klu")*3.2,T.height("0klu")*2.4);
        text(ctx,"ATTEMPTS: ",W*0.59-T.width("0klu")*3.2*0.5+15,H*0.1,"36px"+FONT,"white","left","middle");
        text(ctx,cc_data.attempts,W*0.59+T.width("0klu")*3.2*0.5-15,H*0.1,"36px"+FONT,"white","right","middle");

        var cctid = Math.floor(Date.now()/(24*60*60*1000));
        T.draw(ctx,"0klu",W*0.795-T.width("0klu")*3.2*0.5,H*0.1-T.height("0klu")*2.4*0.5,T.width("0klu")*3.2,T.height("0klu")*2.4);
        text(ctx,"BEST: ",W*0.795-T.width("0klu")*3.2*0.5+15,H*0.1,"36px"+FONT,"white","left","middle");
        if (mdata !== undefined && mdata.city !== undefined && mdata.city.cc !== undefined && mdata.city.cc.coins !== undefined && mdata.city.cc.tid === cctid) {
            text(ctx,mdata.city.cc.coins,W*0.795+T.width("0klu")*3.2*0.5-15,H*0.1,"36px"+FONT,"white","right","middle");
        } else text(ctx,"0",W*0.795+T.width("0klu")*3.2*0.5-15,H*0.1,"36px"+FONT,"white","right","middle");
        

        var cs = W*0.045; // Cell Size
        var cx = W*0.085-cs*0.5;
        var cy = H*0.18-cs*0.5;

        if (!cc_data.start) {
            roundedRect(ctx,W*0.5-W*0.72*0.5,H*0.5-H*0.6*0.5,W*0.72,H*0.6,10,"rgba(255,255,255,0.3)");
            roundedRect(ctx,W*0.5-W*0.72*0.5+2,H*0.5-H*0.6*0.5+2,W*0.72-4,H*0.6-4,10,"rgba(0,0,0,0.5)");
            text(ctx,"Cosmic Coins Catcher",W*0.5,H*0.3,"115px"+FONT,"white","center","middle");
            text(ctx,"Use arrow keys to catch Cosmic Coins by running over them.",W*0.5,H*0.42,"42px"+FONT,"white","center","middle");
            text(ctx,"You have 140 seconds and 3 lives to catch as many Cosmic Coins as you can.",W*0.5,H*0.42+30,"42px"+FONT,"white","center","middle");
            text(ctx,"Running into yourself will consume a life.",W*0.5,H*0.42+60,"42px"+FONT,"white","center","middle");
            text(ctx,"You can run through walls. Use R to reset.",W*0.5,H*0.42+90,"42px"+FONT,"white","center","middle");
            text(ctx,"You can play as many times as you want today,",W*0.5,H*0.42+120,"42px"+FONT,"white","center","middle");
            text(ctx,"but you will only be awarded once (the best one).",W*0.5,H*0.42+150,"42px"+FONT,"white","center","middle");
            text(ctx,"Press any Arrow Key to start the game",W*0.5,H*0.75,"70px"+FONT,"white","center","middle");
        } else {
            if (cc_data.timer>0 && cc_data.attempts>0) {
                // Update
                if (Date.now() >= cc_data.ts+1000) {
                    --cc_data.timer;
                    cc_data.ts = Date.now();
                }
                if (Date.now() >= cc_event_ts+cc_data.speed && cc_data.points <= 320) {
                    var newPosition = cc_body[0];
                    for (var i = cc_body.length -1; i > 0; --i) cc_body[i] = cc_body[i-1];
                    if (cc_direction=="RIGHT") {
                        if (newPosition%18===17) newPosition-=17;
                        else newPosition+=1;
                    } else if (cc_direction=="LEFT") {
                        if (newPosition%18===0) newPosition+=17;
                        else newPosition-=1;
                    } else if (cc_direction=="UP") {
                        if (Math.floor(newPosition/18)===0) newPosition+=162;
                        else newPosition-=18;
                    } else if (cc_direction=="DOWN") { 
                        if (Math.floor(newPosition/18)===9) newPosition-=162;
                        else newPosition+=18;
                    }
                    for (var i = 1; i < cc_body.length; ++i) {
                        if (newPosition == cc_body[i]) {
                            cc_data.attempts -= 1;
                            cc_data.speed = 500;
                            cc_body = [2,1,0];
                            cc_direction = "RIGHT";
                            newPosition = 2;
                            break;
                        }
                    }
                    if (newPosition == cc_coin) {
                        cc_body.unshift(newPosition);
                        var added = false;
                        while (!added) {
                            var new_coin = Math.floor(Math.random() * 180);
                            var found = false;
                            for (var i = 0; i < cc_body.length; ++i) {
                                if (cc_body[i] == new_coin) found = true;
                            }
                            if (!found) {
                                cc_coin = new_coin;
                                added = true;
                            }
                        }
                        
                        cc_data.points += 3;
                        if (cc_data.speed > 100) cc_data.speed -= 50;
                    } else {
                        cc_body[0] = newPosition;
                    }
                    cc_changed=false;
                    cc_event_ts = Date.now();
                }

                // Draw
                for (var i = 0; i < 10; ++i) {
                    for (var j = 0; j < 18; ++j) {
                        ctx.fillStyle="rgba(0,0,0,0.2)";
                        ctx.fillRect(cx+(cs*1.1*j),cy+(cs*1.1*i),cs,cs);
                    }
                }

                // Draw Head
                for (var i = 0; i < cc_body.length; ++i) {
                    ctx.fillStyle="rgba(204,255,255)";
                    if (i == 0) ctx.fillStyle="rgba(224,224,255)";
                    ctx.fillRect(cx+(cs*1.1*(cc_body[i]%18))+1,cy+(cs*1.1*(Math.floor(cc_body[i]/18)))+1,cs-2,cs-2);
                }
                // Draw CC
                T.draw(ctx,"0ap1",cx+(cs*1.1*(cc_coin%18))+cs*1.1*0.5-T.width("0ap1")*0.5-2,cy+(cs*1.1*(Math.floor(cc_coin/18)))+cs*1.1*0.5-T.height("0ap1")*0.5-2);
            } else {
                if (!cc_data.sent) this.cc3v3nt(cc_data.points);
                roundedRect(ctx,W*0.5-W*0.6*0.5,H*0.5-H*0.6*0.5,W*0.6,H*0.6,10,"rgba(255,255,255,0.3)");
                roundedRect(ctx,W*0.5-W*0.6*0.5+2,H*0.5-H*0.6*0.5+2,W*0.6-4,H*0.6-4,10,"rgba(0,0,0,0.5)");
                text(ctx,"Cosmic Coins Catcher",W*0.5,H*0.3,"115px"+FONT,"white","center","middle");
                text(ctx,"Game Over",W*0.5,H*0.5,"56px"+FONT,"white","center","middle");
                text(ctx,"You have collected "+cc_data.points+" Cosmic Coins",W*0.5,H*0.5+30,"54px"+FONT,"white","center","middle");
                
                if (cc_data.sent){
                    var prect = (new Rect(W*0.5-T.width("0dlk")*0.5,H*0.65-T.height("0dlk")*0.5,T.width("0dlk"),T.height("0dlk"))).small();
                    if (prect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0dlk",W*0.5-T.width("0dlk")*1.1*0.5,H*0.65-T.height("0dlk")*1.1*0.5,T.width("0dlk")*1.1,T.height("0dlk")*1.1)
                        this.addZone("ccrs",prect,"ccrs");
                    } else T.draw(ctx,"0dlk",W*0.5-T.width("0dlk")*0.5,H*0.65-T.height("0dlk")*0.5);
                    text(ctx,"Play Again",W*0.5,H*0.65,"38px"+FONT,"white","center","middle");
                }
            }  
        }           
        // Close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.5+bgw*0.97*0.5-cw*1.1-2,H*0.5-bgh*0.97*0.5+13,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0o6b",W*0.5+bgw*0.97*0.5-cw*1.1-2,H*0.5-bgh*0.97*0.5+13,cw,ch);
            this.addZone("clcc",crect,"clcc",{target:false});
        }
        else T.draw(ctx,"0evr",W*0.97*0.5+bgw*0.5-cw*1.1-2,H*0.5-bgh*0.97*0.5+13,cw,ch);
    }
    this.drawAdventure = function (ctx) {
        ctx.fillStyle="rgba(0,0,0,0.5)";
        ctx.fillRect(0,0,W,H);
        var bgw = W*0.9;
        var bgh = H*0.9;

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);
        ctx.fillStyle="rgba(0,0,0,0.3)";
        ctx.fillRect(W*0.5-bgw*0.5+10,H*0.5-bgh*0.5+10,bgw-20,bgh-20);

        text(ctx,"Cosmic Adventure",W*0.5,H*0.5-bgh*0.43,"70px"+EFONT,"black","center","middle");

        if (mdata!==undefined && mdata.city.adventure!==undefined && mdata.city.adventure.time!==undefined && (mdata.city.adventure.time-Date.now())>0) {
            var sw = W*0.5;
            var sh = H*0.3;
            ctx.fillStyle="rgb(0,0,0)";
            ctx.fillRect(W*0.5-sw*0.5-2,H*0.5-sh*0.5-2,sw+4,sh+4);
            ctx.fillStyle="rgb(230,190,92)";
            ctx.fillRect(W*0.5-sw*0.5,H*0.5-sh*0.5,sw,sh);

            var mission = ["Cosmic Coins","Prana Gems","Ascension Spheres"];
            text(ctx,"Looking for "+mission[mdata.city.adventure.kind],W*0.5,H*0.5-sh*0.35,"56px"+FONT,"black","center","middle");
            text(ctx,"Time Left: "+timer((mdata.city.adventure.time-Date.now())/1000),W*0.5,H*0.5,"60px"+FONT,"black","center","middle");

        } else if (mdata!==undefined && mdata.city!==undefined && mdata.city.adventure!==undefined && mdata.city.adventure.time !== undefined && (mdata.city.adventure.time-Date.now())<0 && adventure.next == true) {
            if (updateCurrStamp===undefined || Date.now() >= updateCurrStamp+60000) {
                this.fsync();
                updateCurrStamp = Date.now();
            }

            var sw = W*0.5;
            var sh = H*0.3;
            ctx.fillStyle="rgb(0,0,0)";
            ctx.fillRect(W*0.5-sw*0.5-2,H*0.5-sh*0.5-2,sw+4,sh+4);
            ctx.fillStyle="rgb(230,190,92)";
            ctx.fillRect(W*0.5-sw*0.5,H*0.5-sh*0.5,sw,sh);

            var mission = ["Cosmic Coins","Prana Gems","Ascension Spheres"];
            if (mdata.city.adventure.prize == -1) text(ctx,"You have not found anything.",W*0.5,H*0.5,"50px"+FONT,"black","center","middle");
            else text(ctx,"You have found "+mdata.city.adventure.prize+" "+mission[mdata.city.adventure.kind],W*0.5,H*0.5,"50px"+FONT,"black","center","middle");

            var frect = (new Rect(W*0.50-T.width("091m")*0.5,H*0.825-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
            if (frect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0eni",W*0.50-T.width("0eni")*0.5,H*0.825-T.height("0eni")*0.5);
                this.addZone("cadventure",frect,"cadventure");            
            } T.draw(ctx,"091m",W*0.50-T.width("091m")*0.5,H*0.825-T.height("091m")*0.5);
            text(ctx,"CONTINUE",W*0.50,H*0.825,"40px "+FONT,"white","center","middle");
        } else {
            var btw = W*0.2;
            var bth = H*0.125;
            var kadvs = [{title:"Cosmic Coins",time:"04:30:00h",icon:"0ap1"},{title:"Prana Gems",time:"07:50:00h",icon:"0j14"},{title:"Ascension Spheres",time:"11:30:00h",icon:"08y7"}];
            for (var i = 0; i < 3; ++i) {
                var brect = (new Rect(W*0.25-btw*0.5+W*0.25*i-2,H*0.35-bth*0.5-2,btw+4,bth+4)).small();
                if (adventure.kind == i) {
                    ctx.fillStyle="rgb(255,255,255)";
                    ctx.fillRect(W*0.25-btw*0.5+W*0.25*i-3,H*0.35-bth*0.5-3,btw+6,bth+6); 
                }
                ctx.fillStyle="rgb(0,0,0)";
                ctx.fillRect(W*0.25-btw*0.5+W*0.25*i-2,H*0.35-bth*0.5-2,btw+4,bth+4);
                ctx.fillStyle="rgb(253,201,93)";
                ctx.fillRect(W*0.25-btw*0.5+W*0.25*i,H*0.35-bth*0.5,btw,bth);
    
                if (brect.isInside(GM.x,GM.y)) {
                    ctx.fillStyle="rgba(0,0,0,0.2)";
                    ctx.fillRect(W*0.25-btw*0.5+W*0.25*i,H*0.35-bth*0.5,btw,bth);
                    this.addZone("chooseadv",brect,"chooseadv",{target:i});
                }
                text(ctx,kadvs[i].title,W*0.25+W*0.25*i,H*0.35-bth*0.3,"40px"+FONT,"black","center","middle");
                text(ctx,"Duration: "+kadvs[i].time,W*0.25+W*0.25*i-btw*0.45,H*0.35+20,"30px"+FONT,"black","left","middle");
                if (kadvs[i].icon == "08y7") T.draw(ctx,kadvs[i].icon,W*0.25+W*0.25*i+btw*0.35-T.width(kadvs[i].icon)*0.75*0.5,H*0.35-T.height(kadvs[i].icon)*0.75*0.5+15,T.width(kadvs[i].icon)*0.75,T.height(kadvs[i].icon)*0.75);
                else T.draw(ctx,kadvs[i].icon,W*0.25+W*0.25*i+btw*0.35-T.width(kadvs[i].icon)*0.5,H*0.35-T.height(kadvs[i].icon)*0.5+15);
            }
    
            var sw = W*0.5;
            var sh = H*0.2;
            ctx.fillStyle="rgb(0,0,0)";
            ctx.fillRect(W*0.5-sw*0.5-2,H*0.6-sh*0.5-2,sw+4,sh+4);
            ctx.fillStyle="rgb(230,190,92)";
            ctx.fillRect(W*0.5-sw*0.5,H*0.6-sh*0.5,sw,sh);
            text(ctx,"Adventure Success Rate",W*0.5,H*0.6-sh*0.3,"56px"+FONT,"black","center","middle");
            document.getElementById("slidecontainer").style.display="block";
            text(ctx,document.getElementById("adventureRange").value+"%",W*0.5,H*0.66,"50px"+FONT,"black","center","middle");
            if (adventure.kind !== undefined) {
                text(ctx,"Use your "+kadvs[adventure.kind].title+" to improve your success rate. Each 1% costs 1 currency unit.",W*0.5,H*0.74,"30px"+FONT,"black","center","middle");
            }
            
            var frect = (new Rect(W*0.50-T.width("091m")*0.5,H*0.825-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
            if (frect.isInside(GM.x,GM.y) && !adventureSync) {
                T.draw(ctx,"0eni",W*0.50-T.width("0eni")*0.5,H*0.825-T.height("0eni")*0.5);
                this.addZone("adventure",frect,"adventure",{target: adventure.kind, percentage: document.getElementById("adventureRange").value});            
            } T.draw(ctx,"091m",W*0.50-T.width("091m")*0.5,H*0.825-T.height("091m")*0.5);
            text(ctx,"START ADVENTURE!",W*0.50,H*0.825,"40px "+FONT,"white","center","middle");
        }

        var trect = (new Rect(W*0.5-bgw*0.45-T.width("0nww")*0.5,H*0.5-bgh*0.425-T.height("0nww")*0.5,T.width("0nww"),T.height("0nww"))).small();
        if (trect.isInside(GM.x,GM.y)) {
            document.getElementById("slidecontainer").style.display="none";
            ctx.fillStyle="rgba(0,0,0,0.9)";
            ctx.fillRect(W*0.5-bgw*0.5+10,H*0.5-bgh*0.5+10,bgw-20,bgh-20);

            text(ctx,"Start a new adventure to find your selected currency.",W*0.5,H*0.25,"46px "+FONT,"white","center","middle");
            text(ctx,"As more valuable is the currency, you will need more time to complete the adventure.",W*0.5,H*0.25+40,"46px "+FONT,"white","center","middle");
            text(ctx,"You can use your own currency to increase your success chances.",W*0.5,H*0.25+80,"46px "+FONT,"white","center","middle");
            text(ctx,"(You will need at least 1 currency unit to start the adventure with 1% chances of success)",W*0.5,H*0.25+120,"46px "+FONT,"white","center","middle");
            text(ctx,"If you can complete the adventure, you will receive 100-200 of the selected currency.",W*0.5,H*0.25+200,"46px "+FONT,"white","center","middle");
            text(ctx,"If you fail, you will not receive anything.",W*0.5,H*0.25+240,"46px "+FONT,"white","center","middle");
        }

        T.draw(ctx,"0nww",W*0.5-bgw*0.45-T.width("0nww")*0.5,H*0.5-bgh*0.425-T.height("0nww")*0.5);

        // Close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.5+bgw*0.97*0.5-cw-2,H*0.5-bgh*0.97*0.5+8,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"7otr",W*0.5+bgw*0.97*0.5-cw-2+2,H*0.5-bgh*0.97*0.5+8+2,cw-4,ch-4);
            this.addZone("cladv",crect,"cladv",{target:false});
        }
        else T.draw(ctx,"7otr",W*0.97*0.5+bgw*0.5-cw-2,H*0.5-bgh*0.97*0.5+8,cw,ch);
    }
    this.drawCQDC = function (ctx) {
    	var bw=W*0.6;
        var bh=H*0.6;
        roundedRect(ctx,W*0.5-(bw*0.5)-2,H*0.5-(bh*0.5)-2,bw+4,bh+4,5,"rgb(255,255,255)");

        ctx.save();
        ctx.beginPath();
        ctx.rect(W*0.5-(bw*0.5),H*0.5-(bh*0.5),bw,bh);
        ctx.closePath();
        ctx.clip();
        T.draw(ctx,"0k2u",W*0.5-(bw*0.5),H*0.5-(bh*0.5),W*0.929,bh);
        ctx.restore();
        
        // Close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.81-cw*1.2,H*0.195,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"7otr",W*0.81-cw*1.2+2,H*0.195+2,cw-4,ch-4);
            this.addZone("cqdc_close",crect,"cqdc",{target:false});
        }
        else T.draw(ctx,"7otr",W*0.81-cw*1.2,H*0.195,cw,ch);

        text(ctx,"CosmosQuest Info",W*0.5,H*0.25,"60px"+FONT,"white","center","middle");

        text(ctx,"The company that made this game, Gaiabyte, no longer exists. However",W*0.5-bw*0.5+20,H*0.3,"36px"+FONT,"white","left","middle");
        text(ctx,"there's a team of community members who are maintaining the game.",W*0.5-bw*0.5+20,H*0.3+20,"36px"+FONT,"white","left","middle");
        text(ctx,"We are open for suggestions and thankful for any potential support.",W*0.5-bw*0.5+20,H*0.3+40,"36px"+FONT,"white","left","middle");
        text(ctx,"As Kongregate has closed the forums, discussions happen on Discord",W*0.5-bw*0.5+20,H*0.3+80,"36px"+FONT,"white","left","middle");
        text(ctx,"now: if you're interested in Announcements, Patch Notes or want to report",W*0.5-bw*0.5+20,H*0.3+100,"36px"+FONT,"white","left","middle");
        text(ctx,"a bug it's best to head there.",W*0.5-bw*0.5+20,H*0.3+120,"36px"+FONT,"white","left","middle");
        text(ctx,"If you want to join the Dev team, reach out to Matthy (there or in chat).",W*0.5-bw*0.5+20,H*0.3+140,"36px"+FONT,"white","left","middle");
        text(ctx,"",W*0.5-bw*0.5+20,H*0.3+160,"36px"+FONT,"white","left","middle");
        
        //Discord link
        var grect=(new Rect(W*0.5-T.width("091m")/2,H*0.65-T.height("091m")/2,T.width("091m"),T.height("091m"))).small();
        if (grect.isInside(GM.x,GM.y)){
            T.draw(ctx,"0eni",W*0.5-T.width("091m")/2,H*0.65-T.height("091m")/2);
            this.addZone("cqlink_0",grect,"cqlink");
        } else T.draw(ctx,"091m",W*0.5-T.width("091m")/2,H*0.65-T.height("091m")/2);
        text(ctx,"VISIT OUR DISCORD",W*0.5,H*0.65,"36px"+FONT,"white","center","middle");
        
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        var events=["Lucky Followers","Cosmic Catcher","Match Pairs","Adventure","Lottery","Flash Tournaments","Extra AS","CQ Dungeon","Key Tower"];
        text(ctx,"Tomorrows event: " + events[(tid+1)%9],W*0.5,H*0.3+290,"32px"+FONT,"gold","center","middle");
    }
    this.drawSeasonShop = function (ctx) {
        var shopData=getStarDustData();
        ctx.fillStyle="rgba(47,47,47,0.25)";
        ctx.fillRect(0,0,W,H);
        var bgw=800;
        var bgh=630;
        roundedRect(ctx,W*0.5-(bgw/2),H*0.5-(bgh/2),bgw,bgh,15,"rgba(20,106,200,1)");
        roundedRect(ctx,W*0.5-(bgw/2)+2,H*0.5-(bgh/2)+2,bgw-4,bgh-4,15,"rgba(33,33,33,1)");

        // Currencies
        roundedRect(ctx,W*0.5-(bgw/2)+200-2,-5+H*0.5-(bgh/2)+15-2,bgw-400+4,H*0.075+4,5,"rgba(20,106,200,1)");
        roundedRect(ctx,W*0.5-(bgw/2)+200,-5+H*0.5-(bgh/2)+15,bgw-400,H*0.075,5,"rgba(50,50,50,0.80)");
        T.draw(ctx,"k2mi",W*0.35-T.width("k2mi")*0.5,-3+H*0.5-(bgh/2)+15);
        T.draw(ctx,"k2mi",W*0.65-T.width("k2mi")*0.5,-3+H*0.5-(bgh/2)+15);
        text(ctx,bint(SD,data.bintmode),W*0.5,-5+H*0.5-(bgh/2)+15+H*0.075*0.5,"90px"+FONT,"rgb(151,246,255)","center","middle");

        // Zones
        //var titles = ["4nak","il1i","n6uk","bqt5","veex","qarp"];
        var titles = ["PRANA GEMS","COSMIC COINS","ASCENSION SPHERES","KEYS","HERO KEYS","ENHANCE MIRACLES"];
        var num=0;
        var initx=W*0.25;
        for (var i=0;i<2;++i) {
            for (var j=0;j<3;++j) {
                if (num<shopData.length) {
                    T.draw(ctx,"0bye",initx-T.width("0bye")*0.5+(j*W*0.249),H*0.33-T.height("0bye")*0.5+(i*H*0.43));
                    T.draw(ctx,"wnmb",initx-T.width("0bye")*0.5+(j*W*0.249),H*0.33-T.height("0bye")*0.5+(i*H*0.43)-5);
                    //T.draw(ctx,titles[j+(3*i)],initx-T.width("0bye")*0.5+(j*W*0.249),H*0.33-T.height("0bye")*0.5+20+(i*H*0.43)-10);
                    text(ctx,titles[j+(3*i)],initx+(j*W*0.249),H*0.33-T.height("0bye")*0.5+60+(i*H*0.43)-10,"36px"+EFONT,"rgb(165,212,255)","center","top");
                }
                for (var k=0;k<3;++k) {
                    if (num<shopData.length) {
                        var btw=T.width("0eni");
                        var bth=T.height("0eni");

                        var sc=shopData[num].scale;
                        var x=0;
                        var y=0;
                        if (shopData[num].icon=="08y7") {
                            x=-15;
                            y=-2;
                        }
                        else if (shopData[num].icon=="n0bh") {
                            x=-17;
                            y=-10;
                        }
                        else if (shopData[num].icon=="00dh") {
                            x=-86;
                            y=-3;
                        }
                        else if (shopData[num].icon=="2dmk") {
                            x=-17;
                            y=-10;
                        }

                        var rect=(new Rect(initx-btw*0.85*0.5+(j*W*0.249),H*0.28-bth*0.85*0.5+(i*H*0.43)+10+(k*H*0.092),btw*0.85,bth*0.85)).small();
                        if (shopData[num].cost <= this.getSD()) {
                            if (rect.isInside(GM.x,GM.y)){
                                T.draw(ctx,"0eni",initx-btw*0.5+(j*W*0.249),H*0.28-bth*0.5+(i*H*0.43)+10+(k*H*0.092));
                                if (purchasing===undefined) this.addZone("buy_"+num,rect,"buy",{target:shopData[num].id});
                                else if (purchasing==shopData[num].id) this.spinner(ctx,initx+(j*W*0.249),H*0.28+(i*H*0.43)+10+(k*H*0.092),30);
                            }
                            else T.draw(ctx,"091m",initx-btw*0.5+(j*W*0.249),H*0.28-bth*0.5+(i*H*0.43)+10+(k*H*0.092));
                        }
                        else T.draw(ctx,"0dlk",initx-btw*0.5+(j*W*0.249),H*0.28-bth*0.5+(i*H*0.43)+10+(k*H*0.092));

                        
                        T.draw(ctx,shopData[num].icon,initx-btw*0.5+(j*initx)+20+x,H*0.28-bth*0.5+(i*H*0.43)+10+(k*H*0.092)+13+y,T.width(shopData[num].icon)*sc,T.height(shopData[num].icon)*sc);
                        
                        if (shopData[num].qty=="gnx2" && shopData[num].icon=="00dh") {
                            ctx.save();
                            ctx.beginPath();
                            ctx.rect(initx-btw*0.5+(j*initx)+55,H*0.28-bth*0.5+(i*H*0.43)+10+(k*H*0.092)+16,32,50);
                            ctx.closePath();
                            ctx.clip();
                            T.draw(ctx,shopData[num].qty,initx-btw*0.5+(j*initx)+55,H*0.28-bth*0.5+(i*H*0.43)+10+(k*H*0.092)+16);
                            ctx.restore();
                        } else T.draw(ctx,shopData[num].qty,initx-btw*0.5+(j*initx)+55,H*0.28-bth*0.5+(i*H*0.43)+10+(k*H*0.092)+16);
                        T.draw(ctx,"k2mi",initx+btw*0.5+(j*initx)-T.width("k2mi")*1.22-3,H*0.28-bth*0.5+(i*H*0.43)+10+(k*H*0.092)+9+2);
                        text(ctx,bint(shopData[num].cost,data.bintmode),initx+btw*0.5+(j*initx)-T.width("k2mi")*1.1,H*0.28+(i*H*0.43)+10+(k*H*0.092)+9,"36px"+FONT,"rgb(255,255,255)","right","middle");
                    }
                    ++num;
                }
            }
        }
        
        // close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.5+bgw/2-cw*1.2+6-5,H*0.5-bgh/2+ch*0.13-6+5,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2+6-5,H*0.5-bgh/2+ch*0.13-6+5);
            this.addZone("tgss",crect,"tgss",{target:false});
        }
        else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2+6-5,H*0.5-bgh/2+ch*0.13-6+5);
    }

    this.drawSeasonPass = function (ctx) {
        if (mdata!==undefined&&mdata.city!==undefined&&mdata.city.pass!==undefined) {
            var joined=mdata.city.pass.enabled; // Array
            var hid=102;
            var passData=getSeasonPassData();
            ctx.fillStyle="rgba(47,47,47,0.25)";
            ctx.fillRect(0,0,W,H);
            var bgw=320;
            var bgh=500;
            T.draw(ctx, "04ey",0,0,W,H);

            //ctx.fillStyle="rgba(141,215,246,1)";
            //ctx.fillRect(6,30,W-12,H-60);

            text(ctx,"CQ SEASON PASS",W*0.5,H*0.1,"70px"+FONT,"rgb(151,246,255)","center","middle");

            // close
            var cw = T.width("0evr");
            var ch = T.height("0evr");
            var crect = (new Rect(W-cw*1.2-15,H*0.03+ch*0.13+15,cw,ch)).small();
            if (crect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0o6b",W-cw*1.2-15,H*0.03+ch*0.13+15);
                this.addZone("tgsp",crect,"tgsp",{target:false});
            }
            else T.draw(ctx,"0evr",W-cw*1.2-15,H*0.03+ch*0.13+15);
            
            var title= ["BRONZE PASS", "SILVER PASS", "GOLD PASS"];
            var spe = [true,mdata.city.pass.isSilver,mdata.city.pass.isGold];
            var claims = [mdata.city.pass.claim,mdata.city.pass.sclaim,mdata.city.pass.gclaim];
            for (var i=0; i<3; ++i) {
                roundedRect(ctx,W*0.17+(i*W*0.33)-(bgw/2)-1,H*0.55-(bgh/2)-1,bgw+2,bgh+2,15,"rgba(255,255,255,1)");
                roundedRect(ctx,W*0.17+(i*W*0.33)-(bgw/2),H*0.55-(bgh/2),bgw,bgh,15,"rgba(41,114,152,1)");
                roundedRect(ctx,W*0.17+(i*W*0.33)-(bgw/2)+10-1,H*0.55-(bgh/2)+10-1,bgw-20+2,bgh-20+2,15,"rgba(1,1,1,1)");
                roundedRect(ctx,W*0.17+(i*W*0.33)-(bgw/2)+10,H*0.55-(bgh/2)+10,bgw-20,bgh-20,15,"rgba(37,78,133,1)");

                text(ctx,title[i],W*0.17+(i*W*0.33),H*0.23,"60px"+FONT,"rgb(151,246,255)","center","middle");
                if (i==2) {
                    text(ctx,"Bonus: 650x",W*0.17+(i*W*0.33),H*0.23+30,"30px"+FONT,"white","center","middle");
                    T.draw(ctx,"joy2",W*0.17+(i*W*0.33)+36,H*0.23-T.height("joy2")*0.5+30,T.width("joy2"),T.height("joy2"));
                }

                /*if (spe[i]==0) {
                    var fSize = "27px";
                    roundedRect(ctx,W*0.17+(i*W*0.33)-(bgw/2)-1,H*0.55-(bgh/2)-1,bgw+2,bgh+2,15,"rgba(15,15,15,0.6)");
                    text(ctx,"With the Season Pass, a lot of new challenges",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+140,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                    text(ctx,"will be add into your Daily Game.",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+170,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                    text(ctx,"The goal, is to complete differents challenges",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+200,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                    text(ctx,"with the objective of unlock awesome rewards.",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+230,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                    text(ctx,"When you will complete all the challenges,",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+260,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                    text(ctx,"you will be rewarded with an Ascended Hero.",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+290,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                    text(ctx,"By completing the different challenges, you will",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+320,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                    text(ctx,"receive: AS, Keys, Followers, PG, SD, CC, UM and Heroes.",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+350,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                    text(ctx,"*This Pass expires when the Season ends",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+400,fSize+FONT,"rgba(255,255,255,1)","center","middle");

                    var bprect=(new Rect(W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"))).small();
                    if (bprect.isInside(GM.x,GM.y)) {
                        T.draw(ctx,"0eni",W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"));
                        //this.addZone("buypass",bprect,"shop",{target:23});
                    } else {
                        T.draw(ctx,"091m",W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"));
                    }

                    if (i==0) {
                        text(ctx,"FREE",W*0.17+(i*W*0.33),H*0.86+3,"70px"+FONT,"rgba(255,255,255,1)","center","middle");
                    } else if (i==1) {
                        T.draw(ctx,"0nfd",W*0.17+(i*W*0.33)-T.width("0eni")*0.5+60,H*0.86-T.height("0eni")*0.5+15,T.width("0nfd")*1.7,T.height("0nfd")*1.7);
                        T.draw(ctx,"0mcj",W*0.17+(i*W*0.33)-T.width("0eni")*0.5+125,H*0.86-T.height("0eni")*0.5,T.width("0mcj")*0.7,T.height("0mcj")*0.7);
                    } else {
                        T.draw(ctx,"4xjo",W*0.17+(i*W*0.33)-T.width("0eni")*0.5+60,H*0.86-T.height("0eni")*0.5+8);
                        T.draw(ctx,"0c7v",W*0.17+(i*W*0.33)-T.width("0eni")*0.5+120,H*0.86-T.height("0eni")*0.5+12);
                    }
                    
                } else {*/
                    if (spe[i]) {
                        var hbase = 110;
                        var claimed = 0;
                        for (var j=0;j<passData[i].length;++j) {
                            text(ctx,passData[i][j].text,W*0.17+(i*W*0.33)-bgw/2+20,H*0.5-(bgh/2)+hbase+(j*45),"26px"+FONT,"rgba(255,255,255,1)","left","middle");
                            if (mdata.city.pass[passData[i][j].key]!==-1)text(ctx,"-> "+mdata.city.pass[passData[i][j].key]+"/"+(passData[i][j].obj),W*0.17+(i*W*0.33)-bgw/2+20,H*0.5-(bgh/2)+hbase+(j*45)+16,"20px"+FONT,"rgba(255,255,255,1)","left","middle");

                            var crect=(new Rect(W*0.17+(i*W*0.33)+bgw/2-20-W*0.1,H*0.5-(bgh/2)+hbase+(j*45)-H*0.05*0.5+7,W*0.1,H*0.05)).small();
                            roundedRect(ctx,W*0.17+(i*W*0.33)+bgw/2-20-W*0.1-1,H*0.5-(bgh/2)+hbase+(j*45)-H*0.05*0.5+7-1,W*0.1+2,H*0.05+2,5,"rgba(255,255,255,1)"); 
                            
                            if ((claims[i]&(1<<j))>0) {
                                ++claimed;
                                roundedRect(ctx,W*0.17+(i*W*0.33)+bgw/2-20-W*0.1,H*0.5-(bgh/2)+hbase+(j*45)-H*0.05*0.5+7,W*0.1,H*0.05,5,"rgba(0,0,205,1)");
                                text(ctx,"CLAIMED",W*0.17+(i*W*0.33)+bgw/2-20-W*0.1+W*0.05,H*0.5-(bgh/2)+hbase+(j*45)+7,"36px"+FONT,"rgb(255,255,255)","center","middle");
                            }
                            else if (mdata.city.pass[passData[i][j].key]<(passData[i][j].obj)) {
                                roundedRect(ctx,W*0.17+(i*W*0.33)+bgw/2-20-W*0.1,H*0.5-(bgh/2)+hbase+(j*45)-H*0.05*0.5+7,W*0.1,H*0.05,5,"rgba(169,169,169,1)");
                                text(ctx,"REWARD: "+passData[i][j].ramount.toLocaleString()+" "+passData[i][j].rcurr,W*0.17+(i*W*0.33)+bgw/2-20-W*0.1+W*0.05,H*0.5-(bgh/2)+hbase+(j*45)+7,"18px"+FONT,"rgb(100,100,100)","center","middle");
                            }
                            else {
                                roundedRect(ctx,W*0.17+(i*W*0.33)+bgw/2-20-W*0.1,H*0.5-(bgh/2)+hbase+(j*45)-H*0.05*0.5+7,W*0.1,H*0.05,5,"rgba(50,90,220,1)");
                                text(ctx,"CLAIM",W*0.17+(i*W*0.33)+bgw/2-20-W*0.1+W*0.05,H*0.5-(bgh/2)+hbase+(j*45)+1,"30px"+FONT,"rgb(151,246,255)","center","middle");
                                text(ctx,passData[i][j].ramount.toLocaleString()+" "+passData[i][j].rcurr,W*0.17+(i*W*0.33)+bgw/2-20-W*0.1+W*0.05,H*0.5-(bgh/2)+hbase+(j*45)+15,"24px"+FONT,"rgb(151,246,255)","center","middle");
                                if (crect.isInside(GM.x,GM.y) && mdata.city.pass[passData[i][j].key]>=(passData[i][j].obj)) {
                                    roundedRect(ctx,W*0.17+(i*W*0.33)+bgw/2-20-W*0.1,H*0.5-(bgh/2)+hbase+(j*45)-H*0.05*0.5+7,W*0.1,H*0.05,5,"rgba(255,255,255,0.5)");
                                    this.addZone("claim_"+i+j,crect,"claimsp",{target:i,extra:j});
                                }
                            }
                            if (i==1) this.drawMonster(ctx,-215,W*0.17+(i*W*0.33),H*0.91,undefined,undefined,1);
                            else if (i==2) {
                                /*T.draw(ctx,"0luu",W*0.17+(i*W*0.33)-T.width("0luu")/2,H*0.91-T.height("0luu"),T.width("0luu"),T.height("0luu"))
                                text(ctx,"?",W*0.17+(i*W*0.33),H*0.91-T.height("0luu")/2,"150px "+FONT,"rgba(255,255,255,1)","center","middle",3,"black");
                                text(ctx,"???",W*0.17+(i*W*0.33)-18,H*0.91-9,Math.floor(20)+"px"+FONT,"white","center","middle");
                                text(ctx,"???",W*0.17+(i*W*0.33)+18,H*0.91-9,Math.floor(20)+"px"+FONT,"white","center","middle");*/
                            
                                this.drawMonster(ctx,-235,W*0.17+(i*W*0.33),H*0.91,undefined,undefined,1);
                            }
                            
                        }
                    } else if (!spe[i]) {
                        if (i==1) {
                            var fSize = "27px";
                            roundedRect(ctx,W*0.17+(i*W*0.33)-(bgw/2)-1,H*0.55-(bgh/2)-1,bgw+2,bgh+2,15,"rgba(15,15,15,0.6)");
                            text(ctx,"Upon purchase you'll receive Hetfield",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+110,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            text(ctx,"By completing various tasks you will receive",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+140,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            text(ctx,"AS, Keys, Followers, PG, SD, CC & UM",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+170,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            text(ctx,"*This Pass expires when the Season ends",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+200,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            //text(ctx,"When you will complete all the challenges,",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+260,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            //text(ctx,"you will be rewarded with an Ascended Hero.",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+290,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            //text(ctx,"By completing the different challenges, you will",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+320,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                           // text(ctx,"receive: AS, Keys, Followers, PG, SD, CC, UM and Heroes.",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+350,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            //text(ctx,"*This Pass expires when the Season ends",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+400,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            this.drawMonster(ctx,-215,W*0.17+(i*W*0.33),H*0.8,undefined,undefined,2);
                            var bprect=(new Rect(W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"))).small();
                            if (bprect.isInside(GM.x,GM.y)) {
                                T.draw(ctx,"0eni",W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"));
                                this.addZone("buypass1",bprect,"buy",{target:"SP"});
                            } else {
                                T.draw(ctx,"091m",W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"));
                            }
                            T.draw(ctx,"0nfd",W*0.17+(i*W*0.33)-T.width("0eni")*0.5+60,H*0.86-T.height("0eni")*0.5+15,T.width("0nfd")*1.7,T.height("0nfd")*1.7);
                            T.draw(ctx,"0mcj",W*0.17+(i*W*0.33)-T.width("0eni")*0.5+125,H*0.86-T.height("0eni")*0.5,T.width("0mcj")*0.7,T.height("0mcj")*0.7);
                            
                        } else if (i==2) {
                            var fSize = "27px";
                            roundedRect(ctx,W*0.17+(i*W*0.33)-(bgw/2)-1,H*0.55-(bgh/2)-1,bgw+2,bgh+2,15,"rgba(15,15,15,0.6)");
                            text(ctx,"Upon purchase, you’ll receive: \"REAPER\"",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+110,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            text(ctx,"By completing various tasks you will receive",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+140,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            text(ctx,"AS, Keys, Followers, PG, SD, CC & UM",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+170,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            text(ctx,"*This Pass expires when the Season ends",W*0.17+(i*W*0.33),H*0.55-(bgh/2)+200,fSize+FONT,"rgba(255,255,255,1)","center","middle");
                            /*T.draw(ctx,"0luu",W*0.17+(i*W*0.33)-T.width("0luu"),H*0.8-T.height("0luu")*2,T.width("0luu")*2,T.height("0luu")*2)
                            text(ctx,"?",W*0.17+(i*W*0.33),H*0.8-T.height("0luu"),"300px "+FONT,"rgba(255,255,255,1)","center","middle",3,"black");
                            text(ctx,"???",W*0.17+(i*W*0.33)-18*2,H*0.8-9*2,Math.floor(20*2)+"px"+FONT,"white","center","middle");
                            text(ctx,"???",W*0.17+(i*W*0.33)+18*2,H*0.8-9*2,Math.floor(20*2)+"px"+FONT,"white","center","middle");*/
                            this.drawMonster(ctx,-235,W*0.17+(i*W*0.33),H*0.8,undefined,undefined,2);
                            var bprect=(new Rect(W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"))).small();
                            if (bprect.isInside(GM.x,GM.y)) {
                                T.draw(ctx,"0eni",W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"));
                                this.addZone("buypass2",bprect,"shop",{target:23});
                            } else {
                                T.draw(ctx,"091m",W*0.17+(i*W*0.33)-T.width("0eni")*0.5,H*0.86-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"));
                            }
                            T.draw(ctx,"4xjo",W*0.17+(i*W*0.33)-T.width("0eni")*0.5+60,H*0.86-T.height("0eni")*0.5+8);
                            T.draw(ctx,"0c7v",W*0.17+(i*W*0.33)-T.width("0eni")*0.5+120,H*0.86-T.height("0eni")*0.5+12);
                        }
                    }
                //}
            }
            /*roundedRect(ctx,W*0.5-(bgw/2)-1,H*0.5-(bgh/2)-1,bgw+2,bgh+2,15,"rgba(255,255,255,1)");
            roundedRect(ctx,W*0.5-(bgw/2),H*0.5-(bgh/2),bgw,bgh,15,"rgba(41,114,152,1)");
            roundedRect(ctx,W*0.5-(bgw/2)+20-1,H*0.5-(bgh/2)+20-1,bgw-40+2,bgh-40+2,15,"rgba(1,1,1,1)");
            roundedRect(ctx,W*0.5-(bgw/2)+20,H*0.5-(bgh/2)+20,bgw-40,bgh-40,15,"rgba(37,78,133,1)");

            text(ctx,"CQ SEASON PASS",W*0.5,H*0.5-(bgh/2)+45,"70px"+FONT,"rgb(151,246,255)","center","middle");

            if (joined==0) {
                roundedRect(ctx,W*0.5-(bgw/2)-1,H*0.5-(bgh/2)-1,bgw+2,bgh+2,15,"rgba(15,15,15,0.6)");
                text(ctx,"With the Season Pass, a lot of new challenges",W*0.5,H*0.5-(bgh/2)+140,"40px"+FONT,"rgba(255,255,255,1)","center","middle");
                text(ctx,"will be add into your Daily Game.",W*0.5,H*0.5-(bgh/2)+170,"40px"+FONT,"rgba(255,255,255,1)","center","middle");
                text(ctx,"The goal, is to complete differents challenges",W*0.5,H*0.5-(bgh/2)+200,"40px"+FONT,"rgba(255,255,255,1)","center","middle");
                text(ctx,"with the objective of unlock awesome rewards.",W*0.5,H*0.5-(bgh/2)+230,"40px"+FONT,"rgba(255,255,255,1)","center","middle");
                text(ctx,"When you will complete all the challenges,",W*0.5,H*0.5-(bgh/2)+260,"40px"+FONT,"rgba(255,255,255,1)","center","middle");
                text(ctx,"you will be rewarded with an Ascended Hero.",W*0.5,H*0.5-(bgh/2)+290,"40px"+FONT,"rgba(255,255,255,1)","center","middle");
                text(ctx,"By completing the different challenges, you will",W*0.5,H*0.5-(bgh/2)+320,"40px"+FONT,"rgba(255,255,255,1)","center","middle");
                text(ctx,"receive: 70 AS, 30 KEYS, 1KK FOL, 70 PG & 1KK SD.",W*0.5,H*0.5-(bgh/2)+350,"40px"+FONT,"rgba(255,255,255,1)","center","middle");
                text(ctx,"*This Pass expires when the Season ends",W*0.5,H*0.5-(bgh/2)+400,"40px"+FONT,"rgba(255,255,255,1)","center","middle");

                var bprect=(new Rect(W*0.5-T.width("0eni")*0.5,H*0.8-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"))).small();
                if (bprect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"0eni",W*0.5-T.width("0eni")*0.5,H*0.8-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"));
                    this.addZone("buypass",bprect,"shop",{target:23});
                } else {
                    T.draw(ctx,"091m",W*0.5-T.width("0eni")*0.5,H*0.8-T.height("0eni")*0.5,T.width("0eni"),T.height("0eni"));
                }
                T.draw(ctx,"4xjo",W*0.5-T.width("0eni")*0.5+60,H*0.8-T.height("0eni")*0.5+8);
                T.draw(ctx,"0c7v",W*0.5-T.width("0eni")*0.5+120,H*0.8-T.height("0eni")*0.5+12);
                

            }
            else {
                var hbase = 150;
                var claimed = 0;
                for (var i=0;i<passData.length;++i) {
                    text(ctx,passData[i].text,W*0.5-bgw/2+35,H*0.5-(bgh/2)+hbase+(i*45),"36px"+FONT,"rgba(255,255,255,1)","left","middle");
                    if (structure[i]!==-1)text(ctx,"-> "+structure[i]+"/"+passData[i].obj,W*0.5-bgw/2+35,H*0.5-(bgh/2)+hbase+(i*45)+16,"24px"+FONT,"rgba(255,255,255,1)","left","middle");

                    var crect=(new Rect(W*0.5+bgw/2-35-W*0.1,H*0.5-(bgh/2)+hbase+(i*45)-H*0.05*0.5+7,W*0.1,H*0.05)).small();
                    roundedRect(ctx,W*0.5+bgw/2-35-W*0.1-1,H*0.5-(bgh/2)+hbase+(i*45)-H*0.05*0.5+7-1,W*0.1+2,H*0.05+2,5,"rgba(255,255,255,1)"); 
                    
                    if ((mdata.city.pass.claim&(1<<i))) {
                        ++claimed;
                        roundedRect(ctx,W*0.5+bgw/2-35-W*0.1,H*0.5-(bgh/2)+hbase+(i*45)-H*0.05*0.5+7,W*0.1,H*0.05,5,"rgba(0,0,205,1)");
                        text(ctx,"CLAIMED",W*0.5+bgw/2-35-W*0.1+W*0.05,H*0.5-(bgh/2)+hbase+(i*45)+7,"36px"+FONT,"rgb(255,255,255)","center","middle");
                    }
                    else if (structure[i]<passData[i].obj) {
                        roundedRect(ctx,W*0.5+bgw/2-35-W*0.1,H*0.5-(bgh/2)+hbase+(i*45)-H*0.05*0.5+7,W*0.1,H*0.05,5,"rgba(169,169,169,1)");
                        text(ctx,"REWARD: "+passData[i].ramount+" "+passData[i].rcurr,W*0.5+bgw/2-35-W*0.1+W*0.05,H*0.5-(bgh/2)+hbase+(i*45)+7,"18px"+FONT,"rgb(100,100,100)","center","middle");
                    }
                    else {
                        roundedRect(ctx,W*0.5+bgw/2-35-W*0.1,H*0.5-(bgh/2)+hbase+(i*45)-H*0.05*0.5+7,W*0.1,H*0.05,5,"rgba(50,90,220,1)");
                        text(ctx,"CLAIM",W*0.5+bgw/2-35-W*0.1+W*0.05,H*0.5-(bgh/2)+hbase+(i*45)+1,"30px"+FONT,"rgb(151,246,255)","center","middle");
                        text(ctx,passData[i].ramount+" "+passData[i].rcurr,W*0.5+bgw/2-35-W*0.1+W*0.05,H*0.5-(bgh/2)+hbase+(i*45)+15,"24px"+FONT,"rgb(151,246,255)","center","middle");
                    }

                    if (crect.isInside(GM.x,GM.y) && structure[i]>=passData[i].obj) {
                        roundedRect(ctx,W*0.5+bgw/2-35-W*0.1,H*0.5-(bgh/2)+hbase+(i*45)-H*0.05*0.5+7,W*0.1,H*0.05,5,"rgba(255,255,255,0.5)");
                        
                    }
                }
                text(ctx,"COMPLETE ALL TO UNLOCK THIS HERO",W*0.5,H*0.5-(bgh/2)+400,"40px"+FONT,"rgb(151,246,255)","center","middle");
                var hmany = claimed;
                for (var i=0;i<5;++i) if (structure[i]===-1) ++hmany;
                T.draw(ctx,"0gkd",W*0.5-T.width("0gkd")*1.5/2,H*0.5-(bgh/2)+420,T.width("0gkd")*1.5,T.height("0gkd")*1.5);
                this.drawMonster(ctx,-2-hid,W*0.5,H*0.5-(bgh/2)+550,undefined,false,1.3);
                if (hmany<5) {
                    ctx.fillStyle="rgba(15,15,15,0.6)";
                    ctx.fillRect(W*0.5-T.width("0gkd")*1.5/2,H*0.5-(bgh/2)+420,T.width("0gkd")*1.5,T.height("0gkd")*1.5);
                    text(ctx,hmany+"/5",W*0.5,H*0.5-(bgh/2)+420+T.height("0gkd")*1.5*0.5,"100px"+FONT,"rgba(255,255,255,1)","center","middle");
                }

                // UNLOCK HERO
                if (hmany===5 && mdata.city!==undefined && mdata.city.hero!==undefined && mdata.city.hero[hid]===0){
                    // Call server to unlock hero

                }
            }

            // close
            var cw = T.width("0evr");
            var ch = T.height("0evr");
            var crect = (new Rect(W*0.5+bgw/2-cw*1.2-15,H*0.5-bgh/2+ch*0.13+15,cw,ch)).small();
            if (crect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2-15,H*0.5-bgh/2+ch*0.13+15);
                this.addZone("tgsp",crect,"tgsp",{target:false});
            }
            else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2-15,H*0.5-bgh/2+ch*0.13+15);
            */
        }
    }

    this.drawPoll = function (ctx) {
        ctx.fillStyle="rgba(0,0,0,0.3)";
        ctx.fillRect(0,0,W,H);
        T.draw(ctx,"0ko4",W/2-T.width("0ko4")/2+T.width("0ko4")*0.1/2,H/2-T.height("0ko4")/2+T.height("0ko4")*0.1/2,T.width("0ko4")*0.9,T.height("0ko4")*0.9);
        // close
        var cw = T.width("0i5r");
        var ch = T.height("0i5r");
        var crect = (new Rect(W*0.06+10,H*0.073+5,cw*0.9,ch*0.8)).small();
        T.draw(ctx,"0i5r",W*0.06,H*0.073);
        if (crect.isInside(GM.x,GM.y)) {
            this.addZone("closepoll",crect,"pOpen",{target:false});
            ctx.fillStyle="rgba(255,255,255,0.2)";
            ctx.fillRect(W*0.06+10,H*0.073+5,cw*0.9,ch*0.8);
        } 

        T.draw(ctx,"0e5p",W/2-T.width("0e5p")/2,H*0.10);
        text(ctx,"Help us to improve",W*0.5,H*0.19,"36px"+FONT,"rgba(123,83,12,1)","center","middle");

        if (CQW!==undefined && CQW.poll!==undefined && CQW.poll.responses!==undefined && CQW.poll.voted!==undefined) {
            text(ctx,CQW.poll.question,W*0.5,H*0.28,"58px"+FONT,"black","center","middle");
            var total = 0;
            for (var i=0;i<CQW.poll.responses.length;++i) {
                total += CQW.poll.votes[i];
            }
            if (total<1) total=1;
            for (var i=0;i<CQW.poll.responses.length;++i) {
                if (CQW.poll.voted===false) {
                    T.draw(ctx,"0jir",W*0.1,H*0.38-T.height("0jir")/2+50*i);
                    text(ctx,CQW.poll.responses[i],W*0.15,H*0.38+50*i,"44px"+FONT,(pollVote&(1<<i))?"rgba(123,83,12,1)":"black","left","middle");
                    var arect = (new Rect(W*0.1,H*0.38-T.height("0jir")/2+50*i,W*0.05+mtext(ctx,CQW.poll.responses[i],W*0.15,H*0.38+50*i,"44px"+FONT,pollVote==i?"rgba(123,83,12,1)":"black","left","middle"),T.height("0jir"))).small();
                    if (arect.isInside(GM.x,GM.y) && (pollVote&(1<<i))==0) {
                        T.draw(ctx,"0lbg",W*0.1,H*0.38-T.height("0jir")/2+50*i);
                    } else if (pollVote&(1<<i)) {
                        T.draw(ctx,"0lbg",W*0.1,H*0.38-T.height("0jir")/2+50*i);
                    }
                    this.addZone("poll_"+i,arect,"poll",{target:i});
                } else {
                    text(ctx,CQW.poll.responses[i],W*0.5,H*0.38+72*i-20,"40px"+FONT,(CQW.poll.voted&(1<<i))?"rgba(123,83,12,1)":"black","center","middle");
                    T.draw(ctx,"0c04",W*0.5-T.width("0c04")/2,H*0.38+72*i-15);
                    ctx.save();
                    ctx.beginPath();
                    ctx.rect(W*0.5-T.width("0c04")/2,H*0.38+72*i-15,T.width("03ho")*(CQW.poll.votes[i]/total),T.height("03ho"));
                    ctx.closePath();
                    ctx.clip();
                    T.draw(ctx,"03ho",W*0.5-T.width("0c04")/2,H*0.38+72*i-15);
                    ctx.restore();
                    T.draw(ctx,"0lk2",W*0.5-T.width("0c04")/2,H*0.38+72*i-15);
                    text(ctx,CQW.poll.votes[i]+" ("+(CQW.poll.votes[i]/total*100).toFixed(2)+"%)",W*0.5,H*0.38+72*i-15+T.height("0c04")/2,"38px"+FONT,"black","center","middle");
                }
            }
            if (CQW.poll.voted===false)  {
                if (voteSync) {
                    T.draw(ctx,"0di2",W*0.5-T.width("0di2")/2,H*0.8);
                    this.spinner(ctx,W*0.5,H*0.8+T.height("0di2")/2,30);
                } else {
                    var vrect = (new Rect(W*0.5-T.width("0di2")/2,H*0.8,T.width("0di2"),T.height("0di2"))).small();  
                    if (vrect.isInside(GM.x,GM.y) && pollVote!=-1) {
                        T.draw(ctx,"04oc",W*0.5-T.width("0di2")/2,H*0.8);
                        this.addZone("vote",vrect,"vote",{target:true});
                    } else T.draw(ctx,"0di2",W*0.5-T.width("0di2")/2,H*0.8);
                    T.draw(ctx,"0nvu",W*0.5-T.width("0di2")/2+12,H*0.8+12);
                    T.draw(ctx,"056j",W*0.5+T.width("0di2")/2-T.width("056j")*1.5,H*0.8-7);
                    T.draw(ctx,"0mcj",W*0.5+T.width("0di2")/2-T.width("0mcj")*0.67,H*0.8,T.width("0mcj")*0.75,T.height("0mcj")*0.75);
                }
            }
        }
    }

    this.drawHistory = function (ctx) {
        ctx.fillStyle="rgba(0,0,0,0.3)";
        ctx.fillRect(0,0,W,H);

        var bgw=W*0.6;
        var bgh=H*0.9;

        roundedRect(ctx,W*0.5-bgw*0.5-1,H*0.5-bgh*0.5-1,bgw+2,bgh+2,5,"black");
        roundedRect(ctx,W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh,5,"rgb(102,100,150)");

        ctx.fillStyle="black";
        ctx.fillRect(W*0.5-bgw*0.5*0.9-1,H*0.5-bgh*0.5*0.8+20-1,bgw*0.9+2,bgh*0.8+2);

        ctx.fillStyle="rgba(200,200,200,0.8)";
        ctx.fillRect(W*0.5-bgw*0.5*0.9,H*0.5-bgh*0.5*0.8+20,bgw*0.9,bgh*0.8);

        // close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
            this.addZone("history",crect,"history");
        }
        else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);

        text(ctx,"Server callbacks list",W*0.5,H*0.105,"80px"+FONT,"black","center","middle");
        
        var pages=Math.floor(mdata.log.length/13);
        var line=0;
        for (var i=(mdata.log.length-1)-hisPage*13;i>mdata.log.length-1-13-(hisPage*13);--i) {
            if (i>=0) {
                // Date
                var date = new Date(mdata.log[i].ts);
                var dd = date.getDate();
                var mm = date.getMonth()+1;
                var yyyy = date.getFullYear();
                var h = date.getHours();
                if (h<10) h="0"+h;
                var m = date.getMinutes();
                if (m<10) m="0"+m;
                var s = date.getSeconds();
                if (s<10) s="0"+s;

                text(ctx,"["+dd+"/"+mm+"/"+yyyy+"-"+h+":"+m+":"+s+"]",W*0.5-bgw*0.5*0.9+2,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");

                // Action
                var action=mdata.log[i].msg.substr(0,mdata.log[i].msg.indexOf(' '));
                if (action=="[CHEST]") {
                    var id = mdata.log[i].msg.substr(8,5);
                    if (id=="HERO:") {
                        id=mdata.log[i].msg.substr(13);
                        text(ctx,"Chest Opened -> "+HERO[id].name,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                    } else if (id=="HERO ") {
                        id = mdata.log[i].msg.substr(24);
                        text(ctx,"Chest Opened -> Already level 99, got "+id,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                    } else {
                        id=mdata.log[i].msg.substr(mdata.log[i].msg.length-1-2);
                        if (id=="UM") {
                            id = mdata.log[i].msg.substr(8);
                            text(ctx,"Chest Opened -> "+id,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        } else {
                            id = mdata.log[i].msg.substr(8);
                            text(ctx,"Chest Opened -> "+id,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        }
                    }  
                } else if (action=="[LUCKY") {
                    var val = mdata.log[i].msg.substr(22);
                    text(ctx,"Participated in daily event Lucky Followers, got "+val,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="[SEASONPASS]") {
                    var val = mdata.log[i].msg.substr(13);
                    text(ctx,"Just claimed a Season Pass rewards, got "+val,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="[COUPON]") {
                    var val = mdata.log[i].msg.substr(9);
                    text(ctx,"Just claimed a coupon. Coupon description: "+val,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="[HEROCHEST]") {
                    var hid = mdata.log[i].msg.substr(12,5);
                    if (hid=="HERO:") {
                        hid = mdata.log[i].msg.substr(17);
                        text(ctx,"Hero Chest Opened -> "+HERO[hid].name,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                    }
                    else {
                        hid = mdata.log[i].msg.substr(28);
                        text(ctx,"Hero Chest Opened -> Already level 99, got "+hid,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                    }
                } else if (action=="[ADVENTURE]") {
                    text(ctx,mdata.log[i].msg,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="[RECYCLE]") {
                    text(ctx,mdata.log[i].msg,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="[TICKETS]") {
                    text(ctx,mdata.log[i].msg,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="[SPACE]") {
                    text(ctx,mdata.log[i].msg,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="[G.A.M.E.S]") {
                    text(ctx,mdata.log[i].msg,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="Registered") {
                    text(ctx,mdata.log[i].msg,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="Fight") {
                    var found=undefined;
                    var pos=mdata.log[i].msg.length-8;
                    while(found==undefined) {
                        if (mdata.log[i].msg[pos]==" ") found=pos;
                        else --pos;
                    }
                    found = mdata.log[i].msg.length-found-1;
                    var l=found-7;
                    var val=mdata.log[i].msg.substr(mdata.log[i].msg.length-found,l);
                    text(ctx,"Succesfully attacked the World Boss. Damage done: "+val,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="Rewarded") {
                    var id=mdata.log[i].msg.substr(mdata.log[i].msg.length-2);
                    if (id=="SD") {
                        var val='';
                        var index=9;
                        var found=false;
                        while (!found && index<mdata.log[i].msg.length) {
                            if (mdata.log[i].msg[index] !== ' ') val=val+mdata.log[i].msg[index];
                            else found=true;
                            ++index;
                        }
                        text(ctx,"You received "+val+" SD",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        /*var size = mtext(ctx,"You received "+val+" SD",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        T.draw(ctx,"k2mi",W*0.5-bgw*0.5*0.9+120+size+2,H*0.23+line*H*0.05-T.height("k2mi")*0.45*0.5,T.width("k2mi")*0.45,T.height("k2mi")*0.45);*/
                    } else if (id=="UM") {
                        var val='';
                        var index=9;
                        var found=false;
                        while (!found && index<mdata.log[i].msg.length) {
                            if (mdata.log[i].msg[index] !== ' ') val=val+mdata.log[i].msg[index];
                            else found=true;
                            ++index;
                        }
                        text(ctx,"You received "+val+" UM",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        /*var size = mtext(ctx,"You received "+val+" UM",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        T.draw(ctx,"0dvo",W*0.5-bgw*0.5*0.9+120+size+2,H*0.23+line*H*0.05-T.height("0dvo")*0.45*0.5,T.width("0dvo")*0.45,T.height("0dvo")*0.45);*/
                    } else if (id=="PG") {
                        var val='';
                        var index=9;
                        var found=false;
                        while (!found && index<mdata.log[i].msg.length) {
                            if (mdata.log[i].msg[index] !== ' ') val=val+mdata.log[i].msg[index];
                            else found=true;
                            ++index;
                        }
                        text(ctx,"You received "+val+" PG",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        /*var size = mtext(ctx,"You received "+val+" PG",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        T.draw(ctx,"0j14",W*0.5-bgw*0.5*0.9+120+size+2,H*0.23+line*H*0.05-T.height("0j14")*0.45*0.5,T.width("0j14")*0.45,T.height("0j14")*0.45);*/
                    } else if (id=="PK") {
                        var val='';
                        var index=9;
                        var found=false;
                        while (!found && index<mdata.log[i].msg.length) {
                            if (mdata.log[i].msg[index] !== ' ') val=val+mdata.log[i].msg[index];
                            else found=true;
                            ++index;
                        }
                        text(ctx,"You received "+val+" Keys",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        /*var size = mtext(ctx,"You received "+val+" PG",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                        T.draw(ctx,"0j14",W*0.5-bgw*0.5*0.9+120+size+2,H*0.23+line*H*0.05-T.height("0j14")*0.45*0.5,T.width("0j14")*0.45,T.height("0j14")*0.45);*/
                    } else if (id=="el") {
                        var val='';
                        var index=14;
                        var found=false;
                        while (!found && index<mdata.log[i].msg.length) {
                            if (mdata.log[i].msg[index] !== ' ') val=val+mdata.log[i].msg[index];
                            else found=true;
                            ++index;
                        }
                        text(ctx,"You just won an auction for "+HERO[val].name,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                    } else if (id=="EM") {
                        var val='';
                        var index=9;
                        var found=false;
                        while (!found && index<mdata.log[i].msg.length) {
                            if (mdata.log[i].msg[index] !== ' ') val=val+mdata.log[i].msg[index];
                            else found=true;
                            ++index;
                        }
                        text(ctx,"You received "+val+" EM",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                    } else {
                        var val='';
                        var index=9;
                        var found=false;
                        while (!found && index<mdata.log[i].msg.length) {
                            if (mdata.log[i].msg[index] !== ' ') val=val+mdata.log[i].msg[index];
                            else found=true;
                            ++index;
                        }
                        var dmg='';
                        index=index+15;
                        found=false;
                        while (!found && index<mdata.log[i].msg.length) {
                            if (mdata.log[i].msg[index] !== ' ') dmg=dmg+mdata.log[i].msg[index];
                            else found=true;
                            ++index;
                        }
                        text(ctx,"World Boss is dead. You just receive "+val+" AS for dealing "+dmg+" damage",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                    }
                } else if (action=="Changed") {
                    if (mdata.log[i].msg=="Changed 1 AS to 1 PG") text(ctx,"Changed 1 AS to 1 PG",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                    else if (mdata.log[i].msg=="Changed 10 AS to 10 PG") text(ctx,"Changed 10 AS to 10 PG",W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="Bid") {
                    var val='';
                    var index=4;
                    var found=false;
                    while (!found) {
                        if (mdata.log[i].msg[index] !== ' ') val=val+mdata.log[i].msg[index];
                        else found=true;
                        ++index;
                    }
                    index = index + 7;
                    var hid = mdata.log[i].msg.substr(index);
                    text(ctx,"Bid "+val+" UM for "+HERO[hid].name,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="Halloween") {
                    text(ctx,mdata.log[i].msg,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                } else if (action=="Buy") {
                    text(ctx,mdata.log[i].msg,W*0.5-bgw*0.5*0.9+120,H*0.23+line*H*0.05,"24px"+FONT,"black","left","middle");
                }
                line++;
            }
        }
        text(ctx,(hisPage+1)+"/"+(pages+1),W*0.5+bgw*0.5-10,H*0.92,"24px"+FONT,"black","right","middle");

        // Arrows
        var nw=T.width("09sg");
        var nh=T.height("09sg");
        ctx.save();
        ctx.translate(W*0.5,H*0.5);
        ctx.rotate(-90*Math.PI/180);
        if (hisPage>0) {
            T.draw(ctx,"09sg",H*0.29,0-nw*0.5,nw*0.5,nh*0.5);
            this.addZone("hisPre",(new Rect(W*0.5-nw*0.5*0.5,H*0.18,nh*0.5,nw*0.5)).small(),"hisPages",{target:-1});
        }
        ctx.restore();
        ctx.save();
        ctx.translate(W*0.5,H*0.5);
        ctx.rotate(90*Math.PI/180);
        if (hisPage<pages) {
            T.draw(ctx,"09sg",H*0.29+nh*0.5,0-nw*0.5,nw*0.5,nh*0.5);
            this.addZone("hisPos",(new Rect(W*0.5-nw*0.5*0.5,H*0.85,nh*0.5,nw*0.5)).small(),"hisPages",{target:+1});
        }
        ctx.restore();
    }
    this.drawVip = function (ctx) {
        var bgw = T.width("0ko4")*0.8;
        var bgh = T.height("0ko4")*0.8;
        ctx.fillStyle="rgba(0,0,0,0.3)";
        ctx.fillRect(0,0,W,H);
        T.draw(ctx,"0ko4",W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);
        ctx.fillStyle="rgba(0,0,166,0.3)";
        ctx.fillRect(W*0.5-bgw*0.5+7,H*0.5-bgh*0.5+7,bgw-14,bgh-14);

        text(ctx,"User VIP Manager",W*0.5,H*0.15,"60px"+FONT,"rgb(255,215,0)","center","middle");
        
        var list = [
            {a: "Lucy Minions: ",b: mdata.tm},
            {a: "Silver Season Pass: ",b: mdata.city.pass.isSilver},
            {a: "Gold Season Pass: ",b: mdata.city.pass.isGold},
            {a: "Cosmic Coins Dispenser: ",b: mdata.city.easter.ccdispenser,d:true},
            {a: "Prana Gems Dispenser: ",b: mdata.city.easter.pgdispenser,d:true},
            {a: "Ascension Spheres Dispenser: ",b: mdata.city.easter.asdispenser,d:true},
            {a: "Universe Marbles Dispenser: ",b: mdata.city.easter.umdispenser,d:true},
            {a: "Chests Dispenser: ",b: mdata.city.easter.freesilver},
            {a: "Free Promotion 4: ",b: mdata.city.easter.freep4, c: (mdata.city.promotokens === undefined) ? undefined : mdata.city.promotokens.promo4},
            {a: "Instant Promotion 6: ", b: false, c: (mdata.city.promotokens === undefined) ? undefined : mdata.city.promotokens.promo6},
            {a: "EM Grants x4: ",b: mdata.city.easter.doubleem},
            {a: "Quest Solver: ",b: mdata.city.easter.questsolver},
            {a: "Daily Quest Solver: ",b: mdata.city.easter.dailysolver},
            {a: "Dungeons Solver: ",b: mdata.city.easter.dungeonsolver},
            {a: "World Boss Solver: ",b: mdata.city.easter.wbsolver},
            {a: "Flash Tournaments Solver: ",b: mdata.city.easter.flashsolver},
            {a: "Tournaments Solver: ",b: mdata.city.easter.tournamentsolver},
            {a: "WB Timer Reduction: ",b: mdata.city.easter.wbtimer,t: true},
        ];
        /*if (mdata.city.easter.claimed < easterMilestones.personal.length-1) list.push({a: "Easter Points: ",b: mdata.city.easter.points,p:true,h:easterMilestones.personal[mdata.city.easter.claimed+1].m+": "+easterMilestones.personal[mdata.city.easter.claimed+1].t});
        else list.push({a: "Easter Points: ",b: mdata.city.easter.points,p: true});*/
        roundedRect(ctx,W*0.5-W*0.7*0.5,H*0.25-H*0.10*0.5,W*0.7,H*0.10,5,"rgba(0,0,0,0.25)");
        text(ctx,"VIP Points -> "+mdata.city.easter.points,W*0.5,H*0.25,"80px"+FONT,"white","center","middle");
        ctx.save();
        ctx.globalAlpha=0.6;
        T.draw(ctx,"0nww",W*0.75-T.width("0nww")*0.75*0.5,H*0.25-T.height("0nww")*0.75*0.5-1,T.width("0nww")*0.75,T.height("0nww")*0.75);
        ctx.restore();
        var c = 0;
        for (var i = 0; i < 2; ++i) {
            for (var j = 0; j < 10; ++j) {
                if (c < list.length) {
                    var bw = W*0.3;
                    var bh = H*0.0475;
                    var b = "Inactive";
                    if (list[c].t !== undefined && list[c].t) {
                        b = (list[c].b <= 0 ? "Expired" : timer(list[c].b/1000) + " Hours");
                    } else if (list[c].p !== undefined && list[c].p) {
                        b = list[c].b;
                    } else {
                        if (list[c].b == 1 || list[c].b == true) b = "Active";
                        else if (list[c].b == 0 || list[c].b == false) {
                        	b = "Inactive";
                        	if (list[c].c > 0) {
                        		b = list[c].c + ((list[c].c == 1) ? " Token" : " Tokens");
                        	}
                        } else if (list[c].b == -1) b = "LifeTime";
                        else if (list[c].b > 1 && list[c].d == undefined) {
                            if ((list[c].b-Date.now())>86400000) b = Math.ceil((list[c].b-Date.now())/86400000)+" Days";
                            else b = ((list[c].b-Date.now()) <= 0 ? "Expired" : timer((list[c].b-Date.now())/1000));
                        }
                        else {
                            b = list[c].b+" days";
                        }
                    }
                    roundedRect(ctx,W*0.5-bgw*0.25-bw*0.5+(i*bgw*0.5),H*0.35-bh*0.5+(j*H*0.055),bw,bh,5,"rgba(255,255,255,0.4)");
                    text(ctx,list[c].a+b,W*0.5-bgw*0.25-bw*0.475+(i*bgw*0.5),H*0.35+(j*H*0.055),"32px"+FONT,"black","left","middle");

                    if (list[c].h !== undefined) {
                        var hrect = (new Rect(W*0.5-bgw*0.25-bw*0.5+(i*bgw*0.5),H*0.35-bh*0.5+(j*H*0.055),bw,bh)).small();
                        if (hrect.isInside(GM.x,GM.y)) {
                            roundedRect(ctx,W*0.5-bgw*0.25-bw*0.5+(i*bgw*0.5),H*0.35-bh*0.5+(j*H*0.055),bw,bh,5,"rgba(255,255,255,1)");
                            text(ctx,list[c].h,W*0.5-bgw*0.25-bw*0.475+(i*bgw*0.5),H*0.35+(j*H*0.055),"26px"+FONT,"black","left","middle");
                        }
                    }
                }
                ++c;
            }
        }

        var trect = (new Rect(W*0.5-bgw*0.45-T.width("0nww")*0.5,H*0.5-bgh*0.425-T.height("0nww")*0.5,T.width("0nww"),T.height("0nww"))).small();
        if (trect.isInside(GM.x,GM.y)) {
            ctx.fillStyle="rgba(0,0,0,0.9)";
            ctx.fillRect(W*0.5-bgw*0.5+10,H*0.5-bgh*0.5+10,bgw-20,bgh-20);

            text(ctx,"VIP Points can be earned through Tournaments and making Kred Purchases.",W*0.5,H*0.3,"40px "+FONT,"white","center","middle");
            text(ctx,"Daily Tournaments (T1) award 25 VIP Points and Flash Tournaments award 5 VIP points.",W*0.5,H*0.3+40,"40px "+FONT,"white","center","middle");
            text(ctx,"Kred purchases award 2.5 VIP points per Kred spent.",W*0.5,H*0.3+80,"40px "+FONT,"white","center","middle");
            text(ctx,"Sometimes VIP Points are awarded through events, Seasonal Rewards,",W*0.5,H*0.3+160,"40px "+FONT,"white","center","middle");
            text(ctx,"or an increased amount through limited offers.",W*0.5,H*0.3+200,"40px "+FONT,"white","center","middle");
        }
        T.draw(ctx,"0nww",W*0.5-bgw*0.45-T.width("0nww")*0.5,H*0.5-bgh*0.425-T.height("0nww")*0.5);

        var vrect = (new Rect(W*0.75-T.width("0nww")*0.75*0.5,H*0.25-T.height("0nww")*0.75*0.5-1,T.width("0nww")*0.75,T.height("0nww")*0.75)).small();
        if (vrect.isInside(GM.x,GM.y)) {
            ctx.fillStyle="rgba(0,0,0,0.9)";
            ctx.fillRect(W*0.5-bgw*0.5+10,H*0.5-bgh*0.5+10,bgw-20,bgh-20);

            text(ctx,"Current VIP points rewards list",W*0.5,H*0.15,"50px"+FONT,"white","center","middle");
            var rewards = easterMilestones.personal;
            var c = 0;
            for (var i = 0; i < 2; ++i) {
                for (var j = 0; j < 15; ++j) {
                    if (c < rewards.length) {
                        if (rewards[c].m < mdata.city.easter.points) text(ctx,String.fromCharCode("9745"),-30+W*0.5-bgw*0.25-bw*0.475+(i*bgw*0.5),H*0.225+(j*H*0.045),"32px"+FONT,"white","left","middle");
                        if (c==11) text(ctx,(c+1)+") "+"Cosmic Coins Dispenser"+" -> "+rewards[c].m+"p",W*0.5-bgw*0.25-bw*0.475+(i*bgw*0.5),H*0.225+(j*H*0.045),"26px"+FONT,"white","left","middle");
                        else if (c==14) text(ctx,(c+1)+") "+"Prana Gems Dispenser"+" -> "+rewards[c].m+"p",W*0.5-bgw*0.25-bw*0.475+(i*bgw*0.5),H*0.225+(j*H*0.045),"26px"+FONT,"white","left","middle");
                        else if (c==16) text(ctx,(c+1)+") "+"Universe Marbles Dispenser"+" -> "+rewards[c].m+"p",W*0.5-bgw*0.25-bw*0.475+(i*bgw*0.5),H*0.225+(j*H*0.045),"26px"+FONT,"white","left","middle");
                        else if (c==22) text(ctx,(c+1)+") "+"Ascension Spheres Dispenser"+" -> "+rewards[c].m+"p",W*0.5-bgw*0.25-bw*0.475+(i*bgw*0.5),H*0.225+(j*H*0.045),"26px"+FONT,"white","left","middle");
                        else text(ctx,(c+1)+") "+rewards[c].t+" -> "+rewards[c].m+"p",W*0.5-bgw*0.25-bw*0.475+(i*bgw*0.5),H*0.225+(j*H*0.045),"26px"+FONT,"white","left","middle");
                    }
                    ++c;
                }
            }
        }

        // Close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.92-cw*1.2-16,H*0.09+11,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"7otr",W*0.92-cw*1.2+2-16,H*0.09+2+11,cw-4,ch-4);
            this.addZone("closevip",crect,"vOpen",{target:false});
        }
        else T.draw(ctx,"7otr",W*0.92-cw*1.2-16,H*0.09+11,cw,ch);
    }
    this.drawEventTickets = function (ctx) {
        var bgw = T.width("0ko4")*0.8;
        var bgh = T.height("0ko4")*0.8;
        ctx.fillStyle="rgba(0,0,0,0.3)";
        ctx.fillRect(0,0,W,H);

        T.negative(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(0, 0, 0, 0.7)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);


        // Close
        var evtcloserect=(new Rect(W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75)).small(); 
        if (evtcloserect.isInside(GM.x,GM.y)) {
            T.negative(ctx,"dykv",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);
            this.addZone("closeevt",evtcloserect,"oetickets",{target:false});
        } else T.negative(ctx,"cjq4",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75); 
        
        text(ctx,"Event Tickets Machine",W*0.5,H*0.15,"60px"+FONT,"rgb(255,215,0)","center","middle");

        //Left Explanation Text
        roundedRect(ctx,W*0.5-bgw*0.475,H*0.5-bgh*0.8*0.5+15,bgw*0.45,bgh*0.8+15,5,"rgba(255,255,255,0.3)");
        text(ctx,"How it works?",W*0.5-bgw*0.475+bgw*0.45*0.5,H*0.5-bgh*0.8*0.5+15+30,"65px"+FONT,"rgb(0,0,0)","center","middle");
        etext(ctx,"When an event is active, you will be able  to exchange Event Tickets for Event Currency. (You can choose how many Event Tickets you want to exchange)./n/nExchanging Event Tickets to Event Currency consumes the Event Tickets in the process, and they do not return once the event has completed.",W*0.5-bgw*0.475+6,H*0.5-bgh*0.8*0.5+15+75,"40px"+FONT,"rgb(0,0,0)","left","middle",undefined,undefined,bgw*0.45-15);


        // Right Panel
        roundedRect(ctx,W*0.5+bgw*0.025,H*0.204,bgw*0.45,bgh*0.15,5,"rgba(255,255,255,0.3)");
        text(ctx,ET,W*0.5+bgw*0.025+bgw*0.45*0.5-25,H*0.204+bgh*0.15*0.5,"80px"+FONT,"rgb(0,0,0)","center","middle");
        T.draw(ctx,"joy2",W*0.5+bgw*0.025+bgw*0.45*0.5+25,H*0.204+bgh*0.15*0.5-T.height("joy2")*2*0.5-1,T.width("joy2")*2,T.height("joy2")*2)

        roundedRect(ctx,W*0.5+bgw*0.025,H*0.35,bgw*0.45,bgh*0.645,5,"rgba(255,255,255,0.3)");

        
        if (this.isEternal() || currentSpecialEvent() !== "No event") {
            var et = [0,0,0,0];
            var ex = [0,0,0,0];
            var eventName = "";
            var currencyName = "";
            if (currentSpecialEvent() == "Space Journey") {
                eventName = "Space Journey";
                et = [50,250,500,1000];
                ex = [1,5,10,20];
                currencyName = "Hyperloop"
            } else if (currentSpecialEvent() == "G.A.M.E.S") {
                eventName = "G.A.M.E.S";
                et = [50,250,500,1000];
                ex = [1,5,10,20];
                currencyName = "Instant Activity";
            }
            text(ctx,eventName,W*0.5+bgw*0.025+bgw*0.45*0.5,H*0.32+bgh*0.15*0.5,"50px"+FONT,"rgb(0,0,0)","center","middle");
            for (var i = 0; i < 4; ++i) {
                var chgET=(new Rect(W*0.5+bgw*0.025+10,H*0.42+i*H*0.11,bgw*0.45-20,bgh*0.12)).small(); 
                roundedRect(ctx,W*0.5+bgw*0.025+10,H*0.42+i*H*0.11,bgw*0.45-20,bgh*0.12,5,"rgba(0,0,0,0.3)");
                text(ctx,et[i],W*0.5+bgw*0.025+10+20,H*0.42+i*H*0.11+bgh*0.120*0.5,"45px"+FONT,"rgb(255,255,255)","left","middle");
                T.draw(ctx,"joy2",W*0.5+bgw*0.025+10+120-10-T.width("joy2"),H*0.42+i*H*0.11+bgh*0.12*0.5-T.height("joy2")*0.5,T.width("joy2"),T.height("joy2"))
                text(ctx," ---> "+ex[i]+" "+currencyName,W*0.5+bgw*0.025+10+120,H*0.42+i*H*0.11+bgh*0.12*0.5,"45px"+FONT,"rgb(255,255,255)","left","middle");
                if (chgET.isInside(GM.x,GM.y) && ET >= et[i] && !etsync) {
                    this.addZone("changeET"+i,chgET,"excet",{target:i});
                    roundedRect(ctx,W*0.5+bgw*0.025+10,H*0.42+i*H*0.11,bgw*0.45-20,bgh*0.12,5,"rgba(255,255,255,0.1)");
                }
            }
        } else {
            etext(ctx,"Currently there is not an event active, please come back later!",W*0.5+bgw*0.025+27,H*0.55,"40px"+FONT,"rgb(0,0,0)","left","middle",undefined,undefined,bgw*0.45-15);
        }

    }
    this.drawPlayground = function (ctx) {
        this.checkBox(ctx,W*0.15,H*0.9,data.showDisabled,"plshow","toggle","showDisabled","Show disabled heroes","right","Hide/Show the Heroes you've disabled in the hero manager");
        if (simwbscreen) {
            this.drawMonsterTabs(ctx,"playground");
            ctx.fillStyle="rgba(0,0,0,0.5)";
            ctx.fillRect(0,0,W,H);

            roundedRect(ctx,W*0.57-W*0.7*0.5,H*0.5-H*0.7*0.5,W*0.7,H*0.7,5,"black");
            roundedRect(ctx,W*0.57-W*0.7*0.5+2,H*0.5-H*0.7*0.5+2,W*0.7-4,H*0.7-4,5,"white");
            roundedRect(ctx,W*0.57-W*0.7*0.5+4,H*0.5-H*0.7*0.5+4,W*0.7-8,H*0.7-8,5,"black");
            roundedRect(ctx,W*0.57-W*0.7*0.5+6,H*0.5-H*0.7*0.5+6,W*0.7-12,H*0.7-12,5,"rgba(255,250,210,1)");
            roundedRect(ctx,W*0.57-W*0.7*0.5+6,H*0.5-H*0.7*0.5+6,W*0.7-12,H*0.7-12,5,"rgba(0,0,0,0.15)");

            text(ctx,"Choose a World Boss",W*0.57,H*0.5-H*0.7*0.5+30,"80px "+FONT,"black","center","middle");

            for (var i = 0; i < 2; ++i) {
	            if (simwbplayer == i) T.draw(ctx,"05x5",W*0.365+W*0.135*i+87,H*0.28-15,100,30);
	            else T.draw(ctx,"07y4",W*0.365+W*0.135*i+87,H*0.28-15,100,30);
	            var crect = (new Rect(W*0.365+W*0.135*i+87,H*0.28-15,100,30)).small();
	            if (crect.isInside(GM.x,GM.y)) {
	                if (simwbplayer != i) T.draw(ctx,"0567",W*0.365+W*0.135*i+87,H*0.28-15,100,30);
	                this.addZone("choosewbsimplayer",crect,"choosewbsimplayer",{target:i});
	            }
	            text(ctx,"Player "+(i+1),W*0.5+W*0.135*i,H*0.28,"40px "+FONT,"black","center","middle");
            }
            
            var wbarray = [72,87,106,126,186];
            for (var i = 0; i < wbarray.length; ++i) {
                if (simwbchoose == i) T.draw(ctx,"0gkd",W*0.3+W*0.135*i-T.width("0gkd")*1.5*0.5,H*0.33,T.width("0gkd")*1.5,T.height("0gkd")*1.5);
                else T.negative(ctx,"0gkd",W*0.3+W*0.135*i-T.width("0gkd")*1.5*0.5,H*0.33,T.width("0gkd")*1.5,T.height("0gkd")*1.5);
                this.drawMonster(ctx,-2-(wbarray[i]),W*0.25+W*0.135*i,H*0.5,undefined,false,0.75,1,true,false);
                var crect = (new Rect(W*0.3+W*0.135*i-T.width("0gkd")*1.5*0.5+5,H*0.33,T.width("0gkd")*1.4,T.height("0gkd")*1.5)).small();
                if (crect.isInside(GM.x,GM.y)) {
                    this.addZone("choosewbsim",crect,"choosewbsim",{target:i});
                }
            }
            var frect = (new Rect(W*0.57-T.width("091m")*0.5,H*0.75-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
            if (frect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0eni",W*0.57-T.width("0eni")*0.5,H*0.75-T.height("0eni")*0.5);
                this.addZone("dowbsim",frect,"dowbsim");          
            } T.draw(ctx,"091m",W*0.57-T.width("091m")*0.5,H*0.75-T.height("091m")*0.5);
            text(ctx,"RUN WB SIMULATION",W*0.57,H*0.75,"38px "+FONT,"white","center","middle");

            text(ctx,"World Boss Level",W*0.57,H*0.615,"40px "+FONT,"black","center","middle");
            document.getElementById("levelwb").style.display="block";
            // close
            var cw = T.width("0evr");
            var ch = T.height("0evr");
            var clrect = (new Rect(W*0.5+W*0.7*0.62-cw*1.2-15,H*0.5-H*0.7*0.5+ch*0.13+3,cw,ch)).small();
            if (clrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0o6b",W*0.5+W*0.7*0.62-cw*1.2-15,H*0.5-H*0.7*0.5+ch*0.13+3);
                this.addZone("simulatewb",clrect,"simulatewb");
            }
            else T.draw(ctx,"0evr",W*0.5+W*0.7*0.62-cw*1.2-15,H*0.5-H*0.7*0.5+ch*0.13+3);
            
        } else {
            var frect = (new Rect(W*0.57-T.width("091m")*0.5-120,H*0.85-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
            if (frect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0eni",W*0.57-T.width("0eni")*0.5-120,H*0.85-T.height("0eni")*0.5);
                this.addZone("simulate",frect,"simulate");            
            } T.draw(ctx,"091m",W*0.57-T.width("091m")*0.5-120,H*0.85-T.height("091m")*0.5);
            text(ctx,"SIMULATE",W*0.57-120,H*0.85,"50px "+FONT,"white","center","middle");
    
            var fsrect = (new Rect(W*0.57-T.width("091m")*0.5+120,H*0.85-T.height("091m")*0.5,T.width("091m"),T.height("091m"))).small();
            if (fsrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0eni",W*0.57-T.width("0eni")*0.5+120,H*0.85-T.height("0eni")*0.5);
                this.addZone("simulatewb",fsrect,"simulatewb");            
            } T.draw(ctx,"091m",W*0.57-T.width("091m")*0.5+120,H*0.85-T.height("091m")*0.5);
            text(ctx,"WORLD BOSS",W*0.57+120,H*0.85,"50px "+FONT,"white","center","middle");

            this.drawMonsterTabs(ctx,"playground");
    
            if (cityClick != undefined) {
                if (swapping) {
                    var mon = data.playground[cityClick.line].line[cityClick.initPos];
                    if (mon < -1) {
                        var id = cityClick.id;
                        var img = HERO[(cityClick.id * -1) - 2].img;
                    }
                    else {
                        var id = cityClick.id;
                        var img = MONSTERS[cityClick.id].img;
                    }
                    var lvl = 1;
                    this.drawMonster(ctx, id, GM.x, GM.y + T.height(img) / 2, undefined, false, 1, cityClick.level);
                }
                else {
                    if (typeTab != 4 && !searchTab) {
                        var id = cityClick.id;
                        var img = MONSTERS[cityClick.id].img;
                    }
                    else {
                        var id = cityClick.id;
                        var img = HERO[(cityClick.id * -1) - 2].img;
                    }
                    var lvl = 1;
                    this.drawMonster(ctx, id, GM.x, GM.y + T.height(img) / 2, undefined, false, 1, lvl);
                }
            }
        }
    }
    this.drawAdvent = function (ctx) {
        var startTid=18231; 
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        var bgw = W*0.8;
        var bgh = H*0.9;
        var candy = "8tlo";

        var calendar = [];
        if (mdata!==undefined && mdata.city!==undefined && mdata.city.xmas2!==undefined && mdata.city.xmas2.advent!==undefined) calendar = mdata.city.xmas2.advent;

        var prizes = getCalendar();
        var values = getAdventValues();
        var order = [[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]];

        ctx.fillStyle="rgb(199,23,25)";
        ctx.fillRect(W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgb(204,141,87)";
        ctx.fillRect(W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);

        text(ctx,"ADVENT CALENDAR",W*0.5,H*0.5-bgh*0.5+30,"64px"+CFONT,"black","center","middle");

        var cw = W*0.12;
        var ch = W*0.12;

        if (mdata!==undefined && mdata.city!==undefined && mdata.city.xmas2!==undefined && mdata.city.xmas2.advent!==undefined) {
            var sum = 1;
            for (var i = 0 ; i < 4 ; ++i) {
                for (var j = 0; j < 6 ; ++j) {
                    if (tid<(startTid+sum) && (((calendar[sum-1]>>5)&3)===0)) {
                        var crect = (new Rect(W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch)).small();
                        if (crect.isInside(GM.x,GM.y) && !adventChoice && (tid==startTid+(sum-1))) {
                            T.draw(ctx,"oidk",W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch);
                            ctx.save();
                            ctx.globalAlpha=0.8;
                            T.draw(ctx,"wkkc",W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch);
                            ctx.restore();
                            this.addZone("advent",crect,"advent",{target:sum-1});
                        } else {
                            T.draw(ctx,"oidk",W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch);
                            T.draw(ctx,"wkkc",W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch);
                        }
                        if (sum<10) text(ctx,"0"+sum,W*0.22+(j*H*0.18),H*0.23+(i*H*0.18),"120px"+FONT,"white","center","middle");
                        else text(ctx,sum,W*0.22+(j*H*0.18),H*0.23+(i*H*0.18),"120px"+FONT,"white","center","middle");
                    } else if (tid>=(startTid+sum) && (((calendar[sum-1]>>5)&3)===0)) {
                        T.draw(ctx,"oidk",W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch);
                        text(ctx,"---",W*0.22+(j*H*0.18),H*0.23+(i*H*0.18)+ch*0.4-17,"36px"+FONT,"white","center","middle");
                    } else {
                        var crect = (new Rect(W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch)).small();
                        if (crect.isInside(GM.x,GM.y) && !adventChoice) {
                            ctx.save();
                            ctx.globalAlpha=0.8;
                            T.draw(ctx,"oidk",W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch);
                            ctx.restore();
                            this.addZone("advent",crect,"advent",{target:sum-1});
                        } else T.draw(ctx,"oidk",W*0.22+(j*H*0.18)-cw*0.5,H*0.23+(i*H*0.18)-ch*0.5,cw,ch);
                        var val = values[sum-1][order[(calendar[sum-1]&7)][((calendar[sum-1]>>5)&3)-1]];
                        if (prizes[sum-1] == "H137" || prizes[sum-1] == "H138" || prizes[sum-1] == "H139" || prizes[sum-1] == "H199") text(ctx,val+" Levels",W*0.22+(j*H*0.18),H*0.23+(i*H*0.18)+ch*0.4-17,"32px"+FONT,"white","center","middle");
                        else text(ctx,"x"+val,W*0.22+(j*H*0.18),H*0.23+(i*H*0.18)+ch*0.4-17,"36px"+FONT,"white","center","middle");
                    }

                    if (tid>=(startTid+sum) || (tid<=(startTid+sum) && (((calendar[sum-1]>>5)&3)>0))) {
                        if (prizes[sum-1] == "EM") T.draw(ctx,"00dh",W*0.22+(j*H*0.18)-T.width("00dh")*1.15*0.5,H*0.23+(i*H*0.18)-T.height("00dh")*1.15*0.5-10,T.width("00dh")*1.15,T.height("00dh")*1.15);
                        else if (prizes[sum-1] == "CC") T.draw(ctx,"0ap1",W*0.22+(j*H*0.18)-T.width("0ap1")*1.15*0.5,H*0.23+(i*H*0.18)-T.height("0ap1")*1.15*0.5-10,T.width("0ap1")*1.15,T.height("0ap1")*1.15);
                        else if (prizes[sum-1] == "PG") T.draw(ctx,"0j14",W*0.22+(j*H*0.18)-T.width("0j14")*1.15*0.5,H*0.23+(i*H*0.18)-T.height("0j14")*1.15*0.5-10,T.width("0j14")*1.15,T.height("0j14")*1.15);
                        else if (prizes[sum-1] == "AS") T.draw(ctx,"08y7",W*0.22+(j*H*0.18)-T.width("08y7")*0.75*0.5+3,H*0.23+(i*H*0.18)-T.height("08y7")*0.75*0.5-10,T.width("08y7")*0.75,T.height("08y7")*0.75);
                        else if (prizes[sum-1] == "CS") T.draw(ctx,candy,W*0.22+(j*H*0.18)-T.width(candy)*0.35*0.5+3,H*0.23+(i*H*0.18)-T.height(candy)*0.35*0.5-10,T.width(candy)*0.35,T.height(candy)*0.35);
                        else if (prizes[sum-1] == "UM") T.draw(ctx,"02c9",W*0.22+(j*H*0.18)-T.width("02c9")*0.6*0.5,H*0.23+(i*H*0.18)-T.height("02c9")*0.6*0.5-10,T.width("02c9")*0.6,T.height("02c9")*0.6);
                        else if (prizes[sum-1] == "H137") this.drawMonster(ctx,-2-137,W*0.22+(j*H*0.18),H*0.23+(i*H*0.18)+30-10,undefined,false,0.6);
                        else if (prizes[sum-1] == "H138") this.drawMonster(ctx,-2-138,W*0.22+(j*H*0.18),H*0.23+(i*H*0.18)+30-10,undefined,false,0.6);
                        else if (prizes[sum-1] == "H139") this.drawMonster(ctx,-2-139,W*0.22+(j*H*0.18),H*0.23+(i*H*0.18)+30-10,undefined,false,0.6);
                        else if (prizes[sum-1] == "H199") this.drawMonster(ctx,-2-199,W*0.22+(j*H*0.18),H*0.23+(i*H*0.18)+30-10,undefined,false,0.6);
                    }
                    ++sum;
                }
            }
        }

        var srect = (new Rect(W*0.5+bgw*0.5-80,H*0.5+bgh*0.5-22,80,22)).small();
        if (srect.isInside(GM.x,GM.y)) {
            if (isSnowing.active) text(ctx,"Snow: ON",W*0.5+bgw*0.5-5,H*0.5+bgh*0.5-10,"30px"+FONT,"grey","right","middle");
            else text(ctx,"Snow: OFF",W*0.5+bgw*0.5-5,H*0.5+bgh*0.5-10,"30px"+FONT,"grey","right","middle");
            this.addZone("snow",srect,"snow");
        }
        else {
            if (isSnowing.active) text(ctx,"Snow: ON",W*0.5+bgw*0.5-5,H*0.5+bgh*0.5-10,"30px"+FONT,"black","right","middle");
            else text(ctx,"Snow: OFF",W*0.5+bgw*0.5-5,H*0.5+bgh*0.5-10,"30px"+FONT,"black","right","middle");
        }

        // Close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.5+bgw*0.5-cw*1.1-1,H*0.5-bgh*0.5+3,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"7otr",W*0.5+bgw*0.5-cw*1.1-1-1,H*0.5-bgh*0.5+3-1,cw+2,ch+2);
            this.addZone("oadv",crect,"oadv");
        }
        else T.draw(ctx,"7otr",W*0.5+bgw*0.5-cw*1.1-1,H*0.5-bgh*0.5+3,cw,ch);

        if (isSnowing.active) this.drawSnow(ctx,W*0.5-bgw*0.5-6,W*0.5-bgw*0.5-6+bgw,H*0.5-bgh*0.5-6,H*0.5-bgh*0.5-6+bgh);

        if (adventChoice !== undefined) {
            var day = adventChoice;
            var cbgw = W*0.4;
            var cbgh = H*0.4;
            ctx.fillStyle="rgba(0,0,0,0.5)";
            ctx.fillRect(0,0,W,H);
            ctx.fillStyle="rgb(199,23,25)";
            ctx.fillRect(W*0.5-cbgw*0.5-5,H*0.5-cbgh*0.5-5,cbgw+10,cbgh+10);
            ctx.fillStyle="rgb(204,141,87)";
            ctx.fillRect(W*0.5-cbgw*0.5,H*0.5-cbgh*0.5,cbgw,cbgh);

            if (values[day] !== undefined) {
                var cw = W*0.13;
                var ch = W*0.13;
                var x = W*0.313;

                for (var i=0; i<values[day].length; ++i) {
                    var crect = (new Rect(x+(W*0.12*i),H*0.4,cw,ch)).small();
                    if ((((calendar[day]>>5)&3) === 0 ) && (((calendar[day]>>3)&3) !== (i+1))) {
                        if (advSync) {
                            T.draw(ctx,"oidk",x+(W*0.12*i),H*0.4,cw,ch);
                            T.draw(ctx,"wkkc",x+(W*0.12*i),H*0.4,cw,ch);
                            this.spinner(ctx,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5,30);
                        } else {
                            if (crect.isInside(GM.x,GM.y)) {
                                T.draw(ctx,"oidk",x+(W*0.12*i),H*0.4,cw,ch);
                                ctx.save();
                                ctx.globalAlpha=0.8;
                                T.draw(ctx,"wkkc",x+(W*0.12*i),H*0.4,cw,ch);
                                ctx.restore();
                                this.addZone("cadv",crect,"cadv",{target:i});
                            } else {
                                T.draw(ctx,"oidk",x+(W*0.12*i),H*0.4,cw,ch);
                                T.draw(ctx,"wkkc",x+(W*0.12*i),H*0.4,cw,ch);
                            }
                            text(ctx,String.fromCharCode(10053),x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5,"150px"+FONT,"white","center","middle");  
                        }
                    } else {
                        // Worst
                        var val = 0;
                        if ((((calendar[day]>>3)&3) !== 0) && ((calendar[day]>>3)&3) === (i+1)) {
                            val = values[day][2];
                            T.draw(ctx,"oidk",x+(W*0.12*i),H*0.4,cw,ch);
                            text(ctx,"Discarded",x+(W*0.12*i)+cw*0.5,H*0.4-8,"34px"+FONT,"white","center","middle");
                        } else if ((((calendar[day]>>5)&3) !== 0) && ((calendar[day]>>5)&3) === (i+1)) {
                            val = values[day][order[(calendar[day]&7)][((calendar[day]>>5)&3)-1]];
                            T.draw(ctx,"oidk",x+(W*0.12*i),H*0.4,cw,ch);
                            text(ctx,"Picked",x+(W*0.12*i)+cw*0.5,H*0.4-8,"34px"+FONT,"white","center","middle");
                        } else {
                            val = values[day][order[(calendar[day]&7)][i]];
                            T.draw(ctx,"oidk",x+(W*0.12*i),H*0.4,cw,ch);
                        }
                        if (prizes[day] == "H137" || prizes[day] == "H138" || prizes[day] == "H139" || prizes[day] == "H199") text(ctx,val+" Levels",x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.88-17,"32px"+FONT,"white","center","middle");
                        else text(ctx,"x"+val,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.88-17,"36px"+FONT,"white","center","middle");

                        if (prizes[day] == "EM") T.draw(ctx,"00dh",x+(W*0.12*i)+cw*0.5-T.width("00dh")*1.15*0.5,H*0.4+ch*0.5-T.height("00dh")*1.15*0.5-10,T.width("00dh")*1.15,T.height("00dh")*1.15);
                        else if (prizes[day] == "CC") T.draw(ctx,"0ap1",x+(W*0.12*i)+cw*0.5-T.width("0ap1")*1.15*0.5,H*0.4+ch*0.5-T.height("0ap1")*1.15*0.5-10,T.width("0ap1")*1.15,T.height("0ap1")*1.15);
                        else if (prizes[day] == "PG") T.draw(ctx,"0j14",x+(W*0.12*i)+cw*0.5-T.width("0j14")*1.15*0.5,H*0.4+ch*0.5-T.height("0j14")*1.15*0.5-10,T.width("0j14")*1.15,T.height("0j14")*1.15);
                        else if (prizes[day] == "AS") T.draw(ctx,"08y7",x+(W*0.12*i)+cw*0.5-T.width("08y7")*0.75*0.5+3,H*0.4+ch*0.5-T.height("08y7")*0.75*0.5-10,T.width("08y7")*0.75,T.height("08y7")*0.75);
                        else if (prizes[day] == "CS") T.draw(ctx,candy,x+(W*0.12*i)+cw*0.5-T.width(candy)*0.35*0.5,H*0.4+ch*0.5-T.height(candy)*0.35*0.5-10,T.width(candy)*0.35,T.height(candy)*0.35);
                        else if (prizes[day] == "UM") T.draw(ctx,"02c9",x+(W*0.12*i)+cw*0.5-T.width("02c9")*0.6*0.5,H*0.4+ch*0.5-T.height("02c9")*0.6*0.5-10,T.width("02c9")*0.6,T.height("02c9")*0.6);
                        else if (prizes[day] == "H137") this.drawMonster(ctx,-2-137,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5+30-10,undefined,false,0.6);
                        else if (prizes[day] == "H138") this.drawMonster(ctx,-2-138,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5+30-10,undefined,false,0.6);
                        else if (prizes[day] == "H139") this.drawMonster(ctx,-2-139,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5+30-10,undefined,false,0.6);
                        else if (prizes[day] == "H199") this.drawMonster(ctx,-2-199,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5+30-10,undefined,false,0.6);
                    }                                 
                }

                // Discard Worst Option

                ctx.fillStyle="rgb(199,23,25)";
                ctx.fillRect(W*0.5-W*0.3*0.5-2,H*0.65-H*0.08*0.5-2,W*0.3+4,H*0.08+4);
                ctx.fillStyle="rgb(200,100,50)";
                ctx.fillRect(W*0.5-W*0.3*0.5,H*0.65-H*0.08*0.5,W*0.3,H*0.08);

                var worect = (new Rect(W*0.5-W*0.3*0.5,H*0.65-H*0.08*0.5,W*0.3,H*0.08)).small();
                if (worect.isInside(GM.x,GM.y) && (((calendar[day]>>3)&3) === 0) && calendar[day] === 0) {
                    ctx.fillStyle="rgba(255,255,255,0.2)";
                    ctx.fillRect(W*0.5-W*0.3*0.5,H*0.65-H*0.08*0.5,W*0.3,H*0.08);
                    this.addZone("woption",worect,"woption");
                }
                text(ctx,"Discard Worst Option - 200    ",W*0.5,H*0.65,"42px"+FONT,"black","center","middle"); 
                T.draw(ctx,"0dvo",W*0.5+W*0.3*0.5-50,H*0.65-T.height("0dvo")*0.5*0.5-3,T.width("0dvo")*0.5,T.height("0dvo")*0.5);

                if (calendar[day] !== 0) {
                    ctx.fillStyle="rgba(0,0,0,0.4)";
                    ctx.fillRect(W*0.5-W*0.3*0.5,H*0.65-H*0.08*0.5,W*0.3,H*0.08);
                }

                // Prizes Tooltip

                var trect = (new Rect(W*0.5-cbgw*0.47,H*0.5-cbgh*0.43-10,158,22)).small();
                if (trect.isInside(GM.x,GM.y)) {
                    ctx.fillStyle="rgba(0,0,0,0.4)";
                    ctx.fillRect(W*0.5-cbgw*0.5,H*0.5-cbgh*0.5,cbgw,cbgh);
                    text(ctx,"Show today's prizes ->",W*0.5-cbgw*0.47,H*0.5-cbgh*0.43,"30px"+FONT,"rgb(230,230,230)","left","middle");

                    for (var i=0; i<values[day].length; ++i) {
                        T.draw(ctx,"1hgg",x+(W*0.12*i),H*0.4,cw,ch);
                        if (prizes[day] == "H137" || prizes[day] == "H138" || prizes[day] == "H139" || prizes[day] == "H199") text(ctx,values[day][i]+" Levels",x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.88-17,"32px"+FONT,"white","center","middle");
                        else text(ctx,"x"+values[day][i],x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.88-17,"36px"+FONT,"white","center","middle");
                        if (prizes[day] == "EM") T.draw(ctx,"00dh",x+(W*0.12*i)+cw*0.5-T.width("00dh")*1.15*0.5,H*0.4+ch*0.5-T.height("00dh")*1.15*0.5-10,T.width("00dh")*1.15,T.height("00dh")*1.15);
                        else if (prizes[day] == "CC") T.draw(ctx,"0ap1",x+(W*0.12*i)+cw*0.5-T.width("0ap1")*1.15*0.5,H*0.4+ch*0.5-T.height("0ap1")*1.15*0.5-10,T.width("0ap1")*1.15,T.height("0ap1")*1.15);
                        else if (prizes[day] == "PG") T.draw(ctx,"0j14",x+(W*0.12*i)+cw*0.5-T.width("0j14")*1.15*0.5,H*0.4+ch*0.5-T.height("0j14")*1.15*0.5-10,T.width("0j14")*1.15,T.height("0j14")*1.15);
                        else if (prizes[day] == "AS") T.draw(ctx,"08y7",x+(W*0.12*i)+cw*0.5-T.width("08y7")*0.75*0.5+3,H*0.4+ch*0.5-T.height("08y7")*0.75*0.5-10,T.width("08y7")*0.75,T.height("08y7")*0.75);
                        else if (prizes[day] == "CS") T.draw(ctx,candy,x+(W*0.12*i)+cw*0.5-T.width(candy)*0.35*0.5,H*0.4+ch*0.5-T.height(candy)*0.35*0.5-10,T.width(candy)*0.35,T.height(candy)*0.35);
                        else if (prizes[day] == "UM") T.draw(ctx,"02c9",x+(W*0.12*i)+cw*0.5-T.width("02c9")*0.6*0.5,H*0.4+ch*0.5-T.height("02c9")*0.6*0.5-10,T.width("02c9")*0.6,T.height("02c9")*0.6);
                        else if (prizes[day] == "H137") this.drawMonster(ctx,-2-137,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5+30-10,undefined,false,0.6);
                        else if (prizes[day] == "H138") this.drawMonster(ctx,-2-138,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5+30-10,undefined,false,0.6);
                        else if (prizes[day] == "H139") this.drawMonster(ctx,-2-139,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5+30-10,undefined,false,0.6);
                        else if (prizes[day] == "H199") this.drawMonster(ctx,-2-199,x+(W*0.12*i)+cw*0.5,H*0.4+ch*0.5+30-10,undefined,false,0.6);
                    }
                } else text(ctx,"Show today's prizes ->",W*0.5-cbgw*0.47,H*0.5-cbgh*0.43,"30px"+FONT,"black","left","middle");
            }

            // Close
            var cw = T.width("0evr");
            var ch = T.height("0evr");
            var crect = (new Rect(W*0.5+cbgw*0.5-cw*1.1-1,H*0.5-cbgh*0.5+3,cw,ch)).small();
            if (crect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"7otr",W*0.5+cbgw*0.5-cw*1.1-1-1,H*0.5-cbgh*0.5+3-1,cw+2,ch+2);
                this.addZone("advent",crect,"advent");
            }
            else T.draw(ctx,"7otr",W*0.5+cbgw*0.5-cw*1.1-1,H*0.5-cbgh*0.5+3,cw,ch);
        }
    }

    this.drawSnow = function (ctx, marginLeft, marginRight, marginTop, marginBottom) {
        if (Date.now() >= isSnowing.ts+isSnowing.refresh) {
            // Init Flakes
            if (isSnowing.flakes.length < isSnowing.max) {
                var snowflake = {
                    x: randFloat(marginLeft,marginRight),
                    y: marginTop,
                    dx: randFloat(-0.5,0.5),
                    dy: randFloat(0,1),
                    size: randInt(isSnowing.minSize,isSnowing.maxSize),
                    color: isSnowing.color[randInt(0,1)],
                };
                isSnowing.flakes.push(snowflake);
            }
            isSnowing.ts = Date.now();
        }
        // Update Flakes
        for (var i=0; i<isSnowing.flakes.length; ++i) {
            var flake = isSnowing.flakes[i];
            flake.x = flake.x+(flake.dx*isSnowing.speedx);
            flake.y = flake.y+(flake.dy*isSnowing.speedy);
            flake.dx = randFloat(-0.5,0.5);
            flake.dy = randFloat(0,1);
            if (flake.y >= marginBottom) {
                isSnowing.flakes.splice(i,1);
                --i;
            }
        }

        // Draw Flakes
        for (var i=0; i<isSnowing.flakes.length; ++i) {
            var flake = isSnowing.flakes[i];
            text(ctx,String.fromCharCode(isSnowing.entity),flake.x,flake.y,flake.size+"px"+FONT,flake.color,"center","middle");
        }
    }

    this.drawChristmas = function (ctx) {
        var bgw = W*0.8;
        var bgh = H*0.9;

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(40,0,81,0.6)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

        text(ctx,"CHRISTMAS EVENT",W*0.5,H*0.5-bgh*0.5+40,"64px"+CFONT,"white","center","middle");

        mltext(ctx,"Choose carefully your Christmas Gift! Every gift you open costs 20 Candy Sticks!/nGifts include more Candy Sticks, Ascension Spheres and even some powerful new Heroes!",W*0.5,H*0.24,"40px"+FONT,"white","center","middle");

        T.draw(ctx,"5fdk",W*0.5+bgw*0.32-T.width("5fdk")*0.5,H*0.5-bgh*0.44-T.height("5fdk")*0.5);

        if ((1577746799000-Date.now())>86400000) text(ctx,"Time till end: "+Math.ceil((1577746799000-Date.now())/86400000)+" Days",W*0.5-bgw*0.5+20,H*0.5-bgh*0.5+30,"30px"+FONT,"white","left","middle");
        else text(ctx,"Time till end: "+timer((1577746799000-Date.now())/1000),W*0.5-bgw*0.5+20,H*0.5-bgh*0.5+30,"30px"+FONT,"white","left","middle");

        var gcrect = (new Rect(W*0.5-T.width("0gcg")*0.6*0.5,H*0.74-T.height("0gcg")*0.6*0.5+60,T.width("0gcg")*0.6,T.height("0gcg")*0.6)).small();
        if (gcrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0gcg",W*0.5-T.width("0gcg")*0.6*0.5,H*0.74-T.height("0gcg")*0.6*0.5+60,T.width("0gcg")*0.6,T.height("0gcg")*0.6);
            this.addZone("getCS",gcrect,"mshop",{target: true});
        }
        else T.draw(ctx,"00kg",W*0.5-T.width("00kg")*0.6*0.5,H*0.74-T.height("00kg")*0.6*0.5+60,T.width("00kg")*0.6,T.height("00kg")*0.6);
        text(ctx,"Get More",W*0.5-10,H*0.74+60,"36px"+FONT,"black","center","middle");
        text(ctx,"* You can also get Candies with OTO, Lucy, Seasson Pass and Weekly Chest",W*0.5,H*0.77+87,"20px"+FONT,"white","center","middle");
        T.draw(ctx,"8tlo",W*0.5-T.width("8tlo")*0.2*0.5+45,H*0.74+60-T.height("8tlo")*0.2*0.5,T.width("8tlo")*0.2,T.height("8tlo")*0.2);
        text(ctx,"* All purchases will award VIP points x2 during this event",W*0.5,H*0.77+100,"20px"+FONT,"white","center","middle");
       
        if (giftArray == undefined && mulGiftArray == undefined) {
            ctx.save();
            ctx.beginPath();
            ctx.rect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+4,bgw-8,bgh-8);
            ctx.closePath();
            ctx.clip();
    
            if (trendLine[trendLine.length - 1] >= 90+T.width("ny0n")) trendLine.push(trendLine[trendLine.length - 1]-T.width("ny0n"));
            for (var i = 0; i < trendLine.length; ++i) { 
                T.draw(ctx,"ny0n",trendLine[i],H*0.6);
                ++trendLine[i];
            }
            if (trendLine[0] >= W*0.5+bgw*0.6) trendLine.shift();
    
            if (giftLine.length == 0) {
                giftLine.push(this.createGift());
            } else {
                if (giftLine[giftLine.length - 1].x >= 200) giftLine.push(this.createGift());
                for (var i = 0; i < giftLine.length; ++i) {
                    T.draw(ctx,giftLine[i].model,giftLine[i].x-giftLine[i].w*0.5,H*0.6-giftLine[i].h,giftLine[i].w,giftLine[i].h);
                    roundedRect(ctx,giftLine[i].x-W*0.05*0.5-1,H*0.6-H*0.04*0.5-1,W*0.05+2,H*0.04+2,10,"white");
                    roundedRect(ctx,giftLine[i].x-W*0.05*0.5,H*0.6-H*0.04*0.5,W*0.05,H*0.04,10,"rgba(25,52,58,1)");
                    text(ctx,"20",giftLine[i].x-5,H*0.6,"36px"+FONT,"white","center","middle");
                    T.draw(ctx,"8tlo",giftLine[i].x+2,H*0.6-T.height("8tlo")*0.15*0.5,T.width("8tlo")*0.15,T.height("8tlo")*0.15);
                    var grect = (new Rect(giftLine[i].x-giftLine[i].w*0.5,H*0.6-giftLine[i].h,giftLine[i].w,giftLine[i].h)).small();
                    if (CZ >= 20) {
                        if (!gOpenSync) this.addZone("gift_"+i,grect,"gift");
                        else this.spinner(ctx,giftLine[i].x,H*0.6-giftLine[i].h*0.5,30);
                    } else {
                        this.addZone("getCS_01_"+i,grect,"mshop",{target: true});
                    }
                    ++giftLine[i].x;
                }
                if (giftLine[0].x >= W*0.5+bgw*0.6) giftLine.shift();
            }
            ctx.restore();

            text(ctx,"OR..",W*0.5,H*0.665,"36px"+FONT,"white","center","middle");

            var ng = 10;
            if (CZ < 200) ng = Math.floor(CZ/20);
            var mlrect = (new Rect(W*0.5-T.width("09ec")*1.25*0.5,H*0.75-T.height("09ec")*2*0.5,T.width("09ec")*1.25,T.height("09ec")*2)).small();
            
            if (CZ < 20) {
                T.draw(ctx,"09ec",W*0.5-T.width("09ec")*1.25*0.5,H*0.75-T.height("09ec")*2*0.5,T.width("09ec")*1.25,T.height("09ec")*2);
                text(ctx,"Get More Candies",W*0.5,H*0.75,"36px"+FONT,"black","center","middle");
                this.addZone("getCS_02",mlrect,"mshop",{target: true});
            } else {
                if (mlrect.isInside(GM.x,GM.y) && !gOpenSync) {
                    T.draw(ctx,"09ec",W*0.5-T.width("09ec")*1.25*0.5-1,H*0.75-T.height("09ec")*2*0.5-1,T.width("09ec")*1.25+2,T.height("09ec")*2+2);
                    if (CZ >= 200) this.addZone("mulgift",mlrect,"mulgift",{target: 10});
                    else this.addZone("mulgift",mlrect,"mulgift",{target: Math.floor(CZ/20)});
                } else T.draw(ctx,"09ec",W*0.5-T.width("09ec")*1.25*0.5,H*0.75-T.height("09ec")*2*0.5,T.width("09ec")*1.25,T.height("09ec")*2);
                if (gOpenSync) this.spinner(ctx,W*0.5,H*0.75,30);
                else {
                    text(ctx,"Open "+ng+" Gifts for "+(ng*20)+" Candies",W*0.5-10,H*0.75,"30px"+FONT,"black","center","middle");
                    T.draw(ctx,"8tlo",W*0.58,H*0.75-T.height("8tlo")*0.2*0.5,T.width("8tlo")*0.2,T.height("8tlo")*0.2);
                }
            }

            T.draw(ctx,"hr29",W*0.5-bgw*0.5+25,H*0.5+bgh*0.5-70-T.height("hr29"));
            if (instaGift) T.draw(ctx,"qyqu",W*0.5-bgw*0.5+25,H*0.5+bgh*0.5-70-T.height("hr29"));
            text(ctx,"Insta-Gift Opening",W*0.5-bgw*0.5+25+T.width("hr29"),H*0.5+bgh*0.5-70-T.height("hr29")*0.5,"36px"+FONT,"white","left","middle");
            var irect = (new Rect(W*0.5-bgw*0.5+25,H*0.5+bgh*0.5-70-T.height("hr29"),T.width("hr29"),T.height("hr29"))).small();
            if (irect.isInside(GM.x,GM.y)) this.addZone("igift",irect,"igift");
        } else if (giftArray != undefined && mulGiftArray == undefined) {
            ctx.fillStyle="rgba(0,0,0,0.8)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+4,bgw-8,bgh-8);
            ctx.fillStyle="rgba(0,0,0,0.8)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.3,bgw-8,bgh*0.6);

            var toDraw = undefined;
            if (giftCounter < 10000){
                giftCounter+=100;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 11000) {
                giftCounter+=80;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 12000) {
                giftCounter+=60;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 13000) {
                giftCounter+=50;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 13500) {
                giftCounter+=30;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 14000) {
                giftCounter+=10;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else {
                toDraw = 0;
            }

            T.draw(ctx,"frmn",W*0.5-T.width("frmn")*0.5,H*0.5-T.height("frmn")*0.5);

            if (giftArray[toDraw]<-1) {
                var hid=-(giftArray[toDraw]+2);
                this.drawMonster(ctx,giftArray[toDraw],W*0.5,H*0.5,undefined,false,0.8,mdata.city.hero[hid]||1,true);
                text(ctx,HERO[hid].name,W*0.5,H*0.5+15,"36px"+FONT,"white","center","middle");
            }
            else {
                var icon = giftData[giftArray[toDraw]].prize;
                if (giftData[giftArray[toDraw]].t == "AS") {
                    T.draw(ctx,icon,W*0.5-T.width(icon)*0.5*0.75,H*0.5-45,T.width(icon)*0.75,T.height(icon)*0.75);
                    text(ctx,giftData[giftArray[toDraw]].name,W*0.5,H*0.5-55,"30px"+FONT,"white","center","middle");
                    text(ctx,"x"+giftData[giftArray[toDraw]].v,W*0.5,H*0.5+12,"36px"+FONT,"white","center","middle");
                }
                else if (giftData[giftArray[toDraw]].t == "CS") {
                    T.draw(ctx,icon,W*0.5-T.width(icon)*0.5*0.35,H*0.5-50,T.width(icon)*0.35,T.height(icon)*0.35);
                    text(ctx,giftData[giftArray[toDraw]].name,W*0.5,H*0.5-55,"30px"+FONT,"white","center","middle");
                    text(ctx,"x"+giftData[giftArray[toDraw]].v,W*0.5,H*0.5+12,"36px"+FONT,"white","center","middle");
                }
            }
            
            if (toDraw == 0) {
                T.draw(ctx,"0539",W*0.5-T.width("0539")*0.5,H*0.635-T.height("0539")*0.5);
                text(ctx,"Continue",W*0.5,H*0.635,"30px"+FONT,"black","center","middle");
                var conrect = (new Rect(W*0.5-T.width("0539")*0.5,H*0.635-T.height("0539")*0.5,T.width("0539"),T.height("0539"))).small();
                if (conrect.isInside(GM.x,GM.y)) this.addZone("clgift",conrect,"clgift");
            }
        } else if (giftArray == undefined && mulGiftArray != undefined) {
            if (mulGiftArray !== undefined) {
                ctx.fillStyle="rgba(0,0,0,0.8)";
                ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+4,bgw-8,bgh-8);
                var bgw = W*0.78;
                var bgh = H*0.5;
                ctx.fillStyle="rgba(255,255,255,1)";
                ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+4,bgw-8,bgh-8);
                ctx.fillStyle="rgba(142,119,134,1)";
                ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+4,bgw-8,bgh-8);
     
                // Draw Prizes
                var counter = 0;
                for (var i=0; i<2; ++i) {
                    for (var j=0; j<5; ++j) {
                        if (counter < mulGiftArray.length) {
                            var x = W*0.5-bgw*0.5-60+(bgw*0.185*j);
                            var y = H*0.5-bgh*0.5+(bgh*0.45*i);
                            ctx.save();
                            ctx.beginPath();
                            ctx.rect(x+T.width("frmn")*0.9*0.28,y+T.height("frmn")*0.9*0.075,T.width("frmn")*0.9*0.45,T.height("frmn")*0.9*0.55);
                            ctx.fillStyle="rgba(255,255,255,1)";
                            ctx.fillRect(x+T.width("frmn")*0.9*0.28,y+T.height("frmn")*0.9*0.075,T.width("frmn")*0.9*0.45,T.height("frmn")*0.9*0.55);
                            ctx.closePath();
                            ctx.clip();
                            T.draw(ctx,"frmn",x,y,T.width("frmn")*0.9,T.height("frmn")*0.9);
                            ctx.restore();
    
                            if (mulGiftArray[counter]<-1) {
                                var hid=-(mulGiftArray[counter]+2);
                                this.drawMonster(ctx,mulGiftArray[counter],x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5+5,undefined,false,0.7,mdata.city.hero[hid]||1,true);
                                text(ctx,HERO[hid].name,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5+13,"30px"+FONT,"white","center","middle");
                            }
                            else {
                                var icon = giftData[mulGiftArray[counter]].prize;
                                if (giftData[mulGiftArray[counter]].t == "AS") {
                                    T.draw(ctx,icon,x+T.width("frmn")*0.9*0.5-T.width(icon)*0.75*0.5,y+T.height("frmn")*0.9*0.5-40,T.width(icon)*0.75,T.height(icon)*0.75);
                                    text(ctx,giftData[mulGiftArray[counter]].name,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5-55,"28px"+FONT,"white","center","middle");
                                    text(ctx,"x"+giftData[mulGiftArray[counter]].v,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5+12,"36px"+FONT,"white","center","middle");
                                }
                                else if (giftData[mulGiftArray[counter]].t == "CS") {
                                    T.draw(ctx,icon,x+T.width("frmn")*0.9*0.5-T.width(icon)*0.35*0.5,y+T.height("frmn")*0.9*0.5-45,T.width(icon)*0.35,T.height(icon)*0.35);
                                    text(ctx,giftData[mulGiftArray[counter]].name,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5-55,"28px"+FONT,"white","center","middle");
                                    text(ctx,"x"+giftData[mulGiftArray[counter]].v,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5+12,"36px"+FONT,"white","center","middle");
                                }
                            }
                            ++counter;
                        }
                    }
                }
                // close
                var cw = T.width("0evr");
                var ch = T.height("0evr");
                var mgcrect = (new Rect(W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13,cw,ch)).small();
                if (mgcrect.isInside(GM.x,GM.y)) {
                    T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
                    this.addZone("cmulgf",mgcrect,"cmulgf");
                } else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
            }
        }
/*
        T.draw(ctx,"frmn",W*0.5-T.width("frmn")*0.5,H*0.5-T.height("frmn")*0.5);

        if(giftArray!=undefined){
            var toDraw = undefined;
            if (giftCounter < 10000){
                giftCounter+=100;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 11000) {
                giftCounter+=80;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 12000) {
                giftCounter+=60;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 13000) {
                giftCounter+=50;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 13500) {
                giftCounter+=30;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else if (giftCounter < 14000) {
                giftCounter+=10;
                toDraw = 29 - Math.floor(giftCounter/500);
            } else {
                toDraw = 0;
            }

            if (giftArray[toDraw]<-1) {
                var hid=-(giftArray[toDraw]+2);
                this.drawMonster(ctx,giftArray[toDraw],W*0.5,H*0.5,undefined,false,0.8,mdata.city.hero[hid]||1,true);
                text(ctx,HERO[hid].name,W*0.5,H*0.5+15,"36px"+FONT,"white","center","middle");
            }
            else {
                var icon = giftData[giftArray[toDraw]].prize;
                if (giftData[giftArray[toDraw]].t == "AS") {
                    T.draw(ctx,icon,W*0.5-T.width(icon)*0.5*0.75,H*0.5-45,T.width(icon)*0.75,T.height(icon)*0.75);
                    text(ctx,giftData[giftArray[toDraw]].name,W*0.5,H*0.5-55,"30px"+FONT,"white","center","middle");
                    text(ctx,"x"+giftData[giftArray[toDraw]].v,W*0.5,H*0.5+12,"36px"+FONT,"white","center","middle");
                }
                else if (giftData[giftArray[toDraw]].t == "CS") {
                    T.draw(ctx,icon,W*0.5-T.width(icon)*0.5*0.35,H*0.5-50,T.width(icon)*0.35,T.height(icon)*0.35);
                    text(ctx,giftData[giftArray[toDraw]].name,W*0.5,H*0.5-55,"30px"+FONT,"white","center","middle");
                    text(ctx,"x"+giftData[giftArray[toDraw]].v,W*0.5,H*0.5+12,"36px"+FONT,"white","center","middle");
                }
            }
        } else {
            T.draw(ctx,"ao3i",W*0.5-T.width("ao3i")*0.5,H*0.5-T.height("ao3i")*0.5);
        }

        if (gOpenSync) {
            this.spinner(ctx,W*0.5,H*0.5-20,30);
        }

        if (mulGift) {
            roundedRect(ctx,W*0.5-W*0.05*0.5-1,H*0.715-1,W*0.05+2,H*0.05+2,10,"rgb(0,0,0");
            roundedRect(ctx,W*0.5-W*0.05*0.5,H*0.715,W*0.05,H*0.05,10,"rgb(232,192,63");
            text(ctx,"x10",W*0.5,H*0.715+10,"28px"+FONT,"white","center","middle");
        } else {
            text(ctx,"Hold ctrl to x10 opening!",W*0.5,H*0.715+10,"20px"+FONT,"white","center","middle");
        }

        var orect = (new Rect(W*0.5-T.width("orld")*0.75*0.5,H*0.8-T.height("orld")*0.5*0.5-10,T.width("orld")*0.75,T.height("orld")*0.5)).small();
        if (orect.isInside(GM.x,GM.y) && CS>=20) {
            T.draw(ctx,"5lrd",W*0.5-T.width("5lrd")*0.5,H*0.8-T.height("5lrd")*0.5-10);
            if (mulGift) {
                if (CS >= 200) this.addZone("mulgift",orect,"mulgift",{target: 10});
                else this.addZone("mulgift",orect,"mulgift",{target: Math.floor(CS/20)});
            }
            else this.addZone("gift",orect,"gift");
        } else T.draw(ctx,"orld",W*0.5-T.width("orld")*0.5,H*0.8-T.height("orld")*0.5-10);


        var gcrect = (new Rect(W*0.5-T.width("0gcg")*0.6*0.5,H*0.8-T.height("0gcg")*0.6*0.5+60,T.width("0gcg")*0.6,T.height("0gcg")*0.6)).small();
        if (gcrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0gcg",W*0.5-T.width("0gcg")*0.6*0.5,H*0.8-T.height("0gcg")*0.6*0.5+60,T.width("0gcg")*0.6,T.height("0gcg")*0.6);
            this.addZone("getCS",gcrect,"mshop",{target: true});
        }
        else T.draw(ctx,"00kg",W*0.5-T.width("00kg")*0.6*0.5,H*0.8-T.height("00kg")*0.6*0.5+60,T.width("00kg")*0.6,T.height("00kg")*0.6);
        text(ctx,"Get More",W*0.5-10,H*0.8+60,"36px"+FONT,"black","center","middle");
        text(ctx,"* You can also get Candies with OTO, Lucy, Seasson Pass and Weekly Chest",W*0.5,H*0.8+85,"20px"+FONT,"white","center","middle");
        T.draw(ctx,"8tlo",W*0.5-T.width("8tlo")*0.2*0.5+45,H*0.8+60-T.height("8tlo")*0.2*0.5,T.width("8tlo")*0.2,T.height("8tlo")*0.2);


        var irect = (new Rect(W*0.5-bgw*0.5+10,H*0.5+bgh*0.5-10-T.height("hr29"),T.width("hr29"),T.height("hr29"))).small();
        if (irect.isInside(GM.x,GM.y)) this.addZone("igift",irect,"igift");

        // Visual Percentages
        var pbw = W*0.2;
        var pbh = H*0.65;
        var pbx = W*0.5 - bgw*0.35;
        var pby = H*0.5;
        var namespercs = ["H.Common: ","H.Rare: ","H.Legendary: ","AS x01: ","AS x03: ","AS x12: ","C.Stick x10: ","C.Stick x25: ","C.Stick x100: "];
        var valpercs = ["19.8%","9.99%","3.33%","19.8%","9.99%","3.33%","19.8%","9.99%","3.33%"];

        roundedRect(ctx,pbx-pbw*0.5,pby-pbh*0.5,pbw,pbh,5,"rgba(199,23,25,0.8)");
        ctx.fillStyle="rgba(204,141,87,0.8)";
        ctx.fillRect(pbx-pbw*0.5+4,pby-pbh*0.5+30,pbw-8,pbh-34);
        text(ctx,"GIFTS PERCENTAGES",pbx,pby-pbh*0.5+15,"36px"+FONT,"white","center","middle");
        for (var i = 0; i < 9; ++i) {
            text(ctx,namespercs[i],pbx-pbw*0.5+7,pby-pbh*0.25+(i*26),"40px"+FONT,"white","left","middle");
            text(ctx,valpercs[i],pbx+pbw*0.5-7,pby-pbh*0.25+(i*26),"40px"+FONT,"white","right","middle");
        }


        // Visual Improvements
        var ibw = W*0.2;
        var ibh = H*0.65;
        var ibx = W*0.5 + bgw*0.35;
        var iby = H*0.5;
        var mInfo = undefined;

        roundedRect(ctx,ibx-ibw*0.5,iby-ibh*0.5,ibw,ibh,5,"rgba(199,23,25,0.8)");
        ctx.fillStyle="rgba(204,141,87,0.8)";
        ctx.fillRect(ibx-ibw*0.5+4,iby-ibh*0.5+30,ibw-8,ibh-34);
        text(ctx,"2018 HEROES",ibx,iby-ibh*0.5+15,"36px"+FONT,"white","center","middle");
        for (var i = 0; i < 3; ++i) {
            var mrect = (new Rect(ibx-T.width(HERO[137+i].img)*1.3*0.5,iby-ibh*0.138+(i*ibh*0.3)-T.height(HERO[137+i].img)*1.3,T.width(HERO[137+i].img)*1.3,T.height(HERO[137+i].img)*1.3)).small();
            if (mrect.isInside(GM.x,GM.y)) mInfo=(137+i);
            this.drawMonster(ctx,-2-137-i,ibx,iby-ibh*0.138+(i*ibh*0.3),undefined,undefined,1.3,1);
        }
        */

        bgw = W*0.8;
        bgh = H*0.9;
        // Close
        var cw = T.width("0evr");
        var ch = T.height("0evr");
        var crect = (new Rect(W*0.5+bgw*0.5-cw*1.1-1,H*0.5-bgh*0.5+3,cw,ch)).small();
        if (crect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"7otr",W*0.5+bgw*0.5-cw*1.1-1-1,H*0.5-bgh*0.5+3-1,cw+2,ch+2);
            this.addZone("ochr",crect,"ochr");
        }
        else T.draw(ctx,"7otr",W*0.5+bgw*0.5-cw*1.1-1,H*0.5-bgh*0.5+3,cw,ch);
        
        /*
        if (mInfo!==undefined) {
            ctx.fillStyle="rgba(0,0,0,0.8)";
            ctx.fillRect(W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);
            var elements = ["Air","Earth","Fire","Water","Void"];
            var x = W*0.5;
            var y = H*0.25;

            text(ctx,HERO[mInfo].name,x,y-30,"50px"+FONT,"white","center","middle");
            this.drawMonster(ctx,-2-mInfo,x,y+220,undefined,false,2,mdata.city.hero[mInfo]);

            var mhp = mtext(ctx,level2stats(mInfo,mdata.city.hero[mInfo]).hp,x+70,y+260,"36px"+FONT,"white","center","left");
            text(ctx,level2stats(mInfo,mdata.city.hero[mInfo]).hp,x+70,y+260,"36px"+FONT,"white","center","left");
            T.draw(ctx,"0fuu",x+70-T.width("0fuu")-mhp/2,y+260-T.height("0fuu")/2);
            text(ctx,level2stats(mInfo,mdata.city.hero[mInfo]).atk,x-70,y+260,"36px"+FONT,"white","center","right");
            T.draw(ctx,"0e9t",x-85-T.width("0e9t"),y+260-T.height("0e9t")/2);

            text(ctx,"LEVEL: "+mdata.city.hero[mInfo],x,y+290,"36px"+FONT,"white","center","middle");
            text(ctx,"ELEMENT: "+elements[HERO[mInfo].type],x,y+320,"36px"+FONT,"white","center","middle");
            mltext(ctx,this.skill2text(HERO[mInfo].skill,mdata.city.hero[mInfo],false).short,x,y+350,"28px"+FONT,"white","center","middle");

            text(ctx,"This hero can be level with: ",x,y+430,"36px"+FONT,"rgba(201,244,255,1)","center","middle");
        }

        // Multiple Gift Pop-UP
        if (mulGiftArray !== undefined) {
            ctx.fillStyle="rgba(0,0,0,0.8)";
            ctx.fillRect(W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);
            var bgw = W*0.78;
            var bgh = H*0.5;
            ctx.fillStyle="rgba(255,255,255,1)";
            ctx.fillRect(W*0.5-bgw*0.5-2,H*0.5-bgh*0.5-2,bgw+4,bgh+4);
            ctx.fillStyle="rgba(142,119,134,1)";
            ctx.fillRect(W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);
 
            // Draw Prizes
            var counter = 0;
            for (var i=0; i<2; ++i) {
                for (var j=0; j<5; ++j) {
                    if (counter < mulGiftArray.length) {
                        var x = W*0.5-bgw*0.5-60+(bgw*0.185*j);
                        var y = H*0.5-bgh*0.5+(bgh*0.45*i);
                        ctx.save();
                        ctx.beginPath();
                        ctx.rect(x+T.width("frmn")*0.9*0.28,y+T.height("frmn")*0.9*0.075,T.width("frmn")*0.9*0.45,T.height("frmn")*0.9*0.55);
                        ctx.fillStyle="rgba(255,255,255,1)";
                        ctx.fillRect(x+T.width("frmn")*0.9*0.28,y+T.height("frmn")*0.9*0.075,T.width("frmn")*0.9*0.45,T.height("frmn")*0.9*0.55);
                        ctx.closePath();
                        ctx.clip();
                        T.draw(ctx,"frmn",x,y,T.width("frmn")*0.9,T.height("frmn")*0.9);
                        ctx.restore();

                        if (mulGiftArray[counter]<-1) {
                            var hid=-(mulGiftArray[counter]+2);
                            this.drawMonster(ctx,mulGiftArray[counter],x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5+5,undefined,false,0.7,mdata.city.hero[hid]||1,true);
                            text(ctx,HERO[hid].name,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5+13,"30px"+FONT,"white","center","middle");
                        }
                        else {
                            var icon = giftData[mulGiftArray[counter]].prize;
                            if (giftData[mulGiftArray[counter]].t == "AS") {
                                T.draw(ctx,icon,x+T.width("frmn")*0.9*0.5-T.width(icon)*0.75*0.5,y+T.height("frmn")*0.9*0.5-40,T.width(icon)*0.75,T.height(icon)*0.75);
                                text(ctx,giftData[mulGiftArray[counter]].name,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5-55,"28px"+FONT,"white","center","middle");
                                text(ctx,"x"+giftData[mulGiftArray[counter]].v,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5+12,"36px"+FONT,"white","center","middle");
                            }
                            else if (giftData[mulGiftArray[counter]].t == "CS") {
                                T.draw(ctx,icon,x+T.width("frmn")*0.9*0.5-T.width(icon)*0.35*0.5,y+T.height("frmn")*0.9*0.5-45,T.width(icon)*0.35,T.height(icon)*0.35);
                                text(ctx,giftData[mulGiftArray[counter]].name,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5-55,"28px"+FONT,"white","center","middle");
                                text(ctx,"x"+giftData[mulGiftArray[counter]].v,x+T.width("frmn")*0.9*0.5,y+T.height("frmn")*0.9*0.5+12,"36px"+FONT,"white","center","middle");
                            }
                        }
                        ++counter;
                    }
                }
            }
            // close
            var cw = T.width("0evr");
            var ch = T.height("0evr");
            var crect = (new Rect(W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13,cw,ch)).small();
            if (crect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
                this.addZone("cmulgf",crect,"cmulgf");
            }
            else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
        }
        */
    }
    this.createGift = function () {
        var models = ["qy7c_0","qy7c_1","qy7c_2"];
        var gift = {
            x: 50,
            w: randIntInclusive(90,130),
            h: randIntInclusive(100,150),
            model: models[randIntInclusive(0,2)],
        };
        return gift;
    }
    this.drawAnniversary = function (ctx) {
        var levels = [1000000,3000000,10000000,1000000000];
        var currentStage = 0;
        this.updateServerClicks();
        if (serverClicks !== undefined) {
            if (serverClicks.visible>=levels[2]) currentStage = 3;
            else if (serverClicks.visible>=levels[1]) currentStage = 2;
            else if (serverClicks.visible>=levels[0]) currentStage = 1;
        }

        T.draw(ctx,"qt6f",W*0.5-T.width("qt6f")*0.5,H*0.07);
        T.draw(ctx,"0ko4",W*0.5-T.width("0ko4")*0.74*0.5,H*0.55-T.height("0ko4")*0.742*0.5,T.width("0ko4")*0.742,T.height("0ko4")*0.742);
        T.draw(ctx,"zylz",W*0.5-T.width("zylz")*0.5,H*0.195);
        T.draw(ctx,"n80x",W*0.5-T.width("n80x")*0.5,H*0.285);
        //T.draw(ctx,"gn7m",W*0.155,H*0.26);

        // Bars
        T.draw(ctx,"pgl2_0",W*0.67,H*0.19);
        if (serverClicks !== undefined) {
            if (currentStage <= 2) {
                var bottom = H*0.19+T.height("pgl2_1");
                var difference = 1000000;
                var multiplier = serverClicks.visible;
                if (currentStage > 0) {
                    difference = levels[currentStage] - levels[currentStage-1];
                    multiplier = serverClicks.visible - levels[currentStage-1];
                }
                var objectives = [bottom,H*0.82+T.height("r199")*0.5,H*0.82+T.height("r199")*0.5-H*0.295,H*0.82-T.height("r199")*0.5-H*0.295*2];
                var toFill = ((objectives[currentStage]-objectives[currentStage+1])/difference)*multiplier;
                ctx.save();
                ctx.beginPath();
                ctx.rect(W*0.67,objectives[currentStage]-toFill,T.width("pgl2_1"),H);
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,"pgl2_1",W*0.67,H*0.19);
                ctx.restore();
            } else T.draw(ctx,"pgl2_1",W*0.67,H*0.19);
        }
        T.draw(ctx,"pgl2_2",W*0.67,H*0.19);

        // Other Bar
        var prizes = ["25 AS","40 PG","70 CC","15 KEYS","10 HERO KEYS","500 UM","1.500.000 SD","50 AS","100 PG","200 CC"];
        T.draw(ctx,"pgl2_0",W*0.33-T.width("pgl2_0"),H*0.19);
        if (serverClicks !== undefined) {
            var bottom = H*0.19+T.height("pgl2_1");
            var stack = H*0.069;
            var completed = Math.floor(serverClicks.visible/1000000);
            var toFill = (T.height("pgl2_1")/10000000)*serverClicks.visible;
            if (currentStage <= 2) {                
                ctx.save();
                ctx.beginPath();
                ctx.rect(W*0.33-T.width("pgl2_1"),bottom-toFill,T.width("pgl2_1"),H);
                ctx.closePath();
                ctx.clip();
                T.draw(ctx,"pgl2_1",W*0.33-T.width("pgl2_0"),H*0.19);
                ctx.restore();
            } else T.draw(ctx,"pgl2_1",W*0.33-T.width("pgl2_1"),H*0.19);
            for (var i = 0; i < 10; ++i) {
                if (Math.floor(serverClicks.visible/1000000) <= i) text(ctx,prizes[i],W*0.33-T.width("pgl2_1")-10,bottom-stack-(stack*i),"20px"+FONT,"black","right","middle");
                else text(ctx,prizes[i],W*0.33-T.width("pgl2_1")-10,bottom-stack-(stack*i),"26px"+FONT,"white","right","middle");
            }
        }
        T.draw(ctx,"pgl2_2",W*0.33-T.width("pgl2_2"),H*0.19);

        // Heroes Zone
        var bases = ["0bdr","084l","08h8"];
        var stats = [{atk: 16, hp: 42},{atk: 30, hp: 66},{atk: 40, hp: 100}]
        for (var i = 0; i < 3; ++i) {
            T.draw(ctx,"tw06",W*0.74,H*0.678-(H*0.209*i));
            T.draw(ctx,bases[i],W*0.74+T.width("tw06")*0.5-T.width(bases[i])*0.5,H*0.678+2-(H*0.209*i));
            text(ctx,stats[i].atk,W*0.74+T.width("tw06")*0.5-16,H*0.678+2-(H*0.209*i)+76,"24px"+FONT,"white","center","middle");
            text(ctx,stats[i].hp,W*0.74+T.width("tw06")*0.5+16,H*0.678+2-(H*0.209*i)+76,"24px"+FONT,"white","center","middle");
        }

        // Spheres
        for (var i = 0; i < 3; ++i) {
            if (serverClicks !== undefined && i<currentStage) T.draw(ctx,"rug1",W*0.72,H*0.82-(H*0.295*i));
            else T.draw(ctx,"r199",W*0.72,H*0.82-(H*0.295*i));
        }

        // Draw Clicks
        if (serverClicks === undefined) {
            this.spinner(ctx,W*0.5,H*0.5,40);
        } else {
            if (serverClicks.player===0) text(ctx,"You have to click at least one, to participate in this event",W*0.505,H*0.83,"22px"+FONT,"black","center","middle");
            else text(ctx,Math.round(serverClicks.player).toLocaleString(),W*0.5,H*0.83,"36px"+FONT,"black","center","middle");

            text(ctx,Math.round(serverClicks.visible).toLocaleString(),W*0.5,H*0.255,"40px"+FONT,"black","center","middle");
            
            // Click Zone
            var idc = currentStage.toString();
            if (currentStage > 2) idc = 2;
            T.draw(ctx,"tf5s_"+idc,W*0.5-T.width("tf5s")*0.5,H*0.55-T.height("tf5s")*0.5);
            var clickRect=(new Rect(W*0.504-W*0.1,H*0.55-H*0.15,W*0.1*2,H*0.15*2)).small();
            if (clickRect.isInside(GM.x,GM.y)&&serverClicks.cap>0) {
                this.addZone("anni",clickRect,"anni");
            }
        }

        // Close
        var closerect=(new Rect(W*0.825,H*0.063,T.width("cjq4"),T.height("cjq4"))).small(); 
        if (closerect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"dykv",W*0.825,H*0.063);
            this.addZone("oyear",closerect,"oyear",{target:false});
        } else T.draw(ctx,"cjq4",W*0.825,H*0.063);
    }
    this.draw3Anniversary = function (ctx) {
        var bgw = W*0.8;
        var bgh = H*0.9;

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(40, 168, 248,0.7)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

        text(ctx,"Third Year Anniversary!",W*0.5,H*0.5-bgh*0.5+40,"70px"+CFONT,"white","center","middle");

        text(ctx,"In order to celebrate our third year anniversary, promotion 6 is here!",W*0.5,H*0.23,"40px"+FONT,"white","center","middle");

        text(ctx,"Only today, you can instantly upgrade two 99 hero to Promotion 6! 100% for free!",W*0.5,H*0.3,"40px"+FONT,"white","center","middle");

        roundedRect(ctx,W*0.5-W*0.77*0.5,H*0.63-H*0.55*0.5,W*0.77,H*0.55,5,"rgba(255,255,255,0.3)");

        if (mdata.city.anniversary > 0) {
            var promotable = [];
            for (var i = 0; i < HERO.length; ++i) if (HERO[i].rarity !== 5 && mdata.city.hero[i] == 99 && mdata.city.promo[i] < 6) promotable.push(i);
    
            var count = 0+(yearpage*36);
    
            for (var i = 0; i < 9; ++i) {
                for (var j = 0; j < 4; ++j) {
                    if (count < promotable.length) {
                        roundedRect(ctx,W*0.18-W*0.07*0.5+(i*W*0.08),H*0.427-W*0.07*0.5+(j*H*0.13),W*0.07,W*0.07,1,"rgba(255,255,255,0.5)");
                        this.drawMonster(ctx,-2-promotable[count],W*0.18+(i*W*0.08),H*0.427+W*0.07*0.5-3+(j*H*0.13),undefined,false,0.75,mdata.city.hero[promotable[count]]);
                        if (!freep6sync) this.addZone("frpr6_"+count,(new Rect(W*0.18-W*0.07*0.5+(i*W*0.08),H*0.427-W*0.07*0.5+(j*H*0.13),W*0.07,W*0.07)).small(),"free3y",{target:promotable[count]});
                    }
                    ++count;
                }
            }
    
            // prev-next
            var nw=T.width("09sg");
            var nh=T.height("09sg");
            T.draw(ctx,"09sg",W*0.86,H*0.59,nw*0.5,nh*0.5);
            ctx.save();
            ctx.translate(W*0.5,H*0.5)
            ctx.scale(-1,1);
            T.draw(ctx,"09sg",W*0.36,H*0.09,nw*0.5,nh*0.5);
            ctx.restore();
            this.addZone("yearnext",(new Rect(W*0.86,H*0.59,nw*0.5,nh*0.5)).small(),"3ypr",{target:(yearpage+1)%Math.ceil(promotable.length/36)});
            this.addZone("yearprev",(new Rect(W*0.14-nw*0.5,H*0.59,nw*0.5,nh*0.5)).small(),"3ypr",{target:(yearpage-1+Math.ceil(promotable.length/36))%Math.ceil(promotable.length/36)});
            
        } else {
            text(ctx,"You already have spent all your free instant promotions!",W*0.5,H*0.59,"40px"+FONT,"black","center","middle");
        }

        
        
        // Close
        var closerect=(new Rect(W*0.825,H*0.063,T.width("cjq4"),T.height("cjq4"))).small(); 
        if (closerect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"dykv",W*0.825,H*0.063);
            this.addZone("oyear",closerect,"oyear",{target:false});
        } else T.draw(ctx,"cjq4",W*0.825,H*0.063);
    }   
    this.drawHalloween = function (ctx) {
        var sg_icon = "jcty";
        var bgw = W*0.8;
        var bgh = H*0.88;

        ctx.fillStyle="rgba(0,0,0,0.6)";
        ctx.fillRect(0,0,W,H);
        T.negative(ctx,"0ko4",W*0.5-bgw*0.5-8,H*0.5-bgh*0.5-8,bgw+16,bgh+16);
        ctx.fillStyle="#1b1311";
        ctx.fillRect(W*0.5-bgw*0.5-4,H*0.5-bgh*0.5-4,bgw+8,bgh+8);
        ctx.fillStyle="#2d2d2e";
        ctx.fillRect(W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);

        for (var i = 0; i < 4; ++i) {
            ctx.fillStyle="#2a1314";
            ctx.fillRect(W*0.5-bgw*0.5+W*0.09+W*0.18*i,H*0.5-bgh*0.5,W*0.09,bgh);
        }
        T.negative(ctx,"000p",W*0.5-T.width("000p")*1.1*0.5,H*0.07-T.height("000p")*0.75*0.5,T.width("000p")*1.1,T.height("000p")*0.75);
        text(ctx,"Path to Niflheim",W*0.5,H*0.5-bgh*0.5+10,"64px"+HFONT,"black","center","middle");
        
        if (halloweenMode=="fight") {     
            var mid = W*0.565;

            T.negative(ctx,"0ko4",mid-T.width("0ko4")*0.59*0.5,H*0.375-T.height("0ko4")*0.36*0.5,T.width("0ko4")*0.59,T.height("0ko4")*0.36);
            roundedRect(ctx,mid-W*0.2*0.5,H*0.23-H*0.1*0.5,W*0.2,H*0.1,10,"#747474");
            roundedRect(ctx,mid-W*0.2*0.5+7,H*0.23-H*0.1*0.5+7,W*0.2-14,H*0.1-14,10,"#722929");
            T.negative(ctx,"05u0",mid-T.width("05u0")*1.15*0.5,H*0.315-T.height("05u0")*0.85*0.5,T.width("05u0")*1.15,T.height("05u0")*0.85);

            text(ctx,"Level: "+CQW.halloween.level,W*0.33,H*0.225,"40px"+HFONT,"black","left","middle");

            text(ctx,"Free SG: "+timer(((mdata.city.halloween.dailyClaimed+1)*24*60*60*1000-Date.now())/1000),W*0.685,H*0.225,"40px"+HFONT,"black","left","middle");

            text(ctx,ZG,mid-15,H*0.222,"56px"+HFONT,"white","center","middle");
            T.draw(ctx,sg_icon,mid-T.width(sg_icon)*0.9*0.5+42,H*0.225-T.height(sg_icon)*0.9*0.5,T.width(sg_icon)*0.9,T.height(sg_icon)*0.9);

            var reward = "20 Shadow Gems";
            if (CQW.halloween.level==99) reward = "Common Halloween Hero";
            else if (CQW.halloween.level==249) reward = "Rare Halloween Hero";
            else if (CQW.halloween.level==499) reward = "Legendary Halloween Hero";
            else if (CQW.halloween.level==999) reward = "Ascended Halloween Hero";
            text(ctx,"Next Reward: "+reward,mid,H*0.51,"40px"+HFONT,"black","center","middle");

            if (CQW.halloween.level <= 1000) {
                for (var i = 0; i < 6; ++i) {
                    this.drawMonster(ctx,CQW.halloween.setup[i],W*0.342+i*W*0.09,H*0.44,undefined,false,1);
                }
    
                var frect=(new Rect(mid-T.width("00kg")*0.8*0.5,H*0.65-T.height("00kg")*0.5,T.width("00kg")*0.8,T.height("00kg"))).small();
                if (frect.isInside(GM.x,GM.y) && !halloweenSync) {
                    T.negative(ctx,"0gcg",mid-T.width("0gcg")*0.8*0.5,H*0.65-T.height("0gcg")*0.5,T.width("0gcg")*0.8,T.height("0gcg"));
                    this.addZone("fightH",frect,"fightH");
                } else T.negative(ctx,"00kg",mid-T.width("00kg")*0.8*0.5,H*0.65-T.height("00kg")*0.5,T.width("00kg")*0.8,T.height("00kg"));
                text(ctx,"FIGHT",mid,H*0.65-2,"64px"+HFONT,"black","center","middle");
            } else {
                text(ctx,"Congratulations! You have completed the Halloween Event!",mid,H*0.37,"40px"+HFONT,"white","center","middle");
                text(ctx,"Thanks for participating in it! GaiaByte Team.",mid,H*0.37+25,"40px"+HFONT,"white","center","middle");
            }
            

            this.drawMonsterTabs(ctx,"halloween");
            if (cityClick!=undefined) {
                var id = cityClick.id;
                var heroes=Array(HERO.length).fill(0);
                for (var i=0;i<heroes.length;++i) {
                    if (HERO[i].rarity==5) heroes[i] = 0;
                }
                var promotion = Array(HERO.length).fill(0);
                var lvl = 1;
                if (id<-1) lvl=heroes[-(id+2)];
                if (swapping) {
                    var mon = data.halloween[cityClick.initPos];
                    if (mon < -1) {
                        var img=HERO[(cityClick.id*-1)-2].img;
                    }
                    else {
                        var img=MONSTERS[cityClick.id].img;
                    }
                    this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,promotion[-(id+2)]);
                }
                else {
                    if (typeTab!=4 && !searchTab) {
                        var img=MONSTERS[cityClick.id].img;
                    }
                    else{
                        var img=HERO[(cityClick.id*-1)-2].img;
                    }
                    this.drawMonster(ctx,id,GM.x,GM.y+T.height(img)/2,undefined,false,1,lvl,true,true,promotion[-(id+2)]);
                }
            }
            var switchRect=(new Rect(W*0.172-T.width("07y4")*0.5,H*0.885,W*0.1,H*0.05)).small();
            if (switchRect.isInside(GM.x,GM.y)) {
                T.negative(ctx,"07y4",W*0.172-T.width("07y4")*0.5,H*0.885);
                this.addZone("shal",switchRect,"shal",{target:"manager"});
            } else T.negative(ctx,"0539",W*0.172-T.width("0539")*0.5,H*0.885);
            text(ctx,"MANAGER",W*0.172,H*0.885+H*0.05*0.5-3,"36px"+HFONT,"black","center","middle");

            T.draw(ctx,"0nww",W*0.8,H*0.06);
            var toolrect=(new Rect(W*0.8,H*0.06,T.width("0nww"),T.height("0nww"))).small();
            if (toolrect.isInside(GM.x,GM.y)) {
                ctx.fillStyle="black";
                ctx.fillRect(W*0.5-bgw*0.5,H*0.5-bgh*0.5,bgw,bgh);

                text(ctx,"Path to Niflheim",W*0.5,H*0.5-bgh*0.5+30,"64px"+HFONT,"white","center","middle");

                text(ctx,"Welcome to the Path of Niflheim, overcome the challenges on each floor and ascend further",W*0.13,H*0.2,"32px"+HFONT,"white","left","middle");
                text(ctx,"and further up the tower. Overcome enough challenges and earn yourself a new hero or two,",W*0.13,H*0.2+25,"32px"+HFONT,"white","left","middle");
                text(ctx,"become strong enough to complete the tower and you'll win a brand new Ascended Hero!",W*0.13,H*0.2+50,"32px"+HFONT,"white","left","middle");

                text(ctx,"- Every day you will earn 100 Shadow Gems",W*0.13,H*0.25+75,"32px"+HFONT,"white","left","middle");
                text(ctx,"- Every floor you beat awards 20 Shadow Gems",W*0.13,H*0.25+100,"32px"+HFONT,"white","left","middle");
                //text(ctx,"- For every kred spent, you will receive one Shadow Gem",W*0.13,H*0.25+125,"32px"+HFONT,"white","left","middle");
                text(ctx,"- Every time that you spend a Shadow Gem on level up a Hero, you will receive PG/AS",W*0.13,H*0.25+150,"32px"+HFONT,"white","left","middle");
                text(ctx,"  Common Level: 1PG, Rare Level: 3PG, Legendary Level: 12PG and Ascended Level: 30AS.",W*0.13,H*0.25+175,"32px"+HFONT,"white","left","middle");
                text(ctx,"- The event will be available till 4th of November at 23:59 GMT",W*0.13,H*0.25+200,"32px"+HFONT,"white","left","middle");

                text(ctx,"EVENT REWARDS:",W*0.5,H*0.65,"40px"+HFONT,"white","center","middle");
                var floors = [100,250,500,1000];
                for (var i = 0; i < 4; ++i) {
                    this.drawMonster(ctx,-2-234-i,W*0.3+i*W*0.138,H*0.87,undefined,false,1.25,1,true,true);
                    text(ctx,"Floor "+floors[i],W*0.3+i*W*0.138,H*0.895,"30px"+FONT,"white","center","middle");
                }
            }
        } else if (halloweenMode=="manager") {
            var halloweenHero = new Array(HERO.length).fill(null).map(()=> ({ id: 0, level: 0 }));
            for (var i=0; i<halloweenHero.length; ++i) {
                halloweenHero[i].id = i;
                halloweenHero[i].level = mdata.city.halloween.hero[i];
            }
            for (var i=0; i<halloweenHero.length; ++i) {
                if (HERO[halloweenHero[i].id].rarity == 5) {
                    halloweenHero.splice(i,1);
                    --i;
                } else if (halloweenHero[i].level == 0) {
                    halloweenHero.splice(i,1);
                    --i;
                }
            }

            ctx.fillStyle="rgba(0,0,0,0.6)";
            ctx.fillRect(W*0.5-W*0.7*0.5,H*0.5-H*0.68*0.5,W*0.7,H*0.68);

            var MLENGTH = halloweenHero.length;
            var maxPages= Math.ceil((halloweenHero.length)/18);
            var count = 18*halloweenPage;
            for (var i = 0; i < 3; ++i) {
                for (var j = 0; j < 6; ++j) {
                    if (count < MLENGTH) {
                        ctx.fillStyle="rgb(255,255,255)";
                        ctx.fillRect(W*0.22-W*0.1*0.5+j*W*0.112,H*0.32-W*0.1*0.5+i*W*0.112,W*0.1,W*0.1);
                        ctx.fillStyle="rgba(0,0,0,0.6)";
                        ctx.fillRect(W*0.22-W*0.1*0.5+j*W*0.112+2,H*0.32-W*0.1*0.5+i*W*0.112+2,W*0.1-4,W*0.1-4);
                        var heroRect=(new Rect(W*0.22-W*0.1*0.5+j*W*0.112,H*0.32-W*0.1*0.5+i*W*0.112,W*0.1,W*0.1)).small();
                        if (heroRect.isInside(GM.x,GM.y) && halloweenLevelUp == undefined) {
                            ctx.fillStyle="rgba(255,255,255,0.3)";
                            ctx.fillRect(W*0.22-W*0.1*0.5+j*W*0.112+2,H*0.32-W*0.1*0.5+i*W*0.112+2,W*0.1-4,W*0.1-4);
                            this.addZone("upHal_"+count,heroRect,"upHal",{target:count});
                        }
                        this.drawMonster(ctx,-2-halloweenHero[count].id,W*0.22+j*W*0.112,H*0.32+W*0.1*0.5+i*W*0.112-6,undefined,false,1,halloweenHero[count].level,true,base,0);
                        ++count;
                    }
                }
            }

            var nw=T.width("09sg");
            var nh=T.height("09sg");
            ctx.save();
            ctx.translate(W*0.5,H*0.5);
            ctx.rotate(-90*Math.PI/180);
            T.draw(ctx,"09sg",H*0.285,0-nw*0.5,nw*0.5,nh*0.5);
            ctx.restore();
            ctx.save();
            ctx.translate(W*0.5,H*0.5);
            ctx.rotate(90*Math.PI/180);
            T.draw(ctx,"09sg",H*0.285,0-nw*0.5,nw*0.5,nh*0.5);
            ctx.restore();
            this.addZone("hprev",(new Rect(W*0.5-nh*0.5*0.5,H*0.18,nh*0.5,nw*0.5)).small(),"halpage",{target:(halloweenPage-1+maxPages)%maxPages});
            this.addZone("hnext",(new Rect(W*0.5-nh*0.5*0.5,H*0.78,nh*0.5,nw*0.5)).small(),"halpage",{target:(halloweenPage+1)%maxPages});

            var switchRect=(new Rect(W*0.172-T.width("07y4")*0.5,H*0.885,W*0.1,H*0.05)).small();
            if (switchRect.isInside(GM.x,GM.y)) {
                T.negative(ctx,"07y4",W*0.172-T.width("07y4")*0.5,H*0.885);
                this.addZone("shal",switchRect,"shal",{target:"fight"});
            } else T.negative(ctx,"0539",W*0.172-T.width("0539")*0.5,H*0.885);
            text(ctx,"FIGHT",W*0.172,H*0.885+H*0.05*0.5-3,"36px"+HFONT,"black","center","middle");

            if (halloweenLevelUp !== undefined) {
                var pw = W*0.3;
                var ph = H*0.6;

                var price=1;
                if (HERO[halloweenHero[halloweenLevelUp].id].rarity==1) price=3;
                else if (HERO[halloweenHero[halloweenLevelUp].id].rarity==2) price=12;
                else if (HERO[halloweenHero[halloweenLevelUp].id].rarity==3) price=60;

                if (halllvlmode == 1) price*=10 ;
                if (halllvlmode == 2) {
                    var maxreachable=Math.floor(ZG/price);
                    if (maxreachable+halloweenHero[halloweenLevelUp].level>98) maxreachable = 99 - halloweenHero[halloweenLevelUp].level;
                    price*=maxreachable;
                }

                ctx.fillStyle="rgba(0,0,0,0.6)";
                ctx.fillRect(0,0,W,H);

                ctx.fillStyle="#969696";
                ctx.fillRect(W*0.5-pw*0.5,H*0.5-ph*0.5,pw,ph);
                ctx.fillStyle="#F6FAFD";
                ctx.fillRect(W*0.5-pw*0.5+5,H*0.5-ph*0.5+5,pw-10,ph-10);
                ctx.fillStyle="rgba(0,0,0,0.5)";
                ctx.fillRect(W*0.5-pw*0.5+5,H*0.5-ph*0.5+5,pw-10,ph-10);

                text(ctx,HERO[halloweenHero[halloweenLevelUp].id].name,W*0.5,H*0.25,"54px"+HFONT,"black","center","middle");

                ctx.fillStyle="rgba(0,0,0,1)";
                ctx.fillRect(W*0.5-W*0.15*0.5,H*0.425-W*0.15*0.5,W*0.15,W*0.15);
                ctx.fillStyle="rgba(255,255,255,1)";
                ctx.fillRect(W*0.5-W*0.15*0.5+3,H*0.425-W*0.15*0.5+3,W*0.15-6,W*0.15-6);

                this.drawMonster(ctx,-2-halloweenHero[halloweenLevelUp].id,W*0.5,H*0.425+W*0.15*0.5-5,undefined,false,1.6,halloweenHero[halloweenLevelUp].level,true,base,0);

                if (halloweenHero[halloweenLevelUp].level !== 99) {
                    text(ctx,level2stats(halloweenHero[halloweenLevelUp].id,halloweenHero[halloweenLevelUp].level,0).hp+" -> "+level2stats(halloweenHero[halloweenLevelUp].id,halloweenHero[halloweenLevelUp].level+1,0).hp,W*0.5,H*0.575,"40px"+HFONT,"black","center","middle");
                    text(ctx,level2stats(halloweenHero[halloweenLevelUp].id,halloweenHero[halloweenLevelUp].level,0).atk+" -> "+level2stats(halloweenHero[halloweenLevelUp].id,halloweenHero[halloweenLevelUp].level+1,0).atk,W*0.5,H*0.63,"40px"+HFONT,"black","center","middle");
                    T.draw(ctx,"0fuu",W*0.5-T.width("0fuu")*0.5-67,H*0.575-T.height("0fuu")/2+3);
                    T.draw(ctx,"0e9t",W*0.5-T.width("0e9t")*0.5-67,H*0.63-T.height("0e9t")/2+3);
                } else {
                    text(ctx,level2stats(halloweenHero[halloweenLevelUp].id,halloweenHero[halloweenLevelUp].level,0).hp,W*0.5,H*0.575,"40px"+HFONT,"black","center","middle");
                    text(ctx,level2stats(halloweenHero[halloweenLevelUp].id,halloweenHero[halloweenLevelUp].level,0).atk,W*0.5,H*0.63,"40px"+HFONT,"black","center","middle");
                    T.draw(ctx,"0fuu",W*0.5-T.width("0fuu")*0.5-47,H*0.575-T.height("0fuu")/2+3);
                    T.draw(ctx,"0e9t",W*0.5-T.width("0e9t")*0.5-47,H*0.63-T.height("0e9t")/2+3);
                }
 
                var lupRect=(new Rect(W*0.5-W*0.16*0.5,H*0.725-H*0.09*0.5,W*0.16,H*0.09)).small();
                if (lupRect.isInside(GM.x,GM.y) && price >=1 && ZG >= price && !halloweenSync) {
                    T.negative(ctx,"0gcg",W*0.5-W*0.16*0.5,H*0.725-H*0.09*0.5,W*0.16,H*0.09);
                    this.addZone("lupH",lupRect,"lupH",{target:halloweenHero[halloweenLevelUp].id,mode:halllvlmode});
                } else T.negative(ctx,"00kg",W*0.5-W*0.16*0.5,H*0.725-H*0.09*0.5,W*0.16,H*0.09);
                text(ctx,"LEVEL UP",W*0.5,H*0.725-10,"34px"+HFONT,"black","center","middle");
                text(ctx,"Price: "+price+"  ",W*0.485,H*0.725+9,"28px"+HFONT,"black","center","middle");
                T.draw(ctx,sg_icon,W*0.5-T.width(sg_icon)*0.5*0.5+32,H*0.725+11-T.height(sg_icon)*0.5*0.5,T.width(sg_icon)*0.5,T.height(sg_icon)*0.5);

                // Close
                var closerect=(new Rect(W*0.5+pw*0.5-T.width("cjq4")*0.5-8,H*0.5-ph*0.5+6,T.width("cjq4")*0.5,T.height("cjq4")*0.5)).small(); 
                if (closerect.isInside(GM.x,GM.y)) {
                    T.negative(ctx,"dykv",W*0.5+pw*0.5-T.width("cjq4")*0.5-8,H*0.5-ph*0.5+6,T.width("cjq4")*0.5,T.height("cjq4")*0.5);
                    this.addZone("chalh",closerect,"upHal",{target:undefined});
                } else T.negative(ctx,"cjq4",W*0.5+pw*0.5-T.width("cjq4")*0.5-8,H*0.5-ph*0.5+6,T.width("cjq4")*0.5,T.height("cjq4")*0.5);
            }
        }
        // Close
        var hcloserect=(new Rect(W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75)).small(); 
        if (hcloserect.isInside(GM.x,GM.y)) {
            T.negative(ctx,"dykv",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);
            this.addZone("closehall",hcloserect,"ohall",{target:false});
        } else T.negative(ctx,"cjq4",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);        
    }
    this.drawStGeorge = function (ctx) {
        var sTupgrades = {
            damage: [250,500,750,1000,1250,1500],
            stamina: [250,500,750,1000,1250,1500],
        };
        var material = ["Wood","Bronze","Silver","Gold","Diamond","Cosmite"];
        var bgw = W*0.85;
        var bgh = H*0.9;
        var dmgPointsRange = [4800,13200,25600,42400];
        var currentTotal = mdata.city.stGeorge.attacks.reduce((a, b) => a + b, 0);

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(220, 20, 60, 0.7)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

        // Flavour Zone
        roundedRect(ctx,W*0.5-bgw*0.475,H*0.5-bgh*0.45,bgw*0.45,bgh*0.55,5,"rgba(255,255,255,0.3)");
        text(ctx,"St.George Event!",W*0.5-bgw*0.475+bgw*0.45*0.5,H*0.5-bgh*0.45+20,"40px"+FONT,"black","center","middle");
        var flavourtexts = [
            "What have they done? We tried to warn them to love and care for the Dragons they were raising! Instead they taught them to fight?! You must help us, the Dragons have ran riot!",
            "You've managed to defeat and tame a Dragon we believe was called Pluvia? At least that's what Augusta was shouting, before her house was washed away. Hopefully you'll take better care of Pulvia than Augusta did! You must help us with the  remaining Dragons though!",
            "Silex. This one was definitely called Silex. The whimpering voice of Crispus under the pile of rubble was definitely pleading with Silex before his voice faded away and ceased. It seems Silex likes you.",
            "This is Caeli, we think. All we heard was 'Caeliiiiiiiiiiiiiiiiiiiii' as Julius was swept away at a speed never seen before! Take care of Caeli, we don't want a repeat of what has happened here.",
            "Ignis. Definitely Ignis. Nona always had an interest in fire, explains why her house burnt down three times before! Well, that won't be happening again now, poor Nona. Look after Ignis, maybe you can keep his pyromanic tendencies in check.../n/nYou've saved us from the Dragons! We can't thank you enough. We must rebuild in the meanwhile, please take care of those Dragons, they seem to like you! We lost too many people for this to happen again."
        ];
        var text2show = 0;

        if (currentTotal >= dmgPointsRange[3]) text2show = 4;
        else if (currentTotal >= dmgPointsRange[2]) text2show = 3;
        else if (currentTotal >= dmgPointsRange[1]) text2show = 2;
        else if (currentTotal >= dmgPointsRange[0]) text2show = 1;
        etext(ctx,flavourtexts[text2show],W*0.5-bgw*0.475+5,H*0.5-bgh*0.45+60,"34px"+FONT,"black","left","middle",undefined, undefined,bgw*0.45-10);

        // Upgrades Zone
        var xb = W*0.5-bgw*0.475+bgw*0.45*0.5-bgw*0.25*0.5;
        roundedRect(ctx,xb,H*0.5+bgh*0.15,bgw*0.25,bgh*0.1,5,"rgb(219,112,147)");
        roundedRect(ctx,xb+4,H*0.5+bgh*0.15+4,bgw*0.25-8,bgh*0.1-8,5,"white");
        roundedRect(ctx,xb+6,H*0.5+bgh*0.15+6,bgw*0.25-12,bgh*0.1-12,5,"rgb(219,112,147)");
        if (mdata.city.stGeorge.damage < 6) {
            text(ctx,"Increase Damage for "+sTupgrades.damage[mdata.city.stGeorge.damage]+" scraps",xb+bgw*0.25*0.5,H*0.5+bgh*0.15+bgh*0.1*0.5-10,"26px"+FONT,"white","center","middle");
            text(ctx,"Upgrade to "+material[mdata.city.stGeorge.damage]+" Weapon",xb+bgw*0.25*0.5,H*0.5+bgh*0.15+bgh*0.1*0.5+10,"26px"+FONT,"white","center","middle");
            var dmrect = (new Rect(xb,H*0.5+bgh*0.15,bgw*0.25,bgh*0.1)).small();
            if (dmrect.isInside(GM.x,GM.y) && !upGeorgeSync && mdata.city.stGeorge.scraps >= sTupgrades.damage[mdata.city.stGeorge.damage]) {
                roundedRect(ctx,xb,H*0.5+bgh*0.15,bgw*0.25,bgh*0.1,5,"rgba(255,255,255,0.3)");
                this.addZone("dmglup",dmrect,"georgelup",{target:"damage"});
            }
        } else text(ctx,"Already Maxed",xb+bgw*0.25*0.5,H*0.5+bgh*0.15+bgh*0.1*0.5,"26px"+FONT,"white","center","middle");
        
        roundedRect(ctx,xb,H*0.5+bgh*0.30,bgw*0.25,bgh*0.1,5,"rgb(219,112,147)");
        roundedRect(ctx,xb+4,H*0.5+bgh*0.30+4,bgw*0.25-8,bgh*0.1-8,5,"white");
        roundedRect(ctx,xb+6,H*0.5+bgh*0.30+6,bgw*0.25-12,bgh*0.1-12,5,"rgb(219,112,147)");
        if (mdata.city.stGeorge.stamina < 6) {
            text(ctx,"Increase Stamina for "+sTupgrades.stamina[mdata.city.stGeorge.stamina]+" scraps",xb+bgw*0.25*0.5,H*0.5+bgh*0.30+bgh*0.1*0.5-10,"26px"+FONT,"white","center","middle");
            text(ctx,"Upgrade to "+material[mdata.city.stGeorge.stamina]+" Armor",xb+bgw*0.25*0.5,H*0.5+bgh*0.30+bgh*0.1*0.5+10,"26px"+FONT,"white","center","middle");
            var strect = (new Rect(xb,H*0.5+bgh*0.30,bgw*0.25,bgh*0.1)).small();
            if (strect.isInside(GM.x,GM.y) && !upGeorgeSync && mdata.city.stGeorge.scraps >= sTupgrades.stamina[mdata.city.stGeorge.stamina]) {
                roundedRect(ctx,xb,H*0.5+bgh*0.30,bgw*0.25,bgh*0.1,5,"rgba(255,255,255,0.3)");
                this.addZone("stalup",strect,"georgelup",{target:"stamina"});
            }
        } else text(ctx,"Already Maxed",xb+bgw*0.25*0.5,H*0.5+bgh*0.30+bgh*0.1*0.5,"26px"+FONT,"white","center","middle");

        text(ctx,"Armor Scraps: "+mdata.city.stGeorge.scraps,xb+bgw*0.25*0.5,H*0.5+bgh*0.395+bgh*0.1*0.5,"36px"+FONT,"black","center","middle");

        // Click Zone
        var xc = W*0.5+bgw*0.1;
        roundedRect(ctx,xc,H*0.5-bgh*0.45,bgw*0.3,bgh*0.5,5,"rgba(0,0,0,1)");
        roundedRect(ctx,xc+2,H*0.5-bgh*0.45+2,bgw*0.3-4,bgh*0.5-4,5,"rgba(219,112,147,1)");
        roundedRect(ctx,xc+6,H*0.5-bgh*0.45+6,bgw*0.3-12,bgh*0.5-12,5,"rgba(220,20,60,0.8)");

        if (stGeorgeData.timer == undefined && stGeorgeData.totalClicks == 0) {
            text(ctx,"Click to Start a new Battle",xc+bgw*0.3*0.5,H*0.5-bgh*0.45*0.5,"36px"+FONT,"white","center","middle");
        } else if (stGeorgeData.timer-Date.now() > 0 && !stGeorgeSync) {
            text(ctx,"Click Here!",xc+bgw*0.3*0.5,H*0.5-bgh*0.45+25,"36px"+FONT,"white","center","middle");
            if (((stGeorgeData.totalClicks*(10+(mdata.city.stGeorge.damage*1))) + currentTotal) < dmgPointsRange[0]) {
                this.drawMonster(ctx,-2-(214),xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5,undefined,false,1.3,mdata.city.hero[214],true,true,0);
                text(ctx,"Damage to Beat: "+dmgPointsRange[0],xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5+15,"30px"+FONT,"white","center","middle");
            } else if (((stGeorgeData.totalClicks*(10+(mdata.city.stGeorge.damage*1))) + currentTotal) < dmgPointsRange[1]) {
                this.drawMonster(ctx,-2-(215),xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5,undefined,false,1.3,mdata.city.hero[215],true,true,0);
                text(ctx,"Damage to Beat: "+dmgPointsRange[1],xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5+15,"30px"+FONT,"white","center","middle");
            } else if (((stGeorgeData.totalClicks*(10+(mdata.city.stGeorge.damage*1))) + currentTotal) < dmgPointsRange[2]) {
                this.drawMonster(ctx,-2-(216),xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5,undefined,false,1.3,mdata.city.hero[216],true,true,0);
                text(ctx,"Damage to Beat: "+dmgPointsRange[2],xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5+15,"30px"+FONT,"white","center","middle");
            } else {
                this.drawMonster(ctx,-2-(217),xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5,undefined,false,1.3,mdata.city.hero[217],true,true,0);
                text(ctx,"Damage to Beat: "+dmgPointsRange[3],xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5+15,"30px"+FONT,"white","center","middle");
            }
            if (stGeorgeData.totalClicks > 0 && Date.now() >= (stGeorgeData.visualUpdate+250) && ((Date.now()-2000) <= stGeorgeData.lastClick)) {
                stGeorgeData.visualClicks+=1;
                stGeorgeData.visualUpdate = Date.now();
            }
            text(ctx,"Damage: "+(stGeorgeData.visualClicks*(10+(mdata.city.stGeorge.damage*1)))+" + ("+currentTotal+")",xc+bgw*0.3*0.5,H*0.5-20,"34px"+FONT,"white","center","middle");
            text(ctx,"Time Left: "+timer((stGeorgeData.timer-Date.now())/1000),xc+bgw*0.3*0.5,H*0.5+5,"32px"+FONT,"white","center","middle");
        } else if (stGeorgeData.timer-Date.now() <= 0 && !stGeorgeSync) {
            if (stGeorgeData.rawClicks > ((30000+(mdata.city.stGeorge.stamina*3000)) / 1000)*4 && ((Date.now()-3000) <= stGeorgeData.lastClick)) stGeorgeData.totalClicks = ((30000+(mdata.city.stGeorge.stamina*3000)) / 1000)*4;
            this.stGeorge(stGeorgeData.totalClicks);
        } else if (stGeorgeData.timer-Date.now() <= 0 && stGeorgeSync) {
            this.spinner(ctx,xc+bgw*0.3*0.5,H*0.5-bgh*0.45*0.5,30);
        } else if (stGeorgeData.timer == undefined && stGeorgeData.totalClicks !== 0) {
            text(ctx,"Click to end the Battle",xc+bgw*0.3*0.5,H*0.5-bgh*0.45+25,"36px"+FONT,"white","center","middle");
            if (((stGeorgeData.totalClicks*(10+(mdata.city.stGeorge.damage*1))) + currentTotal) < dmgPointsRange[0]) {
                this.drawMonster(ctx,-2-(214),xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5,undefined,false,1.3,mdata.city.hero[214],true,true,0);
                text(ctx,"Damage to Beat: "+dmgPointsRange[0],xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5+15,"30px"+FONT,"white","center","middle");
            } else if (((stGeorgeData.totalClicks*(10+(mdata.city.stGeorge.damage*1))) + currentTotal) < dmgPointsRange[1]) {
                this.drawMonster(ctx,-2-(215),xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5,undefined,false,1.3,mdata.city.hero[215],true,true,0);
                text(ctx,"Damage to Beat: "+dmgPointsRange[1],xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5+15,"30px"+FONT,"white","center","middle");
            } else if (((stGeorgeData.totalClicks*(10+(mdata.city.stGeorge.damage*1))) + currentTotal) < dmgPointsRange[2]) {
                this.drawMonster(ctx,-2-(216),xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5,undefined,false,1.3,mdata.city.hero[216],true,true,0);
                text(ctx,"Damage to Beat: "+dmgPointsRange[2],xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5+15,"30px"+FONT,"white","center","middle");
            } else {
                this.drawMonster(ctx,-2-(217),xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5,undefined,false,1.3,mdata.city.hero[217],true,true,0);
                text(ctx,"Damage to Beat: "+dmgPointsRange[3],xc+bgw*0.3*0.5,H*0.5-bgh*0.25*0.5+15,"30px"+FONT,"white","center","middle");
            }
            text(ctx,"Damage done: "+(stGeorgeData.totalClicks*(10+(mdata.city.stGeorge.damage*1))),xc+bgw*0.3*0.5,H*0.5-20,"38px"+FONT,"white","center","middle");
        }

        var clickrect=(new Rect(xc,H*0.5-bgh*0.45,bgw*0.3,bgh*0.5)).small();
        if (clickrect.isInside(GM.x,GM.y)) {
            if (stGeorgeData.timer == undefined && stGeorgeData.totalClicks == 0) this.addZone("newStGeorge",clickrect,"nstg");
            else if (stGeorgeData.timer-Date.now() > 0 && !stGeorgeSync) this.addZone("newClick",clickrect,"clstg");
            else if (stGeorgeData.timer == undefined && stGeorgeData.totalClicks !== 0) this.addZone("restGeorge",clickrect,"estg");
        }

        // Information Zone
        text(ctx,"Current Damage: "+((10+(mdata.city.stGeorge.damage*1))*4)+" dps",xc+bgw*0.3*0.5,H*0.58,"36px"+FONT,"black","center","middle");
        text(ctx,"Current Stamina: "+((30000+(mdata.city.stGeorge.stamina*3000))/1000)+" seconds",xc+bgw*0.3*0.5,H*0.58+30,"36px"+FONT,"black","center","middle");
        
        var atindex = 0;
        for (var i = 0; i < 2; ++i) {
            for (var j = 0; j < 7; ++j) {
                if (atindex < mdata.city.stGeorge.attacks.length) {
                    text(ctx,(atindex+1)+": "+mdata.city.stGeorge.attacks[atindex]+" dmg",W*0.60+(W*0.14*i),H*0.7+(17*j),"30px"+FONT,"black","center","middle");
                }
                ++atindex;
            }
        }

        text(ctx,"Total Damage: "+mdata.city.stGeorge.attacks.reduce((a, b) => a + b, 0),xc+bgw*0.3*0.5,H*0.92,"36px"+FONT,"black","center","middle");

        var tooltip = "0nww";
        var tooltipw = T.width(tooltip)*0.5;
        var tooltiph = T.height(tooltip)*0.5;
        T.draw(ctx,tooltip,W*0.475-tooltipw*0.5,H*0.915-bgh*0.19-tooltiph*0.5,tooltipw,tooltiph);

        var hrect=(new Rect(W*0.475-tooltipw*0.5,H*0.915-bgh*0.19-tooltiph*0.5,tooltipw,tooltiph)).small();
        if (hrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
            ctx.fillStyle="rgba(0, 0, 0, 0.7)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

            text(ctx,"How to obtain Points",W*0.5,H*0.5-bgh*0.425,"90px"+FONT,"white","center","middle");
            text(ctx,"During this event players will have an opportunity to defeat and tame some new Dragon heroes!",W*0.5-bgw*0.47,H*0.5-bgh*0.30,"33px"+FONT,"white","left","middle");
            text(ctx,"Players have unlimited attacks, but the best 14 attacks will be used to determine players damage dealt to Dragons.",W*0.5-bgw*0.47,H*0.5-bgh*0.30+50,"33px"+FONT,"white","left","middle");
            text(ctx,"Deal enough damage and you'll unlock and tame the corresponding Dragon.",W*0.5-bgw*0.47,H*0.5-bgh*0.30+100,"33px"+FONT,"white","left","middle");
            text(ctx,"Damage is dealt simply by clicking in the battle window. ",W*0.5-bgw*0.47,H*0.5-bgh*0.30+150,"33px"+FONT,"white","left","middle");
            text(ctx,"Damage is limited by how much damage you deal with each click and your Stamina, how long you can click for!",W*0.5-bgw*0.47,H*0.5-bgh*0.30+200,"33px"+FONT,"white","left","middle");
            text(ctx,"Damage and Stamina can be upgraded by upgrading your weapon using Armor Scraps.",W*0.5-bgw*0.47,H*0.5-bgh*0.30+250,"33px"+FONT,"white","left","middle");
            text(ctx,"The game will only register a maximum of 4 clicks per second.",W*0.5-bgw*0.47,H*0.5-bgh*0.30+300,"33px"+FONT,"white","left","middle");
            text(ctx,"Armor Scraps are awarded daily to all players and can also be earnt by making purchases with Kreds! ",W*0.5-bgw*0.47,H*0.5-bgh*0.30+350,"33px"+FONT,"white","left","middle");
            text(ctx,"During the event, players can also us Universal Marbles to purchase World Boss attacks in the World Boss pane!",W*0.5-bgw*0.47,H*0.5-bgh*0.30+400,"33px"+FONT,"white","left","middle");
        }

        // Close
        var stgcloserect=(new Rect(W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75)).small(); 
        if (stgcloserect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"dykv",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);
            this.addZone("closestg",stgcloserect,"ostg",{target:false});
        } else T.draw(ctx,"cjq4",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);  
    }
    this.drawSpaceJourney = function (ctx) {
        var bgw = W*0.85;
        var bgh = H*0.9;
        var itooltip = undefined;

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(0,0,139,0.7)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);
    
        // Top Zone
        roundedRect(ctx,W*0.5-bgw*0.95*0.5,H*0.08,bgw*0.95,bgh*0.22,5,"rgba(255,255,255,0.3)");
        etext(ctx,"Greetings Captain, recent scans of cluster G4-1A/8Y7E shows some previously undetected stars emitting alarming amounts of energy! We have a few available missions for you and your team, our reports indicate the stars to contain a material we have never seen before. Improve your Spaceship to further our exploration! Go now Captain and explore the stars…",W*0.5,H*0.11,"40px"+FONT,"white","center","middle",undefined,undefined,bgw*0.93);

        if (mdata.city.space.week == undefined || mdata.city.space.week !== getWeek()) {
            roundedRect(ctx,W*0.5-W*0.3*0.5,H*0.5-H*0.075*0.5,W*0.3,H*0.075,5,"white");
            roundedRect(ctx,W*0.5-W*0.3*0.5+2,H*0.5-H*0.075*0.5+2,W*0.3-4,H*0.075-4,5,"rgb(75,0,130)");
            roundedRect(ctx,W*0.5-W*0.3*0.5+4,H*0.5-H*0.075*0.5+4,W*0.3-8,H*0.075-8,5,"rgba(255,255,255,0.15)");
            if (!startEventSync) text(ctx,"START EVENT",W*0.5,H*0.5,"44px"+FONT,"white","center","middle");
            else this.spinner(ctx,W*0.5,H*0.5,30);
            var startRect=(new Rect(W*0.5-W*0.3*0.5,H*0.5-H*0.075*0.5,W*0.3,H*0.075)).small(); 
            if (startRect.isInside(GM.x,GM.y) && !startEventSync) {
                this.addZone("startSJ",startRect,"startEL");
                roundedRect(ctx,W*0.5-W*0.3*0.5+4,H*0.5-H*0.075*0.5+4,W*0.3-8,H*0.075-8,5,"rgba(0,0,0,0.3)");
            }

            text(ctx,"You can start the event whenever you want. It'll run 5 days or until midnight on sunday (GMT).",W*0.5,H*0.8,"32px"+FONT,"white","center","middle");
            text(ctx,"If you start at any time on tuesday you'll be able to play the full event.",W*0.5,H*0.8+20,"32px"+FONT,"white","center","middle");
        } else if (Date.now() > mdata.city.space.start+(86400000*5)) {
            // Left Zone
            roundedRect(ctx,W*0.5-bgw*0.475,H*0.5-bgh*0.55*0.5+30,bgw*0.45,bgh*0.55,5,"rgba(255,255,255,0.3)");
            text(ctx,"Space Journey",W*0.5-bgw*0.475+bgw*0.45*0.5,H*0.345-10,"58px"+FONT,"white","center","middle");

            if (eventRanking==undefined || Date.now()-eventRanking.time>5*60*1000) this.updateLoopEventRanking("spacejourney");  

            if (eventRanking !== undefined && eventRanking.top !== undefined && eventRanking.player !== undefined) {
                var index = 0;
                for (var i = 0; i < 10; ++i) {
                    if (index < eventRanking.top.length) {
                        text(ctx,eventRanking.top[index].Position+1,W*0.115,H*0.4+(i*H*0.031)+6,"32px"+FONT,"black","left","middle");
                        text(ctx,eventRanking.top[index].DisplayName,W*0.155,H*0.4+(i*H*0.031)+6,"32px"+FONT,"black","left","middle");
                        text(ctx,eventRanking.top[index].StatValue+" Asteroid Shards",W*0.47,H*0.4+(i*H*0.031)+6,"32px"+FONT,"black","right","middle");
                    }
                    ++index;
                }
                roundedRect(ctx,W*0.5-bgw*0.46,H*0.715+5,bgw*0.42,bgh*0.07,5,"rgba(0,0,0,0.3)");
                text(ctx,eventRanking.player.Position+1,W*0.125,H*0.715+bgh*0.07*0.5+5,"32px"+FONT,"white","left","middle");
                text(ctx,eventRanking.player.DisplayName,W*0.165,H*0.715+bgh*0.07*0.5+5,"32px"+FONT,"white","left","middle");
                text(ctx,eventRanking.player.StatValue+" Asteroid Shards",W*0.46,H*0.715+bgh*0.07*0.5+5,"32px"+FONT,"white","right","middle");
    
            } else {
                this.spinner(ctx,W*0.5-bgw*0.475*0.5,H*0.5,40);
            }

            text(ctx,"Your event playtime has expired. Please wait for the end of the event.",W*0.5+bgw*0.5*0.5,H*0.5,"24px"+FONT,"white","center","middle");
            text(ctx,"*Your final results can change after the last claim on Event End",W*0.5+bgw*0.5*0.5,H*0.55,"22px"+FONT,"white","center","middle");

            var timerResult = mdata.city.space.end - Date.now();
            if (timerResult>86400000) text(ctx,"General Event Time Left: "+Math.ceil(timerResult/86400000)+" Days",W*0.5+bgw*0.5*0.5,H*0.65,"26px"+FONT,"white","center","middle");
            else text(ctx,"General Event Time Left: "+timer(timerResult/1000),W*0.5+bgw*0.5*0.5,H*0.65,"26px"+FONT,"white","center","middle");

            roundedRect(ctx,W*0.5-bgw*0.475+bgw*0.45*0.5+150,H*0.345-T.height("1hng")*0.5-10,W*0.03,W*0.03,5,"rgba(0,0,0,0.6)");
            T.draw(ctx,"l1qq",W*0.5-bgw*0.475+bgw*0.45*0.5+151,H*0.345-T.height("1hng")*0.5-11);
            var mlrect=(new Rect(W*0.5-bgw*0.475+bgw*0.45*0.5+150,H*0.345-T.height("1hng")*0.5-10,W*0.03,W*0.03)).small();
            if (mlrect.isInside(GM.x,GM.y)) itooltip = 0;

            roundedRect(ctx,W*0.5-bgw*0.475+bgw*0.45*0.5+110,H*0.345-T.height("1hng")*0.5-10,W*0.03,W*0.03,5,"rgba(0,0,0,0.6)");
            T.draw(ctx,"1hng",W*0.5-bgw*0.475+bgw*0.45*0.5+110,H*0.345-T.height("1hng")*0.5-10);
            var rrect=(new Rect(W*0.5-bgw*0.475+bgw*0.45*0.5+110,H*0.345-T.height("1hng")*0.5-10,W*0.03,W*0.03)).small();
            if (rrect.isInside(GM.x,GM.y)) itooltip = 1;
            
        } else {
            if (eventRanking==undefined || Date.now()-eventRanking.time>5*60*1000) this.updateLoopEventRanking("spacejourney");    
            
            // Left Zone
            roundedRect(ctx,W*0.5-bgw*0.475,H*0.5-bgh*0.55*0.5+30,bgw*0.45,bgh*0.55,5,"rgba(255,255,255,0.3)");
            text(ctx,"Space Journey",W*0.5-bgw*0.475+bgw*0.45*0.5,H*0.345-10,"58px"+FONT,"white","center","middle");
            var timerResult = Math.min(mdata.city.space.start + (86400000*5),mdata.city.space.end)-Date.now();
            if (timerResult>86400000) text(ctx,"Personal Event Time Left: "+Math.ceil(timerResult/86400000)+" Days",W*0.5-bgw*0.475+bgw*0.45*0.5,H*0.345+12,"22px"+FONT,"black","center","middle");
            else text(ctx,"Personal Event Time Left: "+timer(timerResult/1000),W*0.5-bgw*0.475+bgw*0.45*0.5,H*0.345+12,"22px"+FONT,"black","center","middle");

            if (eventRanking !== undefined && eventRanking.top !== undefined && eventRanking.player !== undefined) {
                var index = 0;
                for (var i = 0; i < 10; ++i) {
                    if (index < eventRanking.top.length) {
                        text(ctx,eventRanking.top[index].Position+1,W*0.115,H*0.4+(i*H*0.031)+6,"32px"+FONT,"black","left","middle");
                        text(ctx,eventRanking.top[index].DisplayName,W*0.155,H*0.4+(i*H*0.031)+6,"32px"+FONT,"black","left","middle");
                        text(ctx,eventRanking.top[index].StatValue+" Asteroid Shards",W*0.47,H*0.4+(i*H*0.031)+6,"32px"+FONT,"black","right","middle");
                    }
                    ++index;
                }
                roundedRect(ctx,W*0.5-bgw*0.46,H*0.715+5,bgw*0.42,bgh*0.07,5,"rgba(0,0,0,0.3)");
                text(ctx,eventRanking.player.Position+1,W*0.125,H*0.715+bgh*0.07*0.5+5,"32px"+FONT,"white","left","middle");
                text(ctx,eventRanking.player.DisplayName,W*0.165,H*0.715+bgh*0.07*0.5+5,"32px"+FONT,"white","left","middle");
                text(ctx,eventRanking.player.StatValue+" Asteroid Shards",W*0.46,H*0.715+bgh*0.07*0.5+5,"32px"+FONT,"white","right","middle");
    
            } else {
                this.spinner(ctx,W*0.5-bgw*0.475*0.5,H*0.5,40);
            }
            
    
            // Right Zone
            roundedRect(ctx,W*0.5+bgw*0.1,H*0.3,bgw*0.3,bgh*0.12,5,"rgba(255,255,255,0.3)");
            text(ctx,"Gears: "+mdata.city.space.gears,W*0.5+bgw*0.1+bgw*0.3*0.5,H*0.3+bgh*0.12*0.5,"50px"+FONT,"white","center","middle");
    
            var upgradeName = ["Engine","Collector A","Collector G","Radar A","Radar G"];
            var upgradeText = ["Reduce the missions  time by 6%","Asteroids: Min&Max +3/h per Level","Gears: Min&Max +30/h per Level","Asteroids: Min +3/h per Level","Gears: Min +30/h per  Level"];
            var maxLevel = [10,20,20,20,20];
            var count = 0;
            for (var j = 0; j < 2; ++j) {
                for (var i = 0; i < 3; ++i) {
                    if (count < 5) {
                        var bheight = bgh*0.20;
                        roundedRect(ctx,W*0.5+bgw*0.025+(i*bgw*0.155),H*0.43+(j*bheight*1.1),bgw*0.14,bheight,5,"white");
                        roundedRect(ctx,W*0.5+bgw*0.025+(i*bgw*0.155)+2,H*0.43+2+(j*bheight*1.1),bgw*0.14-4,bheight-4,5,"rgb(75,0,130)");
                        roundedRect(ctx,W*0.5+bgw*0.025+(i*bgw*0.155)+4,H*0.43+4+(j*bheight*1.1),bgw*0.14-8,bheight-8,5,"rgba(255,255,255,0.15)");
                        text(ctx,upgradeName[count]+": "+mdata.city.space.upgrades[count],W*0.5+bgw*0.025+(i*bgw*0.155)+bgw*0.14*0.5,H*0.46+(j*bheight*1.1),"36px"+FONT,"white","center","middle");
            
                        etext(ctx,upgradeText[count],W*0.5+bgw*0.025+(i*bgw*0.155)+bgw*0.14*0.5,H*0.49+(j*bheight*1.1),"24px"+FONT,"white","center","middle",undefined,undefined,bgw*0.13,24*0.6);
                        if (mdata.city.space.upgrades[count]==maxLevel[count]) {
                            text(ctx,"Already Maxed",W*0.5+bgw*0.025+(i*bgw*0.155)+bgw*0.14*0.5,H*0.56+(j*bheight*1.1),"28px"+FONT,"white","center","middle");
                        } else {
                            text(ctx,"Price in Gears:",W*0.5+bgw*0.025+(i*bgw*0.155)+bgw*0.14*0.5,H*0.55+(j*bheight*1.1),"28px"+FONT,"white","center","middle");
                            text(ctx,this.getSJPrice(mdata.city.space.upgrades[count]),W*0.5+bgw*0.025+(i*bgw*0.155)+bgw*0.14*0.5,H*0.58+(j*bheight*1.1),"36px"+FONT,"white","center","middle");
                            var lupRect=(new Rect(W*0.5+bgw*0.025+(i*bgw*0.155),H*0.43+(j*bheight*1.1),bgw*0.14,bheight)).small(); 
                            if (lupRect.isInside(GM.x,GM.y) && mdata.city.space.gears >= this.getSJPrice(mdata.city.space.upgrades[count]) && !spaceSync) {
                                roundedRect(ctx,W*0.5+bgw*0.025+(i*bgw*0.155),H*0.43+(j*bheight*1.1),bgw*0.14,bheight,5,"rgba(0,0,0,0.3)");
                                this.addZone("lupsj_"+i,lupRect,"lupsj",{target:count});
                            } else if (lupRect.isInside(GM.x,GM.y) && !spaceSync) {
                                roundedRect(ctx,W*0.5+bgw*0.025+(i*bgw*0.155),H*0.43+(j*bheight*1.1),bgw*0.14,bheight,5,"rgba(255,0,0,0.3)");
                            }
                        }
                    }
                    ++count;
                }
            }

            
    
            roundedRect(ctx,W*0.79,H*0.6275,bgw*0.13,bgh*0.08,5,"rgba(255,255,255,0.3)");
            if (mdata.city.space.last.mission !== -1) {
                text(ctx,"LAST MISSION: "+(mdata.city.space.last.mission+1),W*0.79+bgw*0.13*0.5,H*0.6275+13,"28px"+FONT,"black","center","middle");
                text(ctx,"Collected Gears: "+mdata.city.space.last.gears,W*0.79+bgw*0.13*0.5,H*0.6275+28,"22px"+FONT,"black","center","middle");
                text(ctx,"Asteroid Shards: "+mdata.city.space.last.asteroids,W*0.79+bgw*0.13*0.5,H*0.6275+39,"22px"+FONT,"black","center","middle");
            }

            roundedRect(ctx,W*0.79,H*0.71,bgw*0.13,bgh*0.106,5,"rgb(255,215,0)");
            roundedRect(ctx,W*0.79+2,H*0.71+2,bgw*0.13-4,bgh*0.106-4,5,"rgb(75,0,130)");
            roundedRect(ctx,W*0.79+4,H*0.71+4,bgw*0.13-8,bgh*0.106-8,5,"rgba(255,255,255,0.15)");
            text(ctx,"HYPERLOOP",W*0.79+bgw*0.13*0.5,H*0.71+14,"30px"+FONT,"rgb(255,215,0)","center","middle");
            text(ctx,"Amount: "+mdata.city.space.hyperloop,W*0.79+bgw*0.13*0.5,H*0.71+30,"24px"+FONT,"white","center","middle");
            text(ctx,"Jumps 20 min to Future",W*0.79+bgw*0.13*0.5,H*0.71+40,"19px"+FONT,"white","center","middle");
            var hyperRect=(new Rect(W*0.79,H*0.71,bgw*0.13,bgh*0.106)).small(); 
            if (hyperRect.isInside(GM.x,GM.y) && !spaceSync) {
                roundedRect(ctx,W*0.79+4,H*0.71+4,bgw*0.13-8,bgh*0.106-8,5,"rgba(0,0,0,0.15)");
                if (mdata.city.space.hyperloop >= 1 && mdata.city.space.current.mission !== -1) this.addZone("hyper",hyperRect,"hyper");
                else this.addZone("optick",hyperRect,"oetickets",{target:true});
            }
    
            // Bottom Zone
            var btx = W*0.0975;
            for (var i = 0; i < 4; ++i) {
                roundedRect(ctx,btx+(i*W*0.205),H*0.82,W*0.19,H*0.12,5,"white");
                roundedRect(ctx,btx+(i*W*0.205)+2,H*0.82+2,W*0.19-4,H*0.12-4,5,"rgb(75,0,130)");
                roundedRect(ctx,btx+(i*W*0.205)+4,H*0.82+4,W*0.19-8,H*0.12-8,5,"rgba(255,255,255,0.15)");
                text(ctx,"Mission "+(i+1),btx+(i*W*0.205)+W*0.19*0.5,H*0.82+13,"36px"+FONT,"white","center","middle");
                 if (mdata.city.space.current.mission !== -1 && mdata.city.space.current.timer !== -1 && mdata.city.space.current.timer>=Date.now()) {
                    if (mdata.city.space.current.mission == i) {
                        text(ctx,"Time: "+timer((mdata.city.space.current.timer-Date.now())/1000),btx+(i*W*0.205)+W*0.19*0.5,H*0.82+30,"30px"+FONT,"rgba(255,255,255,0.6)","center","middle");
                    } else {
                        roundedRect(ctx,btx+(i*W*0.205),H*0.82,W*0.19,H*0.12,5,"rgba(0,0,0,0.6)");
                        text(ctx,"BLOCKED",btx+(i*W*0.205)+W*0.19*0.5,H*0.82+30,"30px"+FONT,"rgba(255,255,255,0.6)","center","middle");
                    }
                } else if (mdata.city.space.current.mission !== -1 && mdata.city.space.current.timer !== -1 && mdata.city.space.current.timer<Date.now()) {
                    if (mdata.city.space.current.mission == i) {
                        text(ctx,"CLAIM",btx+(i*W*0.205)+W*0.19*0.5,H*0.82+30,"30px"+FONT,"rgba(255,255,255,0.6)","center","middle");
                        var claimRect=(new Rect(btx+(i*W*0.205),H*0.82,W*0.19,H*0.12)).small();
                        if (claimRect.isInside(GM.x,GM.y) && !spaceSync) {
                            roundedRect(ctx,btx+(i*W*0.205),H*0.82,W*0.19,H*0.12,5,"rgba(0,0,0,0.3)");
                            this.addZone("clsj",claimRect,"clsj");
                        }
                    } else {
                        roundedRect(ctx,btx+(i*W*0.205),H*0.82,W*0.19,H*0.12,5,"rgba(0,0,0,0.6)");
                        text(ctx,"BLOCKED",btx+(i*W*0.205)+W*0.19*0.5,H*0.82+30,"30px"+FONT,"rgba(255,255,255,0.6)","center","middle");
                    }
                } else {
                    text(ctx,"Required time: "+timer(this.getSJUpgrade(i,"engine",mdata.city.space.upgrades)/1000),btx+(i*W*0.205)+W*0.19*0.5,H*0.82+30,"30px"+FONT,"rgba(255,255,255,0.6)","center","middle");
                    text(ctx,"Gears Min: "+this.getSJUpgrade(i,"resources",mdata.city.space.upgrades).gears.min+" - Max: "+this.getSJUpgrade(i,"resources",mdata.city.space.upgrades).gears.max,btx+(i*W*0.205)+W*0.19*0.5,H*0.82+47,"24px"+FONT,"white","center","middle");
                    text(ctx,"Shards Min: "+this.getSJUpgrade(i,"resources",mdata.city.space.upgrades).asteroids.min+" - Max: "+this.getSJUpgrade(i,"resources",mdata.city.space.upgrades).asteroids.max,btx+(i*W*0.205)+W*0.19*0.5,H*0.82+62,"24px"+FONT,"white","center","middle");
                    var missRect=(new Rect(btx+(i*W*0.205),H*0.82,W*0.19,H*0.12)).small(); 
                    if (missRect.isInside(GM.x,GM.y) && !spaceSync) {
                        roundedRect(ctx,btx+(i*W*0.205),H*0.82,W*0.19,H*0.12,5,"rgba(0,0,0,0.3)");
                        this.addZone("missj_"+i,missRect,"missj",{target:i});
                    }
                }
            }
    
            roundedRect(ctx,W*0.5-bgw*0.475+bgw*0.45*0.5+150,H*0.345-T.height("1hng")*0.5-10,W*0.03,W*0.03,5,"rgba(0,0,0,0.6)");
            T.draw(ctx,"l1qq",W*0.5-bgw*0.475+bgw*0.45*0.5+151,H*0.345-T.height("1hng")*0.5-11);
            var mlrect=(new Rect(W*0.5-bgw*0.475+bgw*0.45*0.5+150,H*0.345-T.height("1hng")*0.5-10,W*0.03,W*0.03)).small();
            if (mlrect.isInside(GM.x,GM.y)) itooltip = 0;

            roundedRect(ctx,W*0.5-bgw*0.475+bgw*0.45*0.5+110,H*0.345-T.height("1hng")*0.5-10,W*0.03,W*0.03,5,"rgba(0,0,0,0.6)");
            T.draw(ctx,"1hng",W*0.5-bgw*0.475+bgw*0.45*0.5+110,H*0.345-T.height("1hng")*0.5-10);
            var rrect=(new Rect(W*0.5-bgw*0.475+bgw*0.45*0.5+110,H*0.345-T.height("1hng")*0.5-10,W*0.03,W*0.03)).small();
            if (rrect.isInside(GM.x,GM.y)) itooltip = 1;
    
            var tooltip = "0nww";
            var tooltipw = T.width(tooltip);
            var tooltiph = T.height(tooltip);
            T.draw(ctx,tooltip,W*0.88-tooltipw*0.5,H*0.35-tooltiph*0.5,tooltipw,tooltiph);
    
            var hrect=(new Rect(W*0.88-tooltipw*0.5,H*0.35-tooltiph*0.5,tooltipw,tooltiph)).small();
            if (hrect.isInside(GM.x,GM.y)) itooltip = 2;
        }

        if (itooltip == 0) {
            T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
            ctx.fillStyle="rgba(0, 0, 0, 0.7)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

            text(ctx,"MILESTONES TABLE",W*0.5,H*0.5-bgh*0.425,"90px"+FONT,"white","center","middle");
            text(ctx,"1,500 A.Shards - 5 Cosmic Coins / 3 Prana / 5 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30,"33px"+FONT,"white","left","middle");
            text(ctx,"2,000 A.Shards - 8 Cosmic Coins / 5 Prana / 8 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30+30,"33px"+FONT,"white","left","middle");
            text(ctx,"2,500 A.Shards - 12 Cosmic Coins / 8 Prana / 12 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30+60,"33px"+FONT,"white","left","middle");
            text(ctx,"3,000 A.Shards - 20 Cosmic Coins / 12 Prana / 20 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30+90,"33px"+FONT,"white","left","middle");
            text(ctx,"3,500 A.Shards - 30 Cosmic Coins / 20 Prana / 30 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30+120,"33px"+FONT,"white","left","middle");
            text(ctx,"4,000 A.Shards - 50 Cosmic Coins / 30 Prana / 50 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30+150,"33px"+FONT,"white","left","middle");
            text(ctx,"4,500 A.Shards - 70 Cosmic Coins / 45 Prana / 70 Ascension Spheres / 1x Free Promo4",W*0.5-bgw*0.47,H*0.5-bgh*0.30+180,"33px"+FONT,"white","left","middle");
            text(ctx,"5,000 A.Shards - 95 Cosmic Coins / 60 Prana / 95 Ascension Spheres / 1x Instant Promo6",W*0.5-bgw*0.47,H*0.5-bgh*0.30+210,"33px"+FONT,"white","left","middle");
            text(ctx,"7,500 A.Shards - 120 Cosmic Coins / 85 Prana / 120 Ascension Spheres / 2x Free Promo4 / 100 VIP Points",W*0.5-bgw*0.47,H*0.5-bgh*0.30+240,"33px"+FONT,"white","left","middle");
            text(ctx,"10,000 A.Shards - 150 Cosmic Coins / 115 Prana / 150 Ascension Spheres / 2x Instant Promo6 / 150 VIP Points",W*0.5-bgw*0.47,H*0.5-bgh*0.30+270,"33px"+FONT,"white","left","middle");
            text(ctx,"12,500 A.Shards - 200 Cosmic Coins / 150 Prana / 200 Ascension Spheres / 3x Free Promo4 / 250 VIP Points",W*0.5-bgw*0.47,H*0.5-bgh*0.30+300,"33px"+FONT,"white","left","middle");
            text(ctx,"15,000 A.Shards - 300 Cosmic Coins / 200 Prana / 300 Ascension Spheres / 3x Instant Promo6 / 400 VIP Points",W*0.5-bgw*0.47,H*0.5-bgh*0.30+330,"33px"+FONT,"white","left","middle");

        } else if (itooltip == 1) {
            T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
            ctx.fillStyle="rgba(0, 0, 0, 0.7)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

            var endDate = new Date(mdata.city.space.start + (86400000*5));
            text(ctx,"REWARDS TABLE",W*0.5,H*0.5-bgh*0.425,"90px"+FONT,"white","center","middle");
            text(ctx,"Top 1 -> 36 Levels of Ascended, Legendary, Rare, Common + 450 AS + 200 PG + 450 CC + 1000 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 2 -> 27 Levels of Ascended, Legendary, Rare, Common + 325 AS + 150 PG + 325 CC + 750 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+30,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 3 -> 18 Levels of Ascended, Legendary, Rare, Common + 240 AS + 110 PG + 240 CC + 500 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+60,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 4:10 -> 9 Levels of Ascended, Legendary, Rare, Common + 170 AS + 80 PG + 170 CC + 250 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+90,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 10:25 -> 9 Levels of Legendary, Rare, Common + 120 AS + 60 PG + 120 CC + 200 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+120,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 26:50 -> 9 Levels of Legendary, Rare, Common + 80 AS + 40 PG + 80 CC + 150 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+150,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 51:100 -> 9 Levels of Rare, Common + 50 AS + 28 PG + 50 CC + 100 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+180,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 101:500 -> 9 Levels of Rare, Common + 20 AS + 18 PG + 20 CC + 50 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+210,"33px"+FONT,"white","left","middle");
            text(ctx,"Top +500 -> 9 Levels Common + 10 AS + 10 PG + 10 CC + 20 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+240,"33px"+FONT,"white","left","middle");
            text(ctx,"* YOUR event will end on: "+endDate.toString(),W*0.5-bgw*0.47,H*0.5-bgh*0.30+410,"33px"+FONT,"white","left","middle");
            text(ctx,"This event will be active for one week every 6 weeks.",W*0.5-bgw*0.47,H*0.5-bgh*0.30+435,"33px"+FONT,"white","left","middle");
            this.drawMonster(ctx,-2-218,W*0.2,H*0.85-35,undefined,false,1);
            this.drawMonster(ctx,-2-219,W*0.4,H*0.85-35,undefined,false,1);
            this.drawMonster(ctx,-2-220,W*0.6,H*0.85-35,undefined,false,1);
            this.drawMonster(ctx,-2-221,W*0.8,H*0.85-35,undefined,false,1);
        } else if (itooltip == 2) {
            T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
            ctx.fillStyle="rgba(0, 0, 0, 0.7)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

            text(ctx,"SPACE JOURNEY",W*0.5,H*0.5-bgh*0.425,"90px"+FONT,"white","center","middle");
            text(ctx,"Welcome to Space Journey, during this event players can journey through space on missions,",W*0.5-bgw*0.47,H*0.5-bgh*0.31,"33px"+FONT,"white","left","middle");
            text(ctx,"competing against one another to collect as many Asteroid Shards as possible!",W*0.5-bgw*0.47,H*0.5-bgh*0.31+45,"33px"+FONT,"white","left","middle");
            text(ctx,"Each mission has a duration and upon return will award players with Asteroid Shards and Gears.",W*0.5-bgw*0.47,H*0.5-bgh*0.31+90,"33px"+FONT,"white","left","middle");
            text(ctx,"Missions function like Miracles, Experiments and Adventure.",W*0.5-bgw*0.47,H*0.5-bgh*0.31+135,"33px"+FONT,"white","left","middle");
            text(ctx,"Where they will automatically complete after the displayed time.",W*0.5-bgw*0.47,H*0.5-bgh*0.31+180,"33px"+FONT,"white","left","middle");
            text(ctx,"Gears can be spent on upgrades to improve your mission efficiency by reducing",W*0.5-bgw*0.47,H*0.5-bgh*0.31+225,"33px"+FONT,"white","left","middle");
            text(ctx,"the timer of missions or increasing the amount of rewards obtained.",W*0.5-bgw*0.47,H*0.5-bgh*0.31+270,"33px"+FONT,"white","left","middle");
            text(ctx,"Event Tickets can be converted in to Hyperloop Jumps.",W*0.5-bgw*0.47,H*0.5-bgh*0.31+315,"33px"+FONT,"white","left","middle");
            text(ctx,"Hyperloop Jumps will lower the remaining timer on your current mission by 20 minutes.",W*0.5-bgw*0.47,H*0.5-bgh*0.31+360,"33px"+FONT,"white","left","middle");
            text(ctx,"Players are rewarded at the end of the event based on their position on the leaderboard,",W*0.5-bgw*0.47,H*0.5-bgh*0.31+405,"33px"+FONT,"white","left","middle");
            text(ctx,"earn an array of heroes and currencies! Also, will receive rewards based on milestones!",W*0.5-bgw*0.47,H*0.5-bgh*0.31+450,"33px"+FONT,"white","left","middle");
        }

        // Close
        var stgcloserect=(new Rect(W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75)).small(); 
        if (stgcloserect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"dykv",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);
            this.addZone("closesj",stgcloserect,"osje",{target:false});
        } else T.draw(ctx,"cjq4",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);  
    }
    this.getSJPrice = function (level) {
        return 2500 + (2500 * level);
    }
    this.getSJUpgrade = function(mission, mode, upgrades) {
        if (mode == "engine") {
          var base = [3600000, 21600000, 43200000, 86400000];
          return (Math.floor(base[mission] - (base[mission] * (6 * upgrades[0]) / 100)));
        } else if (mode == "resources") {
            var base = [
                {
                    asteroids: {
                        min: 30,
                        max: 60
                    },
                    gears: {
                        min: 300,
                        max: 600
                    }
                },
                {
                    asteroids: {
                        min: 175,
                        max: 350
                    },
                    gears: {
                        min: 1750,
                        max: 3500
                    }
                },
                {
                    asteroids: {
                        min: 340,
                        max: 680
                    },
                    gears: {
                        min: 3400,
                        max: 6800
                    }
                },
                {
                    asteroids: {
                        min: 680,
                        max: 1360
                    },
                    gears: {
                        min: 6800,
                        max: 13600
                    }
                }
            ];
            var hours = [1,6,12,24];
            var results = {
                asteroids: {
                    min: base[mission].asteroids.min + (hours[mission] * 3 * upgrades[1]),
                    max: base[mission].asteroids.max + (hours[mission] * 3 * upgrades[1])
                },
                gears: {
                    min: base[mission].gears.min + (hours[mission] * 30 * upgrades[2]),
                    max: base[mission].gears.max + (hours[mission] * 30 * upgrades[2])
                }
            };
            return ({
                asteroids: {
                    min: results.asteroids.min + (hours[mission] * 3 * upgrades[3]),
                    max: results.asteroids.max
                },
                gears: {
                    min: results.gears.min + (hours[mission] * 30 * upgrades[4]),
                    max: results.gears.max
                }
            })
        }
    }
    this.drawEventGAMES = function (ctx) {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        var bgw = W*0.85;
        var bgh = H*0.8;
        var milestonesTooltip = false;
        var rankingTooltip = false;

        if (eventRanking==undefined || Date.now()-eventRanking.time>5*60*1000) this.updateLoopEventRanking("games");

        ctx.fillStyle="rgba(0,0,0,0.6)";
        ctx.fillRect(0,0,W,H);

        var tabNames = ["ACTIVITIES","UPGRADES","DEFENSES","LEADERBOARD"];
        for (var i = 0; i < 4; ++i) {
            var btw = W*0.215;
            roundedRect(ctx,W*0.0695+(i*btw),H*0.0275,btw,H*0.1,10,"black");
            if (gamesTab==i) roundedRect(ctx,W*0.0695+(i*btw)+3,H*0.0275+3,btw-6,H*0.1-6,10,"rgba(128, 161, 66, 0.9)");
            else roundedRect(ctx,W*0.0695+(i*btw)+3,H*0.0275+3,btw-6,H*0.1-6,10,"rgba(128, 161, 66, 0.75)");
            text(ctx,tabNames[i],W*0.0695+(i*btw)+3+(btw-6)*0.5,H*0.0275+22,"50px"+FONT,"white","center","middle");
            var trect=(new Rect(W*0.0695+(i*btw)+3,H*0.0275+3,btw-6,H*0.1-6)).small();
            if (trect.isInside(GM.x,GM.y) && mdata.city.games !== undefined && mdata.city.games.start !== undefined && Date.now() < mdata.city.games.start+(86400000*5)) {
                this.addZone("tabgames"+i,trect,"gtbc",{target:i});
                roundedRect(ctx,W*0.0695+(i*btw)+3,H*0.0275+3,btw-6,H*0.1-6,10,"rgba(0, 0, 0, 0.3)");
            }
        }

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(128, 161, 66, 0.7)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

        text(ctx,"G.A.M.E.S",W*0.5,H*0.15,"70px"+FONT,"black","center","middle");

        if (mdata.city.games.week == undefined || mdata.city.games.week !== getWeek()) {
            roundedRect(ctx,W*0.5-W*0.3*0.5,H*0.5-H*0.075*0.5,W*0.3,H*0.075,5,"white");
            roundedRect(ctx,W*0.5-W*0.3*0.5+2,H*0.5-H*0.075*0.5+2,W*0.3-4,H*0.075-4,5,"rgb(89, 124, 43)");
            roundedRect(ctx,W*0.5-W*0.3*0.5+4,H*0.5-H*0.075*0.5+4,W*0.3-8,H*0.075-8,5,"rgba(255,255,255,0.15)");
            if (!startEventSync) text(ctx,"START EVENT",W*0.5,H*0.5,"44px"+FONT,"white","center","middle");
            else this.spinner(ctx,W*0.5,H*0.5,30);
            var startRect=(new Rect(W*0.5-W*0.3*0.5,H*0.5-H*0.075*0.5,W*0.3,H*0.075)).small(); 
            if (startRect.isInside(GM.x,GM.y) && !startEventSync) {
                this.addZone("startGG",startRect,"startEL");
                roundedRect(ctx,W*0.5-W*0.3*0.5+4,H*0.5-H*0.075*0.5+4,W*0.3-8,H*0.075-8,5,"rgba(0,0,0,0.3)");
            }
            text(ctx,"You can start the event whenever you want. It'll run 5 days or until midnight on sunday (GMT).",W*0.5,H*0.8,"32px"+FONT,"black","center","middle");
            text(ctx,"If you start at any time on tuesday you'll be able to play the full event.",W*0.5,H*0.8+20,"32px"+FONT,"black","center","middle");
        } else if (Date.now() > mdata.city.games.start+(86400000*5)) {
            roundedRect(ctx,W*0.5-bgw*0.475,H*0.5-bgh*0.7*0.5,bgw*0.45,bgh*0.75,5,"rgba(255,255,255,0.3)");
            if (eventRanking !== undefined && eventRanking.top !== undefined && eventRanking.player !== undefined) {
                text(ctx,"LEADERBOARD",W*0.5-bgw*0.475+bgw*0.45*0.5,H*0.265,"50px"+FONT,"black","center","middle");
                var index = 0;
                for (var i = 0; i < 10; ++i) {
                    if (index < eventRanking.top.length) {
                        text(ctx,eventRanking.top[index].Position+1,W*0.12,H*0.32+(i*H*0.0375),"32px"+FONT,"black","left","middle");
                        text(ctx,eventRanking.top[index].DisplayName,W*0.16,H*0.32+(i*H*0.0375),"32px"+FONT,"black","left","middle");
                        text(ctx,eventRanking.top[index].StatValue+" Favours",W*0.47,H*0.32+(i*H*0.0375),"32px"+FONT,"black","right","middle");
                    }
                    ++index;
                }
                roundedRect(ctx,W*0.5-bgw*0.46,H*0.735,bgw*0.42,bgh*0.07,5,"rgba(0,0,0,0.3)");
                text(ctx,eventRanking.player.Position+1,W*0.125,H*0.735+bgh*0.07*0.5,"32px"+FONT,"white","left","middle");
                text(ctx,eventRanking.player.DisplayName,W*0.165,H*0.735+bgh*0.07*0.5,"32px"+FONT,"white","left","middle");
                text(ctx,eventRanking.player.StatValue+" Favours",W*0.335,H*0.735+bgh*0.07*0.5,"32px"+FONT,"white","left","middle");
                
                //Ranking
                roundedRect(ctx,W*0.5-bgw*0.475+bgw*0.45*0.5+120,H*0.265-T.height("1hng")*0.5,W*0.03,W*0.03,5,"rgba(0,0,0,0.6)");
                T.draw(ctx,"1hng",W*0.5-bgw*0.475+bgw*0.45*0.5+120,H*0.265-T.height("1hng")*0.5);
                var rrect=(new Rect(W*0.5-bgw*0.475+bgw*0.45*0.5+120,H*0.265-T.height("1hng")*0.5,W*0.03,W*0.03)).small();
                if (rrect.isInside(GM.x,GM.y)) {
                    rankingTooltip = true;
                }

                //Milestones
                roundedRect(ctx,W*0.5-bgw*0.475+bgw*0.45*0.5+120+T.height("1hng")*1.2,H*0.265-T.height("1hng")*0.5,W*0.03,W*0.03,5,"rgba(0,0,0,0.6)");
                T.draw(ctx,"l1qq",W*0.5-bgw*0.475+bgw*0.45*0.5+120+T.height("1hng")*1.2,H*0.265-T.height("1hng")*0.5);
                var mlrect=(new Rect(W*0.5-bgw*0.475+bgw*0.45*0.5+120+T.height("1hng")*1.2,H*0.265-T.height("1hng")*0.5,W*0.03,W*0.03)).small();
                if (mlrect.isInside(GM.x,GM.y)) {
                    milestonesTooltip = true;
                }
            }

            text(ctx,"Your event playtime has expired. Please wait for the end of the event.",W*0.5+bgw*0.5*0.5,H*0.5,"24px"+FONT,"white","center","middle");
            text(ctx,"*Your final results can change after the last claim on Event End",W*0.5+bgw*0.5*0.5,H*0.55,"22px"+FONT,"white","center","middle");
            var timerResult = mdata.city.games.end - Date.now();
            if (timerResult>86400000) text(ctx,"General Event Time Left: "+Math.ceil(timerResult/86400000)+" Days",W*0.5+bgw*0.5*0.5,H*0.65,"26px"+FONT,"white","center","middle");
            else text(ctx,"General Event Time Left: "+timer(timerResult/1000),W*0.5+bgw*0.5*0.5,H*0.65,"26px"+FONT,"white","center","middle");
        } else {
            var buttons = [
                [
                    { name: "HUNT", description: "Hunt a wild animal, increasing your stamina by "+(50+(50*10*mdata.city.games.upgrades[0]/100))+" and Favour Tick Value by "+(100+(100*10*mdata.city.games.upgrades[0]/100)), cost: "Cost 1 Activity"},
                    { name: "COOK", description: "Cook wild meat, increasing your Stamina by "+(110+(110*10*mdata.city.games.upgrades[0]/100)), cost: "Cost 1 Activity" },
                    { name: "KILL", description: "Kill another competitor, increasing your Favour Tick Value by "+(410+(410*10*mdata.city.games.upgrades[0]/100)), cost: "Cost 1 Activity & 110 Stamina" }
                ],
                [
                    { name: "TEAM UP", description: "Increase Stamina & Favour Tick Value gains by 10%", cost: "Cost "+(15000 + (mdata.city.games.upgrades[0] * 15000))+" Favours" },
                    { name: "APPEASE THE CROWD", description: "Decreases Favour Tick Rate by 72 seconds", cost: "Cost "+(15000 + (mdata.city.games.upgrades[1] * 15000))+" Favours" },
                    { name: "SUPER ENTERTAINING!", description: "10% for favour to/nTick Twice!", cost: "Cost "+(15000 + (mdata.city.games.upgrades[2] * 15000))+" Favours" }
                ],
                [
                    { name: "ANIMAL TRAPS", description: "Makes you unable to be attacked by animals for 24h", cost: "Cost 20000 Favours" },
                    { name: "YOU'VE GOT A FRIEND IN ME", description: "Somenone in the crowd will replenish lost activities", cost: "Cost 20000 Favours" },
                    { name: "ANIMAL COMPANION", description: "Makes you unable to be attacked by competitors for 24h", cost: "Cost 20000 Favours" }
                ]
            ];
    
            var victimized = [
                { text: "Hunted ("+timer((mdata.city.games.victim[0]-Date.now())/1000)+") -> ", value: (25+(25*10*mdata.city.games.upgrades[0]/100))+" Stamina"},
                { text: "Looted ("+timer((mdata.city.games.victim[1]-Date.now())/1000)+") -> ", value: "-4 Activity" },
                { text: "Killed ("+timer((mdata.city.games.victim[2]-Date.now())/1000)+") -> ", value: (205+(205*10*mdata.city.games.upgrades[0]/100))+" Tick Value"},
            ];
            
            var buttonHeight = H*0.7;
            if (gamesTab != 3 && eventRanking!=undefined && eventRanking.player!=undefined) {            
                for (var i = 0; i < 3; ++i) {
                    roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25),buttonHeight-H*0.35*0.5,W*0.2,H*0.35,15,"rgb(89, 124, 43)");
                    roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25)+3,buttonHeight-H*0.35*0.5+3,W*0.2-6,H*0.35-6,15,"white");
                    roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25)+5,buttonHeight-H*0.35*0.5+5,W*0.2-10,H*0.35-10,15,"rgb(89, 124, 43)");
                    roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25)+15,buttonHeight-H*0.35*0.5+15,W*0.2-30,H*0.35-30,15,"rgba(255, 255, 255, 0.2)");
        
                    etext(ctx,buttons[gamesTab][i].name,W*0.25+(i*W*0.25),H*0.58,"44px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,25);
                    etext(ctx,buttons[gamesTab][i].description,W*0.25+(i*W*0.25),H*0.67,"24px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,20);
    
                    if (gamesTab == 0 && Date.now() < mdata.city.games.victim[i]) {
                        text(ctx,victimized[i].text+victimized[i].value,W*0.25+(i*W*0.25),H*0.77,"20px"+FONT,"rgb(178,34,34)","center","middle");
                    }
    
                    if (gamesTab == 2 && Date.now() < mdata.city.games.defenses[i]) {
                        text(ctx,"Defense Actived for: "+timer((mdata.city.games.defenses[i]-Date.now())/1000),W*0.25+(i*W*0.25),H*0.77,"20px"+FONT,"blue","center","middle");
                    }
    
    
                    if (gamesTab == 0 && mdata.city.games.activities.activity == i && Date.now() < mdata.city.games.activities.timer) etext(ctx,"Activity in Progress/n"+timer((mdata.city.games.activities.timer-Date.now())/1000),W*0.25+(i*W*0.25),H*0.80,"24px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,20);
                    else if (gamesTab == 0 && mdata.city.games.activities.activity == i && Date.now() >= mdata.city.games.activities.timer) etext(ctx,"CLAIM!",W*0.25+(i*W*0.25),H*0.80,"24px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,20);
                    else if (gamesTab == 0 && mdata.city.games.activities.activity != -1) etext(ctx,"Blocked",W*0.25+(i*W*0.25),H*0.80,"24px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,20);
                    else if (gamesTab == 1 && mdata.city.games.upgrades[i] == 10) etext(ctx,"Already at Max",W*0.25+(i*W*0.25),H*0.80,"24px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,20);
                    else if (gamesTab == 2 && mdata.city.games.defenses[i] > Date.now()) etext(ctx,"Defense is active",W*0.25+(i*W*0.25),H*0.80,"24px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,20);
                    else etext(ctx,buttons[gamesTab][i].cost,W*0.25+(i*W*0.25),H*0.80,"24px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,20);
    
                    if ((gamesTab == 1 || gamesTab == 2) && eventRanking !== undefined && eventRanking.top !== undefined && eventRanking.player !== undefined) etext(ctx,"Current Favour: "+eventRanking.player.StatValue,W*0.25+(i*W*0.25),H*0.835,"24px"+FONT,"black","center","middle",undefined,undefined,W*0.2-30-6,20);
    
                    var ready = false;
                    if (gamesTab == 0 && mdata.city.games.activities.activity == -1) ready = true;
                    if (gamesTab == 1) ready = true;
                    if (gamesTab == 2) ready = true;
    
                    var enoughCurrency = false;
                    if (gamesTab == 0 && (mdata.city.games.activities.points >= 1 || mdata.city.games.activities.instant >= 1)) enoughCurrency = true;
                    if (gamesTab == 0 && i == 2 && mdata.city.games.stamina < 110) enoughCurrency = false;
                    if (gamesTab == 1 && eventRanking.player.StatValue >= (15000 + (mdata.city.games.upgrades[i] * 15000))) enoughCurrency = true;
                    if (gamesTab == 2 && eventRanking.player.StatValue >= 20000) enoughCurrency = true;
                    
                    if (gamesTab == 1 && mdata.city.games.upgrades[i] == 10) enoughCurrency = false;
    
                    if (!ready) roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25),buttonHeight-H*0.35*0.5,W*0.2,H*0.35,15,"rgba(0, 0, 0, 0.3)");
                    else if (!enoughCurrency) roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25),buttonHeight-H*0.35*0.5,W*0.2,H*0.35,15,"rgba(255, 0, 0, 0.3)");
                    var arect=(new Rect(W*0.25-W*0.2*0.5+(i*W*0.25),buttonHeight-H*0.35*0.5,W*0.2,H*0.35)).small();    
                    if (arect.isInside(GM.x,GM.y) && enoughCurrency && ready && !ggSync) {
                        this.addZone("ggames"+i,arect,"btgg",{target:i});
                        roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25),buttonHeight-H*0.35*0.5,W*0.2,H*0.35,15,"rgba(0, 0, 0, 0.3)");
                    }
    
                    if (gamesTab == 0 && mdata.city.games.activities.activity == i && Date.now() >= mdata.city.games.activities.timer) {
                        roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25),buttonHeight-H*0.35*0.5,W*0.2,H*0.35,15,"rgba(255, 255, 255, 0.1)");
                        var clarect=(new Rect(W*0.25-W*0.2*0.5+(i*W*0.25),buttonHeight-H*0.35*0.5,W*0.2,H*0.35)).small();    
                        if (clarect.isInside(GM.x,GM.y) && !ggSync) {
                            this.addZone("claimac"+i,clarect,"clagg");
                            roundedRect(ctx,W*0.25-W*0.2*0.5+(i*W*0.25),buttonHeight-H*0.35*0.5,W*0.2,H*0.35,15,"rgba(255, 255, 255, 0.3)");
                        }
                    }
                }
            } else {
                if (gamesTab !== 3) this.spinner(ctx,W*0.5,buttonHeight,40);
            }
    
            if (gamesTab == 0) {
                roundedRect(ctx,W*0.5-bgw*0.95*0.5,H*0.25-H*0.125*0.5,bgw*0.95,H*0.125,10,"rgba(255,255,255,0.3)");
                etext(ctx,"Welcome to the Gaiabyte Annual Management Entertainment Show, or G.A.M.E.S. You’re the ‘lucky’ participate this year! It’s simple, entertain the Gaiabyte Management through your ability to hunt, cook & kill and earn favour from the crowd, survive long enough and you’ll live a life of eternal glory, showered in G.A.M.E.S coins…  ",W*0.5,H*0.21,"30px"+FONT,"black","center","middle",undefined,undefined,bgw*0.95,24);
                var currentTickRate = 1440000 - (mdata.city.games.upgrades[1] * 72000);
                var favourAmount = (Math.floor((Date.now() - mdata.city.games.automatic.lastClaim) / currentTickRate)) * mdata.city.games.automatic.tickValue;
                var showData = [
                    { name: "Activity Points: ", data: mdata.city.games.activities.points },
                    { name: "Current Stamina: ", data: mdata.city.games.stamina },
                    { name: "Next Favour in: ", data: timer((mdata.city.games.automatic.lastClaim+((favourAmount/mdata.city.games.automatic.tickValue)*currentTickRate)+currentTickRate-Date.now())/1000) },
                    { name: "Favour Value: ", data: mdata.city.games.automatic.tickValue },
                ];
                for (var i = 0; i < 4; ++i) {
                    ctx.fillStyle="rgba(255,255,255,1)";
                    ctx.fillRect(W*0.2-W*0.175*0.5+(W*0.202*i),H*0.37-H*0.075*0.5,W*0.175,H*0.075);
                    ctx.fillStyle="rgb(89, 124, 43)";
                    ctx.fillRect(W*0.2-W*0.175*0.5+(W*0.202*i)+2,H*0.37-H*0.075*0.5+2,W*0.175-4,H*0.075-4);
                    ctx.fillStyle="rgba(255, 255, 255, 0.2)";
                    ctx.fillRect(W*0.2-W*0.175*0.5+(W*0.202*i)+5,H*0.37-H*0.075*0.5+5,W*0.175-10,H*0.075-10);
                    text(ctx,showData[i].name+showData[i].data,W*0.2+(W*0.202*i),H*0.37,"32px"+FONT,"black","center","middle");
                }
    
                if (mdata.city.games.automatic !== undefined && (Date.now() - mdata.city.games.automatic.lastClaim) > currentTickRate) {
                    ctx.fillStyle="rgba(255,255,255,1)";
                    ctx.fillRect(W*0.5-W*0.35*0.5,H*0.47-H*0.075*0.5,W*0.35,H*0.075);
                    ctx.fillStyle="rgb(89, 124, 43)";
                    ctx.fillRect(W*0.5-W*0.35*0.5+2,H*0.47-H*0.075*0.5+2,W*0.35-4,H*0.075-4);
                    ctx.fillStyle="rgba(255, 255, 255, 0.2)";
                    ctx.fillRect(W*0.5-W*0.35*0.5+5,H*0.47-H*0.075*0.5+5,W*0.35-10,H*0.075-10);
    
                    text(ctx,"Click to Claim Favour",W*0.5,H*0.47,"36px"+FONT,"black","center","middle");
                    var dcrect=(new Rect(W*0.5-W*0.35*0.5,H*0.47-H*0.075*0.5,W*0.35,H*0.075)).small();
                    if (dcrect.isInside(GM.x,GM.y) && !ggSync) {
                        this.addZone("actclaim",dcrect,"accl");
                        ctx.fillStyle="rgba(0,0,0,0.3)";
                        ctx.fillRect(W*0.5-W*0.35*0.5,H*0.47-H*0.075*0.5,W*0.35,H*0.075);
                    }
                }
    
            } else if (gamesTab == 1) {
                roundedRect(ctx,W*0.5-bgw*0.95*0.5,H*0.25-H*0.125*0.5,bgw*0.95,H*0.125,10,"rgba(255,255,255,0.3)");
                etext(ctx,"Favour is a fickle thing, maybe you should spend some of it on these fine upgrades GaiaByte has offered you, or don't, we're not your boss or anything, but you probably should spend it on these upgrades...they're kind of good. ",W*0.5,H*0.21,"30px"+FONT,"black","center","middle",undefined,undefined,bgw*0.95,24);
                for (var i = 0; i < 3; ++i) {
                    ctx.fillStyle="rgba(255,255,255,1)";
                    ctx.fillRect(W*0.23-W*0.24*0.5+(W*0.27*i),H*0.42-H*0.075*0.5,W*0.24,H*0.075);
                    ctx.fillStyle="rgb(89, 124, 43)";
                    ctx.fillRect(W*0.23-W*0.24*0.5+(W*0.27*i)+2,H*0.42-H*0.075*0.5+2,W*0.24-4,H*0.075-4);
                    ctx.fillStyle="rgba(255, 255, 255, 0.2)";
                    ctx.fillRect(W*0.23-W*0.24*0.5+(W*0.27*i)+5,H*0.42-H*0.075*0.5+5,W*0.24-10,H*0.075-10);
                    text(ctx,"Current Level: "+mdata.city.games.upgrades[i],W*0.23+(W*0.27*i),H*0.42,"36px"+FONT,"black","center","middle");
                }
            } else if (gamesTab == 2) {
                roundedRect(ctx,W*0.5-bgw*0.95*0.5,H*0.25-H*0.125*0.5,bgw*0.95,H*0.125,10,"rgba(255,255,255,0.3)");
                etext(ctx,"Once 24 hours have passed, GaiaByte will remove all sense of fairness and the arena will become as hostile to you as you are to it! Every 6 hours you have the chance to be the victim of another competitors activities. Make sure you stock up on defenses, or run the risk of being Hunted, Looted or Killed yourself! Negatively impacting you for 24 hours! ",W*0.5,H*0.21,"30px"+FONT,"black","center","middle",undefined,undefined,bgw*0.95,24);
                
                var totalTime = (Date.now() - (mdata.city.games.start + 86400000 + (21600000*mdata.city.games.lastDefense)));
                var timeRanges = Math.floor(totalTime / 21600000);
                ctx.fillStyle="rgba(255,255,255,1)";
                ctx.fillRect(W*0.5-W*0.35*0.5,H*0.47-H*0.075*0.5,W*0.35,H*0.075);
                ctx.fillStyle="rgb(89, 124, 43)";
                ctx.fillRect(W*0.5-W*0.35*0.5+2,H*0.47-H*0.075*0.5+2,W*0.35-4,H*0.075-4);
                ctx.fillStyle="rgba(255, 255, 255, 0.2)";
                ctx.fillRect(W*0.5-W*0.35*0.5+5,H*0.47-H*0.075*0.5+5,W*0.35-10,H*0.075-10);
                if ((mdata.city.games.start + 86400000 + (21600000*mdata.city.games.lastDefense) + 21600000) <=  Date.now()) {
                    text(ctx,"Click to perform "+timeRanges+" actions",W*0.5,H*0.47,"36px"+FONT,"black","center","middle");
                    var dcrect=(new Rect(W*0.5-W*0.35*0.5,H*0.47-H*0.075*0.5,W*0.35,H*0.075)).small();
                    if (dcrect.isInside(GM.x,GM.y) && !ggSync) {
                        this.addZone("defclaim",dcrect,"dacl");
                        ctx.fillStyle="rgba(0,0,0,0.3)";
                        ctx.fillRect(W*0.5-W*0.35*0.5,H*0.47-H*0.075*0.5,W*0.35,H*0.075);
                    }
                } else {
                    text(ctx,"There isn't any defense action to check",W*0.5,H*0.47,"36px"+FONT,"black","center","middle");
                }
    
                if (mdata.city.games.start + 86400000 <= Date.now()) {
                    var showData = [{ name: "Next Action in: ", data: timer(((mdata.city.games.start + 108000000 + (timeRanges*21600000) + (21600000*mdata.city.games.lastDefense)-Date.now()))/1000) },{ name: "Actions Amount: ", data: timeRanges }];
                    for (var j = 0; j < 2; ++j) {
                        ctx.fillStyle="rgba(255,255,255,1)";
                        ctx.fillRect(W*0.35-W*0.2*0.5+(W*0.3*j),H*0.37-H*0.075*0.5,W*0.2,H*0.075);
                        ctx.fillStyle="rgb(89, 124, 43)";
                        ctx.fillRect(W*0.35-W*0.2*0.5+(W*0.3*j)+2,H*0.37-H*0.075*0.5+2,W*0.2-4,H*0.075-4);
                        ctx.fillStyle="rgba(255, 255, 255, 0.2)";
                        ctx.fillRect(W*0.35-W*0.2*0.5+(W*0.3*j)+5,H*0.37-H*0.075*0.5+5,W*0.2-10,H*0.075-10);
                        text(ctx,showData[j].name+showData[j].data,W*0.35+(W*0.3*j),H*0.37,"36px"+FONT,"black","center","middle");
                    }
                }
    
                
                var tooltip = "0nww";
                var tooltipw = T.width(tooltip)*0.5;
                var tooltiph = T.height(tooltip)*0.5;
                T.draw(ctx,tooltip,W*0.5+bgw*0.12-tooltipw*0.5,H*0.145-tooltiph*0.5,tooltipw,tooltiph);
                var tlrect=(new Rect(W*0.5+bgw*0.12-tooltipw*0.5,H*0.145-tooltiph*0.5,tooltipw,tooltiph)).small();
                if (tlrect.isInside(GM.x,GM.y)) {
                    roundedRect(ctx,W*0.5-bgw*0.95*0.5,H*0.25-H*0.125*0.5,bgw*0.95,H*0.4,10,"rgba(0,0,0,0.9)");
                    text(ctx,"Defenses are not necessary for the first 24 hours of the event.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+25,"33px"+FONT,"white","left","middle");
                    text(ctx,"After 24 hours have passed, once every 6 hours you may become the victim of another competitor’s activity.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+50,"33px"+FONT,"white","left","middle");
                    text(ctx,"If you are the victim of another players Hunt, you gain 50% less Stamina for 24 hours.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+75,"33px"+FONT,"white","left","middle");
                    text(ctx,"Purchasing 'Animal Traps' prevents you from being Hunted for 24 hours.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+100,"33px"+FONT,"white","left","middle");
                    text(ctx,"If you are the victim of another players Cook, you gain 4 less Activity’s for 24 hours.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+125,"33px"+FONT,"white","left","middle");
                    text(ctx,"Purchasing 'You've got a friend in me' prevents you from being Looted (Cooked) for 24 hours.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+150,"33px"+FONT,"white","left","middle");
                    text(ctx,"If you are the victim of another players Kill, you gain 50% less Favour Value Tick gains for 24 hours.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+175,"33px"+FONT,"white","left","middle");
                    text(ctx,"Purchasing 'Animal Companion' prevents you from being Killed for 24 hours.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+200,"33px"+FONT,"white","left","middle");
                    text(ctx,"Defenses can be purchased multiple times, adding 24 hours with each purchase.",W*0.5-bgw*0.95*0.5+5,H*0.25-H*0.125*0.5+225,"33px"+FONT,"white","left","middle");
    
                }
    
            } else if (gamesTab == 3 && eventRanking !== undefined && eventRanking.top !== undefined && eventRanking.player !== undefined) {
                // Right Zone
                var date = new Date(mdata.city.games.start)
                var huntdate = new Date(mdata.city.games.victim[0]);
                var cookdate = new Date(mdata.city.games.victim[1]);
                var killdate = new Date(mdata.city.games.victim[2]);
                var eventStats = [
                    {title: "Entered Event", stat: ((date.getDate()>9)?date.getDate():('0'+date.getDate()))+'/'+((date.getMonth()>8)?(date.getMonth()+1):('0'+(date.getMonth()+1)))+'/'+date.getFullYear()+' - '+date.getHours()+':'+((date.getMinutes()>9)?date.getMinutes():('0'+date.getMinutes()))},
                    {title: "Personal Time left", stat: timer((Math.max(0,Math.min(mdata.city.games.start + (86400000*5),mdata.city.games.end)-Date.now()))/1000)},
                    {title: "Activity Points", stat: mdata.city.games.activities.points},
                    {title: "Instant Points", stat: mdata.city.games.activities.instant},
                    {title: "Max Favour", stat: mdata.city.games.maxFavour},
                    {title: "Favour Tick Value", stat: mdata.city.games.automatic.tickValue},
                    {title: "Favour Tick Rate", stat: timer((1440000 - (mdata.city.games.upgrades[1] * 72000))/1000)},
                    {title: "Expected Final Favour", stat: eventRanking.player.StatValue+(Math.floor((mdata.city.games.start+(86400000*5)-Date.now())/(1440000 - (mdata.city.games.upgrades[1] * 72000)))*mdata.city.games.automatic.tickValue*(1+mdata.city.games.upgrades[2]/10))},
                    {title: "Current Stamina", stat: mdata.city.games.stamina},
                    {title: "Current Hunt Chances", stat: mdata.city.games.rolls[0]+"%"},
                    {title: "Hunt Effects Active till", stat: ((huntdate.getDate()>9)?huntdate.getDate():('0'+huntdate.getDate()))+'/'+((huntdate.getMonth()>8)?(huntdate.getMonth()+1):('0'+(huntdate.getMonth()+1)))+'/'+huntdate.getFullYear()+' - '+huntdate.getHours()+':'+((huntdate.getMinutes()>9)?huntdate.getMinutes():('0'+huntdate.getMinutes()))},
                    {title: "Current Cook Chances", stat: mdata.city.games.rolls[1]+"%"},
                    {title: "Cook Effects Active till", stat: ((cookdate.getDate()>9)?cookdate.getDate():('0'+cookdate.getDate()))+'/'+((cookdate.getMonth()>8)?(cookdate.getMonth()+1):('0'+(cookdate.getMonth()+1)))+'/'+cookdate.getFullYear()+' - '+cookdate.getHours()+':'+((cookdate.getMinutes()>9)?cookdate.getMinutes():('0'+cookdate.getMinutes()))},
                    {title: "Current Kill Chances", stat: mdata.city.games.rolls[2]+"%"},
                    {title: "Kill Effects Active till", stat: ((killdate.getDate()>9)?killdate.getDate():('0'+killdate.getDate()))+'/'+((killdate.getMonth()>8)?(killdate.getMonth()+1):('0'+(killdate.getMonth()+1)))+'/'+killdate.getFullYear()+' - '+killdate.getHours()+':'+((killdate.getMinutes()>9)?killdate.getMinutes():('0'+killdate.getMinutes()))},
                ];
                if (mdata.city.games.victim[0] <= Date.now()) eventStats[9].stat = "Not active";
                if (mdata.city.games.victim[1] <= Date.now()) eventStats[11].stat = "Not active";
                if (mdata.city.games.victim[2] <= Date.now()) eventStats[13].stat = "Not active";
    
                for (var i = 0; i < eventStats.length; ++i) {
                    text(ctx,eventStats[i].title+": "+eventStats[i].stat,W*0.525,H*0.235+(i*H*0.04),"36px"+FONT,"black","left","middle");
                    if (eventStats[i].title == "Max Favour") {
                        var textSize = mtext(ctx,eventStats[i].title+": "+eventStats[i].stat,W*0.525,H*0.235+(i*H*0.04),"36px"+FONT,"black","left","middle");
                        roundedRect(ctx,W*0.525+textSize+11,H*0.235+(i*H*0.04)-H*0.05*0.5+1,H*0.05,H*0.05,5,"rgba(0,0,0,0.45)");
                        T.draw(ctx,"l1qq",W*0.525+textSize+10+2,H*0.235+(i*H*0.04)-H*0.05*0.5+2);
                        var mlrect=(new Rect(W*0.525+textSize+11,H*0.235+(i*H*0.04)-H*0.05*0.5+1,H*0.05,H*0.05)).small();
                        if (mlrect.isInside(GM.x,GM.y)) {
                            milestonesTooltip = true;
                        }
                    }
                } 
    
                // Left Zone
                roundedRect(ctx,W*0.5-bgw*0.475,H*0.5-bgh*0.7*0.5,bgw*0.45,bgh*0.75,5,"rgba(255,255,255,0.3)");
                if (eventRanking !== undefined && eventRanking.top !== undefined && eventRanking.player !== undefined) {
                    text(ctx,"LEADERBOARD",W*0.5-bgw*0.475+bgw*0.45*0.5,H*0.265,"50px"+FONT,"black","center","middle");
                    var index = 0;
                    for (var i = 0; i < 10; ++i) {
                        if (index < eventRanking.top.length) {
                            text(ctx,eventRanking.top[index].Position+1,W*0.12,H*0.32+(i*H*0.0375),"32px"+FONT,"black","left","middle");
                            text(ctx,eventRanking.top[index].DisplayName,W*0.16,H*0.32+(i*H*0.0375),"32px"+FONT,"black","left","middle");
                            text(ctx,eventRanking.top[index].StatValue+" Favours",W*0.47,H*0.32+(i*H*0.0375),"32px"+FONT,"black","right","middle");
                        }
                        ++index;
                    }
                    roundedRect(ctx,W*0.5-bgw*0.46,H*0.735,bgw*0.42,bgh*0.07,5,"rgba(0,0,0,0.3)");
                    text(ctx,eventRanking.player.Position+1,W*0.125,H*0.735+bgh*0.07*0.5,"32px"+FONT,"white","left","middle");
                    text(ctx,eventRanking.player.DisplayName,W*0.165,H*0.735+bgh*0.07*0.5,"32px"+FONT,"white","left","middle");
                    text(ctx,eventRanking.player.StatValue+" Favours",W*0.335,H*0.735+bgh*0.07*0.5,"32px"+FONT,"white","left","middle");
    
                    roundedRect(ctx,W*0.5-bgw*0.475+bgw*0.45*0.5+120,H*0.265-T.height("1hng")*0.5,W*0.03,W*0.03,5,"rgba(0,0,0,0.6)");
                    T.draw(ctx,"1hng",W*0.5-bgw*0.475+bgw*0.45*0.5+120,H*0.265-T.height("1hng")*0.5);
                    var rrect=(new Rect(W*0.5-bgw*0.475+bgw*0.45*0.5+120,H*0.265-T.height("1hng")*0.5,W*0.03,W*0.03)).small();
                    if (rrect.isInside(GM.x,GM.y)) {
                        rankingTooltip = true;
                    }
                } else {
                    this.spinner(ctx,W*0.5-bgw*0.475*0.5-20,H*0.5,40);
                }
            }
        }

        if (rankingTooltip) {
        	T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
            ctx.fillStyle="rgba(0, 0, 0, 0.7)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

            text(ctx,"REWARDS TABLE",W*0.5,H*0.5-bgh*0.425,"90px"+FONT,"white","center","middle");
            text(ctx,"Top 1 -> 36 Levels of Ascended, Legendary, Rare, Common + 750 AS + 400 PG + 750 CC + 2500 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 2 -> 27 Levels of Ascended, Legendary, Rare, Common + 500 AS + 250 PG + 500 CC + 1500 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+30,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 3 -> 18 Levels of Ascended, Legendary, Rare, Common + 250 AS + 150 PG + 250 CC + 1000 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+60,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 4:10 -> 15 Levels of Ascended, Legendary, Rare, Common + 150 AS + 100 PG + 150 CC + 750 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+90,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 10:25 -> 12 Levels of Ascended, Legendary, Rare, Common + 100 AS + 75 PG + 100 CC + 500 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+120,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 26:50 -> 9 Levels of Ascended, Legendary, Rare, Common + 50 AS + 50 PG + 50 CC + 300 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+150,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 51:100 -> 6 Levels of Ascended, Legendary, Rare, Common + 35 AS + 35 PG + 35 CC + 200 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+180,"33px"+FONT,"white","left","middle");
            text(ctx,"Top 101:500 -> 3 Levels of Ascended, Legendary, Rare, Common + 20 AS + 20 PG + 20 CC + 100 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+210,"33px"+FONT,"white","left","middle");
            text(ctx,"Top +500 -> 1 Levels of Ascended, Legendary, Rare, Common + 10 AS + 10 PG + 10 CC + 50 UM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+240,"33px"+FONT,"white","left","middle");
            if (Math.floor(Date.now()/(24*60*60*1000)) >= 18431 && Math.floor(Date.now()/(24*60*60*1000)) <= 18435) {
                text(ctx,"* The event will end on Monday at 23:59:59. This event will be active for one week every 6 weeks.",W*0.5-bgw*0.47,H*0.5-bgh*0.30+380,"33px"+FONT,"white","left","middle");
            } else text(ctx,"* The event will end on Sunday at 23:59:59. This event will be active for one week every 6 weeks.",W*0.5-bgw*0.47,H*0.5-bgh*0.30+380,"33px"+FONT,"white","left","middle");
            this.drawMonster(ctx,-2-222,W*0.2,H*0.85-35,undefined,false,1);
            this.drawMonster(ctx,-2-223,W*0.4,H*0.85-35,undefined,false,1);
            this.drawMonster(ctx,-2-224,W*0.6,H*0.85-35,undefined,false,1);
            this.drawMonster(ctx,-2-225,W*0.8,H*0.85-35,undefined,false,1);
        }
        if (milestonesTooltip) {
            T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
            ctx.fillStyle="rgba(0, 0, 0, 0.7)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

            text(ctx,"PERSONAL MILESTONES (MAX FAVOUR)",W*0.5,H*0.5-bgh*0.425,"90px"+FONT,"white","center","middle");
            text(ctx,"500,000 Favour - 5 Cosmic Coins / 5 Prana / 5 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30,"33px"+FONT,"white","left","middle");
            text(ctx,"1,500,000 Favour - 10 Cosmic Coins / 10 Prana / 10 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30+30,"33px"+FONT,"white","left","middle");
            text(ctx,"3,000,000 Favour - 15 Cosmic Coins / 15 Prana / 15 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30+60,"33px"+FONT,"white","left","middle");
            text(ctx,"6,000,000 Favour - 25 Cosmic Coins / 25 Prana / 25 Ascension Spheres",W*0.5-bgw*0.47,H*0.5-bgh*0.30+90,"33px"+FONT,"white","left","middle");
            text(ctx,"10,000,000 Favour - 35 Cosmic Coins / 35 Prana / 35 Ascension Spheres / 1x EM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+120,"33px"+FONT,"white","left","middle");
            text(ctx,"15,500,000 Favour - 50 Cosmic Coins / 50 Prana / 50 Ascension Spheres / 2x EM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+150,"33px"+FONT,"white","left","middle");
            text(ctx,"22,500,000 Favour - 75 Cosmic Coins / 75 Prana / 75 Ascension Spheres / 3x EM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+180,"33px"+FONT,"white","left","middle");
            text(ctx,"31,000,000 Favour - 100 Cosmic Coins / 100 Prana / 100 Ascension Spheres / 5x EM",W*0.5-bgw*0.47,H*0.5-bgh*0.30+210,"33px"+FONT,"white","left","middle");
            text(ctx,"40,500,000 Favour - 150 Cosmic Coins / 125 Prana / 150 Ascension Spheres / 7x EM / 100 VIP Points",W*0.5-bgw*0.47,H*0.5-bgh*0.30+240,"33px"+FONT,"white","left","middle");
            text(ctx,"50,500,000 Favour - 225 Cosmic Coins / 180 Prana / 225 Ascension Spheres / 10x EM / 150 VIP Points",W*0.5-bgw*0.47,H*0.5-bgh*0.30+270,"33px"+FONT,"white","left","middle");
            text(ctx,"62,500,000 Favour - 350 Cosmic Coins / 250 Prana / 550 Ascension Spheres / 15x EM / 250 VIP Points",W*0.5-bgw*0.47,H*0.5-bgh*0.30+300,"33px"+FONT,"white","left","middle");
            text(ctx,"80,000,000 Favour - 500 Cosmic Coins / 325 Prana / 500 Ascension Spheres / 20x EM / 400 VIP Points",W*0.5-bgw*0.47,H*0.5-bgh*0.30+330,"33px"+FONT,"white","left","middle");
        }
        
        // Close
        var stgcloserect=(new Rect(W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75)).small(); 
        if (stgcloserect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"dykv",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);
            this.addZone("closesgg",stgcloserect,"ogg",{target:false});
        } else T.draw(ctx,"cjq4",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);  
    }
    this.drawReceivedActions = function (ctx) {
        ctx.fillStyle="rgba(0,0,0,0.75)";
        ctx.fillRect(0,0,W,H);

        var bgw = W*0.7;
        var bgh = H*0.35;

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.55-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(32,178,170,0.7)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.55-bgh*0.5+3,bgw-8,bgh-7);

        if (gamesReceivedActions.action == "ACTIVITIES") {
            text(ctx,"Meanwhile you were alone, you have completed "+gamesReceivedActions.claimed+" activities.",W*0.5,H*0.5-bgh*0.2,"40px"+FONT,"white","center","middle");
            text(ctx,"Those activities, have awarded you "+gamesReceivedActions.favour+" favours!",W*0.5,H*0.5,"40px"+FONT,"white","center","middle");
        } else if (gamesReceivedActions.action =="DEFENSES") {
            var defenseactions = [
                { action1: "Hunt", action2: "hunted" },
                { action1: "Loot", action2: "looted" },
                { action1: "Kill", action2: "killed" }
            ]
            text(ctx,"Meanwhile you were alone, it has happened "+gamesReceivedActions.claimed+" defense actions.",W*0.5,H*0.5-bgh*0.25,"40px"+FONT,"white","center","middle");
            for (var i = 0; i < 3; ++i) {
                if (gamesReceivedActions.defended[i] == 0) {
                    text(ctx,"- "+defenseactions[i].action1+": During this time, you have not been "+defenseactions[i].action2+"! Current chances to be "+defenseactions[i].action2+" next defense action: "+mdata.city.games.rolls[i]+"%",W*0.5-bgw*0.48,H*0.5-bgh*0.1+(i*35),"26px"+FONT,"white","left","middle");
                } else {
                    text(ctx,"- "+defenseactions[i].action1+": During this time, you have been "+defenseactions[i].action2+" "+gamesReceivedActions.defended[i]+" times! Current chances to be "+defenseactions[i].action2+" next defense action: "+mdata.city.games.rolls[i]+"%",W*0.5-bgw*0.48,H*0.5-bgh*0.1+(i*35),"26px"+FONT,"white","left","middle");
                }
            }
        } else if (gamesReceivedActions.action =="MIXEDAUTO") {
            var defenseactions = [
                { action1: "Hunt", action2: "hunted" },
                { action1: "Loot", action2: "looted" },
                { action1: "Kill", action2: "killed" }
            ];

            text(ctx,"Meanwhile you were alone, you have completed "+gamesReceivedActions.claimed+" activities.",W*0.5,H*0.5-bgh*0.28,"34px"+FONT,"white","center","middle");
            text(ctx,"Those activities, have awarded you "+gamesReceivedActions.favour+" favours!",W*0.5,H*0.5-bgh*0.19,"34px"+FONT,"white","center","middle");
            text(ctx,"Defeding Actions ("+gamesReceivedActions.dclaimed+")",W*0.5-bgw*0.48,H*0.48,"28px"+FONT,"white","left","middle");
            var hpos = 0;
            for (var i = 0; i < 3; ++i) {
                if (gamesReceivedActions.defended[i] != 0) {
                    text(ctx,"- "+defenseactions[i].action1+": During this time, you have been "+defenseactions[i].action2+" "+gamesReceivedActions.defended[i]+" times! Current chances to be "+defenseactions[i].action2+" next defense action: "+mdata.city.games.rolls[i]+"%",W*0.5-bgw*0.48,H*0.55-bgh*0.1+(hpos*25),"26px"+FONT,"white","left","middle");
                } else {
                    text(ctx,"- "+defenseactions[i].action1+": During this time, you have not been "+defenseactions[i].action2+"! Current chances to be "+defenseactions[i].action2+" next defense action: "+mdata.city.games.rolls[i]+"%",W*0.5-bgw*0.48,H*0.55-bgh*0.1+(hpos*25),"26px"+FONT,"white","left","middle");
                }
                hpos++;
            }

        }

        roundedRect(ctx,W*0.5-W*0.15*0.5,H*0.67-H*0.07*0.5,W*0.15,H*0.07,5,"rgb(46,139,87)");
        roundedRect(ctx,W*0.5-W*0.15*0.5+4,H*0.67-H*0.07*0.5+4,W*0.15-8,H*0.07-8,5,"white");
        roundedRect(ctx,W*0.5-W*0.15*0.5+6,H*0.67-H*0.07*0.5+6,W*0.15-12,H*0.07-12,5,"rgb(46,139,87)");
        text(ctx,"ACCEPT",W*0.5,H*0.67,"36px"+FONT,"black","center","middle");
        var sendrect = (new Rect(W*0.5-W*0.15*0.5,H*0.67-H*0.07*0.5,W*0.15,H*0.07)).small();
        if (sendrect.isInside(GM.x,GM.y)) {
            roundedRect(ctx,W*0.5-W*0.15*0.5,H*0.67-H*0.07*0.5,W*0.15,H*0.07,5,"rgba(0,0,0,0.25)");
            this.addZone("closeactions",sendrect,"clract");
        }
    }
    this.drawScientistEvent = function (ctx) {
        
        // Close
        var stgcloserect=(new Rect(W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75)).small(); 
        if (stgcloserect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"dykv",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);
            this.addZone("clscien",stgcloserect,"oScien",{target:false});
        } else T.draw(ctx,"cjq4",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75); 
    }
    this.updateLoopEventRanking = function (leaderboardName) {
        if (eventRanking==undefined) eventRanking={time: 0, ptime: 0};
		//if(Date.now() - eventRanking.time < 2*60*1000)
			//return false;
        eventRanking.time=Date.now();
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            PlayFab.ClientApi.GetLeaderboard({
                "StatisticName": leaderboardName,
                "StartPosition": 0,
                "MaxResultsCount": 10,
            }, function (res,err) {
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.Leaderboard) {
                        eventRanking.top=res.data.Leaderboard;
						if(Date.now() - eventRanking.ptime > 5*60*1000) {
							eventRanking.ptime=Date.now();
							PlayFab.ClientApi.GetLeaderboardAroundPlayer({
								"StatisticName": leaderboardName,
								"MaxResultsCount": 1,
							}, function (res,err) {
								if (_this.serverOk(res,err)) {
									eventRanking.player=res.data.Leaderboard[0];
								} else {
									eventRanking.time-=2*60*1000;
									var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
										msg:"PFsjyou",
										stk:res
									}));
									GA.getInstance().addEvent(ev);
								}
							});
						}
                    }
                } else {
                    eventRanking.time-=2*60*1000;
                    var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                        msg:"PFsjtop10",
                        stk:res
                    }));
                    GA.getInstance().addEvent(ev);
                }
            });
        }  
    }
    this.drawEternals = function (ctx) {
        var bgw = W*0.85;
        var bgh = H*0.9;
        var toolLore = undefined;

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(0, 0, 128, 0.7)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

        var tid=Math.floor(Date.now()/(24*60*60*1000));
        if (tid <=18427) text(ctx,"END: 06/14/2020 - 23:59:59",W*0.5-bgw*0.48,H*0.5-bgh*0.45,"40px "+FONT,"white","left","middle");
        else text(ctx,"You've time till today at 23:59:59 to spend the orbs",W*0.5-bgw*0.48,H*0.5-bgh*0.45,"26px "+FONT,"white","left","middle");
        

        text(ctx,"The Eternals",W*0.5,H*0.5-bgh*0.425,"90px"+CFONT,"rgb(131,221,214)","center","middle");

        text(ctx,"The Eternals have woken up! They have heard the call of the Void.",W*0.5,H*0.5-bgh*0.35,"44px"+FONT,"white","center","middle");
        text(ctx,"Collect all the points that you can and use them to Unlock and Level Up your Heroes!",W*0.5,H*0.5-bgh*0.35+25,"44px"+FONT,"white","center","middle");

        roundedRect(ctx,W*0.5-W*0.3*0.5,H*0.5-bgh*0.19-H*0.1*0.5,W*0.3,H*0.1,5,"rgb(131,221,214)");
        roundedRect(ctx,W*0.5-W*0.3*0.5+2,H*0.5-bgh*0.19-H*0.1*0.5+2,W*0.3-4,H*0.1-4,5,"white");
        roundedRect(ctx,W*0.5-W*0.3*0.5+4,H*0.5-bgh*0.19-H*0.1*0.5+4,W*0.3-8,H*0.1-8,5,"rgb(131,221,214)");
        roundedRect(ctx,W*0.5-W*0.3*0.5+8,H*0.5-bgh*0.19-H*0.1*0.5+8,W*0.3-16,H*0.1-16,5,"rgba(255,255,255,0.4)");
        text(ctx,mdata.city.eternals.orbs+" Void Orbs",W*0.5,H*0.5-bgh*0.19,"60px"+FONT,"rgb(0,0,128)","center","middle");

        var tooltip = "0nww";
        var tooltipw = T.width(tooltip)*0.5;
        var tooltiph = T.height(tooltip)*0.5;
        T.draw(ctx,tooltip,W*0.68-tooltipw*0.5,H*0.5-bgh*0.19-tooltiph*0.5,tooltipw,tooltiph);

        text(ctx,"* Use 'ctrl' to Level Up Heroes till MAX available",W*0.5,H*0.5+bgh*0.46,"30px"+FONT,"white","center","middle");

        var hid = 226;
        var cw = bgw * 0.225;
        var ch = bgh * 0.5;
        var unlock = [500,1500,3000,6000];
        var lupprice = [5,10,25,50];
        var heroLore = [
            "Once in a while, an emissary comes to you. They come to spread a message. A message you cannot resist. Their name is Jalrok.",
            "After the message is received, an accomplicate joins Jalrok in their travels. You cannot refuse the desire to follow. Their name is Raelan.",
            "After traveling for millenia, Raelan arrives at a nebula. There, temptation is stronger than ever and you're determined worth of not by the Gatekeeper. Their name is Sylnir.",
            "The insatiable temptation was too overwhelming to follow The Wanderer's warnings. Sylnir guided you to the master. The master deems you worthy of joining The Eternals. Their name is Ar'athon."
        ];
        for (var i = 0; i < 4; ++i) {
            var hero = HERO[hid+i];
            var x = (W*0.19+W*0.207*i);
            var y = (H*0.65);
            
            roundedRect(ctx,x-cw*0.5,y-ch*0.5,cw,ch,5,"rgba(0, 0, 0, 1)");
            roundedRect(ctx,x-cw*0.5+1,y-ch*0.5+1,cw-2,ch-2,5,"rgb(255, 255, 255)");
            roundedRect(ctx,x-cw*0.5+1,y-ch*0.5+1,cw-2,ch-2,5,"rgba(173, 216, 230, 0.75)");

            text(ctx,hero.name,x,y-ch*0.4,"32px"+FONT,"black","center","middle");
            this.drawMonster(ctx,-2-(hid+i),x,y+ch*0.2,undefined,false,1.3,mdata.city.hero[hid+i],true,true,0);

            var tooltip = "0nww";
            var tooltipw = T.width(tooltip)*0.5;
            var tooltiph = T.height(tooltip)*0.5;
            T.draw(ctx,tooltip,x+cw*0.35-tooltipw*0.5,y-ch*0.24-tooltiph*0.5,tooltipw,tooltiph);
            var tlrect=(new Rect(x+cw*0.35-tooltipw*0.5,y-ch*0.24-tooltiph*0.5,tooltipw,tooltiph)).small();
            if (tlrect.isInside(GM.x,GM.y)) toolLore = i;

            if (mdata.city.hero[hid+i] == undefined || mdata.city.hero[hid+i] == 0 ) {
                text(ctx,"Level Up Price: "+lupprice[i]+" Points",x,y-ch*0.33,"26px"+FONT,"black","center","middle");
                etext(ctx,this.skill2text(hero.skill,mdata.city.hero[hid+i],false).short,x-cw*0.45,y+ch*0.27,"25px"+FONT,"black","left","middle",undefined, undefined,cw*0.9);
                roundedRect(ctx,x-cw*0.5,y-ch*0.5,cw,ch,5,"rgba(0,0,0,0.7)");
                text(ctx,"UNLOCK: "+unlock[i]+" points",x,y,"32px"+FONT,"white","center","middle");
                var unlckrect = (new Rect(x-cw*0.5,y-ch*0.5,cw,ch,5)).small();
                if (unlckrect.isInside(GM.x,GM.y) && mdata.city.eternals.orbs >= unlock[i] && !eternalSync) {
                    roundedRect(ctx,x-cw*0.5,y-ch*0.5,cw,ch,5,"rgba(255,255,255,0.4)");
                    this.addZone("uEternal",unlckrect,"ueast",{target:(hid+i)});
                } else if (unlckrect.isInside(GM.x,GM.y) && mdata.city.eternals.orbs < unlock[i] && !eternalSync) {
                    roundedRect(ctx,x-cw*0.5,y-ch*0.5,cw,ch,5,"rgba(0,0,0,0.4)");
                    this.addZone("optick",unlckrect,"oetickets",{target:true});
                }
            } else if (mdata.city.hero[hid+i] < 99) {
                roundedRect(ctx,x-W*0.15*0.5,y+ch*0.35-ch*0.175*0.5,W*0.15,ch*0.175,5,"rgb(72,61,139)");
                roundedRect(ctx,x-W*0.15*0.5+4,y+ch*0.35-ch*0.175*0.5+4,W*0.15-8,ch*0.175-8,5,"white");
                roundedRect(ctx,x-W*0.15*0.5+6,y+ch*0.35-ch*0.175*0.5+6,W*0.15-12,ch*0.175-12,5,"rgb(72,61,139)");
                if (maxLvl) {
                    var maxAffoard = undefined;
                    var needLevels = 99 - mdata.city.hero[hid+i];
                    var pointsneed = needLevels * lupprice[i];
                    if (mdata.city.eternals.orbs  >= pointsneed) maxAffoard = pointsneed;
                    else maxAffoard = Math.floor(mdata.city.eternals.orbs / lupprice[i]) * lupprice[i];
    
                    text(ctx,"Level Up: "+maxAffoard+" VO",x,y+ch*0.35-7,"26px"+FONT,"white","center","middle");
                    text(ctx,(maxAffoard/lupprice[i])+" Levels",x,y+ch*0.35+7,"26px"+FONT,"white","center","middle");
                } else text(ctx,"Level Up: "+lupprice[i]+" Orbs",x,y+ch*0.35,"26px"+FONT,"white","center","middle");
                var lupRect=(new Rect(x-W*0.15*0.5,y+ch*0.35-ch*0.175*0.5,W*0.15,ch*0.175)).small();
                if (lupRect.isInside(GM.x,GM.y) && mdata.city.eternals.orbs >= lupprice[i] && !eternalSync) {
                    roundedRect(ctx,x-W*0.15*0.5,y+ch*0.35-ch*0.175*0.5,W*0.15,ch*0.175,5,"rgba(255,255,255,0.25)");
                    if (maxLvl) {
                        this.addZone("lupEternal_0",lupRect,"least",{target:(hid+i), max:true});
                    } else {
                        this.addZone("lupEternal_1",lupRect,"least",{target:(hid+i), max:false});
                    } 
                } else if (lupRect.isInside(GM.x,GM.y) && mdata.city.eternals.orbs < lupprice[i] && !eternalSync) {
                    roundedRect(ctx,x-W*0.15*0.5,y+ch*0.35-ch*0.175*0.5,W*0.15,ch*0.175,5,"rgba(0,0,0,0.4)");
                    this.addZone("optick",lupRect,"oetickets",{target:true});
                }
            } else {
                etext(ctx,this.skill2text(hero.skill,mdata.city.hero[hid+i],false).short,x-cw*0.45,y+ch*0.27,"25px"+FONT,"black","left","middle",undefined, undefined,cw*0.9);
            }  
        }

        if (toolLore !== undefined) {
            T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
            ctx.fillStyle="rgba(0, 0, 0, 0.7)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

            etext(ctx,heroLore[toolLore],W*0.5,H*0.5-bgh*0.425,"70px"+FONT,"white","center","middle",undefined,undefined,bgw*0.9,H*0.06);

            this.drawMonster(ctx,-2-(hid+toolLore),W*0.5,H*0.65,undefined,false,2,99,true,true,0);
            etext(ctx,this.skill2text(HERO[hid+toolLore].skill,99,false).short,W*0.5,H*0.8,"54px"+FONT,"white","center","middle",undefined,undefined,bgw*0.9,H*0.06);
        }

        var hrect=(new Rect(W*0.68-tooltipw*0.5,H*0.5-bgh*0.19-tooltiph*0.5,tooltipw,tooltiph)).small();
        if (hrect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.5-bgh*0.5-6,bgw+12,bgh+12);
            ctx.fillStyle="rgba(0, 0, 0, 0.7)";
            ctx.fillRect(W*0.5-bgw*0.5+4,H*0.5-bgh*0.5+3,bgw-8,bgh-7);

            text(ctx,"How to obtain Void Orbs",W*0.5,H*0.5-bgh*0.425,"90px"+FONT,"white","center","middle");
            text(ctx,"- Every day you will earn 200 orbs for free",W*0.5-bgw*0.47,H*0.5-bgh*0.30,"50px"+FONT,"white","left","middle");
            text(ctx,"- Hourly Battle: 12 orbs per battle",W*0.5-bgw*0.47,H*0.5-bgh*0.30+50,"50px"+FONT,"white","left","middle");
            text(ctx,"- Cosmic Catcher: 1 Orb for every Cosmic Catcher point",W*0.5-bgw*0.47,H*0.5-bgh*0.30+100,"50px"+FONT,"white","left","middle");
            text(ctx,"- Key Tower: 30 orbs per floor",W*0.5-bgw*0.47,H*0.5-bgh*0.30+150,"50px"+FONT,"white","left","middle");
            text(ctx,"- Cosmic Adventure: 100 orbs for each Adventure started",W*0.5-bgw*0.47,H*0.5-bgh*0.30+200,"50px"+FONT,"white","left","middle");
            text(ctx,"- Match Pairs: 30 orbs for each pair match",W*0.5-bgw*0.47,H*0.5-bgh*0.30+250,"50px"+FONT,"white","left","middle");
            text(ctx,"*You can also exchange tickets for Void Orbs",W*0.5-bgw*0.47,H*0.5-bgh*0.30+370,"50px"+FONT,"white","left","middle");
            text(ctx,"**During event, Kred purchases will award VIP points x3",W*0.5-bgw*0.47,H*0.5-bgh*0.30+420,"50px"+FONT,"white","left","middle");
        }

        // Close
        var ecloserect=(new Rect(W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75)).small(); 
        if (ecloserect.isInside(GM.x,GM.y)) {
            T.draw(ctx,"dykv",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);
            this.addZone("closeet",ecloserect,"oeter",{target:false});
        } else T.draw(ctx,"cjq4",W*0.5+bgw*0.5-T.width("cjq4")*0.5-14,H*0.5-bgh*0.5,T.width("cjq4")*0.75,T.height("cjq4")*0.75);  
    }
    this.drawBattle = function (ctx) {
        var youPos=[
            {x:W/2-120,y:H-100},
            {x:W/2-240,y:H-122},
            {x:W/2-320,y:H-180},
            {x:W/2-380,y:H-230},
            {x:W/2-420,y:H-270},
            {x:W/2-440,y:H-300},
            {x:W/2-450,y:H-320},
        ];
        var otherPos=[
            {x:W/2+120,y:H-100},
            {x:W/2+240,y:H-122},
            {x:W/2+320,y:H-180},
            {x:W/2+380,y:H-230},
            {x:W/2+420,y:H-270},
            {x:W/2+440,y:H-300},
            {x:W/2+450,y:H-320},
        ]
        T.draw(ctx,"05u0",0,0,W,H);
        T.draw(ctx,"065i",1024*0.16,(640*0.061)-T.height("0i5r")/2);
        if (gBattle!==undefined) {
            var step=gBattle.steps[gBattle.dstep];
            var isBossBattle=gBattle.isBossBattle;
            var delta=clamp(gBattle.step-gBattle.dstep,0,1);
            var youDamage=0;
            var youCrit=false;
            var otherDamage=0;
            var otherCrit=false;
            var youAoe=0;
            var otherAoe=0;
            var youHeal=0;
            var otherHeal=0;
            var youSHeal=0;
            var otherSHeal=0;
            var youPierce=false;
            var otherPierce=false;
            var otherRicoPos=-1;
            var otherRicoDmg=0;
            var youRicoPos=-1;
            var youRicoDmg=0;
            for (var sid=0; sid<=1; ++sid) {
                var side = sid?"other":"you";
                var pos = sid?otherPos:youPos;
                var inv = sid?-1:1;
                var reverse = sid?true:false;
                for (var i=gBattle[side].length-1; i>=0; --i) {
                    if (gBattle[side][i]!==undefined) {
                        if (step.target==side && step.action=="SPAWN" && step.pos==i) {
                            ctx.save();
                            ctx.globalAlpha=delta;
                            this.drawMonster(ctx,gBattle[side][i].id,pos[i].x,pos[i].y,gBattle[side][i],reverse,mapf(i,0,6,2,1),gBattle[side][i].lvl,undefined,undefined,gBattle[side][i].prom);
                            ctx.restore();
                        } else if (step.target==side && step.action=="FIGHT") {
                            if (i!=gBattle[side][i].from) {
                                var originx = pos[gBattle[side][i].from].x;
                                var originy = pos[gBattle[side][i].from].y;
                                var originz = mapf(gBattle[side][i].from,0,6,2,1);
                                var targetx = pos[i].x;
                                var targety = pos[i].y;
                                var targetz = mapf(i,0,6,2,1)
                                var x=mapf(delta,0,1,originx,targetx);
                                var y=mapf(delta,0,1,originy,targety);
                                this.drawMonster(ctx,gBattle[side][i].id,x,y,gBattle[side][i],reverse,mapf(delta,0,1,originz,targetz),gBattle[side][i].lvl,undefined,undefined,gBattle[side][i].prom);
                            } else {
                                this.drawMonster(ctx,gBattle[side][i].id,pos[i].x,pos[i].y,gBattle[side][i],reverse,mapf(i,0,6,2,1),gBattle[side][i].lvl,undefined,undefined,gBattle[side][i].prom);
                            }
                        } else if (step.target==side && step.action=="DIE" && i==step.pos) {
                            ctx.save();
                            ctx.globalAlpha=1-delta;
                            var dx=0;
                            if (delta<0.2) dx=mapf(Math.sin(delta*2*Math.PI*5*2),-1,1,-10*inv,10*inv);
                            this.drawMonster(ctx,gBattle[side][i].id,pos[i].x+dx,pos[i].y,gBattle[side][i],reverse,mapf(i,0,6,2,1),gBattle[side][i].lvl,undefined,undefined,gBattle[side][i].prom);
                            ctx.restore();
                        } else if (step.target!=side && step.action=="HIT" && i==0 && step.silent==false) {
                            var mx=0;
                            if (delta<=0.15) {
                                mx=mapf(delta*delta,0,0.15*0.15,0,100*inv);
                            } else if (delta<=0.3) {
                                mx=mapf(delta,0.15,0.3,100*inv,0);
                            }
                            this.drawMonster(ctx,gBattle[side][i].id,pos[i].x+mx,pos[i].y,gBattle[side][i],reverse,mapf(i,0,6,2,1),gBattle[side][i].lvl,undefined,undefined,gBattle[side][i].prom);
                        } else {
                            this.drawMonster(ctx,gBattle[side][i].id,pos[i].x,pos[i].y,gBattle[side][i],reverse,mapf(i,0,6,2,1),gBattle[side][i].lvl,undefined,undefined,gBattle[side][i].prom);
                            var bscale = mapf(i,0,6,1,0.5); 
                            if (step.target==side) {
                                if (step.pos!==undefined && i==step.pos) {
                                    if (step.action=="HIT") {
                                        if (delta>0.15) {
                                            ctx.save();
                                            ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                                            var isCrit = step.isCrit===true;
                                            var isSuperCrit = step.isSuperCrit===true;
                                            var img=isSuperCrit?"lyph":(isCrit?"0hlm":"08n9");
                                            var scale=mapf(delta,0.15,0.25,0.7,1)*bscale;
                                            if (delta>0.3) scale=clamp(scale,0,1*bscale);
                                            T.draw(ctx,img,pos[i].x-T.width(img)*scale/2,pos[i].y-105*bscale-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                                            text(ctx,step.damage,pos[i].x,pos[i].y-100*bscale,Math.round(bscale*50)+"px"+FONT,isCrit?"#FFE0E0":"white","center","middle","black",4);
                                            ctx.restore();
                                        }
                                    } else if (step.action=="DMG2") {
                                        var scale=bscale*1.5;
                                        T.draw(ctx,"zdb7",pos[i].x-T.width("zdb7")*scale/2,pos[i].y-105*bscale-T.height("zdb7")*scale/2,T.width("zdb7")*scale,T.height("zdb7")*scale);
                                        text(ctx,step.value,pos[i].x+34*bscale,pos[i].y-116*bscale,Math.round(bscale*44)+"px"+FONT,"lightblue","center","middle","black",4);
                                    } else if (step.action=="HP2") {
                                        var scale=bscale*1.5;
                                        T.draw(ctx,"zdb7",pos[i].x-T.width("zdb7")*scale/2,pos[i].y-105*bscale-T.height("zdb7")*scale/2,T.width("zdb7")*scale,T.height("zdb7")*scale);
                                        text(ctx,step.value,pos[i].x+34*bscale,pos[i].y-116*bscale,Math.round(bscale*44)+"px"+FONT,"purple","center","middle","black",4);
                                    } else if (step.action=="EVO") {
                                        var scale=bscale*1.5;
                                        T.draw(ctx,"v9i3",pos[i].x-T.width("v9i3")*scale/2,pos[i].y-105*bscale-T.height("v9i3")*scale/2,T.width("v9i3")*scale,T.height("v9i3")*scale);
                                        text(ctx,"x"+step.value,pos[i].x,pos[i].y-100*bscale,Math.round(bscale*44)+"px"+FONT,"black","center","middle","white",4);
                                    } else if (step.action=="RATK") {
                                        var scale=bscale*1.5;
                                        T.draw(ctx,"zdb7",pos[i].x-T.width("zdb7")*scale/2,pos[i].y-105*bscale-T.height("zdb7")*scale/2,T.width("zdb7")*scale,T.height("zdb7")*scale);
                                        text(ctx,step.value,pos[i].x+34*bscale,pos[i].y-116*bscale,Math.round(bscale*44)+"px"+FONT,"lightblue","center","middle","black",4);
                                    } else if (step.action=="ELEM") {
                                        var scale=bscale*7;
                                        var eSphere = ["03xz","0l2b","0cyo","0ckv"];
                                        var img=eSphere[step.value];
                                        T.draw(ctx,img,pos[i].x-T.width(img)*scale/2,pos[i].y-105*bscale-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                                        //text(ctx,step.value,pos[i].x+34*bscale,pos[i].y-116*bscale,Math.round(bscale*44)+"px"+FONT,"lightblue","center","middle","black",4);
                                    }  else if (step.action=="EXTRA") {
                                        if (step.data.val!==undefined && step.data.type!==-1) {
                                            var plusmov=mapf(delta,0,0.8,0,20)*bscale;
                                            var scale=bscale*1.5;
                                            T.draw(ctx,"islj_"+step.data.type,pos[i].x-T.width("islj_0")*scale/2,pos[i].y-185*bscale-T.height("islj_0")*scale/2-plusmov,T.width("islj_0")*scale,T.height("islj_0")*scale);
                                            text(ctx,(step.data.val*100).toFixed(0)+"%",pos[i].x,pos[i].y-185*bscale-plusmov,Math.round(bscale*44)+"px"+FONT,"purple","center","middle","black",4);
                                        }    
                                    }
                                } else if (step.val!==undefined && step.val[i]!==undefined) {
                                    if (step.action=="DEF") {
                                        if (step.val[i]!==undefined && step.val[i]>0) {
                                            var scale=bscale*1.5;
                                            T.draw(ctx,"xsck",pos[i].x-T.width("xsck")*scale/2,pos[i].y-105*bscale-T.height("xsck")*scale/2,T.width("xsck")*scale,T.height("xsck")*scale);
                                            text(ctx,step.val[i],pos[i].x+34*bscale,pos[i].y-116*bscale,Math.round(bscale*44)+"px"+FONT,"silver","center","middle","black",4);
                                        }
                                    } else if (step.action=="DMG") {
                                        if (step.val[i]!==undefined && step.val[i]>0) {
                                            var scale=bscale*1.5;
                                            T.draw(ctx,"zdb7",pos[i].x-T.width("zdb7")*scale/2,pos[i].y-105*bscale-T.height("zdb7")*scale/2,T.width("zdb7")*scale,T.height("zdb7")*scale);
                                            text(ctx,step.val[i],pos[i].x+34*bscale,pos[i].y-116*bscale,Math.round(bscale*44)+"px"+FONT,"lightblue","center","middle","black",4);
                                        }
                                    } else if (step.action=="EXPLO") {
                                        if (step.val[i]!==undefined && step.val[i]>0) {
                                        var scale=bscale;
                                        var imgid = Math.floor(mapf(delta,0,1,0,6.99));
                                        var img = "0701_"+imgid;
                                        T.draw(ctx,img,pos[i].x-T.width(img)*scale/2,pos[i].y-100*bscale-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                                        text(ctx,step.val[i],pos[i].x,pos[i].y-100*bscale,Math.round(bscale*50)+"px"+FONT,"red","center","middle","black",4);
                                        }
                                    } else if (step.action=="DEBUFF") {
                                        var scale=bscale*1.5;
                                        var imgid = Math.floor(mapf(delta,0,1,0,3.99));
                                        var img = "049f_"+imgid;
                                        T.draw(ctx,img,pos[i].x-T.width(img)*scale/2,pos[i].y-100*bscale-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                                        text(ctx,"-"+(step.val[i]*100).toFixed(0)+"%",pos[i].x,pos[i].y-100*bscale,Math.round(bscale*50)+"px"+FONT,"black","center","middle","white",4);
                                    } else if (step.action=="DAMPEN") {
                                        var scale=bscale*0.7;
                                        var imgid = Math.floor(mapf(delta,0,1,0,4.99));
                                        var img = "07kj_"+imgid;
                                        T.draw(ctx,img,pos[i].x-T.width(img)*scale/2,pos[i].y-100*bscale-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                                        text(ctx,step.val[i],pos[i].x,pos[i].y-100*bscale,Math.round(bscale*50)+"px"+FONT,"white","center","middle","black",4);
                                    } else if (step.action=="HEAL"||step.action=="HEAL2"||step.action=="HEAL3") {
                                        if (step.val[i]!==undefined && step.val[i]>0) {
                                            var scale=bscale*1.5;
                                            T.draw(ctx,"xcvf",pos[i].x-T.width("xcvf")*scale/2,pos[i].y-105*bscale-T.height("xcvf")*scale/2,T.width("xcvf")*scale,T.height("xcvf")*scale);
                                            text(ctx,step.val[i],pos[i].x+30*bscale,pos[i].y-120*bscale,Math.round(bscale*44)+"px"+FONT,"green","center","middle","black",4);
                                        }    
                                    } 
                                }
                            } 
                        }
                    }
                }
            }
            /*for (var i=gBattle.you.length-1; i>=0; --i) {
                if (gBattle.you[i]!==undefined) {
                    if (step.target=="you" && step.action=="SPAWN" && step.pos==i) {
                        ctx.save();
                        ctx.globalAlpha=delta;
                        this.drawMonster(ctx,gBattle.you[i].id,youPos[i].x,youPos[i].y,gBattle.you[i],false,mapf(i,0,6,2,1),gBattle.you[i].lvl);
                        ctx.restore();
                    } else if (step.target=="you" && step.action=="FIGHT") {
                        var originx = youPos[gBattle.you[i].from].x;
                        var originy = youPos[gBattle.you[i].from].y;
                        var originz = mapf(gBattle.you[i].from,0,6,2,1);
                        var targetx = youPos[i].x;
                        var targety = youPos[i].y;
                        var targetz = mapf(i,0,6,2,1)
                        var x=mapf(delta,0,1,originx,targetx);
                        var y=mapf(delta,0,1,originy,targety);
                        this.drawMonster(ctx,gBattle.you[i].id,x,y,gBattle.you[i],false,mapf(delta,0,1,originz,targetz),gBattle.you[i].lvl);
                    } else if (step.target=="you" && step.action=="DIE" && i==6) {
                        ctx.save();
                        ctx.globalAlpha=1-delta;
                        var dx=0;
                        if (delta<0.2) dx=mapf(Math.sin(delta*2*Math.PI*5*2),-1,1,-10,10);
                        this.drawMonster(ctx,gBattle.you[i].id,youPos[i].x+dx,youPos[i].y,gBattle.you[i],false,mapf(i,0,6,2,1),gBattle.you[i].lvl);
                        ctx.restore();
                    } else if (step.target=="other" && step.action=="HIT" && i==0) {
                        var mx=0;
                        if (delta<=0.15) {
                            mx=mapf(delta*delta,0,0.15*0.15,0,100);
                        } else if (delta<=0.3) {
                            mx=mapf(delta,0.15,0.3,100,0);
                        }
                        this.drawMonster(ctx,gBattle.you[i].id,youPos[i].x+mx,youPos[i].y,gBattle.you[i],false,mapf(i,0,6,2,1),gBattle.you[i].lvl);
                    } else if (step.target=="you" && step.action=="AOE") {
                        youAoe=step.damage;
                        this.drawMonster(ctx,gBattle.you[i].id,youPos[i].x,youPos[i].y,gBattle.you[i],false,mapf(i,0,6,2,1),gBattle.you[i].lvl);
                    } else if (step.target=="you" && step.action=="HEAL") {
                        youHeal=step.damage;
                        youSHeal=step.one===true;
                        this.drawMonster(ctx,gBattle.you[i].id,youPos[i].x,youPos[i].y,gBattle.you[i],false,mapf(i,0,6,2,1),gBattle.you[i].lvl);
                    } else if (step.target=="you" && step.action=="PIERCE" && i>0) {
                        youPierce=true;
                        youAoe=step.damage;
                        this.drawMonster(ctx,gBattle.you[i].id,youPos[i].x,youPos[i].y,gBattle.you[i],false,mapf(i,0,6,2,1),gBattle.you[i].lvl);
                    } else {
                        this.drawMonster(ctx,gBattle.you[i].id,youPos[i].x,youPos[i].y,gBattle.you[i],false,mapf(i,0,6,2,1),gBattle.you[i].lvl);
                        if (step.target=="you" && i==step.pos) {
                            if (step.action=="HIT") {
                                if (delta>0.15) {
                                    ctx.save();
                                    ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                                    var isCrit = step.isCrit===true;
                                    var isSuperCrit = step.isSuperCrit===true;
                                    var img=isSuperCrit?"lyph":(isCrit?"0hlm":"08n9");
                                    var scale=mapf(delta,0.15,0.25,0.7,1);
                                    if (delta>0.3) scale=clamp(scale,0,1);
                                    T.draw(ctx,img,youPos[i].x-T.width(img)*scale/2,youPos[i].y-105-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                                    text(ctx,step.damage,youPos[i].x,youPos[i].y-100,"50px"+FONT,isCrit?"#FFE0E0":"white","center","middle","black",4);
                                    ctx.restore();
                                }
                            }
                        } 
                    }
                }
            }
            for (var i=gBattle.other.length-1; i>=0; --i) {
                if (gBattle.other[i]!==undefined) {
                    if (step.target=="other" && step.action=="SPAWN" && step.pos==i) {
                        ctx.save();
                        ctx.globalAlpha=delta;
                        this.drawMonster(ctx,gBattle.other[i].id,otherPos[i].x,otherPos[i].y,gBattle.other[i],true,mapf(i,0,6,2,1),gBattle.other[i].lvl);
                        ctx.restore();
                    } else if (step.target=="other" && step.action=="FIGHT") {
                        var originx = otherPos[gBattle.other[i].from].x;
                        var originy = otherPos[gBattle.other[i].from].y;
                        var originz = mapf(gBattle.other[i].from,0,6,2,1);
                        var targetx = otherPos[i].x;
                        var targety = otherPos[i].y;
                        var targetz = mapf(i,0,6,2,1)
                        var x=mapf(delta,0,1,originx,targetx);
                        var y=mapf(delta,0,1,originy,targety);
                        this.drawMonster(ctx,gBattle.other[i].id,x,y,gBattle.other[i],true,mapf(delta,0,1,originz,targetz),gBattle.other[i].lvl);
                    } else if (step.target=="other" && step.action=="DIE" && i==6) {
                        ctx.save();
                        ctx.globalAlpha=1-delta;
                        var dx=0;
                        if (delta<0.2) dx=mapf(Math.sin(delta*2*Math.PI*5*2),-1,1,10,-10);
                        this.drawMonster(ctx,gBattle.other[i].id,otherPos[i].x+dx,otherPos[i].y,gBattle.other[i],true,mapf(i,0,6,2,1),gBattle.other[i].lvl);
                        ctx.restore();
                    } else if (step.target=="you" && step.action=="HIT" && i==0) {
                        var mx=0;
                        if (delta<=0.15) {
                            mx=mapf(delta*delta,0,0.15*0.15,0,-100);
                        } else if (delta<=0.3) {
                            mx=mapf(delta,0.15,0.3,-100,0);
                        }
                        this.drawMonster(ctx,gBattle.other[i].id,otherPos[i].x+mx,otherPos[i].y,gBattle.other[i],true,mapf(i,0,6,2,1),gBattle.other[i].lvl);
                    } else if (step.target=="other" && step.action=="AOE") {
                        this.drawMonster(ctx,gBattle.other[i].id,otherPos[i].x,otherPos[i].y,gBattle.other[i],true,mapf(i,0,6,2,1),gBattle.other[i].lvl);
                        otherAoe=step.damage;
                    } else if (step.target=="other" && step.action=="HEAL") {
                        this.drawMonster(ctx,gBattle.other[i].id,otherPos[i].x,otherPos[i].y,gBattle.other[i],true,mapf(i,0,6,2,1),gBattle.other[i].lvl);
                        otherHeal=step.damage;
                        otherSHeal=step.one===true;
                    } else if (step.target=="other" && step.action=="PIERCE") {
                        otherPierce=true;
                        this.drawMonster(ctx,gBattle.other[i].id,otherPos[i].x,otherPos[i].y,gBattle.other[i],true,mapf(i,0,6,2,1),gBattle.other[i].lvl);
                        otherAoe=step.damage;
                    } else {
                        this.drawMonster(ctx,gBattle.other[i].id,otherPos[i].x,otherPos[i].y,gBattle.other[i],true,mapf(i,0,6,2,1),gBattle.other[i].lvl);
                        var bscale = mapf(i,0,6,1,0.5); 
                        if (step.target=="other" && i==step.pos) {
                            if (step.action=="HIT") {
                                if (delta>0.15) {
                                    ctx.save();
                                    ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                                    var isCrit = step.isCrit===true;
                                    var isSuperCrit = step.isSuperCrit===true;
                                    var img=isSuperCrit?"lyph":(isCrit?"0hlm":"08n9");
                                    var scale=mapf(delta,0.15,0.25,0.7,1)*bscale;
                                    if (delta>0.3) scale=clamp(scale,0,1*bscale);
                                    T.draw(ctx,img,otherPos[i].x-T.width(img)*scale/2,otherPos[i].y-105-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                                    text(ctx,step.damage,otherPos[i].x,otherPos[i].y-100,Math.round(bscale*50)+"px"+FONT,(isCrit||isSuperCrit)?"#FFE0E0":"white","center","middle","black",4);
                                    ctx.restore();
                                }
                            }
                        }
                    }
                }
            }*/
            /*if (otherDamage>0) {
                if (delta>0.15) {
                    ctx.save();
                    ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                    var img=otherCrit?"0hlm":"08n9";
                    var scale=mapf(delta,0.15,0.25,0.7,1);
                    if (delta>0.3) scale=clamp(scale,0,1);
                    T.draw(ctx,img,otherPos[6].x-T.width(img)*scale/2,otherPos[6].y-105-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                    text(ctx,otherDamage,otherPos[6].x,otherPos[6].y-100,"50px"+FONT,otherCrit?"#FFE0E0":"white","center","middle","black",4);
                    ctx.restore();
                }
            }
            /*if (otherRicoPos!=-1) {
                ctx.save();
                ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                if (gBattle.you[otherRicoPos]!==undefined) {
                    text(ctx,otherRicoDmg,youPos[otherRicoPos].x,youPos[otherRicoPos].y-(50+mapf(delta,0,1,0,20))*mapf(i,0,6,2,1),"50px"+FONT,"red","center","middle","darkred",4);
                }
                ctx.restore();
            }
            if (otherRicoPos!=-1) {
                if (delta>0.15) {
                    ctx.save();
                    ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                    var img=otherCrit?"0hlm":"08n9";
                    var scale=mapf(delta,0.15,0.25,0.7,1);
                    if (delta>0.3) scale=clamp(scale,0,1);
                    T.draw(ctx,img,otherPos[otherRicoPos].x-T.width(img)*scale/2,otherPos[otherRicoPos].y-105-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                    text(ctx,otherRicoDmg,otherPos[otherRicoPos].x,otherPos[otherRicoPos].y-100,"50px"+FONT,otherCrit?"#FFE0E0":"white","center","middle","black",4);
                    ctx.restore();
                }
            }
            if (youDamage>0) {
                if (delta>0.15) {
                    ctx.save();
                    ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                    var img=youCrit?"0hlm":"08n9";
                    var scale=mapf(delta,0.15,0.25,0.7,1);
                    if (delta>0.3) scale=clamp(scale,0,1);
                    T.draw(ctx,img,youPos[6].x-T.width(img)*scale/2,youPos[6].y-105-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                    text(ctx,youDamage,youPos[6].x,youPos[6].y-100,"50px"+FONT,youCrit?"#FFE0E0":"white","center","middle","black",4);
                    ctx.restore();
                }
            }
            if (youRicoPos!=-1) {
                if (delta>0.15) {
                    ctx.save();
                    ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                    var img=youCrit?"0hlm":"08n9";
                    var scale=mapf(delta,0.15,0.25,0.7,1);
                    if (delta>0.3) scale=clamp(scale,0,1);
                    T.draw(ctx,img,youPos[youRicoPos].x-T.width(img)*scale/2,youPos[youRicoPos].y-105-T.height(img)*scale/2,T.width(img)*scale,T.height(img)*scale);
                    text(ctx,youRicoDmg,youPos[youRicoPos].x,youPos[youRicoPos].y-100,"50px"+FONT,youCrit?"#FFE0E0":"white","center","middle","black",4);
                    ctx.restore();
                }
            }
            /*if (youRicoPos!=-1) {
                ctx.save();
                ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                if (gBattle.other[youRicoPos]!==undefined) {
                    text(ctx,youRicoDmg,otherPos[youRicoPos].x,otherPos[youRicoPos].y-(50+mapf(delta,0,1,0,20))*mapf(i,0,6,2,1),"50px"+FONT,"red","center","middle","darkred",4);
                }
                ctx.restore();
            }
            if (youHeal>0) {
                ctx.save();
                ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                for (var i=6; i>=0; --i) {
                    if (gBattle.you[i]!==undefined) {
                        text(ctx,youHeal,youPos[i].x,youPos[i].y-(50+mapf(delta,0,1,0,20))*mapf(i,0,6,2,1),"50px"+FONT,"lime","center","middle","green",4);
                        if (youSHeal) break;
                    }
                }
                ctx.restore();
            }
            if (otherHeal>0) {
                ctx.save();
                ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                for (var i=6; i>=0; --i) {
                    if (gBattle.other[i]!==undefined) {
                        text(ctx,otherHeal,otherPos[i].x,otherPos[i].y-(50+mapf(delta,0,1,0,20))*mapf(i,0,6,2,1),"50px"+FONT,"lime","center","middle","green",4);
                        if (otherSHeal) break;
                    }
                }
                ctx.restore();
            }
            if (youAoe>0) {
                ctx.save();
                ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                for (var i=6; i>=0; --i) {
                    if (gBattle.you[i]!==undefined && (!youPierce||i!=6)) {
                        text(ctx,youAoe,youPos[i].x,youPos[i].y-(50+mapf(delta,0,1,0,20))*mapf(i,0,6,2,1),"50px"+FONT,"red","center","middle","darkred",4);
                    }
                }
                ctx.restore();
            }
            if (otherAoe>0) {
                ctx.save();
                ctx.globalAlpha=clamp(mapf(delta,0.5,1,1,0),0,1);
                for (var i=6; i>=0; --i) {
                    if (gBattle.other[i]!==undefined&& (!otherPierce||i!=6)) {
                        text(ctx,otherAoe,otherPos[i].x,otherPos[i].y-(50+mapf(delta,0,1,0,20))*mapf(i,0,6,2,1),"50px"+FONT,"red","center","middle","darkred",4);
                    }
                }
                ctx.restore();
            }*/
            if (gBattle.tinfo!==undefined) {
                text(ctx,gBattle.tinfo.title,W*0.5,H*0.14,"50px"+FONT,"black","center","middle");
                text(ctx,"Row: "+gBattle.tinfo.row,W*0.5,H*0.18,"40px"+FONT,"rgb(0,82,135)","center","middle");
                text(ctx,"Left Win / Draw / Right Win",W*0.5,H*0.22,"28px"+FONT,"black","center","middle");
                text(ctx,"Left DMG",W*0.35,H*0.22,"28px"+FONT,"black","center","middle");
                text(ctx,"Right DMG",W*0.65,H*0.22,"28px"+FONT,"black","center","middle");
                text(ctx,gBattle.tinfo.awin+" / "+gBattle.tinfo.draw+" / "+gBattle.tinfo.bwin,W*0.5,H*0.25,"40px"+FONT,"rgb(0,82,135)","center","middle");
                text(ctx,gBattle.tinfo.admg,W*0.35,H*0.25,"40px"+FONT,"rgb(0,82,135)","center","middle");
                text(ctx,gBattle.tinfo.bdmg,W*0.65,H*0.25,"40px"+FONT,"rgb(0,82,135)","center","middle");
            } else if (gBattle.isBossBattle) {
                text(ctx,"DMG: "+gBattle.bossDmg,W*0.5,H*0.22,"50px"+FONT,"black","center","middle");
            }


            var trophies = ["1hng","a0jn","nppo","cx52","d3vp"];
            var lleft = mtext(ctx,gBattle.left,W*0.02,H*0.30,"50px"+FONT,"rgb(0,82,135)","left","middle");
            text(ctx,gBattle.left,W*0.02,H*0.30,"50px"+FONT,"rgb(0,82,135)","left","middle");
            text(ctx,gBattle.costa,W*0.02,H*0.30+25,"32px"+FONT,"rgb(0,82,135)","left","middle");
            var nameLeft = gBattle.left;
            if (gBattle.left == "You") nameLeft = kongregate.services.getUsername();
            if (rTopSeason !== undefined) {
                for (var j = 0; j < rTopSeason.length; ++j) {
                    if (nameLeft == rTopSeason[j].name) {
                        var best = 0;
                        if (rTopSeason[j].top[0] == 0) {
                            var diamond = 0;
                            for (var k = 0; k < rTopSeason[j].top.length; ++k) if (rTopSeason[j].top[k] == 0) ++diamond;
                            if (diamond >= 3) best = 4;
                        } else {
                            if (rTopSeason[j].top[0] < 3) best = rTopSeason[j].top[0];
                            else best = 3;
                        }
                        T.draw(ctx,trophies[best],W*0.02+lleft*1.2,H*0.30-T.height(trophies[best])*0.5);
                    }
                }
            }

            var lright = mtext(ctx,gBattle.right,W*0.98,H*0.30,"50px"+FONT,"rgb(0,82,135)","right","middle");
            text(ctx,gBattle.right,W*0.98,H*0.30,"50px"+FONT,"rgb(0,82,135)","right","middle");
            if (!gBattle.isBossBattle) text(ctx,gBattle.costb,W*0.98,H*0.30+25,"32px"+FONT,"rgb(0,82,135)","right","middle");
            if (rTopSeason !== undefined && !gBattle.isBossBattle) {
                for (var j = 0; j < rTopSeason.length; ++j) {
                    if (gBattle.right == rTopSeason[j].name) {
                        var best = 0;
                        if (rTopSeason[j].top[0] == 0) {
                            var diamond = 0;
                            for (var k = 0; k < rTopSeason[j].top.length; ++k) if (rTopSeason[j].top[k] == 0) ++diamond;
                            if (diamond >= 3) best = 4;
                        } else {
                            if (rTopSeason[j].top[0] < 3) best = rTopSeason[j].top[0];
                            else best = 3;
                        }
                        T.draw(ctx,trophies[best],W*0.98-lright*1.2-T.width(trophies[best]),H*0.30-T.height(trophies[best])*0.5);
                    }
                }
            }
            
            var date = new Date(gBattle.date);
            var dd = date.getDate();
            var mm = date.getMonth()+1;
            var yyyy = date.getFullYear();
            var hh = date.getHours();
            var mn = (date.getMinutes()<10?'0':'') + date.getMinutes();
            text(ctx,dd+"/"+mm+"/"+yyyy+" "+hh+":"+mn,W*0.5,H*0.93,"50px"+FONT,"black","center","middle");

            if (step.action=="RESULT") {
                var img="0c9o";
                if (step.target=="win") {
                    img="0i33";
                } else if (step.target=="loss") {
                    img="0lkd";
                }
                ctx.save();
                ctx.globalAlpha=delta;
                T.draw(ctx,img,W/2-T.width(img)/2,H/2-T.height(img));
                ctx.restore();
                if (delta>=1 && gBattle.tinfo!==undefined) {
                    if (gBattle.next!==undefined) {
                        gBattle.next[8].admg+=gBattle.tinfo.admg;
                        gBattle.next[8].awin=gBattle.tinfo.awin;
                        gBattle.next[8].bdmg+=gBattle.tinfo.bdmg;
                        gBattle.next[8].bwin=gBattle.tinfo.bwin;
                        gBattle.next[8].draw=gBattle.tinfo.draw;
                        beginBattle(gBattle.next[0],gBattle.next[1],gBattle.next[2],gBattle.next[3],gBattle.next[4],gBattle.next[5],gBattle.next[6],gBattle.next[7],gBattle.next[8],gBattle.next[9],gBattle.next[10],gBattle.next[11],gBattle.next[12],gBattle.next[13]);
                    }
                }
            } else if (gBattle.turn>=0) {
                text(ctx,"Turn "+(gBattle.turn+1),W/2,H*0.30,"50px"+FONT,"black","center","middle");
            }
        }
        var x=W*0.05;
        var y=H*0.94;
        var w=100;
        var h=50;
        var rect=(new Rect(x-w/2,y-h/2,w,h)).small();
        if (battleSpeed==0) {
            T.draw(ctx,"00nd",x-T.width("00nd")/2,y-T.height("00nd")/2);
            this.addZone("bttlspd",rect,"battleSpeed",{target:1});
        } else if (battleSpeed==1) {
            T.draw(ctx,"06op",x-T.width("06op")/2,y-T.height("06op")/2);
            this.addZone("bttlspd",rect,"battleSpeed",{target:3});
        } else if (battleSpeed==3) {
            T.draw(ctx,"06op",x-T.width("06op"),y-T.height("06op")/2);
            T.draw(ctx,"06op",x,y-T.height("06op")/2);
            this.addZone("bttlspd",rect,"battleSpeed",{target:7});
        } else if (battleSpeed==7) {
            T.draw(ctx,"06op",x-T.width("06op")*1.5,y-T.height("06op")/2);
            T.draw(ctx,"06op",x+T.width("06op")/2,y-T.height("06op")/2);
            T.draw(ctx,"06op",x-T.width("06op")/2,y-T.height("06op")/2);
            this.addZone("bttlspd",rect,"battleSpeed",{target:0});
        }
        text(ctx,"Battle speed: x"+battleSpeed,W*0.02,y-25,"32px"+FONT,"black","left","middle");
    }

    this.drawPopup = function (ctx) {
        var pw = T.width("04ey");
        var ph = T.height("04ey");
        var cw = T.width("0iyk")*0.8;
        var ch = T.height("0iyk")*0.8;
        var zx = W*0.28125;
        var zy = H*0.5+80/2;
        var zw = W*0.71875;
        var zh = H*0.5-80/2;
        ctx.fillStyle="rgba(47,47,47,0.25)";
        ctx.fillRect(0,0,W,H);
        if (popup.mode=="confirm") {
            if (popup.center!==undefined) {
                zx-=W*0.14;
            }
            T.draw(ctx,"04ey",zx+zw/2-pw/2,H*0.4-ph/2);
            ctext(ctx,popup.text,zx+zw/2,H*0.4-ph/2+32/2,"32px "+FONT,"white","center","top");
            if (popup.alert) ctext(ctx,popup.alert,zx+zw/2,H*0.4-ph/2+70/2,"32px "+FONT,"white","center","top");
            //T.draw(ctx,"0iyk",zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10,cw,ch);
            //this.addZone("closepp",(new Rect(zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10,cw,ch)).small(),"closepp");
            var bw = T.width("05x5");
            var bh = T.height("05x5");
            // yes
            T.draw(ctx,"05x5",zx+zw/2-pw/4-bw/2,H*0.4+ph/6-bh/2);
            ctext(ctx,"Yes",zx+zw/2-pw/4,H*0.4+ph/6,"32px "+FONT,"black","center","middle");
            this.addZone("yespp",(new Rect(zx+zw/2-pw/4-bw/2,H*0.4+ph/6-bh/2,bw,bh)).small(),"dopp");
            // no
            T.draw(ctx,"07y4",zx+zw/2+pw/4-bw/2,H*0.4+ph/6-bh/2);
            ctext(ctx,"No",zx+zw/2+pw/4,H*0.4+ph/6,"32px "+FONT,"black","center","middle");
            this.addZone("nopp",(new Rect(zx+zw/2+pw/4-bw/2,H*0.4+ph/6-bh/2,bw,bh)).small(),"closepp");
        } else if (popup.mode=="offline") {
            T.draw(ctx,"04ey",zx+zw/2-pw/2,H*0.4-ph/2);
            ctext(ctx,"Offline gains",zx+zw/2,H*0.4-ph/2+32/2,"32px "+FONT,"white","center","top");
            ctext(ctx,"Energy gained: "+this.pn(popup.energy,"J"),zx+zw/2,H*0.4-ph/2+80/2,"32px "+FONT,"white","center","top");
            if (popup.tech!==undefined) {
                ctext(ctx,"Researched: "+TECH[popup.tech].name,zx+zw/2,H*0.4-ph/2+128/2,"32px "+FONT,"white","center","top");
            }
            T.draw(ctx,"0iyk",zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10/2,cw,ch);
            this.addZone("closepp",(new Rect(zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10/2,cw,ch)).small(),"closepp");
        } else if (popup.mode=="alert") {
            if (popup.center!==undefined) {
                zx-=W*0.14;
            }
            if (popup.scalable!==undefined) {
                var textsize = mtext(ctx,popup.text,zx+zw/2,H*0.4,"32px "+FONT,"white","center","middle");
                if (textsize <= pw) {
                    T.draw(ctx,"04ey",zx+zw/2-pw/2,H*0.4-ph/2);
                    ctext(ctx,popup.text,zx+zw/2,H*0.4,"32px "+FONT,"white","center","middle");
                    T.draw(ctx,"0iyk",zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10/2,cw,ch);
                    this.addZone("closepp",(new Rect(zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10/2,cw,ch)).small(),"closepp");
                } else {
                    T.draw(ctx,"04ey",zx+zw/2-textsize/2-10,H*0.4-ph/2,textsize+20,ph);
                    ctext(ctx,popup.text,zx+zw/2,H*0.4,"32px "+FONT,"white","center","middle");
                    T.draw(ctx,"0iyk",zx+zw/2+textsize/2+10-cw-10,H*0.4-ph/2+10/2,cw,ch);
                    this.addZone("closepp",(new Rect(zx+zw/2+textsize/2+10-cw-10,H*0.4-ph/2+10/2,cw,ch)).small(),"closepp");
                }
            } else {
                T.draw(ctx,"04ey",zx+zw/2-pw/2,H*0.4-ph/2);
                ctext(ctx,popup.text,zx+zw/2,H*0.4,"32px "+FONT,"white","center","middle");
                T.draw(ctx,"0iyk",zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10/2,cw,ch);
                this.addZone("closepp",(new Rect(zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10/2,cw,ch)).small(),"closepp");
            }
            
        } else if (popup.mode=="load") {
            T.draw(ctx,"04ey",zx+zw/2-pw/2,H*0.4-ph/2);
            ctext(ctx,popup.text,zx+zw/2,H*0.4-ph/2+32/2,"32px "+FONT,"white","center","top");
            if (popup.a) ctext(ctx,this.pn(popup.a.stats.t.v.gomega,"\u03A9"),zx+zw/2+pw/4,H*0.4-ph/2+70/2,"32px "+FONT,"white","center","top");
            if (popup.b) ctext(ctx,this.pn(popup.b.stats.t.v.gomega,"\u03A9"),zx+zw/2-pw/4,H*0.4-ph/2+70/2,"32px "+FONT,"white","center","top");
            var bw = T.width("05x5");
            var bh = T.height("05x5");
            // yes
            T.draw(ctx,"05x5",zx+zw/2-pw/4-bw/2,H*0.4+ph/6-bh/2);
            ctext(ctx,"Cloud",zx+zw/2-pw/4,H*0.4+ph/6,"32px "+FONT,"black","center","middle");
            this.addZone("yespp",(new Rect(zx+zw/2-pw/4-bw/2,H*0.4+ph/6-bh/2,bw,bh)).small(),"dopp");
            // no
            T.draw(ctx,"07y4",zx+zw/2+pw/4-bw/2,H*0.4+ph/6-bh/2);
            ctext(ctx,"Local",zx+zw/2+pw/4,H*0.4+ph/6,"32px "+FONT,"black","center","middle");
            this.addZone("nopp",(new Rect(zx+zw/2+pw/4-bw/2,H*0.4+ph/6-bh/2,bw,bh)).small(),"closepp");
        } else if (popup.mode=="optional") {
            if (popup.center!==undefined) {
                zx-=W*0.14;
            }
            T.draw(ctx,"04ey",zx+zw/2-pw/2,H*0.4-ph/2);
            ctext(ctx,popup.text,zx+zw/2,H*0.4-ph/2+32/2,"32px "+FONT,"white","center","top");
            if (popup.alert) ctext(ctx,popup.alert,zx+zw/2,H*0.4-ph/2+70/2,"32px "+FONT,"white","center","top");
            //T.draw(ctx,"0iyk",zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10,cw,ch);
            //this.addZone("closepp",(new Rect(zx+zw/2+pw/2-cw-10,H*0.4-ph/2+10,cw,ch)).small(),"closepp");
            var bw = T.width("05x5");
            var bh = T.height("05x5");
            // LEFT
            T.draw(ctx,"05x5",zx+zw/2-pw/4-bw/2,H*0.4+ph/6-bh/2);
            ctext(ctx,popup.ltext,zx+zw/2-pw/4,H*0.4+ph/6,"32px "+FONT,"black","center","middle");
            this.addZone(popup.left,(new Rect(zx+zw/2-pw/4-bw/2,H*0.4+ph/6-bh/2,bw,bh)).small(),popup.left);
            // RIGHT
            T.draw(ctx,"05x5",zx+zw/2+pw/4-bw/2,H*0.4+ph/6-bh/2);
            ctext(ctx,popup.rtext,zx+zw/2+pw/4,H*0.4+ph/6,"32px "+FONT,"black","center","middle");
            this.addZone(popup.right,(new Rect(zx+zw/2+pw/4-bw/2,H*0.4+ph/6-bh/2,bw,bh)).small(),popup.right);
        } else if (popup.mode=="confirmshop") {
            T.draw(ctx,"04ey",zx+zw/2-pw,H*0.4-ph*1.5,pw*2,ph*2);
            ctext(ctx,"First of all: Thank you!",zx+zw/2,H*0.4-ph*1.5+32/2,"48px "+FONT,"white","center","top");
            
            ctext(ctx,"The company that made this game, Gaiabyte, no longer exists.",zx+zw/2,H*0.4-ph*1.5+64,"32px "+FONT,"white","center","top");
            ctext(ctx,"But the game is currently being maintained by the community so new updates will come.",zx+zw/2,H*0.4-ph*1.5+80,"32px "+FONT,"white","center","top");
            ctext(ctx,"This being said, all purchases will be used to keep the servers alive.",zx+zw/2,H*0.4-ph*1.5+96,"32px "+FONT,"white","center","top");
            ctext(ctx,"As long as you acknowledge the situation you are free to continue the purchase:",zx+zw/2,H*0.4-ph*1.5+128,"32px "+FONT,"white","center","top");

            var bw = T.width("05x5");
            var bh = T.height("05x5");
            // yes
            T.draw(ctx,"05x5",zx+zw/2-pw/4-bw/2,H*0.4+ph/6-bh/2);
            ctext(ctx,"Yes",zx+zw/2-pw/4,H*0.4+ph/6,"32px "+FONT,"black","center","middle");
            this.addZone("yespp",(new Rect(zx+zw/2-pw/4-bw/2,H*0.4+ph/6-bh/2,bw,bh)).small(),"dopp");
            // no
            T.draw(ctx,"07y4",zx+zw/2+pw/4-bw/2,H*0.4+ph/6-bh/2);
            ctext(ctx,"No",zx+zw/2+pw/4,H*0.4+ph/6,"32px "+FONT,"black","center","middle");
            this.addZone("nopp",(new Rect(zx+zw/2+pw/4-bw/2,H*0.4+ph/6-bh/2,bw,bh)).small(),"closepp");
        }
    }
    this.drawNews = function (ctx) {
        // Draw News PopUp
        if (showNews) {
            T.draw(ctx,"04ey",W*0.5-W*0.8*0.5,H*0.5-H*0.4*0.5,W*0.8,H*0.4)
            text(ctx,"COSMOS QUEST NEWS",W*0.5,H*0.5-H*0.4*0.5+30,"60px"+FONT,"rgb(226,243,255)","center","middle");

            // Close
            var clrect=(new Rect(W*0.4-W*0.15*0.5+2,H*0.65-H*0.06*0.5+2,W*0.15-4,H*0.06-4)).small();
            if (clrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"zvml",W*0.4-T.width("zvml")*0.5,H*0.65-T.height("zvml")*0.5-10,T.width("zvml"),T.height("zvml"));
                this.addZone("clNews_0",clrect,"clNews",{target:0});
            } T.draw(ctx,"3ush",W*0.4-T.width("3ush")*0.5,H*0.65-T.height("3ush")*0.5-10,T.width("3ush"),T.height("3ush"));
            text(ctx,"CLOSE",W*0.4,H*0.65-10,"30px"+FONT,"rgb(226,243,255)","center","middle");

            // Don't Show Again
            var dsrect=(new Rect(W*0.6-W*0.15*0.5,H*0.65-H*0.06*0.5,W*0.15,H*0.06)).small();
            if (dsrect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"zvml",W*0.6-T.width("zvml")*0.5,H*0.65-T.height("zvml")*0.5-10,T.width("zvml"),T.height("zvml"));
                this.addZone("clNews_1",dsrect,"clNews",{target:1});
            } else T.draw(ctx,"3ush",W*0.6-T.width("3ush")*0.5,H*0.65-T.height("3ush")*0.5-10,T.width("3ush"),T.height("3ush"));
            text(ctx,"DON'T SHOW AGAIN",W*0.6,H*0.65-10,"30px"+FONT,"rgb(226,243,255)","center","middle");


            // Draw Text
            var ttext = "";
            if (CQW!==undefined && CQW.news!==undefined) ttext=CQW.news;
            if (ttext.length>100) {
                var formatTexting = [];
                var loops = 1;
                var index = 0;
                var finished = false;
                while (!finished) {
                    index = 100 * loops;
                    if (index > ttext.length) index = ttext.length-1;
                    while (ttext[index]!== " ") --index;
                    var temporalText = "";
                    for (var i=0; i < (index-(100*(loops-1))); ++i) {
                        temporalText += ttext[i+(100*(loops-1))];
                    }
                    formatTexting.push(temporalText);
                    ++loops;
                    if (ttext.length < 100*loops) {
                        var temporalText = "";
                        for (var i=index; i<ttext.length;++i) {
                            temporalText += ttext[i];
                        }
                        formatTexting.push(temporalText);
                        finished = true;
                    }
                }
                for (var i=0; i<formatTexting.length;++i) text(ctx,formatTexting[i],W*0.5,H*0.4+(20*i),"30px"+FONT,"rgb(226,243,255)","center","middle");
            } else text(ctx,ttext,W*0.5,H*0.4,"30px"+FONT,"rgb(226,243,255)","center","middle");
        }
    }
    
    this.addZone = function (UUID,r,action,e) {
        zones[UUID] = {
            r:r,
            a:action,
            e:e
        }
    }
    this.doAction = function (action,extra,x,y) {
        if (action=="click") {
            if (zones["superclick"]==undefined || !zones["superclick"].r.isInside(x,y)) {
                var limit=50;
                if (numbers.length<=limit) {
                    var prod = this.getClick();
                    data.energy+=prod;
                    this.updateResearch(prod);
                    this.doStat("v","energy",prod);
                    this.doStat("v","cenergy",prod);
                    this.doStat("v","camount",1);
                    this.doStat("m","energy",data.energy);
                    // autoplay hack ^^U
                    if (x+y!=-2) {
                        numbers.push({
                            x:x,
                            y:y,
                            ox:x,
                            oy:y,
                            t:Date.now()+3000,
                            text:"+"+this.pn(prod,"",true),
                            a:1,
                            color:"255,255,255",
                            scale:1,
                            image: undefined,
                        });
                        this.doStat("m","cps",numbers.length/3);
                        if (numbers.length>limit && stopSign) {
                            stopSign=false;
                            popup={
                                text:"You can't go over 88 clicks in 5.28 seconds",
                                mode:"alert",
                            }
                        }
                        //shake.x += Math.sign(Math.random()-.5)*Math.random()*5+5;
                        //shake.y += Math.sign(Math.random()-.5)*Math.random()*5+5;
                    }
                }
            }
            if (data.tutorial==0) {
                GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step1"));
                data.tutorial=1;
                ttimes[0]=0;
            } else if (data.tutorial==1 && data.energy>=BB[0]) {
                GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step2"));
                data.tutorial=2;
                ttimes[1]=0;
            }
        } else if (action=="aclick") {
            var achdone = typeof ACH[35]==="function" && ACH[35](data,this.pn).level==9;
            if (achdone && zones["superclick"]!==undefined && zones["superclick"].r.isInside(x,y)) {
                this.doAction("superclick",undefined,x,y);
                return;
            }
            var limit=0;
            if (mExtra!==undefined) limit+=mExtra.cps*3;
            if (anumbers.length<=limit) {
                var prod = this.getClick()*10;
                data.energy+=prod;
                this.updateResearch(prod);
                this.doStat("v","energy",prod);
                this.doStat("v","cenergy",prod);
                this.doStat("v","camount",1);
                this.doStat("m","energy",data.energy);
                anumbers.push({
                    x:x,
                    y:y,
                    ox:x,
                    oy:y,
                    t:Date.now()+3000,
                    text:"+"+this.pn(prod,"",true),
                    a:1,
                    color:"255,255,255",
                    scale:0.8,
                    image: undefined,
                });
            }
        } else if (action=="menu") {
            if ((data.tutorial==7 && extra.target=="specie") || data.tutorial>7) {
                if (menuHot[extra.target]===1 && extra.target!=="shop") menuHot[extra.target]=0;
                if (menu=="achievements" && extra.target!="achievements") {
                    achStack=[]
                    openAch=undefined;
                }
                if (extra.target=="achievements" && menu!="achievements") achStack=[];
                menu=extra.target;
                if (data.tutorial==7) {
                    GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step8"));
                    data.tutorial=8;
                    ttimes[7]=0;
                }
                if (menu=="shop") {
                    if (scene=="miracles"||scene=="roulette") scene="buildings";
                    GA.getInstance().addEvent(new GA.Events.Design("Shop:Open"));
                    if (extra.submenu=="lto") ltoOpen=true;
                    else if (extra.submenu=="home") {
                    	auctionOpen = false;
                    	ltoOpen = false;
                    }
                }
            }
        } else if (action=="research") {
            var name = extra.target;
            if (toResearch.indexOf(name)!==-1) {
                if (data.researching==name) {
                    data.researching=undefined
                } else {
                    data.researching=name;
                    if (data.research[name]==undefined) {
                        data.research[name] = {
                            started: Date.now(),
                            done: production*(this.dimBuff("restime")-1),
                            time: 0,
                            ended: false,
                        }
                    }
                    if (data.tutorial==4) {
                        GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step5"));
                        data.tutorial=5;
                        ttimes[4]=0;
                    }
                }
            }
        } else if (action=="nextBuildingAmount") {
            data.buildingAmount = BMUL[data.buildingAmount];
        } else if (action=="build") {
            if (data.buildLevel[extra.target]>=0) {
                var amount = data.buildingAmount=="MAX"?this.buildingMax(extra.target,data.energy):(data.buildingAmount=="NXT"||data.buildingAmount=="MXT"?this.buildingNxt(extra.target,data.buildingAmount=="NXT"):data.buildingAmount);
                var price = this.buildingPrice(extra.target,amount);
                if (price<=data.energy) {
                    data.energy-=price;
                    data.buildings[extra.target]+=amount;
                    this.doStat("v","bamount",amount);
                    this.doStat("m","b"+extra.target,data.buildings[extra.target]);
                    this.doStat("v","b"+extra.target,amount);
                    this.evalBuildings();
                    this.evalResearch();
                    if (data.tutorial==2) {
                        GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step3"));
                        data.tutorial=3;
                        ttimes[2]=0;
                    } else if (data.tutorial==3 && production>=10) {
                        GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step4"));
                        data.tutorial=4;
                        ttimes[3]=0;
                    } else if (data.tutorial==6 && data.buildings[1]>0) {
                        GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step7"));
                        data.tutorial=7;
                        ttimes[6]=0;
                    }
                }
            }
        } else if (action=="evolve") {
            if (data.specie+1<SPECIES.length && data.stats.c.v.energy>SPECIES[data.specie+1].requires) {
                if (data.tutorial==10) {
                    GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step11"));
                    data.tutorial=11;
                }
                this.resetSFX();
                superClick=undefined;
                GA.getInstance().addEvent(new GA.Events.Design("Game:Evolve"+data.specie+":T"+data.stats.t.v.ascension,(Date.now()-data.current)/1000));
                ++data.specie;
                if (data.specie==SPECIES.length-1 && data.dimensions[5]>0) {
                    data.cdim = data.lastDim;
                }
                this.evalGrants(SPECIES[data.specie].grants);
                if (data.maxe<data.specie) {
                    this.notifyEvolution();
                }
                this.evalBuildings();
                this.evalResearch();
                this.doStat("v","evolutions",1);
                this.doStat("t","e"+data.specie,Date.now()-data.current);
            }
        } else if (action=="superclick") {
            if (zones["superclick"]!==undefined) delete zones["superclick"];
            else return;
            var prev = data.dismul;
            var prod = this.getSuper(true);
            var isSuper = prev!=data.dismul;
            data.energy+=prod;
            this.updateResearch(prod);
            this.doStat("v","energy",prod);
            this.doStat("v","senergy",prod);
            this.doStat("v","samount",1);
            this.doStat("m","energy",data.energy);
            var color="218,51,23";
            if (isSuper) color="255,215,0";
            if (x+y!=-2) {
                shake.z = 30;
                shake.x=x;
                shake.y=y;
                numbers.push({x:x,y:y,t:Date.now()+3000,text:"+"+this.pn(prod,""),a:1,color:color,scale:1.2,image:undefined});
                if (data.cdim==0) {
                    T.stop(36);
                    T.play(37);
                    superClick.phase=1;
                } else if (data.cdim==1) {
                    T.stop(38);
                    T.play(39);
                    superClick.phase=1;
                } else if (data.cdim==2) {
                    T.stop(40);
                    T.play(41);
                    superClick.phase=1;
                } else if (data.cdim==3) {
                    T.stop(42);
                    T.play(43);
                    superClick.phase=1;
                } else if (data.cdim==4) {
                    T.stop(44);
                    T.play(45);
                    superClick.phase=1;
                } else if (data.cdim==5) {
                    T.stop(46);
                    T.play(47);
                    superClick.phase=1;
                } else if (data.cdim==6) {
                    T.stop(48);
                    T.play(49);
                    superClick.phase=1;
                } else if (data.cdim==7) {
                    T.stop(50);
                    T.play(51);
                    superClick.phase=1;
                } else if (data.cdim==8) {
                    T.stop(52);
                    T.play(53);
                    superClick.phase=1;
                } else if (data.specie==0) {
                    T.stop(0);
                    T.play(1);
                    superClick.phase=2;
                } else if (data.specie==1) {
                    T.setAnimation("0nai",120);
                    T.setDirection("0nai",-1);
                    T.setMethod("0nai","fadeout");
                    T.setCallback("0nai",function () {
                        superClick=undefined;
                        T.setDirection("0nai",1);
                    });
                    superClick.phase=5;
                    T.stop(2);
                    T.play(3);
                } else if (data.specie==2 || data.specie==3 || data.specie==4 || data.specie==5 || data.specie==7) {
                    superClick.phase=1;
                    superClick.timer = Date.now();
                    if (data.specie==2) {
                        T.stop(4);
                        T.play(5);
                    } else if (data.specie==3) {
                        T.stop(6);
                        T.play(7);
                    } else if (data.specie==4) {
                        T.stop(8);
                        T.play(9);
                    } else if (data.specie==5) {
                        T.stop(10);
                        T.play(11);
                    } else if (data.specie==7) {
                        T.stop(17);
                        T.play(18);
                    }
                } else if (data.specie==6) {
                    superClick.phase=2;
                    superClick.timer = Date.now();
                    T.stop(12);
                    T.play(13);
                    for (var i=0; i<universeBubbles.length; ++i) {
                        if (i!==superClick.loc) {
                            universeBubbles[i].vx = universeBubbles[i].x-universeBubbles[superClick.loc].x;
                            universeBubbles[i].vy = universeBubbles[i].y-universeBubbles[superClick.loc].y;
                            var magnitude=dist2(universeBubbles[i].vx,universeBubbles[i].vy)/10;
                            universeBubbles[i].vx/=magnitude;
                            universeBubbles[i].vy/=magnitude;
                        }
                    }
                } else if (data.specie==8) {
                    T.stop(21);
                    T.play(22);
                    superClick.phase=2;
                    T.setAnimation("07kj",20);
                    T.setDirection("07kj",-1);
                    T.setMethod("07kj","fadeout");
                    T.setCallback("07kj",function () {
                        superClick=undefined;
                    })
                } else if (data.specie==9) {
                    superClick.phase=2;
                    T.stop(23);
                    T.play(24);
                } else if (data.specie==10) {
                    superClick.phase=1;
                    T.stop(21);
                    T.play(22);
                } else if (data.specie==11) {
                    superClick.phase=1;
                    T.stop(23);
                    T.play(24);
                } else if (data.specie==12) {
                    superClick.phase=1;
                    T.stop(30);
                    T.play(31);
                }
                else if (data.specie==13) {
                    superClick.phase=1;
                    T.stop(32);
                    T.play(33);
                }
                else if (data.specie==14) {
                    superClick.phase=1;
                    T.stop(34);
                    T.play(35);
                }
                // fix for superclick disapearing after click
                superClick.stime=Date.now();
            }
            if (data.tutorial==9) {
                GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step10"));
                data.tutorial=10;
                ttimes[9]=0;
            }
        } else if (action=="achievement") {
            openAch=openAch==extra.target?undefined:extra.target;
            if (openAch!=undefined) lastAch=openAch;
        } else if (action=="stat") {
            statPage=extra.target;
        } else if (action=="achp") {
            achPage=extra.target;
        } else if (action=="optpage") {
            optPage=extra.target;
        } else if (action=="shop") {
            if (kongregate!==undefined && kongregate.services.isGuest()) {
                kongregate.services.showRegistrationBox();
            } else {
                var item="";
                if (extra.target==0) item="pack10";
                else if (extra.target==1) item="pack25";
                else if (extra.target==2) item="pack50";
                else if (extra.target==3) item="pack100";
                else if (extra.target==4) item="pack200";
                else if (extra.target==5) item="pack550";
                else if (extra.target==6) item="pack1100";
                else if (extra.target==7) item="oto1";
                else if (extra.target==8) item="oto2";
                else if (extra.target==9) item="oto3";
                else if (extra.target==10) item="patrick";
                else if (extra.target==11) item="wc1";
                else if (extra.target==12) item="wc2";
                else if (extra.target==13) item="oto4";
                else if (extra.target==14) item="tm1m";
                else if (extra.target==15) item="tmlt2";
                else if (extra.target==16) item="wpack10";
                else if (extra.target==17) item="wpack25";
                else if (extra.target==18) item="wpack50";
                else if (extra.target==19) item="wpack100";
                else if (extra.target==20) item="wpack200";
                else if (extra.target==21) item="wpack550";
                else if (extra.target==22) item="wpack1100";
                else if (extra.target==23) item="seasonpass1";
                else if (extra.target==113) item="moon";
                else if (extra.target==130) item="guy";
                else if (extra.target==148) item="cupid";
                else if (extra.target==168) item="mother";
                else if (extra.target=="lto20") item="ltojames";
                else if (extra.target=="lto96") item="ltolepr";
                else if (extra.target=="lto113") item="ltoneil";
                else if (extra.target=="lto130") item="ltoguy";
                else if (extra.target=="lto148") item="ltocupid";
                else if (extra.target=="lto168") item="ltomother";
                else if (extra.target=="lto180") item="ltosmith";
                else if (extra.target=="lto205") item="ltokilkenny";
                else if (extra.target=="ltocommon") item="ltocommon";
                else if (extra.target=="ltorare") item="ltorare";
                else if (extra.target=="ltolegen") item="ltolegen";
                else if (extra.target=="ltoascended") item="ltoascended";
                else if (extra.target=="recycle") item="recycle";
                if (item!=="") {
                    GA.getInstance().addEvent(new GA.Events.Design("Shop:"+item));
                    if (kongregate!==undefined) {
                        popup = {
                            mode: "confirmshop",
                            action: function () {
                                kongregate.mtx.purchaseItems([item], onPurchaseResult);
                            }
                        }  
                        
                    } else {
                        popup={
                            text:"Enable flash to purchase from shop",
                            mode:"alert",
                        }
                    }
                }
            }
        } else if (action=="ascend") {
            popup = {
                text: "Start again in exchange for "+this.pn(this.getOmegas(),"\u03A9",true)+" particles?",
                mode: "confirm",
                action: function () {
                    if (data.tutorial==11) {
                        GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step12"));
                        data.tutorial=12;
                    }
                    _this.ascend();
                }
            }
        } else if (action=="jump") {
            if (data.jump===undefined) this.calcJump();
            if (extra.target) jumpOpen = true;
            else jumpOpen = false;
        } else if (action=="dojump") {
            this.doJump(extra.target);
            jumpOpen=false;
        } else if (action=="closepp") {
            if (popup && popup.cancel) popup.cancel();
            popup=undefined;
        } else if (action=="dopp") {
            if (popup && popup.action) popup.action();
            popup=undefined;
        } else if (action=="omega") {
            var price = OITEMS[extra.target].cost(data.omegas[extra.target]);
            if (data.omega>=price) {
                ++data.omegas[extra.target];
                data.omega-=price;
                this.doStat("v","somega",price);
                this.doStat("a","omega",extra.target);
                this.evalOmega();
                this.evalBuildings();
            }
        } else if (action=="omed") {
            var price = this.calcEDomegaP(extra.target);
            if (data.omega>=price) {
                data.omegas[extra.target+8]=data.omegas[extra.target+8]+1;
                data.omega-=price;
                this.doStat("v","somega",price);
                this.doStat("a","omega",extra.target+8);
                this.evalOmega();
                this.evalBuildings();
                if ((extra.target+8)==8) this.restartMap();
            }
        } else if (action=="sound") {
            data[extra.target]=!data[extra.target];
            if (extra.target=="sound") {
                T.setVolume(14,data[extra.target]?0.4:0);
                T.setVolume(19,data[extra.target]?0.4:0);
                T.setVolume(29,data[extra.target]?0.5:0);
                T.setVolume(54,data[extra.target]?0.5:0);
            } else if (extra.target=="effect") {
                for (var i=0; i<14; ++i) {
                    T.setVolume(i,data[extra.target]?1:0);
                }
                T.setVolume(17,data[extra.target]?1:0);
                T.setVolume(18,data[extra.target]?1:0);
                T.setVolume(20,data[extra.target]?1:0);
                T.setVolume(21,data[extra.target]?1:0);
                T.setVolume(22,data[extra.target]?1:0);
                T.setVolume(23,data[extra.target]?1:0);
                T.setVolume(24,data[extra.target]?1:0);
                T.setVolume(25,data[extra.target]?1:0);
                T.setVolume(26,data[extra.target]?1:0);
                T.setVolume(27,data[extra.target]?1:0);
                T.setVolume(28,data[extra.target]?1:0);
                T.setVolume(30,data[extra.target]?0.7:0);
                T.setVolume(31,data[extra.target]?0.7:0);
                T.setVolume(32,data[extra.target]?0.7:0);
                T.setVolume(33,data[extra.target]?0.7:0);
                T.setVolume(34,data[extra.target]?1:0);
                T.setVolume(35,data[extra.target]?1:0);
                T.setVolume(36,data[extra.target]?0.7:0);
                T.setVolume(37,data[extra.target]?0.7:0);
                T.setVolume(38,data[extra.target]?0.7:0);
                T.setVolume(39,data[extra.target]?0.7:0);
                T.setVolume(40,data[extra.target]?0.7:0);
                T.setVolume(41,data[extra.target]?0.7:0);
                T.setVolume(42,data[extra.target]?0.7:0);
                T.setVolume(43,data[extra.target]?0.7:0);
                T.setVolume(44,data[extra.target]?0.7:0);
                T.setVolume(45,data[extra.target]?0.7:0);
                T.setVolume(46,data[extra.target]?0.7:0);
                T.setVolume(47,data[extra.target]?0.7:0);
                T.setVolume(48,data[extra.target]?0.7:0);
                T.setVolume(49,data[extra.target]?0.7:0);
                T.setVolume(50,data[extra.target]?0.7:0);
                T.setVolume(51,data[extra.target]?0.7:0);
                T.setVolume(52,data[extra.target]?0.7:0);
                T.setVolume(53,data[extra.target]?0.7:0);
                T.setVolume(55,data[extra.target]?0.7:0);
                T.setVolume(56,data[extra.target]?0.7:0);
                T.setVolume(57,data[extra.target]?0.7:0);
                T.setVolume(58,data[extra.target]?0.7:0);
                T.setVolume(59,data[extra.target]?0.7:0);
                T.setVolume(60,data[extra.target]?0.7:0);
                T.setVolume(61,data[extra.target]?0.7:0);
            }
        } else if (action=="twitter") {
            GA.getInstance().addEvent(new GA.Events.Design("Misc:Twitter"));
            window.open("https://twitter.com/Gaia_Byte", '_blank');
        } else if (action=="reset") {
            popup = {
                text: "Reset everything THIS IS IRREVERSIBLE?",
                mode: "confirm",
                action: function () {
                    _this.reset();
                }
            }
        } else if (action=="save") {
            this.save();
        } else if (action=="export") {
            document.getElementById("popup").style.display="block";
            document.getElementById("dataloc").value=this.data2str();
            document.getElementById("dataloc").onclick=undefined;
            document.getElementById("databut").style.display="none";
        } else if (action=="import") {
            document.getElementById("popup").style.display="block";
            document.getElementById("dataloc").value="Copy your save here";
            document.getElementById("dataloc").onclick=function(){this.value=""};
            document.getElementById("databut").style.display="inline";
            document.getElementById("databut").innerHTML="Import";
            document.getElementById("databut").onclick=function () {
                var code=document.getElementById("dataloc").value;
                if (code!==null&&code!=="") {
                    if (data.importBlock>0) {
                        popup={
                            text:"Wait "+stimer(data.importBlock/1000)+" to import again",
                            mode:"alert",
                        }
                    } else {
                        var ok=true;
                        try {
                            var result = _this.str2data(code);
                            if (data.miracles) data.miracles=undefined;
                            data = result;
                            _this.updateData();
                            ++data.import;
                            data.importBlock=Math.min(data.import,5)*60*1000;
                            superClick=undefined;
                            menu="research";
                            menuHot = {
                                research: 0,
                                achievements: 0,
                                stats: 0,
                                specie: 0,
                                shop: 1,
                                exotic: 0,
                                options: 0
                            }
                            achCache = [];
                            achStack = [];
                            _this.initAchievements();
                            _this.evalOmega();
                            _this.evalResearch();
                            _this.evalBuildings();
                            _this.updateProduction(-1);
                            onPurchaseResult({success:true});
                            ttimes = [
                                1000,// map
                                1000,// energy
                                1000,// cavemna
                                1000,// production
                                1000,// research
                                1000,// bar
                                1000,// new building
                                1000,// specie
                                10000,// messages
                                1000,// superclick
                            ];
                            if (typeof T !== 'undefined') _this.load();
                            _this.save();
                        } catch (e) {
                            console.log(e);
                            ok=false;
                        }
                        if (ok) {
                            popup={
                                text:"New game data loaded!",
                                mode:"alert",
                            }
                        } else {
                            popup={
                                text:"Game load failed :(",
                                mode:"alert",
                            }
                        }
                    }
                }
                document.getElementById("popup").style.display="none";
            };
        } else if (action=="ad") {
            GA.getInstance().addEvent(new GA.Events.Design("Ad:Click"));
            popup = {
                text: "Watch a video Advertisement for x4 multiplier?",
                alert: "Multiplier lasts 30 minutes",
                mode: "confirm",
                action: function () {
                    GA.getInstance().addEvent(new GA.Events.Design("Ad:Show"));
                    if (adActive&&kongregate!=undefined) {
                        kongregate.mtx.showIncentivizedAd();
                    }
                },
                cancel: function () {
                    GA.getInstance().addEvent(new GA.Events.Design("Ad:Hide"));
                    adShow.phase=2;
                    data.adBlock=Date.now()+adtime;
                }
            }
        } else if (action=="skip") {
            GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Skip"));
            data.tutorial=12;
            this.save();
        } else if (action=="zPress") {
            data.buildingAmount = BMUL[data.buildingAmount];
        } else if (action=="toggle") {
            if (extra.target=="public") {
                this.pfpublic();
            } else {
                if (data[extra.target]!==undefined) data[extra.target]=!data[extra.target];
                else data[extra.target]=true;
                if (data.autoResearch) this.evalResearch();
            }
        } else if (action=="notation") {
            data.nMode=extra.target;
        } else if (action=="bintmode") {
            data.bintmode=extra.target;
        } else if (action=="res") {
            if (data.resolution===true) data.resolution=1;
            if (data.resolution===false) data.resolution=0;
            data.resolution=(data.resolution+1)%3;
            if (data.resolution==0) {
                localStorage.res=0;
            } else if (data.resolution==1) {
                localStorage.res=1;
            } else {
                localStorage.res=2;
            }
        } else if (action=="noti") {
            if (data.notifications[extra.target]<Date.now()) data.notifications[extra.target]=Date.now()+7*24*60*60*1000;
            else data.notifications[extra.target]=Date.now();
        } else if (action=="csave") {
            this.cloudSave();
        } else if (action=="cload") {
            this.cloudLoad();
        } else if (action=="ahshow") {
            data.showAH=extra.target;
        } else if (action=="bet") {
            electron=undefined;
            GA.getInstance().addEvent(new GA.Events.Design("Quantum:Start"));
            FN = new Fn(undefined,data.dimensions[4]>0?4:8);
            data.betAmount =  data.energy * Math.pow(10,-2 + data.betMode);
            data.energy-=data.betAmount;
            this.doStat("v","energy",-(data.betAmount)/this.dimBuff("gamblingr"));
            this.doStat("v","bet",1);
            this.doStat("v","bspend",data.betAmount);
            this.doStat("m","bspend",data.betAmount);
        } else if (action == "nextBet") {
            data.betMode = extra.target;
        } else if (action == "betzone") {
            var target=extra.target;
            var points=FN.getPoints();
            var areas=FN.getAreas();
            var total=0;
            for (var i=0;i<areas.length; ++i) {
                total+=areas[i];
            }
            var rand=Math.random();
            for (var i=0; i<areas.length; ++i) {
                if (rand<=areas[i]/total && electron==undefined) {
                    electron={
                        x:Math.floor(i*points.length/areas.length)+randInt(0,Math.floor(points.length/areas.length)),
                        y:Math.random(),
                        z:target,
                        t:Date.now(),
                    };
                    if (i==target) {
                        // win bet
                        var prob=0.97;
                        if (this.dimBuff("gambling")==2) prob=0.99;
                        GA.getInstance().addEvent(new GA.Events.Design("Quantum:Won"));
                        var wonEnergy=data.betAmount*(prob/(areas[i]/total));
                        setTimeout(function () {
                            data.energy+=wonEnergy;
                            _this.updateResearch(wonEnergy);
                            _this.doStat("v","energy",wonEnergy);
                            _this.doStat("v","aenergy",wonEnergy);
                            _this.doStat("m","energy",data.energy);
                            _this.doStat("v","bwon",wonEnergy);
                            _this.doStat("m","bwon",wonEnergy);
                            _this.doStat("v","btrue",1);
                            _this.save();
                        },2000);
                        electron.won=wonEnergy;
                    } else {
                        GA.getInstance().addEvent(new GA.Events.Design("Quantum:Lost"));
                        setTimeout(function () {
                            _this.doStat("v","blost",1);
                        },2000);
                    }
                    data.betAmount=0;
                }
                rand-=areas[i]/total
            }
            T.play(20);
            this.save();
        } else if (action=="hourButtons") {
            while (data.lab.length<extra.specie) data.lab.push(undefined);
            var todo=60*60*1000;
            var nrg = (data.stats.t.m.prod*24*60*60)/((Math.min(12,data.specie+1))*14);
            if (extra.target==1) {
                todo*=4;
                nrg*=3;
                this.doStat("v","ltimes4",1);
            } else if (extra.target==2) {
                todo*=12;
                nrg*=7;
                this.doStat("v","ltimes12",1);
            } else {
                this.doStat("v","ltimes1",1);
            }
            data.lab[extra.specie] = {
                start: Date.now(),
                todo: todo*this.dimBuff("labtimer"),
                nrg: nrg*this.dimBuff("labmul"),
                init: todo*this.dimBuff("labtimer"),
                mode: extra.target,
            }
            this.save();
        } else if (action=="setAllExp") {
            while (data.lab.length<extra.max) data.lab.push(undefined);
            var todo=60*60*1000;
            var nrg = (data.stats.t.m.prod*24*60*60)/((Math.min(12,data.specie+1))*14);
            if (extra.target==1) {
                todo*=4;
                nrg*=3;
            } else if (extra.target==2) {
                todo*=12;
                nrg*=7;
            }
            data.lab[extra.specie] = {
                start: Date.now(),
                todo: todo*this.dimBuff("labtimer"),
                nrg: nrg*this.dimBuff("labmul"),
                init: todo*this.dimBuff("labtimer"),
                mode: extra.target,
            }
            for (var i = 0; i < extra.max; ++i) {
            	if (i<=data.specie && !nn(data.lab[i])) {
            		data.lab[i] = {
                        start: Date.now(),
                        todo: todo*this.dimBuff("labtimer"),
                        nrg: nrg*this.dimBuff("labmul"),
                        init: todo*this.dimBuff("labtimer"),
                        mode: extra.target,
                    }
                    if (extra.target==1) {
                        this.doStat("v","ltimes4",1);
                    } else if (extra.target==2) {
                        this.doStat("v","ltimes12",1);
                    } else {
                        this.doStat("v","ltimes1",1);
                    }
                }
            }
            this.save();
        } else if (action=="Finish5k") {
            //Cridar Event Botiga
            if (kongregate!==undefined && kongregate.services.isGuest()) {
                kongregate.services.showRegistrationBox();
            } else {
                GA.getInstance().addEvent(new GA.Events.Design("Shop:Finish"));
                if (kongregate!==undefined) {
                    popup = {
                        mode: "confirmshop",
                        action: function () {
                            kongregate.mtx.purchaseItems([{identifier:"finish", data:extra.target}], onPurchaseResult);
                        }
                    }
                } else {
                    popup={
                        text:"Enable flash to open the shop",
                        mode:"alert",
                    }
                }
            }
        } else if (action=="FAll25k") {
            if (kongregate!==undefined && kongregate.services.isGuest()) {
                kongregate.services.showRegistrationBox();
            } else {
                GA.getInstance().addEvent(new GA.Events.Design("Shop:FinishAll"));
                if (kongregate!==undefined) {
                    popup = {
                        mode: "confirmshop",
                        action: function () {
                            kongregate.mtx.purchaseItems(["finishall"], onPurchaseResult);
                        }
                    }
                } else {
                    popup={
                        text:"Enable flash to open the shop",
                        mode:"alert",
                    }
                }
            }
        } else if (action=="Collect") {
            if (extra.target<data.lab.length && nn(data.lab[extra.target])) {
                var prod = data.lab[extra.target].nrg;
                data.energy+=prod;
                this.doStat("v","energy",prod);
                this.doStat("v","lenergy",prod);
                this.doStat("v","ltimes",1);
                this.doStat("m","energy",data.energy);
                this.doStat("m","lenergy",prod);
                data.lab[extra.target]=undefined;
            }
        } else if (action=="clall") {
            // Claim All
            for (var i=0;i<extra.target;i++) {
                if (i<data.lab.length && nn(data.lab[i]) && data.lab[i].todo<=0) {
                    var prod = data.lab[i].nrg;
                    data.energy+=prod;
                    this.doStat("v","energy",prod);
                    this.doStat("v","lenergy",prod);
                    this.doStat("v","ltimes",1);
                    this.doStat("m","energy",data.energy);
                    this.doStat("m","lenergy",prod);
                    data.lab[i]=undefined;
                }
            }
        } else if (action=="CancellLab") {
            var percTime = (data.lab[extra.target].init * 5) / 100;
            percTime = data.lab[extra.target].init - percTime;
            if (data.lab[extra.target].todo < percTime) {
                popup={
                    text:"Are you sure that you want to cancel it?",
                    mode:"confirm",
                    action: function () {
                        if (extra.target<data.lab.length && data.lab[extra.target]!=undefined ) {
                            if (data.lab[extra.target].mode!==undefined) {
                                if (data.lab[extra.target].mode==1) {
                                    _this.doStat("v","ltimes4",-1);
                                } else if (data.lab[extra.target].mode==2) {
                                    _this.doStat("v","ltimes12",-1);
                                } else {
                                    _this.doStat("v","ltimes1",-1);
                                }
                            }
                            data.lab[extra.target]=undefined;
                        }
                    }
                }
            }
            else {
                if (extra.target<data.lab.length && data.lab[extra.target]!=undefined ) {
                    if (data.lab[extra.target].mode!==undefined) {
                        if (data.lab[extra.target].mode==1) {
                            _this.doStat("v","ltimes4",-1);
                        } else if (data.lab[extra.target].mode==2) {
                            _this.doStat("v","ltimes12",-1);
                        } else {
                            _this.doStat("v","ltimes1",-1);
                        }
                    }
                    data.lab[extra.target]=undefined;
                }
            }
        } else if (action=="arrowexp"){
            labPage=extra.target;
        } else if (action=="arrowdim"){
            dimensionsPage=extra.target;
        } else if (action=="OmegaLessColors"){
            var price = this.calcGcolP();
            if (data.omega>=price) {
                ++data.omegas[6];
                data.omega-=price;
                this.doStat("v","somega",price);
                this.doStat("a","omega",6);
                galaxies.changeC(this.calcGcol());
            }
        } else if (action=="OmegaMoreTime"){
            var price = this.calcGtimeP();
            if (data.omega>=price) {
                ++data.omegas[7];
                data.omega-=price;
                this.doStat("v","somega",price);
                this.doStat("a","omega",7);
                data.galaxiesTimer+=1000;
            }
        } else if (action=="ClickBubble") {
            var val = galaxies.click(extra.x,extra.y);
            var d = new Date();
            var m = d.getMonth();
            var n = d.getDate();
            var h = d.getHours();
            if (m==3 && n==1 && h%2==0 && h<=12) {
                //while (galaxies.empty()>0) galaxies.add();
            }
            data.grid=galaxies.grid;
            if (typeof val==="number") {
                this.doStat("v","gpop",val);
                this.doStat("m","gpop",val);
            }
            this.doStat("m","gempty",galaxies.empty());
            this.evalBuildings();
        } else if (action=="scene") {
            searchTab=false;
            document.getElementById("herosearch").style.display="none";
            document.getElementById("herosearch").value="";
            if (scene!=extra.target) {
                if (fList.indexOf(extra.target)===-1||(kongregate!==undefined&&mdata!==undefined)) {
                    var curr=sceneBG[scene];
                    var next=sceneBG[extra.target];
                    if (curr!=next) {
                        T.stop(curr);
                        T.play(next);
                    }
                    if (scene=="tournaments"||extra.target=="tournaments") monstersPage[4]=0;
                    scene=extra.target;
                    if (menu=="shop") menu="research";
                } else if (kongregate!==undefined) {
                    if (kid==0) kongregate.services.showRegistrationBox();
                    else this.relog(function () {
                        _this.doAction(action,extra);
                    });
                } else {
                    popup = {
                        text:"Enable flash to use this feature",
                        mode:"alert",
                    }
                }
            }
        } else if (action=="mshop") {
            if (extra.target) shopOpen = true;
            else shopOpen = false;
        } else if (action=="coupon") {
            var ccode=prompt("Copy your Coupon here:");
            if (ccode!=="" && ccode!==undefined && ccode!==false && ccode!==null) {
                if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
                    this.claimCoupon(ccode);
                }
            }
        } else if (action=="achpop") {
            if (achStack.length>0) {
                achStack[0].time=0;
            }
        } else if (action=="refill") {
            popup = {
                text: "Do you want to refill the board?",
                mode: "confirm",
                action: function () {
                    while (galaxies.empty()>0) {
                        galaxies.add();
                    }
                    _this.evalBuildings();
                }
            }
        } else if (action=="ClaimMiracle") {
            if (claimDelay[extra.target]<Date.now()) {
                claimDelay[extra.target]=Date.now()+5000;
                this.claim(extra.target);
            } else {
                popup={
                    text:"Wait to Claim again",
                    mode:"alert",
                }
            }
        } else if (action=="ClaimAll") {
            this.claimall();
        } else if (action=="MiracleMultiplier") {
            GA.getInstance().addEvent(new GA.Events.Design("Shop:Miracle"));
            if (kongregate!==undefined) {
                popup = {
                    mode: "confirmshop",
                    action: function () {
                        kongregate.mtx.purchaseItems(["miracle"], onPurchaseResult);
                    }
                }
            } else {
                popup={
                    text:"Enable flash to open the shop",
                    mode:"alert",
                }
            }
        } else if (action=="arrowmile"){
            milePage=extra.target;
        } else if (action=="case") {
            while (chestQueue[0]<Date.now()) chestQueue.shift();
            if (chestQueue.length<5) {
                chestQueue.push(Date.now()+15000);
                chestTimer=Date.now();
                caseArray=undefined;
                this.roulette(extra.target);
            } else {
                popup={
                    text:"Wait "+Math.round(chestQueue[0]/1000)+" to open a new chest",
                    mode:"alert",
                }
            }
        } else if (action=="mulchest") {
            this.mulChest(extra.target,extra.mul);
        } else if (action=="cmulch") {
            mulChestArray = undefined;  
        } else if (action=="skipc") {
            xacc=0;
            xvel=5910.000;
        } else if (action=="sTab") {
            typeTab=extra.target;
            searchTab=false;
            document.getElementById("herosearch").style.display="none";
            document.getElementById("herosearch").value="";
        } else if (action=="hofTab") {
            hofTab=extra.target;
        } else if (action=="log") {
            this.loadLogBattle(extra.target);
            this.doAction("scene",{target:"battle"});
         } else if (action=="hof") {
            this.loadHofBattle(extra.target);
            this.doAction("scene",{target:"battle"});
        } else if (action=="logP") {
            battlePage=extra.target;
        } else if (action=="monP") {
            monstersPage[extra.type]=extra.target;
        } else if (action=="rankP") {
            rankingPage=extra.target;
        } else if (action=="rankPT") {
            rankingPageT=extra.target;
        } else if (action=="battleSpeed") {
            battleSpeed=extra.target;
            T.setSpeed(27,battleSpeed);
            T.setSpeed(28,battleSpeed);
        } else if (action=="sMon") {
            cityClick={
                x:x,
                y:y,
                id:extra.target,
            }
        } else if (action=="mSetup") {
            if (doubleClick!==undefined && (Date.now()-doubleClick.time)<=200 && doubleClick.id==extra.target) {
                swapping=false;
                cityClick=undefined;
                if (scene=="city") {
                    if (cityPage=="hourly") this.place(extra.target,-1);
                    else {
                        data.playground[extra.line].line[extra.target]=-1;
                        data.playground[extra.line].level[extra.target]=1;
                        data.playground[extra.line].promo[extra.target]=0;
                    }
                }
                else if (scene=="pve" || scene=="pved" || inDungeon==true) data.pve[data.pveline][extra.target]=-1;
                else if (scene=="tournaments") data.tour.setup[tournamentid][extra.target]=-1;
                else if (scene=="worldboss") data.wb[data.wbline][extra.target]=-1;
                else if (flashOpen) data.flash.setup[extra.target]=-1;
                else if (halloweenOpen) data.halloween[extra.target]=-1;
            }
            else{
                doubleClick = {
                    time: Date.now(),
                    id: extra.target
                };
            }
        } else if (action=="swap") {
            var target=undefined;
            if (scene=="city" && cityPage=="hourly") target=mdata.city.setup[extra.target];
            else if (scene=="city" && cityPage=="playground") target=data.playground[extra.line].line[extra.target];
            else if (scene=="pve" || scene=="pved" || inDungeon==true) target=data.pve[data.pveline][extra.target];
            else if (scene=="worldboss") target=data.wb[data.wbline][extra.target];
            else if (scene=="tournaments") target=data.tour.setup[tournamentid][extra.target];
            else if (flashOpen) target=data.flash.setup[extra.target];
            else if (halloweenOpen) target=data.halloween[extra.target];
 
            if (!swapping) {
                cityClick={
                    x:x,
                    y:y,
                    id:target,
                    initPos:extra.initPos,
                }
                if (extra.line !== undefined) {
                    cityClick.line = extra.line;
                    cityClick.level = extra.level;
                    cityClick.promo = extra.promo;
                }
                swapping=true;
            }
 
        } else if (action=="fight") {
            if (mdata!=undefined) {
                if (mdata.city.pvp!==undefined && mdata.city.pvp.attacks>0) {
                    this.doFight(extra.target);
                }
            }
        } else if (action=="clGrid") {
            popup = {
                text: "Do you want to clear the grid?",
                mode: "confirm",
                action: function () {
                    if (scene=="city" && cityPage=="hourly") _this.clearall();
                    else if (scene=="tournaments") {
                    	data.tour.setup[tournamentid]=Array(30).fill(-1);
                    	data.tour.tid[tournamentid] = tournamentid==0?Math.floor(Date.now()/(24*60*60*1000)):Math.floor((Date.now()+12*60*60*1000)/(24*60*60*1000));
                    }
                    else if (scene=="pve" || scene=="pved" || inDungeon==true) data.pve[data.pveline]=[-1,-1,-1,-1,-1,-1];
                    else if (scene=="worldboss") data.wb[data.wbline]=[-1,-1,-1,-1,-1,-1];
                    else if (flashOpen) data.flash.setup=Array(18).fill(-1);
                    else if (halloweenOpen) data.halloween=[-1,-1,-1,-1,-1,-1];
                    else if (scene=="city" && cityPage=="playground") data.playground[extra.target].line=[-1,-1,-1,-1,-1,-1];
                }
            }
        } else if (action=="sPve") {
            pveselected=extra.target;
        } else if (action=="pved") {
            var emptymonster=true;
            for (var i=0;i<6;++i) {
                if (data.pve[data.pveline][i]!==-1) emptymonster=false;
            }
            if (emptymonster) {
                popup={
                    text:"You need at least one monster to fight",
                    mode:"alert",
                }
            } else this.pved();
        } else if (action=="fmax") {
            var emptymonster=true;
            for (var i=0;i<6;++i) {
                if (data.pve[data.pveline][i]!==-1) emptymonster=false;
            }
            if (emptymonster) {
                popup={
                    text:"You need at least one monster to fight",
                    mode:"alert",
                }
            } else {
                fmTimer=Date.now();
                this.pved(true);
            }
        } else if (action=="arrowpve") {
            pvepage=extra.target;
            pveselected=-1;
        } else if (action=="pvefight") {
            var emptymonster=true;
            for (var i=0;i<6;++i) {
                if (data.pve[data.pveline][i]!==-1) emptymonster=false;
            }
            if (emptymonster) {
                popup={
                    text:"You need at least one monster to fight",
                    mode:"alert",
                }
            } else this.pve(extra.target);
        } else if (action=="smartlab") {
            var unlocked = Math.min(12,Math.max(data.lab.length,data.specie+1));
            var targetPage=-1;
            for (var i=0; i<unlocked && targetPage==-1; ++i) {
                if (nn(data.lab[i]) || i<=data.specie) {
                    if (i<=data.specie && !nn(data.lab[i])) {
                        targetPage=Math.floor(i/6);
                    } else if (data.lab[i].todo <= 0){
                        targetPage=Math.floor(i/6);
                    }
                }
            }
            if (targetPage!==-1) labPage=targetPage;
            this.doAction("scene",{target:"experiment"});
        } else if (action=="buy") {
            popup = {
                text: "Purchase Confirmation",
                mode: "confirm",
                action: function () {
                    if (extra.target=="mul1") _this.purchase("MUL",extra.target,500);
                    else if (extra.target=="mul5") _this.purchase2("MUL5",extra.target,2300);
                    else if (extra.target=="mul15") _this.purchase2("MUL15",extra.target,6000);
                    else if (extra.target=="fol1") _this.purchase("FOL",extra.target,500);
                    else if (extra.target=="fol5") _this.purchase2("FOL5",extra.target,2300);
                    else if (extra.target=="fol15") _this.purchase2("FOL15",extra.target,6000);
                    else if (extra.target=="tt3") _this.purchase("TT3",extra.target,500);
                    else if (extra.target=="tt7") _this.purchase("TT7",extra.target,1000);
                    else if (extra.target=="tt14") _this.purchase("TT14",extra.target,1500);
                    else if (extra.target=="bc2") _this.purchase("BC2",extra.target,500);
                    else if (extra.target=="bc5") _this.purchase("BC5",extra.target,1000);
                    else if (extra.target=="bc12") _this.purchase("BC12",extra.target,2000);
                    else if (extra.target=="res") _this.purchase("RES",extra.target,100);
                    else if (extra.target=="fall") _this.purchase("FALL","fall",250);
                    else if (extra.target=="bk1") _this.purchase2("BK1",extra.target,100);
                    else if (extra.target=="bk11") _this.purchase2("BK11",extra.target,1000);
                    else if (extra.target=="bk25") _this.purchase2("BK25",extra.target,2000);
                    else if (extra.target=="cs1") _this.purchase("CS1",extra.target,1000);
                    else if (extra.target=="cs2") _this.purchase("CS2",extra.target,2500);
                    else if (extra.target=="cs3") _this.purchase("CS3",extra.target,5000);
                    else if (extra.target=="cs4") _this.purchase("CS4",extra.target,10000);
                    else if (extra.target=="pg1") _this.purchaseSD("PG1",extra.target,30000);
                    else if (extra.target=="pg20") _this.purchaseSD("PG20",extra.target,540000);
                    else if (extra.target=="pg100") _this.purchaseSD("PG100",extra.target,2400000);
                    else if (extra.target=="cc1") _this.purchaseSD("CC1",extra.target,15000);
                    else if (extra.target=="cc20") _this.purchaseSD("CC20",extra.target,270000);
                    else if (extra.target=="cc100") _this.purchaseSD("CC100",extra.target,1200000);
                    else if (extra.target=="as1") _this.purchaseSD("AS1",extra.target,60000);
                    else if (extra.target=="as20") _this.purchaseSD("AS20",extra.target,1080000);
                    else if (extra.target=="as100") _this.purchaseSD("AS100",extra.target,4800000);
                    else if (extra.target=="k1") _this.purchaseSD("K1",extra.target,50000);
                    else if (extra.target=="k20") _this.purchaseSD("K20",extra.target,950000);
                    else if (extra.target=="k100") _this.purchaseSD("K100",extra.target,4500000);
                    else if (extra.target=="hk1") _this.purchaseSD("HK1",extra.target,165000);
                    else if (extra.target=="hk20") _this.purchaseSD("HK20",extra.target,3135000);
                    else if (extra.target=="hk100") _this.purchaseSD("HK100",extra.target,15000000);
                    else if (extra.target=="em1") _this.purchaseSD("EM1",extra.target,560000);
                    else if (extra.target=="em10") _this.purchaseSD("EM10",extra.target,5300000);
                    else if (extra.target=="em20") _this.purchaseSD("EM20",extra.target,10000000);
                    else if (extra.target=="SP") _this.purchaseFOL("SP",extra.target);
                }
            }
            
        } else if (action=="resetpve") {
            popup = {
                text: "Do you want to reset the Daily Quest?",
                mode: "confirm",
                action: function () {
                    _this.resetpve();
                }
            }
        } else if (action=="panic") {
            popup = {
                text: "Load the last known energy and omegas?",
                mode: "confirm",
                action: function () {
                    _this.panic();
                }
            }
        } else if (action=="clmhero") {
            //Call function to claim pve hero
            this.claimH(pvepage);
        } else if (action=="join") {
            //Join tournament
            var yprice=TPRICE[extra.target%7];
            if (extra.target<=17349) yprice=0;
            var any=true;
            for (var i=0;i<30;++i) if (data.tour.setup[tournamentid][i]!==-1) any=false;
            if (any) {
                popup = {
                        text: "Your grid is empty! Are you sure you want to join?",
                        mode: "confirm",
                        action: function () {
                            if (tournamentid == 0) {
                                if (yprice<=UM) _this.register(data.tour.setup[tournamentid],tournamentid);
                                else {
                                    _this.doAction("scene",{target:"buildings"});
                                    _this.doAction("mshop",{target:true});
                                }
                            } else {
                                _this.etregister(data.tour.setup[tournamentid],tournamentid);
                            }
                            
                        }
                    }
            }
            else {
                if (tournamentid == 0) {
                    if (yprice<=UM) {
                        popup = {
                            text: "Join with your current setup? You can't edit later",
                            mode: "confirm",
                            action: function () {
                                _this.register(data.tour.setup[tournamentid],tournamentid);
                            }
                        }
                    } else {
                        this.doAction("scene",{target:"buildings"});
                        this.doAction("mshop",{target:true});
                    }  
                } else {
                    popup = {
                        text: "Join with your current setup? You can't edit later",
                        mode: "confirm",
                        action: function () {
                            _this.etregister(data.tour.setup[tournamentid],tournamentid);
                        }
                    }
                }
                       
            }
                       
        } else if (action=="cltour") {
            if (tournamentid == 0) {
                popup = {
                    text: "You'll lose your entry fee. Are you sure?",
                    mode: "confirm",
                    action: function () {
                        _this.cltour();
                    }
                }
            } else {
                _this.etcltour();
            }
            
        } else if (action=="ltr") {
            //iterate between join and results
            if (tournamentPage=="join") tournamentPage="results";
            else tournamentPage="join";
        } else if (action=="idr") {
            searchTab=false;
            document.getElementById("herosearch").style.display="none";
            document.getElementById("herosearch").value="";
            if (tournamentid==0) tournamentid=1;
            else tournamentid=0;
            //tournamentid=0;
        } else if (action=="lwb") {
            //iterate between fight and results
            if (wbosspage=="fight") wbosspage="results";
            else wbosspage="fight";
        } else if (action=="web") {
            // Visit web of tournaments
            window.open("https://cosmosquest.net/tournament.php");
        } else if (action=="ibattle") {
            // Import tournament battle
            document.getElementById("popup").style.display="block";
            document.getElementById("dataloc").value="Copy the battle you want to see here";
            document.getElementById("dataloc").onclick=function(){this.value=""};
            document.getElementById("databut").style.display="inline";
            document.getElementById("databut").innerHTML="Load battle";
            document.getElementById("databut").onclick=function () {
                var b64str=document.getElementById("dataloc").value;
                if (b64str!=="" && b64str!=="Copy the battle you want to see here") {
                    var error=false;
                    var info=undefined;
                    try {
                        var json=atob(b64str);
                        if (json[0]=="[" || json[0]=="{") {
                            info=JSON.parse(json);
                        } else {
                            info=smartParse(json);
                        }
                    } catch (e) {
                        console.log(e);
                        error=true;
                    }
                    if (!error&&info!==undefined) {
                        _this.tournamentReplay(info);
                    } else {
                        popup={
                            text:"Wrong battle information",
                            mode:"alert",
                        }
                    }
                }
                document.getElementById("popup").style.display="none";
            };
        } else if (action=="sday") {
            // Navigate between days information
            showDay = extra.target; 
        } else if (action=="sboss") {
            // Navigate between days information
            showBoss = extra.target;             
        } else if (action=="shero") {
            // Navigate between Heroes on the album
            showHero = extra.target;            
        } else if (action=="heroInfo") {
            // Activate or Deactivate Heroes for left panel
            data.heroInfo[extra.target] = !data.heroInfo[extra.target];
        } else if (action=="pageh") {
            // Navigate between prana pages
            pranaPage=extra.target;           
        } else if (action=="lvlup") {
            // Add a prana gem to a hero
            if (extra.mul) this.levelup10(extra.target); //add x10
            else if (extra.max) this.levelupmax(extra.target); // add Max
            else this.levelup(extra.target);
        } else if (action=="lvlupcc") {
            // Add a cosmic coin to a hero
            if (extra.mul) this.levelup10(extra.target,true); //add x10
            else if (extra.max) this.levelupmax(extra.target,true); // add Max
            else this.levelup(extra.target,true);
        } else if (action=="lvldev") {
            // Add UM to dev hero
            popup = {
                text: "It costs UM instead of PG. Pay 750 UM?",
                mode: "confirm",
                action: function () {
                    _this.leveldev(extra.target);
                }
            }
        } else if (action=="lvlupas") {
            if (extra.cc===true) {
                if (extra.mul) this.levelsuper(extra.target,"CC","mul"); //add x10
                else if (extra.max) this.levelsuper(extra.target,"CC","max"); // add Max
                else this.levelsuper(extra.target,"CC","normal");
            }
            else {
                if (extra.mul) this.levelsuper(extra.target,"AS","mul"); //add x10
                else if (extra.max) this.levelsuper(extra.target,"AS","max"); // add Max
                else this.levelsuper(extra.target,"AS","normal");
            }       
        } else if (action=="ascendhero") {
            // Ascend a legendary into a super Legendary
            popup = {
                text: "Do you want to ascend this hero for 100 AS?",
                mode: "confirm",
                center:true,
                scalable: true,
                action: function () {
                    _this.ascendhero(extra.target);
                }
            }         
        } else if (action=="toPG") {
            // Exchange Ascension Spheres to Prana Gem
            if (extra.max) {
                popup = {
                    text: "Do you want to convert all of your AS into Prana?",
                    mode: "confirm",
                    center:true,
                    scalable: true,
                    action: function () {
                        _this.topg(false,true,false);
                    }
                }
            } else if (extra.x100) this.topg(false,false,true);
            else this.topg(extra.target,false,false);
        } else if (action=="toCC") {
            // Exchange Ascension Spheres to Cosmic Coins
            if (extra.max) {
                popup = {
                    text: "Do you want to convert all of your AS into CC?",
                    mode: "confirm",
                    center:true,
                    scalable: true,
                    action: function () {
                        _this.tocc(false,true,false);
                    }
                }
            } else if (extra.x100) this.tocc(false,false,true);
            else this.tocc(extra.target,false,false);
        } else if (action=="sorthero") {
            data.typeSort=extra.target;
        } else if (action=="lineinfo") {
            data.lineInfo=extra.target;
        } else if (action=="dirhero") {
            data.sortDir=extra.target;
        } else if (action=="pOpen") {
            if (extra.target) dPollOpen = true;
            else dPollOpen = false;
        } else if (action=="vote") {
            //Target == Number of option
            popup = {
                text: "Cast your vote?",
                mode: "confirm",
                action: function () {
                    _this.vote();
                }
            }
        } else if (action=="poll") {
            if (pollVote&(1<<extra.target)) {
                pollVote&=~(1<<extra.target);
            } else {
                pollVote|=(1<<extra.target);
            }
        } else if (action=="season") {
            showRanking=extra.target;
        } else if (action=="edgrid") {
            if (ederase) {
                if (data.ed[extra.target]>0) data.ed[extra.target]=0;
            } else {
                if (data.ed[extra.target]>=0) {
                    if (data.ed[extra.target]==0) {
                        this.doStat("v","tds",1);
                        this.doStat("v","tdc",1);
                        data.ed[extra.target]=data.ed[extra.target]+this.calcEDomegB(2);
                        if (data.ed[extra.target]>this.calcEDomegB(1)) data.ed[extra.target] = this.calcEDomegB(1);
                        else T.play(55);
                        edtimers[extra.target]=Date.now();
                    }
                    else if (data.ed[extra.target]>=1 && data.ed[extra.target]<this.calcEDomegB(1)) {
                        this.doStat("v","tdc",1);
                        data.ed[extra.target]=data.ed[extra.target]+this.calcEDomegB(2);
                        if (data.ed[extra.target]>this.calcEDomegB(1)) data.ed[extra.target] = this.calcEDomegB(1);
                    }
                    
                }
            } 
        } else if (action=="edlvlup") {
            data.edlvl++;
            data.edmk=0;
            edenemy.splice(0, edenemy.length);
        } else if (action=="edlvld") {
            if (data.edlvl >=1) {
                data.edlvl--;
                data.edmk=0;
                edenemy.splice(0, edenemy.length);
            }
        } else if (action=="buyhero") {
            var hid=extra.target;
            popup = {
                text: "Do you want to purchase: "+HERO[hid].name+"?",
                mode: "confirm",
                action: function () {
                    _this.buyhero(hid);
                }
            }
        } else if (action=="buywc") {
            var chest = extra.target;
            if (WCSHOP[chest].type == "UM") {
                if (WCSHOP[chest].price <= this.getHC()) {
                    popup = {
                        text: "Do you want to purchase weekly chest?",
                        mode: "confirm",
                        action: function () {
                            _this.buywc(chest);
                        }
                    }
                }
            } else if (WCSHOP[chest].type == "KRED") {
				/*
                popup = {
                    text: "Do you want to purchase weekly chest?",
                    mode: "confirm",
                    action: function () {
                        _this.doAction("shop",{target:WCSHOP[chest].id});
                    }
                }
				*/
				item="";
                if (WCSHOP[chest].id==11) item="wc1";
                else if (WCSHOP[chest].id==12) item="wc2";
				popup = {
					mode: "confirmshop",
					action: function () {
						kongregate.mtx.purchaseItems([item], onPurchaseResult);
					}
				}
            }
        } else if (action=="viewbattle") {
            viewbattle = extra.target;
        } else if (action=="playbattle") {
            this.tournamentReplay(bdata[viewbattle][extra.target]);
        } else if (action=="wbfight") {
            if (data.wb[data.wbline].indexOf(-1)===-1) {
                popup = {
                    text: "Fight world boss?",
                    mode: "confirm",
                    action: function () {
                        _this.fightWB();
                    }
                }
            } else {
                popup={
                    text:"Setup is not full",
                    mode:"alert",
                }
            }
        } else if (action=="updCur") {
            var actualStamp = Date.now();
            if (updateCurrStamp===undefined || actualStamp >= updateCurrStamp+60000) {
                this.fsync();
                updateCurrStamp = Date.now();
            }
        } else if (action=="arrowauc") {
            aucPage=extra.target;
        } else if (action=="arrowlto") {
            ltoPage=extra.target;
        } else if (action=="placebid") {
            var hero = extra.target;
            var bid = extra.bid;
            popup = {
                text: "Bid "+bid+" UM to "+HERO[hero].name,
                mode: "confirm",
                action: function () {
                    _this.placebid(hero,bid);
                }
            }
            
        } else if (action=="aucbutton") {
            auctionOpen = extra.target;
            ltoOpen = false;
        } else if (action=="ltobutton") {
            ltoOpen = extra.target;
            auctionOpen = false;
        } else if (action=="wbline") {
            data.wbline = extra.target;
        } else if (action=="pveline") {
            data.pveline = extra.target;
        } else if (action=="tm_show") {
            if (extra.target) tmShow = true;
            else tmShow = false;
        } else if (action=="pFlash") {
            //iterate between fight and results
            if (flashPage=="fight") flashPage="results";
            else flashPage="fight";
        } else if (action=="clFlash") {
            if (extra.target) {
                showDaily=true;
                flashOpen = true;
            } else {
                showDaily = false;
                flashOpen = false;
                searchTab=false;
                document.getElementById("herosearch").style.display="none";
                document.getElementById("herosearch").value="";
            }
        } else if (action=="sflash") {
            // Navigate between days information
            showFlash = extra.target; 
        } else if (action=="plflash") {
            // Review a battle against extra.target
            this.flashReplay(CQW.flash.history[showFlash].players[extra.player],CQW.flash.history[showFlash].players[extra.target]);
        } else if (action=="jflash") {
            // Join flash tournament
            for (var i=0;i<18;++i) if (data.flash.setup[i]!==-1) any=false;
            if (any) {
                popup = {
                        text: "Your grid is empty! Are you sure you want to join?",
                        mode: "confirm",
                        action: function () {
                            if (UM>=100) _this.fregister(data.flash.setup,CQW.flash.current.id);
                            else {
                                _this.doAction("scene",{target:"buildings"});
                                _this.doAction("mshop",{target:true});
                            }
                        }
                    }
            }
            else {
                if (UM>=100) {
                    popup = {
                        text: "Join with your current setup? You can't edit later",
                        mode: "confirm",
                        action: function () {
                            _this.fregister(data.flash.setup,CQW.flash.current.id);
                        }
                    }
                } else {
                    this.doAction("scene",{target:"buildings"});
                    this.doAction("mshop",{target:true});
                }         
            }
        } else if (action=="tgss") {
            // Toggle Season Shop
            if (extra.target) seasonOpen = true;
            else seasonOpen = false;
        } else if (action=="tgsp") {
            // Toggle Season Pass
            this.doAction("scene",{target:"ranking"});
            if (extra.target) passOpen = true;
            else passOpen = false;
        } else if (action=="doDaily") {
            if (extra.target) {
                if (this.isDailyEvent().mode!==undefined && this.isDailyEvent().mode=="dungeon") inDungeon=true;
                showDaily = true;
            } else {
                inDungeon=false;
                showDaily = false;
                searchTab=false;
                document.getElementById("herosearch").style.display="none";
                document.getElementById("herosearch").value="";
            }
        } else if (action=="sfcell") {
            this.sfcell(extra.target);
        } else if (action=="arrowlot") {
            lotteryPage=extra.target;
        } else if (action=="buylot") {
            // Buy Lottery Ticket
            this.buylot();
        } else if (action=="dungeon") {
            var emptymonster=true;
            for (var i=0;i<6;++i) {
                if (data.pve[data.pveline][i]!==-1) emptymonster=false;
            }
            if (emptymonster) {
                popup={
                    text:"You need at least one monster to fight",
                    mode:"alert",
                }
            } else {
                if (extra.target==0) this.dungeon();
                else if (extra.target==1) {
                    fmTimer=Date.now();
                    this.dungeon(true);
                }
            }
        } else if (action=="history") {
            hOpen=!hOpen;
        } else if (action=="hisPages") {
            hisPage+=extra.target;
        } else if (action=="dPage") {
            //iterate between fight and results
            if (dunPage=="fight") dunPage="results";
            else dunPage="fight";
        } else if (action=="sdown") {
            if (CQW===undefined || CQW.status===undefined || CQW.status.text===undefined) {
                popup = {
                    text:"The server is currently down. We're working to fix this as soon as possible.",
                    mode:"alert",
                    scalable:true,
                }
            }
            else if (CQW!==undefined && CQW.status!==undefined && CQW.status.text!==undefined && CQW.status.text==="Playfab") {
                popup = {
                    text:"PlayFab servers are Down. Visit 'https://status.playfab.com/' for more information.",
                    mode:"alert",
                    scalable:true,
                }
            }
        } else if (action=="doTower") {
            lastTower = extra.target;
            this.tower(extra.target);
        } else if (action=="clNews") {
            if (extra.target===0) showNews = false;
            else if (extra.target===1) {
                showNews = false;
                data.sNews.active = false;
                data.sNews.version = VERSION;
            }
        } else if (action=="claimsp") {
            _this.claimsp(extra.target,extra.extra);
        } else if (action=="snow") {
            isSnowing.active = !isSnowing.active;
        } else if (action=="advent") {
            if (adventChoice === undefined) adventChoice = extra.target;
            else adventChoice = undefined;
        } else if (action=="oadv") {
            adventOpen = !adventOpen;
        } else if (action=="cadv") {
            this.advPick(extra.target);
        } else if (action=="woption") {
            this.discard();
        } else if (action=="ochr") {
            xmasOpen = !xmasOpen;
        } else if (action=="gift") {
            giftArray=undefined;
            this.gift();
        } else if (action=="igift") {
            instaGift = !instaGift;
        } else if (action=="clgift") {
            giftArray = undefined;
        } else if (action=="xmasd") {
            this.xmas(giftDis.val);
            T.play(61);
            giftDis.phase=1;
            giftDis.time=Date.now();
        } else if (action=="promote") {
            promHero=extra.target;
        } else if (action=="wbprom") {
            var modes = ["No Heroes","Heroes Allowed"];
            if (modes[CQW.WB.mode]==="Heroes Allowed"){
                data.wbline=9;
                data.wb[data.wbline]=[-1,-1,-1,(-2-extra.target),-1,-1];
                scene="worldboss";
            } else {
                popup={
                    text:"Current WB is No-Heroes! Wait for Heroes Allowed Mode.",
                    mode:"alert",
                    scalable:true,
                    center:true,
                }
            }
        } else if (action=="pveprom") {
            data.pveline=1;
            data.pve[data.pveline]=[-1,-1,-1,(-2-extra.target),-1,-1];
            pvepage=Math.floor(promoData[extra.target].quest/5);
            pveselected=(promoData[extra.target].quest);
            scene="pve";
        } else if (action=="promo") {
            popup = {
                text: "Do you want to promote this hero?",
                mode: "confirm",
                center:true,
                action: function () {
                    _this.doPromotion(extra.target,extra.mode);
                }
            }
        } else if (action=="train") {
            popup = {
                text: "Do you want to promote this hero?",
                mode: "confirm",
                center:true,
                action: function () {
                    _this.doTraining(extra.target,extra.mode);
                    promHero = undefined;
                }
            }
        } else if (action=="cmulgf") {
            mulGiftArray = undefined;  
        } else if (action=="mulgift") {
            this.mulGift(extra.target,extra.mul);
        } else if (action=="clcc") {
            if (extra.target) {
                showDaily=true;
                eventCCopen = true;
            } else {
                eventCCopen = false;
                showDaily = false;
            }
        } else if (action=="pge") {
            this.pge(extra.target);
        } else if (action=="ccrs") {
            cc_data = {
                start: false,
                points: 0,
                timer: 140,
                ts: Date.now(),
                speed: 500,
                attempts: undefined,
                sent: false,
            };
            cc_body = [2,1,0];
            cc_direction = "RIGHT";
            newPosition = 2;
            cc_changed = false;
        } else if (action=="oyear") {
            show2year = extra.target;
        } else if (action=="anni") {
            serverClicks.cap--;
            serverClicks.player++;
            serverClicks.visible++;
        } else if (action=="solver") {
            if (extra.allowhero===0) {
                solver = new Solver(extra.grid,mdata.followers,Array(HERO.length).fill(0),mdata.city.promo,extra.setup,extra.shero,extra.spromo,extra.mode);
            } else {
                solver = new Solver(extra.grid,mdata.followers,mdata.city.hero.map((h, i) => data.heroInfo[i] ? h : 0),mdata.city.promo,extra.setup,extra.shero,extra.spromo,extra.mode);
            }
        } else if (action=="tsolver") {
            solver = new tSolver(extra.grid,extra.followers,extra.phero,extra.ppromo,extra.thero,extra.tpromo,extra.mode);
        } else if (action=="csolver") {
            solver.close(extra!==undefined?extra.target:undefined);
            solver = undefined;
        } else if (action=="vOpen") {
            if (extra.target) vipOpen = true;
            else vipOpen = false;
        } else if (action=="elt") {
            this.claimPersonalEaster(mdata.city.easter.claimed + 1,-1);
            popup=undefined;
        } else if (action=="e30") {
            this.claimPersonalEaster(mdata.city.easter.claimed + 1,1);
            popup=undefined;
        } else if (action=="filO") {
            if (extra.target) filterOpen=true;
            else filterOpen=false;
        } else if (action=="filter") {
            var listToDraw = ["Rarity","Element","Promotion","Levels","Leveling"];
            var filterList = {
                Rarity: ["Common","Rare","Legendary","Ascended"],
                Element: ["Air","Water","Earth","Fire","Void"],
                Promotion: ["0","1","2","3","4","5","6"],
                Levels: ["ALL","LVL 1","LVL 1-98","LVL 99"],
                Leveling: ["PG","CC","AS","OTHER"],
            };
            if (extra.i == 3) {
                for (var i = 0; i < 4; ++i) {
                    if (extra.j == i) data.filterStatus.Levels[i] = true;
                    else data.filterStatus.Levels[i] = false;
                }
            } else data.filterStatus[listToDraw[extra.i]][extra.j] = !data.filterStatus[listToDraw[extra.i]][extra.j];
            pranaPage = 0;
        } else if (action=="buylto") {
            popup = {
                text: "Do you want to purchase this offer?",
                mode: "confirm",
                action: function () {
                    _this.buylto(extra.target);
                }
            }
        } else if (action=="bts") {
            if (cityPage == "hourly") cityPage = "playground";
            else cityPage = "hourly";
        } else if (action=="simulate") {
            var anyA = false;
            var anyB = false;
            for (var i = 0; i < 6; ++i) {
                if (data.playground[0].line[i] !== -1) anyA = true;
                if (data.playground[1].line[i] !== -1) anyB = true;
            }
            if (anyA && anyB) {
                var heroA = Array(HERO.length).fill(1);
                var heroB = Array(HERO.length).fill(1);
                var promoA = Array(HERO.length).fill(0);
                var promoB = Array(HERO.length).fill(0);
                for (var i = 0; i < 6; ++i) {
                    if (data.playground[0].line[i] < -1) {
                        var id = -2*1-data.playground[0].line[i];
                        heroA[id] = data.playground[0].level[i];
                        promoA[id] = data.playground[0].promo[i];
                    }
                    if (data.playground[1].line[i] < -1) {
                        var id = -2*1-data.playground[1].line[i];
                        heroB[id] = data.playground[1].level[i];
                        promoB[id] = data.playground[1].promo[i];
                    }
                }
                var battle = {
                    date: Date.now(),
                    rowA: data.playground[0].line,
                    rowB: data.playground[1].line,
                    back: "city",
                    heroA: heroA,
                    heroB: heroB,
                    promoA: promoA,
                    promoB: promoB,
                };
                this.loadPlaygroundBattle(battle);
            } else {
                popup = {
                    text:"Need at least 1 unit in each player",
                    mode:"alert",
                }
            } 
        } else if (action=="simulatewb") {
            simwbscreen = !simwbscreen;
            document.getElementById("levelwb").style.display="none";
        } else if (action=="choosewbsim") {
            simwbchoose = extra.target;
        } else if (action=="choosewbsimplayer") {
            simwbplayer = extra.target;
        } else if (action=="dowbsim") {
            var anyA=false;
            for (var i = 0; i < 6; ++i) {
                if (data.playground[simwbplayer].line[i] !== -1) anyA = true;
            }
            if (anyA) {
                var level=parseInt(document.getElementById("wblvl").value);
                if (!Number.isInteger(level) || level < 1) level = 1;
                var heroA = Array(HERO.length).fill(1);
                var heroB = Array(HERO.length).fill(1);
                var promoA = Array(HERO.length).fill(0);
                for (var i = 0; i < 6; ++i) {
                    if (data.playground[simwbplayer].line[i] < -1) {
                        var id = -2*1-data.playground[simwbplayer].line[i];
                        heroA[id] = data.playground[simwbplayer].level[i];
                        promoA[id] = data.playground[simwbplayer].promo[i];
                    }
                }
                var wbarray = [72,87,106,126,186];
                heroB[-2-(wbarray[simwbchoose])] = level;
                var battle = {
                    date: Date.now(),
                    rowA: data.playground[simwbplayer].line,
                    rowB: [-2-(wbarray[simwbchoose]),-1,-1,-1,-1,-1],
                    back: "city",
                    heroA: heroA,
                    heroB: heroB,
                    promoA: promoA,
                    promoB: promoA,
                    level: level,
                    name: HERO[wbarray[simwbchoose]].name,
                };
                document.getElementById("levelwb").style.display="none";
                this.loadPlaygroundWB(battle);
                simwbscreen = false;
            }
            else {
                popup = {
                    text:"Need at least 1 unit in Player 1",
                    mode:"alert",
                }
            } 
        } else if (action=="clearf") {
            data.filterStatus = {
                Rarity: [true,true,true,true],
                Element: [true,true,true,true,true],
                Promotion: [true,true,true,true,true,true,true],
                Levels: [true,false,false,false],
                Leveling: [true,true,true,true],
            };
        } else if (action=="joinet") {
            var any=true;
            for (var i=0;i<30;++i) if (data.tour.setup[tournamentid][i]!==-1) any=false;
            if (any) {
                popup = {
                        text: "Your grid is empty! Are you sure you want to join?",
                        mode: "confirm",
                        action: function () {
                            _this.etregister(data.tour.setup[tournamentid]);

                        }
                    }
            }
            else {
                popup = {
                    text: "Join with your current setup? You can't edit later",
                    mode: "confirm",
                    action: function () {
                        _this.etregister(data.tour.setup[tournamentid]);
                    }
                }   
            }
        } else if (action=="decompose") {
            if (showDecompose==undefined) showDecompose=extra.target;
            else showDecompose=undefined;
        } else if (action=="doRecycle") {
            if (mdata.city.recycle.stage == 1) {
                popup = {
                    text: "This will cost 5000UM. Are you sure?",
                    mode: "confirm",
                    action: function () {
                        _this.recycle(extra.target, extra.choice);
    
                    }
                }
            } else if (mdata.city.recycle.stage == 2) {
                this.doAction("shop",{target:"recycle"});
            } else if (mdata.city.recycle.stage == 0 || mdata.city.recycle.stage == 3) {
                popup = {
                    text: "This action is not revertible. Are you sure?",
                    mode: "confirm",
                    action: function () {
                        _this.recycle(extra.target, extra.choice);
    
                    }
                }
            }            
        } else if (action=="cladv") {
            if (extra.target) {
                showDaily=true;
                adventOpen = true;
            } else {
                adventureOpen = false;
                showDaily = false;
                document.getElementById("slidecontainer").style.display="none";
            }
        } else if (action=="chooseadv") {
            adventure.kind = extra.target;
        } else if (action=="adventure") {
            if (adventure.kind !== undefined) {
                var curr=["CC","PG","AS"];
                var vcurr=[CC,PG,AS];
                if (vcurr[extra.target]>=extra.percentage) {
                    popup = {
                        text: "Start adventure to find "+curr[extra.target]+", with "+extra.percentage+"% success rate?",
                        mode: "confirm",
                        center: true,
                        action: function () {
                            _this.adventure(extra.target, extra.percentage);
                        }
                    }
                } else {
                    popup={
                        text:"You don't have enought "+curr[extra.target]+".",
                        center: true,
                        scalable: true,
                        mode:"alert",
                    }
                }
            } else {
                popup={
                    text:"You have to choose wich kind of Adventure do you wanna do.",
                    center: true,
                    scalable: true,
                    mode:"alert",
                }
            }
        } else if (action=="cadventure") {
            adventure.next = false;
        } else if (action=="cqdc") {
            if (extra.target) {
                cqdcOpen = true;
            } else {
                cqdcOpen = false;
            }
        } else if (action=="cqlink") {
            window.open("https://discord.gg/YyUpGsj");
        } else if (action=="ohall") {
            halloweenOpen = !halloweenOpen;
            searchTab = false;
            document.getElementById("herosearch").style.display="none";
            document.getElementById("herosearch").value="";
        } else if (action=="shal") {
            halloweenMode=extra.target;
        } else if (action=="upHal") {
            halloweenLevelUp=extra.target;
        } else if (action=="halpage") {
            halloweenPage=extra.target;           
        } else if (action=="lupH") {
            this.levelHalloween(extra.target,extra.mode);
        } else if (action=="fightH") {
            this.fightHalloween();
        } else if (action=="3ypr") {
            yearpage=extra.target;
        } else if (action=="free3y") {
            popup = {
                text: "Spend one of your free p6 with this hero?",
                mode: "confirm",
                center: true,
                scalable: true,
                action: function () {
                    _this.instafreep6(extra.target);
                }
            }
        } else if (action=="ostg") {
            stGeorgeOpen = !stGeorgeOpen;
        } else if (action=="nstg") {
            stGeorgeData.timer = Date.now()+30000+(mdata.city.stGeorge.stamina*3000);
            stGeorgeData.lastClick = Date.now();
            stGeorgeData.currentClicks=0;
            stGeorgeData.totalClicks = 0;
            stGeorgeData.rawClicks = 0;
            stGeorgeData.visualClicks = 0;
            stGeorgeData.visualUpdate = Date.now();
        } else if (action=="clstg") {
            stGeorgeData.rawClicks+=1;
            if (stGeorgeData.timer-Date.now() > 0 && (Date.now() >= (stGeorgeData.lastClick+1000))) {
                if (stGeorgeData.currentClicks >= 4) stGeorgeData.totalClicks+=4;
                else stGeorgeData.totalClicks+=stGeorgeData.currentClicks;
                stGeorgeData.visualClicks = stGeorgeData.totalClicks;
                stGeorgeData.visualUpdate = Date.now();
                stGeorgeData.lastClick = Date.now();
                stGeorgeData.currentClicks=0;
            } else {
                stGeorgeData.currentClicks+=1;
            }
        } else if (action=="estg") {
            popup = {
                text: "You have done "+(stGeorgeData.totalClicks*(10+(mdata.city.stGeorge.damage*1)))+" of Damage",
                mode: "confirm",
                center: true,
                scalable: true,
                action: function () {
                    stGeorgeData.timer = undefined;
                    stGeorgeData.totalClicks = 0;
                    stGeorgeData.visualClicks = 0;
                }
            }
        } else if (action=="georgelup") {
            this.upgradeStGeorge(extra.target);
        } else if (action=="bwbuy") {
            this.buywb();
        } else if (action=="oetickets") {
            eTicketsOpen = !eTicketsOpen;
        } else if (action=="excet") {
            this.excet(extra.target);
        } else if (action =="osje") {
            sjEventOpen = !sjEventOpen;
        } else if (action == "lupsj") {
            this.upgradeSpaceJourney(extra.target);
        } else if (action == "missj") {
            var endTime = Date.now()+this.getSJUpgrade(extra.target,"engine",mdata.city.space.upgrades);
            var endDay = Math.floor(endTime/(24*60*60*1000));
            if (currentSpecialEvent(endDay) == "Space Journey" && (endTime - mdata.city.space.hyperloop * 20*60*1000) < (mdata.city.space.start+((24*60*60*1000)*5))) {
                this.startSpaceJourneyMission(extra.target);
            } else {
                popup={
                    text:"Mission has to end inside event period",
                    mode:"alert",
                }
            }
        } else if (action == "clsj") {
            if (Date.now()>=mdata.city.captchats) {
                this.createCaptcha(function() { _this.claimSpaceJourney(); });
            } else {
                this.claimSpaceJourney();
            }
        } else if (action =="ogg") {
            gamesOpen = !gamesOpen;
        } else if (action == "gtbc") {
            gamesTab = extra.target;
        } else if (action == "btgg") {
            if (gamesTab == 0) {
                if (mdata.city.games.activities.points >= 1 || mdata.city.games.activities.instant >= 1) {
                    if (extra.target == 2 && mdata.city.games.stamina < 110) {
                        popup={
                            text:"Not enough Stamina",
                            mode:"alert",
                        }
                    } else {
                        if (Date.now()>=mdata.city.captchats) {
                            var tmpParam = extra.target;
                            this.createCaptcha(function() { _this.ggdoactivity(tmpParam); });
                        } else {
                            this.ggdoactivity(extra.target);
                        }
                    }
                } else {
                    popup={
                        text:"Not enough activity points",
                        mode:"alert",
                    }
                }
            } else if (gamesTab == 1) {
                var price = (15000 + (mdata.city.games.upgrades[extra.target] * 15000));
                if (eventRanking.player.StatValue >= price) this.ggdoupgrade(extra.target);
                else {
                    popup={
                        text:"Not enough favours",
                        mode:"alert",
                    }
                }
            } else if (gamesTab == 2) {
                if (eventRanking.player.StatValue >= 20000) this.ggdodefense(extra.target);
                else {
                    popup={
                        text:"Not enough favours",
                        mode:"alert",
                    }
                }
            }
        } else if (action == "clagg") {
            this.ggclaimactivity();
        } else if (action == "accl") {
            this.ggautoactivity();
        } else if (action == "dacl") {
            this.ggautodefense();
        } else if (action=="oeter") {
            eternalOpen = !eternalOpen;
        } else if (action=="least") {
            this.levelEternal(extra.target,extra.max);
        } else if (action=="ueast") {
            this.unlockEternal(extra.target);
        } else if (action=="ost") {
            searchTab = extra.target;
            if (searchTab) {
                document.getElementById("herosearch").style.display="block";
                window.setTimeout(function () { document.getElementById("herosearch").focus(); }, 0);
                if (showDaily) { //Dungeon, flash
                	document.getElementById("herosearch").style.left = "232px";
                	document.getElementById("herosearch").style.top = "463px";
                } else  if (halloweenOpen) {
                	document.getElementById("herosearch").style.left = "232px";
                	document.getElementById("herosearch").style.top = "520px";
                } else {
                	document.getElementById("herosearch").style.left = "132px";
                	document.getElementById("herosearch").style.top = "516px";
                }
            }
        } else if (action=="capzone") {
            var existent = undefined;
            for (var i = 0; i < selectedCaptcha.length; ++i) {
                if (selectedCaptcha[i] == extra.target) existent = i;
            }

            if (existent !== undefined) selectedCaptcha.splice(existent, 1);
            else selectedCaptcha.push(extra.target);
        } else if (action=="sendcap") {
            this.validateCaptcha(extra.target);
        } else if (action=="clract") {
            gamesReceivedActions=undefined;
        } else if (action=="startEL") {
            this.startEvent();
        } else if (action=="hyper") {
            this.hyperloop();
        } else if (action=="oScien") {
            scientistOpen = !scientistOpen;
        }
    }
    this.updateNumbers = function (delta) {
        for (var i=0; i<numbers.length; ++i) {
            var number = numbers[i];
            number.y-=delta/20;
            number.a-=delta/3000;
            number.a=Math.max(0.1,number.a);
        }
        while (numbers.length>0 && numbers[0].t<Date.now()) {
            try {
                numbers[0].image.remove();
            } catch (e) {

            }
            numbers.splice(0,1);
        }
        for (var i=0; i<anumbers.length; ++i) {
            var number = anumbers[i];
            number.y-=delta/20;
            number.a-=delta/3000;
            number.a=Math.max(0.1,number.a);
        }
        while (anumbers.length>0 && anumbers[0].t<Date.now()) {
            try {
                anumbers[0].image.remove();
            } catch (e) {

            }
            anumbers.splice(0,1);
        }
    }
    this.updateProduction = function (delta,trusted,retry) {
        var now=Date.now();
        var base = production;
        if (data.galaxiesTimer>now+this.calcGtime()) data.galaxiesTimer=now+this.calcGtime();
       
        while (galaxies.empty()>0 && data.galaxiesTimer<now) {
            galaxies.add();
            this.evalBuildings();
            data.galaxiesTimer+=this.calcGtime();
            data.grid=galaxies.grid;
        }
        if (data.galaxiesTimer<now) {
            data.galaxiesTimer=now+this.calcGtime();
        }

        if (data.tdon) this.updateTD(delta);

        if (delta==-1) {
            delta = Math.min(Math.max(0,now-data.last),23.75*60*60*1000);
            base = data.stats.t.m.prod/5;
        }
        if (delta<0) delta=0;
        for (var i=0; i<data.lab.length; ++i) {
            if (nn(data.lab[i])) {
                if (data.lab[i].todo>=0) {
                    this.doStat("v","ltime",Math.min(delta,data.lab[i].todo));
                    data.lab[i].todo-=delta;
                }
            }
        }
        // do click
        if (mExtra.cps>0 && now-lastClick>1000/mExtra.cps) {
            if (anumbers.length<mExtra.cps*3) {
                this.doAction("aclick",{},randInt(0,T.width("0gks")),randInt(0,T.height("0gks")));
                if (anumbers.length>=mExtra.cps*3) {
                    lastClick=now;
                } else lastClick+=1000/mExtra.cps;
            } else lastClick=now;
        }
        this.doStat("m","offline",Math.max(now-data.last,0));
        // check if researching
        var previ = data.last;
        data.last=now;
        if (previ>data.last) this.doStat("m","tt",(previ-data.last));
        this.doStat("v","time",delta);
        var prod=base*(delta/1000);
        this.updateResearch(prod,delta);
        data.energy+=prod;
        this.doStat("v","energy",prod);
        this.doStat("v","benergy",prod);
        this.doStat("m","energy",data.energy);
        // check if can evolve
        if (data.specie!=SPECIES.length-1) {
            var energyPerc = Math.min(1,data.stats.c.v.energy/SPECIES[data.specie+1].requires);
            if (energyPerc>=1) {
                menuHot["specie"]=1;
            } else {
                menuHot["specie"]=0;
            }
        } else {
            var target = this.currentJump();
            var energyPerc = Math.min(1,data.stats.c.v.energy/bn(1,target));
            if (energyPerc>=1) {
                menuHot["specie"]=1;
            } else {
                menuHot["specie"]=0;
            }
        }
    }
    this.updateResearch = function (prod,delta) {
        delta=delta||0;
        if (data.researching!==undefined && TECH[data.researching]===undefined) data.researching=undefined;
        if (data.researching!==undefined) {
            var rprod = prod*OM.rmul||1;
            rprod*=this.dimBuff("resspeed");
            var todo = TECH[data.researching].cost-data.research[data.researching].done;
            var udelta=delta;
            if (rprod>todo) {
                udelta = Math.max(0,(delta*todo)/rprod);
            }
            this.doStat("v","rtime",udelta);
            this.doStat("v","renergy",Math.min(todo,rprod));
            data.research[data.researching].done+=Math.min(todo,rprod);
            data.research[data.researching].time+=udelta;
            if (data.research[data.researching].done>=TECH[data.researching].cost) {
                this.doStat("v","ramount",1);
                this.doStat("a","research",data.researching);
                data.stats.c.a.research=[];
                data.technologies.push(data.researching);
                data.research[data.researching].ended=Date.now();
                delete data.research[data.researching];
                this.evalGrants(TECH[data.researching].grants);
                data.researching=undefined;
                this.evalResearch();
                this.evalBuildings();
                if (data.tutorial==5) {
                    GA.getInstance().addEvent(new GA.Events.Design("Tutorial:Step6"));
                    data.tutorial=6;
                    ttimes[5]=0;
                }
                if (data.premiumR) {
                    this.updateResearch(((prod/delta)*(delta-udelta))*0.8,delta-udelta);
                }
            }
        }
    }
    this.getProduction = function () {
        return production;
    }
    this.getBProduction = function () {
        return buildingProduction;
    }
    this.loadData = function () {
        if (localStorage.data) {
            return this.str2data(localStorage.data);
        } else return mkdata();
    }
    this.setData = function (d) {
        data = d;
        this.updateData();
    }
    this.exposeResearch = function () {
        return toResearch;
    }
    this.evalResearch = function () {
        var iniLen = toResearch.length;
        toResearch = [];
        for (var name in TECH) {
            if (data.technologies.indexOf(name)===-1) {
                if (this.evalRequires(TECH[name].requires)) {
                    toResearch.push(name);
                }
            }
        }
        toResearch.sort(function (a,b) {
            return TECH[a].cost-TECH[b].cost;
        });
        if (data.researching==undefined && toResearch.length>0 && data.autoResearch) {
            if (data.premiumR) this.doAction("research",{target:toResearch[0]});
            else {
                var todo = TECH[toResearch[0]].cost/(production*OM.rmul);
                if (todo<=0.001) this.doAction("research",{target:toResearch[0]});
            }
        } else if (data.researching!==undefined && toResearch.indexOf(data.researching)>=9) {
            if (data.premiumR) this.doAction("research",{target:toResearch[0]});
        }
        if (toResearch.length>iniLen && menu!=="research" && data.researching==undefined) menuHot["research"]=1;
        toUnlock = [];
        while (toResearch.length+toUnlock.length<9) {
            var best = undefined;
            for (var name in TECH) {
                if (data.technologies.indexOf(name)===-1 && toResearch.indexOf(name)===-1 && toUnlock.indexOf(name)===-1) {
                    if (best==undefined || TECH[name].cost<TECH[best].cost) {
                        best=name;
                    }
                }
            }
            if (best==undefined) break;
            toUnlock.push(best);
        }
    }
    this.require2text = function (arr) {
        for (var i=0; i<arr.length; ++i) {
            if (arr[i].type=="TECH" && data.technologies.indexOf(arr[i].value)===-1 && toResearch.indexOf(arr[i].value)!==-1) {
                return ["Research:",TECH[arr[i].value].name];
            } else if (arr[i].type=="BUILDING" && data.buildings[arr[i].value]<arr[i].amount && data.buildLevel[arr[i].value]>=0) {
                return [BACTION(arr[i].value,arr[i].amount),arr[i].amount+" "+BUILDINGS[arr[i].value].name[data.buildLevel[arr[i].value]]];
            } else if (arr[i].type=="SPECIE" && data.specie<arr[i].value) {
                return ["Evolve to:",SPECIES[arr[i].value].name];
            } else if (arr[i].type=="MBUILDING" && data.buildings[11]>0) {
                var min = 0;
                for (var j=1; j<data.buildings.length; ++j) {
                    if (data.buildings[min]>data.buildings[j]) min=j;
                }
                return [BACTION(min,arr[i].amount),(arr[i].amount)+" "+BUILDINGS[min].name[data.buildLevel[min]],"All buildings to "+arr[i].amount];
            }
        }
        return ["Keep playing to unlock"];
    }
    this.evalRequires = function (arr) {
        for (var i=0; i<arr.length; ++i) {
            if (arr[i].type=="TECH" && data.technologies.indexOf(arr[i].value)===-1) return false;
            else if (arr[i].type=="BUILDING" && data.buildings[arr[i].value]<arr[i].amount) return false;
            else if (arr[i].type=="SPECIE" && data.specie<arr[i].value) return false;
            else if (arr[i].type=="MBUILDING") {
                var min = data.buildings[0];
                for (var j=1; j<data.buildings.length; ++j) {
                    min=Math.min(min,data.buildings[j]);
                }
                if (min<arr[i].amount) return false;
            }
            else if (arr[i].type=="DIMENSION" && data.dimensions[arr[i].value]==0) return false;
        }
        return true;
    }
    this.evalGrants = function (arr) {
        if (arr) {
            for (var i=0; i<arr.length; ++i) {
                if (arr[i].type=="BUILDLVL") data.buildLevel[arr[i].key]=arr[i].value;
                if (arr[i].type=="BUILDUPGRADE") data.buildUpgrade[arr[i].key]=arr[i].value;
                else if (arr[i].type=="MULTIPLIER") {
                    if (arr[i].key.indexOf("mul")!==-1) data.bonus[arr[i].key]*=arr[i].value;
                    else data.bonus[arr[i].key]+=arr[i].value;
                }
            }
        }
    }
    this.buildingMax = function (id,nrg) {
        var a = BUILDINGS[id].base
        var r = BUILDINGS[id].exp;
        var m = data.buildings[id];
        //nrg*=OM.bcost;
        var x = Math.log((-1*(nrg-r*nrg-(a*OM.bcost*(id==0?1/this.dimBuff("popprice"):1)*Math.pow(r,m))))/(a*OM.bcost))/Math.log(r)-m;
        return Math.floor(x)||1;
    }
    this.buildingNxt = function (id,one) {
        if (one) {
            var current=data.buildings[id];
            for (var i=0; i<nextArr[id].length; ++i) {
                if (nextArr[id][i]>current) return nextArr[id][i]-current;
            }
        } else {
            var current=data.buildings[id];
            var val=0;
            for (var i=0; i<nextArr[id].length; ++i) {
                if (nextArr[id][i]>current) {
                    var amount = nextArr[id][i]-current;
                    if (val==0) val=amount;
                    if (this.buildingPrice(id,amount)<data.energy) val=amount;
                    else break;
                }
            }
            return val;
        }
        return 0;
    }
    this.buildingPrice = function (id,amount) {
        var a = BUILDINGS[id].base
        var r = BUILDINGS[id].exp;
        var m = data.buildings[id];
        var n = m+amount;
        return (a*(Math.pow(r,m)-Math.pow(r,n))/(1-r))*OM.bcost*(id==0?1/this.dimBuff("popprice"):1);
    }
    this.evalBuildings = function () {
        var achc = this.getAchievement();
        production=0;
        var adMul = data.ad>Date.now()?4:1;
        var galMul = this.calcGmul();
        var fMul = this.calcFmul();
        var eMul=data.mul3>0?3:1;
        var bal = this.balancer();
        for (var i=0; i<data.buildings.length; ++i) {
            buildingProduction[i]=0;
            if (data.buildLevel[i]>=0) {
                var base = data.buildings[i]*BUILDINGS[i].prod;
                var evo = BEVO[i][data.buildLevel[i]];
                var exp = Math.pow(2,data.buildUpgrade[i]);
                buildingProduction[i] = bal*base*exp*evo*data.bonus.bmul*data.bonus.tmul*this.getPremium()*OM.prod*achc*adMul*this.getOmegaMul()*galMul*fMul*eMul;
            }
            if (i==0) buildingProduction[i]*=this.dimBuff("popmul");
            production+=buildingProduction[i];
        }
        production*=this.dimBuff("buildprod");
        this.doStat("m","prod",production);
        // eval milestones
        if (mdata!==undefined) {
            mExtra = {
                cps:0,
                dps:0,
                disaster:0,
                td:0,
            }
            for (var i=0; i<milestones.length; ++i) {
                if (mdata.followers>=milestones[i].amount) {
                    for (var key in milestones[i].benefit) {
                        mExtra[key]+=parseFloat(milestones[i].benefit[key]);
                    }
                }
            }
        }
    }
    this.getFutureProduction = function (id) {
        var achc = this.getAchievement();
        var adMul = data.ad>Date.now()?4:1;
        var base = BUILDINGS[id].prod;
        return base*data.bonus.bmul*data.bonus.tmul*this.getPremium()*OM.prod*achc*adMul*this.getOmegaMul();
    }
    this.evalOmega = function () {
        var val=0;
        for (var i=1; i<=data.omegas[4]; ++i) {
            var exp=Math.floor(i/10);
            val+=Math.pow(10,exp);
        }
        OM = {
            prod: Math.pow(2,data.omegas[0]),
            disaster: 100/(100+data.omegas[1]),
            bcost: (100+(data.omegas[2]/2))/(100+data.omegas[2]),
            rmul: Math.pow(1.1,data.omegas[3]),
            click: val,
            perc: 0.0025*data.omegas[5],
        }
    }
    this.createSuperClick = function () {
        this.resetSFX();
        this.doStat("v","screated",1);
        data.previousDisaster=Date.now();
        if (data.cdim>=0) {
            this.createSuperClickDim();
        } else if (data.specie==0) {
            superClick = {
                loc: randInt(0,fireZones.length),
                phase: 0,
            }
            T.setAnimation("078p",20);
            T.setMethod("078p","fadein");
            T.setAnimation("00ys",30);
            T.setMethod("00ys","interpolate");
            T.setAnimation("0bqj",20);
            T.setMethod("0bqj","fadeout");
            //T.loop(2);
            T.play(0);

        } else if (data.specie==1) {
            var id = randInt(0,lightningZones.length);
            T.setAnimation("0nai",120);
            T.setMethod("0nai","fadein");
            T.setDirection("0nai",1);
            T.setCallback("0nai",function () {
                superClick.phase=1;
                T.play(2);
            });
            superClick = {
                loc: id,
                phase: 0,
            }
            T.setAnimation(lightningZones[id].llamp,5);
            T.setMethod(lightningZones[id].llamp,"fadein");
            T.setCallback(lightningZones[id].llamp,function () {
                if (superClick.phase==5) superClick.phase=6;
            });
            T.setAnimation(lightningZones[id].nuvol[0],10);
            T.setMethod(lightningZones[id].nuvol[0],"fadein");
            T.setCallback(lightningZones[id].nuvol[0],function () {
                if (superClick.phase==1) superClick.phase=2;
            });
            T.setAnimation(lightningZones[id].nuvol[1],10);
            T.setMethod(lightningZones[id].nuvol[1],"fadein");
            T.setCallback(lightningZones[id].nuvol[1],function () {
                if (superClick.phase==3) superClick.phase=4;
            });
        } else if (data.specie==2) {
            T.play(4);
            T.setAnimation("0imh",60);
            T.setMethod("0imh","interpolate");
            T.setAnimation("01fb",5);
            T.setMethod("01fb","fadein");
            T.setCallback("01fb",function () {
                superClick.phase=2;
            });
            var w = T.width("0kb8");
            var h = T.height("0kb8");
            var x = randInt(0+50/2,w-50/2);
            var y = randInt(0+100/2,h/2);
            var dx = 1;
            if (x>w/2) dx=-1;
            var dy = Math.random();
            superClick = {
                loc: {x:x,y:y,dx:dx,dy:dy},
                phase: 0,
            }
        } else if (data.specie==3) {
            T.play(6);
            T.setAnimation("0701",10);
            T.setMethod("0701","fadeout");
            T.setCallback("0701",function () {
                superClick=undefined;
            });
            var w1 = T.width("0kb8");
            var h1 = T.height("0kb8");
            var w = T.width("0ie0");
            var h = T.height("0ie0");
            var x = randInt(w/2,w1-w/2);
            var y = randInt(h/2,h1-h*3);
            superClick = {
                loc: {x:x,y:y},
                phase: 0,
            }
        } else if (data.specie==4) {
            T.play(8);
            T.setAnimation("0n5p",15);
            T.setMethod("0n5p","fadeout");
            T.setCallback("0n5p",function () {
                superClick.phase=2;
            });
            var w = T.width("0a41")/2.7;
            var x = randInt(-w/2,w/2);
            var y = randInt(-w/2,w/2);
            superClick = {
                loc: {x:x,y:y},
                phase: 0,
            }
        } else if (data.specie==5) {
            T.play(10);
            T.setAnimation("0hss",5);
            T.setMethod("0hss","fadeout");
            T.setCallback("0hss",function () {
                superClick=undefined;
            });
            var w1 = T.width("02kk");
            var h1 = T.height("02kk");
            var w = T.width("0hss");
            var h = T.height("0hss");
            var x = randInt(w/2,w1-w/2);
            var y = randInt(w/2,h1-w/2);
            superClick = {
                loc: {x:x,y:y},
                phase: 0,
                id: Math.random()<0.5?"00mp":"0bbw",
                c: 0,
            }
        } else if (data.specie==6) {
            T.play(12);
            superClick = {
                timer: Date.now(),
                loc: randInt(0,universeBubbles.length),
                phase: 0,
            }
        } else if (data.specie==7) {
            T.play(17);
            superClick = {
                x:randInt(T.width("0i70")/2,T.width("0ijt")-T.width("0i70")/2),
                y:randInt(T.height("0i70")/2,T.height("0ijt")-T.height("0i70")/2),
                vx: Math.random()-0.5,
                vy: Math.random()-0.5,
                img: "0i70",
                stella: [],
                todo:125,
                ttimer:125,
                r: 0,
                t: Math.random()/10+1.5,
                timer: Date.now(),
                phase: 0,
            }
        } else if (data.specie==8) {
            T.play(21);
            T.setDirection("07kj",1);
            T.setAnimation("07kj",50);
            T.setMethod("07kj","fadein");
            T.setCallback("07kj",function () {
                if (superClick && superClick.phase==0) {
                    superClick.phase=1;
                    T.setAnimation("02ir",200);
                    T.setMethod("02ir","interpolate");
                }
            });
            superClick = {
                loc: {
                    x:randInt(T.width("07kj")/2,T.width("0cws")-T.width("07kj")/2),
                    y:randInt(T.height("07kj")/2,T.height("0cws")-T.height("07kj")/2),
                },
                phase: 0,
            }
        } else if (data.specie==9) {
            T.play(23);
            superClick = {
                loc: {
                    x:randInt(0,T.width("0cws")-128),
                    y:randInt(0,T.height("0cws")-128),
                },
                phase: 0,
            }
        } else if (data.specie==10) {
            superClick = {
                loc: randInt(0,reiZones.length),
                phase: 0,
            }
            T.setAnimation(reiZones[superClick.loc].sid,20);
            T.setMethod(reiZones[superClick.loc].sid,"interpolate");
            T.play(21);
        } else if (data.specie==11) {
            superClick = {
                loc: {
                    x:randInt(0,T.width("0ggx")-T.width("06ew")),
                    y:randInt(0,T.height("0ggx")-T.height("06ew")),
                },
                phase: 0,
            }
            T.play(23);
        } else if (data.specie==12) {
            superClick = {
                loc: {
                    x:randInt(0,T.width("0ggx")-100),
                    y:randInt(0,T.height("0ggx")-100),
                },
                phase: 0,
            }
            T.play(30);
        } else if (data.specie==13) {
            var angle=Math.random()*2*Math.PI;
            var s=Math.random()/4+0.75;
            superClick = {
                loc: {
                    x:randInt(0,T.width("0fhv")-T.width("0384")*s),
                    y:randInt(0,T.height("0fhv")-T.width("0384")*s),
                    a:angle,
                    s:s
                },
                phase: 0,
            }
            T.play(32);
        } else if (data.specie==14) {
            superClick = {
                phase: 0,
                begin: Date.now(),
            }
            T.play(34);
        }
        superClick.stime=Date.now();
        if (data.specie==1) superClick.stime+=8000;
    }
    this.createSuperClickDim = function () {
        // 8 bit
        if (data.cdim==0) {
            superClick = {
                loc: {
                    x:randInt(0,T.width("0a0y")-T.width("04o8")),
                    y:-T.height("04o8")+randInt(-20,-1),
                    s: 0,
                    ss: randInt(5,15),
                },
                phase: 0,
            }
            T.play(36);
        } else if (data.cdim==1) {
            // candy
            superClick = {
                loc: {
                    x:randInt(0,T.width("0ihd")-T.width("0548")),
                    y:randInt(0,T.height("0ihd")-T.height("0548")),
                    d:true,
                    oy:0,
                },
                phase: 0,
            }
            T.play(38);
        } else if (data.cdim==2) {
            // color
            superClick = {
                loc: {
                    x:randInt(0,T.width("0mb5")-T.width("0gc2")),
                    y:randInt(0,T.height("0mb5")-T.height("0gc2")),
                },
                cache: undefined,
                phase: 0,
            }
            T.play(40);
        } else if (data.cdim==3) {
            // Aquatic
            T.play(42);
            T.setAnimation("049f",10);
            T.setMethod("049f","fadeout");
            T.setCallback("049f",function () {
                superClick=undefined;
            });
            var w1 = T.width("0cju");
            var h1 = T.height("0cju");
            var w = T.width("0mr6");
            var h = T.height("0mr6");
            var x = randInt(w/2,w1-w/2);
            var y = randInt(h/2,h1-h*3);
            superClick = {
                loc: {x:x,y:y},
                phase: 0,
            }
        } else if (data.cdim==4) {
            // Black Holes
            T.play(44);
            T.setAnimation("0f64",10);
            T.setMethod("0f64","fadeout");
            T.setCallback("0f64",function () {
                superClick=undefined;
            });
            var w1 = T.width("0hy2");
            var h1 = T.height("0hy2");
            var w = T.width("0f2h");
            var h = T.height("0f2h");
            var x = randInt(w/2,w1-w/2);
            var y = randInt(h/2,h1-h*3);
            superClick = {
                loc: {x:x,y:y},
                phase: 0,
            }
        } else if (data.cdim==5) {
            T.play(46);
            superClick = {
                loc: {
                    x:W*0.14,
                    y:H*0.5,
                },
                cache: undefined,
                phase: 0,
            }  
        } else if (data.cdim==6) {
            T.play(48);
            var w1 = T.width("0aca");
            var h1 = T.height("0aca");
            var w = T.width("0jiw_0");
            var h = T.height("0jiw_0");
            var x = randInt(0,w1-w);
            var y = randInt(0,h1-h);
            superClick = {
                loc: {x:x,y:y},
                phase: 0,
            }
        } else if (data.cdim==7) {
            T.play(50);
            T.setAnimation("0fzz",10);
            T.setMethod("0fzz","fadeout");
            T.setCallback("0fzz",function () {
                superClick=undefined;
            });
            var w1 = T.width("082d");
            var h1 = T.height("082d");
            var w = T.width("0fzz_0");
            var h = T.height("0fzz_0");
            var x = randInt(w/2,w1-w/2);
            var y = randInt(h/2,h1-h*3);
            superClick = {
                loc: {x:x,y:y},
                phase: 0,
            }
        } else if (data.cdim==8) {
            T.play(52);
            T.setAnimation("0nbm",10);
            T.setMethod("0nbm","fadeout");
            T.setCallback("0nbm",function () {
                superClick=undefined;
            });
            var w1 = T.width("0n8p");
            var h1 = T.height("0n8p");
            var w = T.width("0ekv");
            var h = T.height("0ekv");
            var x = randInt(w/2,w1-w/2);
            var y = randInt(h/2,h1-h*3);
            superClick = {
                loc: {x:x,y:y},
                phase: 0,
            }
        }  
    }
    this.pn = function (n,unit,isInt) {
        if (unit=="ms") return timer(Math.floor(n/1000));
        if (n==0) return "0"+(unit?" "+unit:"");
        if (isInt) n=Math.floor(n);
        if (data.nMode==0) {
            var exp = Math.log10(n);
            var mexp = Math.floor(exp/3)*3;
            var str = (mexp==0?n:n/Math.pow(10,mexp)).toString();
            var parts = str.split(".");
            var left = parts[0];
            var right = (parts.length>1?parts[1].substr(0,Math.min(2,4-left.length)):"");
            //while (right.length>0 && right[right.length-1]=="0") right=right.substr(0,right.length-1);
            if (mexp==0 && isInt!==undefined) return left+(unit?" "+unit:"");
            else if (mexp==0) return left+(right.length>0?"."+right:"")+" "+UNITS[mexp]+(unit?unit:"");
            else if (UNITS[mexp]!==undefined) return left+(right.length>0?"."+right:"")+" "+UNITS[mexp]+(unit?unit:"");
            else return "0"+(unit?" "+unit:"");
        } else if (data.nMode==1) {
            var exp = Math.floor(Math.log10(n));
            var mantissa = n/Math.pow(10,exp);
            if (exp>=0 && exp<=2 && isInt!==undefined) return n+(unit?" "+unit:"");
            else if (exp>=0 && exp<=2) return n.toFixed(2)+(unit?" "+unit:"");
            else if (mantissa!=0) return mantissa.toFixed(2)+"e"+exp+(unit?" "+unit:"");
            else return "0"+(unit?" "+unit:"");
        }
    }
    this.pn3 = function (n,unit,isInt) {
        if (n==0) return "0"+(unit?" "+unit:"");
        if (isInt) n=Math.floor(n);
        var exp = Math.log10(n);
        var mexp = Math.floor(exp/3)*3;
        var str = (mexp==0?n:n/Math.pow(10,mexp)).toString();
        var parts = str.split(".");
        var left = parts[0];
        var right = (parts.length>1?parts[1].substr(0,Math.min(2,3-left.length)):"");
        if (mexp==0 && isInt!==undefined) return left+" "+unit;
        else if (mexp==0) return left+(right.length>0?"."+right:"")+" "+UNITS[mexp]+(unit?unit:"");
        else if (UNITS[mexp]!==undefined) return left+(right.length>0?"."+right:"")+" "+UNITS[mexp]+(unit?unit:"");
        else return "0"+(unit?" "+unit:"");
    }
    /* family key value */
    this.doStat = function(f,k,v) {
        if (f=="v") {
            if (data.stats.c[f][k]!==undefined) {
                data.stats.c[f][k]+=v;
                data.stats.t[f][k]+=v;
            } else console.log("UNKNOWN STAT",f,k);
        } else if (f=="m") {
            if (data.stats.c[f][k]!==undefined) {
                data.stats.c[f][k]=Math.max(data.stats.c[f][k],v);
                data.stats.t[f][k]=Math.max(data.stats.t[f][k],v);
            } else console.log("UNKNOWN STAT",f,k);
        } else if (f=="a") {
            if (data.stats.c[f][k]!==undefined) {
                if (data.stats.c[f][k].indexOf(v)==-1) data.stats.c[f][k].push(v);
                if (data.stats.t[f][k].indexOf(v)==-1) data.stats.t[f][k].push(v);
            } else console.log("UNKNOWN STAT",f,k);
        } else if (f=="t") {
            if (data.stats.c[f][k]!==undefined) {
                if (data.stats.c[f][k]==0) data.stats.c[f][k]=v;
                else data.stats.c[f][k]=Math.min(data.stats.c[f][k],v);
                if (data.stats.t[f][k]==0) data.stats.t[f][k]=v;
                else data.stats.t[f][k]=Math.min(data.stats.t[f][k],v);
            } else console.log("UNKNOWN STAT",f,k);
        }
    }
    this.getOmegas = function (mul) {
        mul=mul||1;
        if (mul==2) mul=Math.sqrt(2);
        else if (mul==5) mul=Math.sqrt(2)*2.5;
        else if (mul==12) mul=Math.sqrt(2)*6;
        return (Math.floor(Math.max(0,Math.sqrt(data.stats.t.v.energy/bn(8.5,5))-1))-data.stats.t.v.gomega)*mul;
    }
    this.fixOmegas = function () {
        var omegas=Math.floor(Math.max(0,Math.sqrt(data.stats.t.v.energy/bn(8.5,5))-1));
        if (omegas<data.stats.t.v.gomega) {
            data.stats.t.v.energy=Math.max(data.stats.t.v.energy,bn(8.5,5)*(1 + 2*data.stats.t.v.gomega + data.stats.t.v.gomega*data.stats.t.v.gomega));
        }
    }
    this.ascend = function () {
        scene="buildings";
        superClick=undefined;
        ascending={
            time: Date.now(),
        }
        GA.getInstance().addEvent(new GA.Events.Design("Game:Ascend:T"+data.stats.t.v.ascension,(Date.now()-data.current)/1000));
        var newOmega = this.getOmegas();
        data.prevOmega=newOmega;
        this.doStat("t","a",Date.now()-data.current);
        this.doStat("v","gomega",newOmega);
        this.doStat("v","ascension",1);
        if (data.buildingAmount!="MAX"&&data.buildingAmount!="NXT"&&data.buildingAmount!="MXT") data.buildingAmount=1;
        data.stats.c = genStats();
        data.current = Date.now();
        data.specie = 0; // species index
        data.last = Date.now(); // last update date
        data.energy = 0; // current energy
        data.omega +=  newOmega; // current exotic particles
        data.research = {};
        data.technologies = []; // researched technologies
        data.researching = undefined;
        data.buildings = [0,0,0,0,0,0,0,0,0,0,0,0]; // building amount
        data.buildLevel = [0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]; // -1 none 0 basic 1 evolved
        data.buildUpgrade = [0,0,0,0,0,0,0,0,0,0,0,0]; // how many times upgraded x2 each
        data.cjumps = 0;
        data.cdim = -1;
        if (newOmega/data.stats.t.v.gomega>0.33) {
            galaxies.reset();
            data.grid=galaxies.grid;
        }
        data.bonus = {
            cmul: 1, // formula  = (clicksum+clickrate*population)*clickmul
            csum: 1,
            bmul: 1,
            tmul: 1,
        };
        menuHot = {
            research: 0,
            achievements: 0,
            stats: 0,
            specie: 0,
            shop: 1,
            exotic: 0,
            options: 0
        }
        this.evalOmega();
        this.evalResearch();
        this.evalBuildings();
    }
    this.reset = function () {
        superClick=undefined;
        menuHot = {
            research: 0,
            achievements: 0,
            stats: 0,
            specie: 0,
            shop: 1,
            exotic: 0,
            options: 0
        }
        menu="research";
        ttimes = [
            1000,// map
            1000,// energy
            1000,// cavemna
            1000,// production
            1000,// research
            1000,// bar
            1000,// new building
            1000,// specie
            10000,// messages
            1000,// superclick
        ];
        var odata=data;
        data = mkdata();
        this.updateData();
        data.import=odata.import;
        data.importBlock=Math.min(data.import,5)*60*1000;
        this.evalOmega();
        this.evalResearch();
        this.evalBuildings();
        achCache = [];
        achStack = [];
        this.initAchievements();
        if (typeof T !== 'undefined') this.load();
        this.save();
    }
    var syncSave=false;
    this.cloudSave = function () {
        if (!syncSave && kongregate!==undefined && kid!=0 && pfdata!==undefined && Date.now()-data.cloud>10000) {
            syncSave=true;
            PlayFab.ClientApi.GetUserData({
                    Keys: [
                        "save"
                    ]
                },function (res,err) {
                    if (_this.serverOk(res,err)) {
                        if (res.data && res.data.Data && res.data.Data.save) {
                            var tmpdata;
                            var error=false;
                            try {
                                if (res.data.Data.save.Value.indexOf("{")!==-1) tmpdata=JSON.parse(res.data.Data.save.Value);
                                else tmpdata=_this.str2data(res.data.Data.save.Value);
                            } catch (e) {
                                error=true;
                            }
                            var good=true;
                            if (!error) {
                                if (data.stats.t.v.gomega<tmpdata.stats.t.v.gomega) good=false;
                                else if (data.stats.t.v.gomega==tmpdata.stats.t.v.gomega && data.stats.t.v.energy<tmpdata.stats.t.v.energy) good=false;
                            }
                            if (good) {
                                PlayFab.ClientApi.UpdateUserData({
                                    Data: {
                                        save: _this.data2str(),
                                    }
                                },function (res,err) {
                                    syncSave=false;
                                    if (_this.serverOk(res,err)) {
                                        data.cloud=Date.now();
                                    }
                                });
                            } else {
                                syncSave=false;
                                popup={
                                    text:"Do you want to overwrite your cloud save?",
                                    mode:"confirm",
                                    action: function () {
                                        syncSave=true;
                                        PlayFab.ClientApi.UpdateUserData({
                                            Data: {
                                                save: _this.data2str(),
                                            }
                                        },function (res,err) {
                                            syncSave=false;
                                            if (_this.serverOk(res,err)) {
                                                data.cloud=Date.now();
                                            }
                                        });
                                    }
                                }
                            }
                        } else {
                            syncSave=false;
                            PlayFab.ClientApi.UpdateUserData({
                                Data: {
                                    save: _this.data2str(),
                                }
                            },function (res,err) {
                                syncSave=false;
                                if (_this.serverOk(res,err)) {
                                    data.cloud=Date.now();
                                }
                            });
                        }
                    } else syncSave=true;
                }
            );
        }
    }
    this.save = function () {
        data.saved = Date.now();
        localStorage.data = this.data2str();
        var bcount=0;
        for (var i=0; i<BUILDINGS.length; ++i) {
            bcount+=data.buildings[i];
        }
        var sjumps = 0;
        for (var i=0; i<DIMENSION.length; ++i) {
            sjumps+=data.dimensions[i];
        }
        if (kongregate!==undefined && bcount<85190 && sjumps==data.stats.t.v.djumps && sjumps==data.djumps && sjumps<=3741) {
            var ap=0;
            for (var i=0; i<ACH.length; ++i) {
                if (typeof ACH[i]==="function") ap+=ACH[i](data,this.pn).level;
            }
            kongregate.stats.submit("challenges", ap);
            var b=0;
            for (var i=0; i<BUILDINGS.length; ++i) {
                b+=data.stats.t.m["b"+i];
            }
            kongregate.stats.submit("buildings", b);
            kongregate.stats.submit("technologies", data.stats.t.a.research.length);
            kongregate.stats.submit("superclick", data.stats.t.v.samount);
            if (data.stats.t.v.energy>1000) kongregate.stats.submit("energy", Math.floor(Math.log10(data.stats.t.v.energy)*1000));
            if (data.stats.t.v.gomega>1) kongregate.stats.submit("omega", Math.floor(Math.log10(data.stats.t.v.gomega)*1000));
            if (data.stats.t.v.djumps>0 && sjumps<=3741) kongregate.stats.submit("jumps", data.stats.t.v.djumps);
            var ms=SPECIES.length-1;
            while (ms>0 && data.stats.t.t["e"+ms]==0) --ms;
            kongregate.stats.submit("evolution", ms);
        }
    }

    this.data2str = function () {
        var step1 = JSON.stringify(data);
        var step2 = str2ab(step1);
        var step3 = LZF.compress(step2);
        var step4 = ab2str(step3);
        var step5 = btoa(step4);
        return step5;
    }

    this.str2data = function (str) {
        var step1 = atob(str);
        var step2 = str2ab(step1);
        var step3 = LZF.decompress(step2);
        var step4 = ab2str(step3);
        var step5 = JSON.parse(step4);
        return step5;
    }
    this.getClick = function () {
        var adMul = data.ad>Date.now()?4:1;
        return ((OM.click+data.bonus.csum)*data.bonus.cmul*adMul+production*OM.perc)*this.dimBuff("click");
    }
    this.getSuper = function(use) {
        var rate=1000;
        if (mExtra!==undefined) rate+=mExtra.disaster;
        if (data.dismul>0) {
            if (use) --data.dismul;
            rate*=10;
        }
        return this.getClick()*rate*this.dimBuff("qsuper");
    }
    this.getPremium = function (p) {
        p=p?p+data.premium+data.premium2:data.premium+data.premium2;
        if (p==0) return 1;
        return ((p+2)*(p+3))/2-3;
    }
    this.getFmul = function (p) {
        if (mdata===undefined) return 1;
        else {
            p=p?p+mdata.mlvl+data.premiumF:mdata.mlvl+data.premiumF;
            return p?2*p:1;
        }
    }
    this.getAchievement = function () {
        var achc = 0;
        for (var i=0; i<ACH.length; ++i) {
            if (typeof ACH[i]==="function") achc+=Math.floor(ACH[i](data,this.pn).level);
            else console.log("MISS ACH",i);
        }
        return (1+achc*(0.02+this.dimBuff("challengeinc")-1))*this.dimBuff("challengemul");
    }
    this.getOmegaMul = function (omega) {
        omega=omega||data.stats.t.v.gomega;
        if (omega==0) return 1;
        else return 1+(omega/200);
    }
    this.initAchievements = function () {
        var sum = 0;
        for (var i=0; i<ACH.length; ++i) {
            if (typeof ACH[i]==="function") {
                var lvl = ACH[i](data,this.pn).level;
                achCache[i]=lvl;
                sum+=lvl;
            } else console.log("MISS ACH",i);
        }
        data.acheval=Date.now();
        if (sum==0) noAch=true;
    }
    this.evalAchievements = function () {
        for (var i=0; i<ACH.length; ++i) {
            if (typeof ACH[i]==="function") {
                var nlvl = ACH[i](data,this.pn).level;
                if (achCache[i]<nlvl && nlvl>=1) {
                    achStack.push({
                        id:i,
                        time:7000,
                    });
                    achCache[i]=nlvl;
                    if (noAch) {
                        noAch=false;
                        popup={
                            text:"Completing Challenges give +2% production",
                            mode:"alert",
                        }
                    }
                }
            }
        }
        data.acheval=Date.now();
    }
    this.initAds = function () {
        if (kongregate!==undefined) {
            kongregate.mtx.addEventListener("adsAvailable", function() {
                adActive=true;
            });

            kongregate.mtx.addEventListener("adsUnavailable", function() {
                adActive=false;
            });

            kongregate.mtx.addEventListener("adOpened", function() {
                // An ad is being displayed
                GA.getInstance().addEvent(new GA.Events.Design("Ad:Open"));
            });

            kongregate.mtx.addEventListener("adCompleted", function() {
                data.ad=Date.now()+adtime;
                data.adBlock=Date.now()+adtime*1.2;
                adShow.phase=2;
                GA.getInstance().addEvent(new GA.Events.Design("Ad:Complete"));
            });

            kongregate.mtx.addEventListener("adAbandoned", function() {
                // Ad ad has been closed before completion, the player should not be rewarded
                GA.getInstance().addEvent(new GA.Events.Design("Ad:Abandon"));
            });

            kongregate.mtx.initializeIncentivizedAds();
        }
    }
    this.updateData = function () {
        if (data.version==1) {
            data.version=2;
            data.showNumbers=true;
            data.prevOmega=0;
            data.autoResearch=false;
            data.nMode=0;
            data.premiumR=0;
        }
        if (data.version==2) {
            data.version=3;
            if (data.shop==undefined) data.shop={};
            data.shop.mul=0;
            data.shop.res=0;
        }
        if (data.version==3) {
            data.version=4;
            data.stats.t.t.e7=0;
            data.stats.c.t.e7=0;
            data.cloud=0;
            data.autocloud=false;
            data.previousDisaster=Date.now();
        }
        if (data.version==4) {
            data.version=5;
            data.betMode=0;
            data.betAmount=0;
            data.stats.t.v.bet=0;
            data.stats.c.v.bet=0;
            data.stats.t.v.blost=0;
            data.stats.c.v.blost=0;
            data.stats.t.v.btrue=0;
            data.stats.c.v.btrue=0;
            data.stats.t.v.bspend=0;
            data.stats.c.v.bspend=0;
            data.stats.t.v.bwon=0;
            data.stats.c.v.bwon=0;
            data.stats.t.m.bspend=0;
            data.stats.c.m.bspend=0;
            data.stats.t.m.bwon=0;
            data.stats.c.m.bwon=0;
        }
        if (data.version==5) {
            data.version=6;
            data.stats.t.v.aenergy=0;
            data.stats.c.v.aenergy=0;
        }
        if (data.version==6) {
            data.version=7;
            data.import=0;
            data.importBlock=0;
        }
        if (data.version==7) {
            data.version=8;
            data.stats.t.v.smiss=data.stats.t.v.screated-data.stats.t.v.samount;
            data.stats.c.v.smiss=data.stats.c.v.screated-data.stats.c.v.samount;
            data.lab=[];
            data.stats.t.t.e8=0;
            data.stats.c.t.e8=0;
            data.stats.t.v.lenergy=0;
            data.stats.c.v.lenergy=0;
            data.stats.t.v.ltimes=0;
            data.stats.c.v.ltimes=0;
            data.stats.t.v.ltimes1=0;
            data.stats.c.v.ltimes1=0;
            data.stats.t.v.ltimes4=0;
            data.stats.c.v.ltimes4=0;
            data.stats.t.v.ltimes12=0;
            data.stats.c.v.ltimes12=0;
            data.stats.t.v.ltime=0;
            data.stats.c.v.ltime=0;
            data.stats.t.m.lenergy=0;
            data.stats.c.m.lenergy=0;
            data.shop.lab=0;
            data.shop.laba=0;
        }
        if (data.version==8) {
            data.version=9;
            data.grid=undefined;
            data.omegas.push(0);
            data.omegas.push(0);
            data.galaxiesTimer=Date.now()+this.calcGtime();
            data.stats.t.m.gempty=0;
            data.stats.c.m.gempty=0;
            data.stats.t.m.gpop=0;
            data.stats.c.m.gpop=0;
            data.stats.t.v.gpop=0;
            data.stats.c.v.gpop=0;
        }
        if (data.version==9) {
            data.version=10;
            data.stats.t.t.e9=0;
            data.stats.c.t.e9=0;
            data.fractal=true;
            data.colorblind=false;
        }
        if (data.version==10) {
            data.version=11;
            data.stats.t.t.e10=0;
            data.stats.c.t.e10=0;
            data.stats.t.v.claim=0;
            data.stats.c.v.claim=0;
        }
        if (data.version==11) {
            data.version=12;
            data.stats.t.v.roulette=0;
            data.stats.c.v.roulette=0;
        }
        if (data.version==12) {
            data.version=13;
            data.fautocloud=false;
        }
        if (data.version==13) {
            data.version=14;
            data.stats.t.t.e11=0;
            data.stats.c.t.e11=0;
        }
        if (data.version==14) {
            data.version=15;
            data.pve = [-1,-1,-1,-1,-1,-1];
        }
        if (data.version==15) {
            data.version=16;
            data.stats.t.v.daily=0;
            data.stats.c.v.daily=0;
            data.stats.t.t.e12=0;
            data.stats.c.t.e12=0;
        }
        if (data.version==16) {
            data.version=17;
            data.premiumF=0;
            data.premium2=0;
        }
        if (data.version==17) {
            data.version=18;
            data.mul3=0;
            data.maxe=0;
        }
        if (data.version==18) {
            data.version=19;
            data.stats.t.t.e13=0;
            data.stats.c.t.e13=0;
            data.dismul=0;
        }
        if (data.version==19) {
            data.version=20;
            data.surface=[0,0,0];
        }
        if (data.version==20) {
            data.version=21;
            data.stats.t.t.e14=0;
            data.stats.c.t.e14=0;
        }
        if (data.version==21) {
            data.version=22;
            data.tour = {
                tid:0,
                setup: Array(30).fill(-1)
            }
        }    
        if (data.version==22) {
            data.version=23;
            data.wsync=0;
        }
        if (data.version==23) {
            data.version=24;
            data.typeSort=0;
            data.notifications={};
            data.stats.t.m.qdaily=0;
            data.stats.c.m.qdaily=0;
        }
        if (data.version==24) {
            data.version=25;
            data.dimensions=[];
            data.djumps=0; // total jumps
            data.cjumps=0; // current jumps
            data.cdim=-1; // current dimension
            data.jump = undefined;
            data.stats.t.v.djumps=0;
            data.stats.t.a.dim=[];
            data.stats.c.v.djumps=0;
            data.stats.c.a.dim=[];
        }
        if (data.version==25) {
            data.version=26;
            data.sortDir=0;
        }
        if (data.version==26) {
            data.version=27;
            data.resolution=0; //0 = High, 1 = Low
            data.lastDim=0;
        }
        if (data.version==27) {
            data.version=28;
            data.ed=undefined;
            data.edlvl=0;
            data.edmlvl=0;
            data.edmk=0;
            data.stats.t.v.tdk=0;
            data.stats.c.v.tdk=0;
            data.stats.t.v.tdc=0;
            data.stats.c.v.tdc=0;
            data.stats.t.v.tds=0;
            data.stats.c.v.tds=0;
            data.stats.t.m.tdm=0;
            data.stats.c.m.tdm=0;
            data.stats.t.v.tde=0;
            data.stats.c.v.tde=0;
            data.stats.t.m.tde=0;
            data.stats.c.m.tde=0;
        }
        if (data.version==28) {
            data.version=29;
            data.lineInfo=0;
            data.heroInfo=[];
        }
        if (data.version==29) {
            data.version=30;
            data.wb = [-1,-1,-1,-1,-1,-1];
        }
        if (data.version==30) {
            data.version=31;
            data.hideafford=true;
        }
        if (data.version==31) {
            data.version=32;
            data.wb = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1]];
            data.wbline = 0;
        }
        if (data.version==32) {
            data.version=33;
            data.flash = {
                tid:0,
                setup: Array(18).fill(-1)
            }
        }
        if (data.version==33) {
            data.version=34;
            data.showMaxed=true;
        }
        if (data.version==34) {
            data.version=35;
            data.tdon=true;
        }
        if (data.version==35) {
            data.version=36;
            data.sNews = {
                active: true,
                version: VERSION
            }
        }
        if (data.version==36) {
            data.version=37;
            data.wb.push([-1,-1,-1,-1,-1,-1]);
        }
        if (data.version==37) {
            data.version=38;
            data.wb.push([-1,-1,-1,-1,-1,-1]);
            data.pveline = 0;
            data.pve = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1]];
        }
        if (data.version==38) {
            data.version=39;
            data.currentMilestone = {
                p: 0,
                c: 0,
            };
            data.queue=[];
        }
        if (data.version==39) {
            data.version=40;
            data.filterStatus = {
                Rarity: [true,true,true,true],
                Element: [true,true,true,true,true],
                Promotion: [true,true,true,true,true,true,true],
                Levels: [true,false,false,false],
                Leveling: [true,true,true,true],
            };
        }
        if (data.version==40) {
            data.version=41;
            data.playground=[
                {
                    line: [-1,-1,-1,-1,-1,-1],
                    level: [1,1,1,1,1,1],
                    promo: [0,0,0,0,0,0],
                },
                {
                    line: [-1,-1,-1,-1,-1,-1],
                    level: [1,1,1,1,1,1],
                    promo: [0,0,0,0,0,0],
                },
            ];
        }
        if (data.version==41) {
            data.version=42;
            data.tour = {
                tid:[0,0],
                bonus: Array(30).fill(0),
                setup: [Array(30).fill(-1),Array(30).fill(-1)],
            };
        }
        if (data.version==42) {
            data.version=43;
            data.showOwned=true;
        }
        if (data.version==43) {
            data.version=44;
            data.halloween = [-1,-1,-1,-1,-1,-1];
        }
        if (data.version==44) {
            data.version=45;
            data.stats.t.m.heroes=0;
            data.stats.c.m.heroes=0;
        }
        if (data.version==45) {
            data.version=46;
            var promo_lineup = data.wb.pop();
            data.wb.push([-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1]);
            data.wb.push(promo_lineup);
            data.bintmode = 0;
            data.showDisabled = false;
        }
        if (data.version==46) {
        	data.version=47;
        	if (!data.showOwned) {
        		data.showAH = 3;
        	} else {
        		if (data.showMaxed) data.showAH = 0;
        		else data.showAH = 1;
        	}
        	delete data.showMaxed;
        	delete data.showOwned;
        }
        if (data.heroInfo !== undefined) while (data.heroInfo.length < HERO.length) data.heroInfo.push(true);
        for (var i=0; i<EVENTS.length; ++i) {
            var key=EVENTS[i].id.replace(/[0-9]/g, '');
            if (data.notifications[key]==undefined) data.notifications[key]=Date.now(); 
        }
        while (data.omegas.length<12) data.omegas.push(0);
        if (data.betAmount>0) FN = new Fn(undefined,data.dimensions[4]>0?4:8);
        else {
            FN = undefined;
            electron=undefined;
        }
        galaxies= new Grid(10,9,this.calcGcol(),data.grid);
        data.grid=galaxies.grid;
        if (data.ed==undefined) {
            var firstMap=getDataED();
            var num=0;
            var it=0;
            var arr=[];
            
            for (var i=0; i<100; ++i) {
                arr.push(0);
            }
            for (var i=0;i<firstMap[0].length;++i){
                arr[firstMap[0][i]]=-1;
            }
            data.ed=arr;
        }
        if (edenemy.length==0) {
            var Enemy = this.getEnemy(17);
            edenemy.push(Enemy);
            srateTimer=Date.now();
        }
        data.stats.t.m.gpop=data.stats.t.m.gpop?data.stats.t.m.gpop:0;
        data.stats.c.m.gpop=data.stats.c.m.gpop?data.stats.c.m.gpop:0;
        data.stats.t.v.gpop=data.stats.t.v.gpop?data.stats.t.v.gpop:0;
        data.stats.c.v.gpop=data.stats.t.v.gpop?data.stats.t.v.gpop:0;
        data.stats.t.t.e9=data.stats.t.t.e9?data.stats.t.t.e9:0;
        data.stats.c.t.e9=data.stats.c.t.e9?data.stats.c.t.e9:0;
        if (data.miracles) data.miracles=undefined;
        data.autocloud=false;
        for (var i=0; i<BUILDINGS.length; ++i) {
            if (data.buildLevel[i]>=BUILDINGS[i].name.length || data.buildLevel[i]==undefined) data.buildLevel[i]=BUILDINGS[i].name.length-1;
        }
        while (data.dimensions.length<DIMENSION.length) data.dimensions.push(0);
        this.fixOmegas();
    }
    this.calcNextArr = function () {
        nextArr=[];
        for (var i=0; i<BUILDINGS.length; ++i) nextArr.push([]);
        var tcount=0;
        for (var tid in TECH) {
            ++tcount;
            for (var i=0; i<TECH[tid].requires.length; ++i) {
                if (TECH[tid].requires[i].type=="BUILDING") {
                    var bid = TECH[tid].requires[i].value;
                    var amount = TECH[tid].requires[i].amount;
                    if (nextArr[bid].indexOf(amount)==-1) nextArr[bid].push(amount);
                } else if (TECH[tid].requires[i].type=="MBUILDING") {
                    var amount = TECH[tid].requires[i].amount;
                    if (amount>=1000) {
                        for (var j=0; j<BUILDINGS.length; ++j) {
                            if (nextArr[j].indexOf(amount)==-1) nextArr[j].push(amount);
                        }
                    }
                }
            }
        }
        for (var i=0; i<BUILDINGS.length; ++i) nextArr[i].sort(function (a,b){return a-b;});
    }
    var loadSync=false;
    this.cloudLoad = function () {
        if (data.importBlock>0) {
            popup={
                text:"Wait "+stimer(data.importBlock/1000)+" to import again",
                mode:"alert",
            }
        } else if (!loadSync && kongregate!==undefined && kid!==0 && pfdata!==undefined) {
            loadSync=true;
            try {
                PlayFab.ClientApi.GetUserData({
                    Keys: [
                        "save"
                    ]
                },function (res,err) {
                    loadSync=false;
                    if (_this.serverOk(res,err)) {
                        if (res.data && res.data.Data && res.data.Data.save) {
                            var tmpdata;
                            var error=false;
                            try {
                                if (res.data.Data.save.Value.indexOf("{")!==-1) tmpdata=JSON.parse(res.data.Data.save.Value);
                                else tmpdata=_this.str2data(res.data.Data.save.Value);
                            } catch (e) {
                                error=true;
                            }
                            if (!error) {
                                popup={
                                    text:"What save do you want to load?",
                                    mode:"load",
                                    a:data,
                                    b:tmpdata,
                                    action: function () {
                                        var acdata=data;
                                        localStorage.oldData=acdata;
                                        data=tmpdata;
                                        achCache = [];
                                        achStack = [];
                                        _this.updateData();
                                        ++data.import;
                                        data.importBlock=Math.min(data.import,5)*60*1000;
                                        _this.evalOmega();
                                        _this.evalResearch();
                                        _this.evalBuildings();
                                        _this.updateProduction(-1);
                                        _this.initAchievements();
                                        _this.save();
                                        if (typeof T !== 'undefined') _this.load();
                                        onPurchaseResult({success:true});
                                    }
                                }
                            } else {
                                popup={
                                    text:"Cloud Save failed try again",
                                    mode:"alert",
                                }
                            }
                        } else {
                            var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                                msg:"PFload",
                                stk:res
                            }));
                            GA.getInstance().addEvent(ev);
                        }
                    }
                });
            } catch (e) {
                alert("Cloud Load Failed");
            }
        }
    }
    var relogTimes=0;
    var relogLast=0;
    var relogging=false;
    this.relog = function (cb) {
        pfdata=undefined;
        if (kongregate!==undefined && !relogging) {
            kid=kongregate.services.getUserId();
            if (Date.now()<relogLast+bn(1,relogTimes/2+3)) {
                popup = {
                    text:"Wait "+timer(((relogLast+bn(1,relogTimes/2+3))-Date.now())/1000)+" to relog again",
                    mode:"alert",
                }
                return;
            }
            if (kid!=0) {
                relogLast=Date.now();
                ++relogTimes;
                relogging=true;
                PlayFab.ClientApi.LoginWithKongregate({
                    TitleId: PlayFab.settings.titleId,
                    KongregateId: kid,
                    AuthTicket: kongregate.services.getGameAuthToken(),
                    CreateAccount: false,
                }, function (res,err) {
                    if (cb===undefined) relogging=false;
                    if (_this.serverOk(res,err)) {
                        pfdata=res.data;
                        relogTimes=0;
                        var cb1=function () {
                            relogging=false;
                        }
                        if (cb!==undefined) cb1 = function() {
                            cb();
                            relogging=false;
                        }
                        _this.sync(cb1);
                    } else {
                        if (fList.indexOf(scene)!==-1) _this.doAction("scene",{target:"buildings"});
                        mdata=undefined;
                        _this.evalBuildings();
                        popup = {
                            text:"Server Login failed",
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFlogin",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        relogging=false;
                    }
                });
            } else {
                kongregate.service.showRegistrationBox();
            }
        } else {
            if (kongregate===undefined) {
                popup = {
                    text:"Enable Flash to continue",
                    mode:"alert",
                }
            }
        }
    }
    this.getSound = function () {
        return data.sound;
    }

    this.resetSFX = function () {
        T.stop(0);
        T.stop(2);
        T.stop(4);
        T.stop(6);
        T.stop(8);
        T.stop(10);
        T.stop(12);
        T.stop(17);
        T.stop(21);
        T.stop(23);
        T.stop(30);
        T.stop(32);
        T.stop(34);
        T.stop(36);
        T.stop(38);
        T.stop(40);
        T.stop(42);
        T.stop(44);
        T.stop(46);
        T.stop(48);
        T.stop(50);
        T.stop(52);
    }
    this.calcGmulFix = function () {
        return mapf(data.stats.t.m.gempty,0,90,1,Math.pow(1.12,data.specie*2));
    }
    this.calcGmulVar = function () {
        return mapf(galaxies.empty(),0,90,1,3);
    }
    this.calcGmul = function () {
        return this.calcGmulFix()*this.calcGmulVar()*this.dimBuff("apmul");
    }
    this.calcGtime = function () {
        return (1000*(60+data.omegas[7]))*this.dimBuff("aptimer");
    }
    this.calcGcol = function () {
        return bubbleSprites.length-data.omegas[6];
    }
    this.calcGtimeP = function () {
        return fib(data.omegas[7]+2);
    }
    this.calcGcolP = function () {
        return Math.pow(bn(1,6+data.omegas[6]*2),data.omegas[6]+1);
    }
    this.calcFmul = function () {
        if (mdata===undefined) return 1;
        else {
            if (mdata.city!==undefined && mdata.city.daily!==undefined && mdata.city.daily.timer2>Date.now()) {
                var fworth=0.001;
                if (mdata.city.daily!==undefined && mdata.city.daily.lvl!==undefined) fworth*=mdata.city.daily.lvl;
                return (1+(mdata.followers*fworth));
            } else return 1+(mdata.followers/1000);
        }
    }
    this.randomCases = function (_prize, mode) {
        caseArray=[];
        // Els que son Claus o Heroes, els hi poso Energia i followers
        for (var i = 0; i < 37; ++i){
            var rnd = Math.random();
            if (mode=="hero") {
                rnd=0.8+rnd/5;
            }
            var prize = 0;
            while (prize<caseData.length && rnd>caseData[prize].c) {
                rnd-=caseData[prize].c;
                ++prize;
            }
            if (prize>=caseData.length) prize=0;
            if (caseData[prize].t=="HERO") {
                prize=-(caseData[prize].v[Math.floor(Math.random()*caseData[prize].v.length)]+2);
            }
            caseArray.push(prize);
        }
        caseArray[4] = _prize;
        if (_prize>=0) {
            var elem=caseData[_prize];
            if (elem.t=="MUL") {
                data.mul3+=elem.v;
                this.evalBuildings();
            } else if (elem.t=="NRG") {
                var prod = data.stats.t.m.prod*elem.v;
                data.energy+=prod;
                this.doStat("v","energy",prod);
                this.doStat("v","benergy",prod);
                this.doStat("m","energy",data.energy);
                this.updateResearch(prod);
            } else if (elem.t=="FOL") {
                this.evalBuildings();
            } else if (elem.t=="DIS") {
                data.dismul+=elem.v;
            }
        }
    }
    this.randomGift = function (_prize) {
        giftArray=[];
        for (var i = 0; i < 30; ++i){
            var rnd = Math.random();
            var prize = 0;
            while (prize<giftData.length && rnd>giftData[prize].c) {
                rnd-=giftData[prize].c;
                ++prize;
            }
            if (prize>=giftData.length) prize=0;
            if (giftData[prize].t=="HERO") {
                prize=-(giftData[prize].v[Math.floor(Math.random()*giftData[prize].v.length)]+2);
            }
            else if (giftData[prize].t=="XHERO") {
                prize=-(giftData[prize].v+2);
            }
            giftArray.push(prize);
        }
        giftArray[0] = _prize;
        if (_prize>=0) {
            var elem=giftData[_prize];
            if (elem.t=="CS" || elem.t=="PG") {
                this.evalBuildings();
            }
        }
    }
    this.serverOk = function (res,err) {
        if (res!==undefined && res !== null && typeof res === "object") return true;
        else if (err!==undefined) {
            if (err.errorCode==1100 || err.errorCode==1074) {
                this.relog();
            } else if (err.errorCode==2) {
                popup = {
                    text:"Lost internet connection",
                    mode:"alert",
                }
            } else if (err.errorCode==1199) {
                popup = {
                    text:"Server overload, please wait",
                    mode:"alert",
                }
            } else if (err.errorCode==1016) {
                popup = {
                    text:"Coupon not found",
                    mode:"alert",
                }
            } else if (err.errorCode==1226) {
                popup = {
                    text:"Coupon already used",
                    mode:"alert",
                }
            } else if (err.errorCode==11111) {
                popup = {
                    text:"Too many requests",
                    mode:"alert",
                }
            } else {
                var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                    msg:"PFerr",
                    stk:err
                }));
                GA.getInstance().addEvent(ev);
            }
        }
    }
    this.updateMData = function (data) {
        mdata=data;
        if (mdata!==undefined) {
            if (mdata.amir!==undefined && mdata.amir>0) this.doStat("v","claim",mdata.amir);
            var diff=mdata.now-Date.now();
            for (var i=0; i<mdata.miracles.length; ++i) {
                mdata.miracles[i]-=diff;
            }
            if (mdata.roulette!==undefined) mdata.roulette-=diff;
            if (mdata.city!==undefined) {
                if (mdata.city.daily!==undefined) mdata.city.daily.timer2-=diff;
                if (mdata.city.hero!==undefined) {
                    var heroes = 0;
                    for (var i=0; i<mdata.city.hero.length; ++i) {
                        if (mdata.city.hero[i]>0) {
                            ++heroes;
                        }
                    }
                    this.doStat("m","heroes",heroes);
                }
            }
            
            this.evalBuildings();
        }
    }
    var syncSync=false;
    this.sync = function (cb) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            if (!syncSync) {
                syncSync=true;
                mdata=undefined;
                _this.evalBuildings();
                PlayFab.ClientApi.ExecuteCloudScript({
                    "RevisionSelection":PFMODE,
                    "FunctionName": "status",
                    "FunctionParameter": {
                        token: kongregate.services.getGameAuthToken(),
                        kid: kid
                    }
                }, function (res,err) {
                    syncSync=false;
                    if (_this.serverOk(res,err)) {
                        if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                            battleSync=Date.now();
                            _this.updateMData(res.data.FunctionResult.data);
                            if (typeof cb === "function") cb();
                        } else {
                            var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                                msg:"PFres",
                                stk:res
                            }));
                            GA.getInstance().addEvent(ev);
                        }
                    }
                    _this.loadInventory();
                });
            }
        }
    }
    var fsyncSync=false;
    this.fsync = function () {
        fbattleSync=Date.now();
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            if (!fsyncSync) {
                fsyncSync=true;
                PlayFab.ClientApi.ExecuteCloudScript({
                    "RevisionSelection":PFMODE,
                    "FunctionName": "fstatus",
                    "FunctionParameter": {}
                }, function (res,err) {
                    fsyncSync=false;
                    if (_this.serverOk(res,err)) {
                        if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                            _this.updateMData(res.data.FunctionResult.data);
                            _this.loadInventory();
                        } else {
                            var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                                msg:"PFres",
                                stk:res
                            }));
                            GA.getInstance().addEvent(ev);
                        }
                    }
                });
            }
        }
    }
    this.claim = function (id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "claim",
                "FunctionParameter": {
                    id: id,
                    kid: kid
                }
            }, function (res,err) {
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        claimDelay[id]=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.doStat("v","claim",1);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFres",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.claimCoupon = function (code) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "coupon",
                "FunctionParameter": {
                    code: code
                }
            }, function (res,err) {
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        popup = {
                            text:"You got: "+res.data.FunctionResult.prize,
                            mode:"alert",
                        };
                        _this.loadInventory();
                    } else {
                        popup = {
                            text:"Error:"+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.claimsp = function (a,b) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "claimsp",
                "FunctionParameter": {
                    a: a,
                    b: b
                }
            }, function (res,err) {
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFres",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var syncClaim=false;
    this.claimall = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !syncClaim) {
            syncClaim=true;
            for (var i=0; i<mdata.miracles.length; ++i) {
                claimDelay[i]=Date.now()+3000;
            }
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "claimall",
                "FunctionParameter": {
                    kid: kid
                }
            }, function (res,err) {
                syncClaim=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        for (var i=0; i<mdata.miracles.length; ++i) {
                            claimDelay[i]=Date.now();
                        }
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.doStat("v","claim",res.data.FunctionResult.done);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFres",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var syncpublic=false;
    this.pfpublic = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !syncpublic) {
            syncpublic=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "togglepublic",
            }, function (res,err) {
                syncpublic=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        CQW.isPublic=CQW.isPublic?false:true;
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFpub",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.clearall = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && placeSync==undefined) {
            placeSync=-1;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "clearall",
                "FunctionParameter": {
                    token: kongregate.services.getGameAuthToken(),
                    kid: kid,
                }
            }, function (res,err) {
                placeSync=undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFplace",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Place failed try again",
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var openSync=false;
    this.roulette = function (mode) {
        mode=mode||"normal";
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !openSync) {
            openSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "open",
                "FunctionParameter": {
                    kid: kid,
                    mode: mode
                }
            }, function (res,err) {
                openSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.doStat("v","roulette",1);
                        xrew = res.data.FunctionResult.data;
                        xacc = 10.0;
                        xvel = 0.0;
                        _this.randomCases(res.data.FunctionResult.result, mode);
                        randomEnd=(Math.random() * (0.00210 - 0.00105) + 0.00105).toFixed(5);
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Open failed: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.mulChest = function (mode,mul) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !openSync) {
            openSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "open10",
                "FunctionParameter": {
                    kid: kid,
                    mode: mode,
                    mul: mul
                }
            }, function (res,err) {
                openSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.doStat("v","roulette",mul);
                        _this.updateMData(res.data.FunctionResult.data);
                        mulChestArray=res.data.FunctionResult.result;
                        for (var i=0; i<res.data.FunctionResult.result.length; ++i) {
                            var _prize = res.data.FunctionResult.result[i];
                            if (_prize>=0) {
                                var elem=caseData[_prize];
                                if (elem.t=="MUL") {
                                    data.mul3+=elem.v;
                                    _this.evalBuildings();
                                } else if (elem.t=="NRG") {
                                    var prod = data.stats.t.m.prod*elem.v;
                                    data.energy+=prod;
                                    _this.doStat("v","energy",prod);
                                    _this.doStat("v","benergy",prod);
                                    _this.doStat("m","energy",data.energy);
                                    _this.updateResearch(prod);
                                } else if (elem.t=="FOL") {
                                    _this.evalBuildings();
                                } else if (elem.t=="DIS") {
                                    data.dismul+=elem.v;
                                }
                            }
                        }
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Open failed: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var gOpenSync=false;
    this.gift = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !gOpenSync) {
            gOpenSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "gift",
                "FunctionParameter": {
                    kid: kid,
                }
            }, function (res,err) {
                gOpenSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        if (instaGift) giftCounter = 20000;
                        else giftCounter = 0.0;
                        _this.randomGift(res.data.FunctionResult.result);
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Open failed: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.mulGift = function (mul) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !gOpenSync) {
            gOpenSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "gopen10",
                "FunctionParameter": {
                    kid: kid,
                    mul: mul
                }
            }, function (res,err) {
                gOpenSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        mulGiftArray=res.data.FunctionResult.result;
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Open failed: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var placeSync=undefined;
    this.place = function (pos,id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            placeSync=pos;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "place",
                "FunctionParameter": {
                    token: kongregate.services.getGameAuthToken(),
                    kid: kid,
                    pos: pos,
                    id: id
                }
            }, function (res,err) {
                placeSync=undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFplace",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Place failed try again",
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.placePlayground = function (line,position,id) {
        document.getElementById("playgroundbg").style.display="block";
        document.getElementById("donebut").onclick=function () {
            var level=document.getElementById("level").value;
            var promotion=document.getElementById("promotion").value;
            if (level >= 1 && level <= 99 && promotion >=0 && promotion <=6) {
                data.playground[line].line[position] = id;
                data.playground[line].level[position] = level;
                data.playground[line].promo[position] = promotion;
            } else if (level >= 1000 && promotion >=0 && promotion <=6 && (level%1000) == 0 && level <= 9000) {
                data.playground[line].line[position] = id;
                data.playground[line].level[position] = level;
                data.playground[line].promo[position] = promotion;
            } else {
                popup={
                    text:"Incorrect Level or Promotion range",
                    mode:"alert",
                }
            }
            document.getElementById("playgroundbg").style.display="none";
        }
    }

    var swapSync=[];
    swapSync.push(undefined);
    swapSync.push(undefined);
    this.swap = function (pos0,pos1) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && swapSync[0]==undefined && swapSync[1]==undefined) {
            swapSync[0]=pos0;
            swapSync[1]=pos1;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "swap",
                "FunctionParameter": {
                    pos0: pos0,
                    pos1: pos1
                }
            }, function (res,err) {
                swapSync[0]=undefined;
                swapSync[1]=undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFswap",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Swap failed try again",
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.swaprow = function (pos0,pos1) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && swapSync[0]==undefined && swapSync[1]==undefined) {
            swapSync[0]=pos0;
            swapSync[1]=pos1;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "swaprow",
                "FunctionParameter": {
                    row0: Math.floor(pos0 / 6),
                    row1: Math.floor(pos1 / 6)
                }
            }, function (res,err) {
                swapSync[0]=undefined;
                swapSync[1]=undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFswap",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Swap failed try again",
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var pvesync=false;
    this.pve = function (id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            pvesync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "pve",
                "FunctionParameter": {
                    setup: data.pve[data.pveline],
                    id: id,
                    kid: kid
                }
            }, function (res,err) {
                pvesync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadPvEBattle(res.data.FunctionResult.battle);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFpve",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"PVE failed err: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var pvedsync=false;
    this.pved = function (max) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && pvedsync==false) {
            pvedsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "pved",
                "FunctionParameter": {
                    setup: data.pve[data.pveline],
                    kid: kid,
                    max: max
                }
            }, function (res,err) {
                pvedsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        var plvl=0;
                        var ptimer=Date.now();
                        if (mdata.city!==undefined && mdata.city.daily!==undefined) {
                            plvl=mdata.city.daily.lvl;
                            ptimer=mdata.city.daily.timer2;
                            _this.doStat("m","qdaily",mdata.city.daily.lvl);
                        }
                        _this.updateMData(res.data.FunctionResult.data);
                        if (mdata.city!==undefined && mdata.city.daily!==undefined && (mdata.city.daily.timer2>ptimer||plvl<mdata.city.daily.lvl)) {
                            _this.doStat("v","daily",1);
                        }
                        _this.loadDailyBattle(res.data.FunctionResult.battle);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFpved",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"PVED failed err: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var dunsync = false;
    this.dungeon = function (max) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && dunsync==false) {
            dunsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "dungeon",
                "FunctionParameter": {
                    setup: data.pve[data.pveline],
                    max: max,
                    kid: kid
                }
            }, function (res,err) {
                dunsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        CQW.dungeon.setup=res.data.FunctionResult.battle.player;
                        CQW.dungeon.hero=res.data.FunctionResult.battle.phero;
                        CQW.dungeon.lvl=parseInt(res.data.FunctionResult.battle.enemy.match(/\d+/)[0]);
                        var battle_res = _this.loadDungeonBattle(res.data.FunctionResult.battle);
                        if (battle_res.result == 1) _this.wsync(); //if the dungeon battle was lost we don't need this call, but that's something to test on a live dungeon
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFdung",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Dungeon failed err: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var freep6sync = false;
    this.instafreep6 = function (hid) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && freep6sync==false) {
            freep6sync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "freep6",
                "FunctionParameter": {
                    hid: hid,
                    kid: kid
                }
            }, function (res,err) {
                freep6sync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFfreep6",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Free p6 Failed: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.drawMonster = function (ctx,id,x,y,bstats,reverse,scale,level,available,base,prom,hide_prom) {
        reverse=reverse||false;
        scale=scale||1;
        level=level||1;
        if (available==undefined) available=true;
        if (base==undefined) base=true;
        if (prom==undefined) prom=0;
        if (hide_prom==undefined) hide_prom=false;
        if (id>=0) {
            hp=bstats==undefined?MONSTERS[id].hp:bstats.hp;
            atk=bstats==undefined?MONSTERS[id].atk:bstats.atk;
            var eSphere = ["03xz","0l2b","0cyo","0ckv"];
            var aura = ["fq9i","9b1q","ewf1","yrzo"];
            var peana = "0j89";
            if (id>=60) peana = "8hov";
            ctx.save();
            ctx.translate(x,y);
            T.draw(ctx,peana,-T.width(peana)*scale/2,-T.height(peana)*scale,T.width(peana)*scale,T.height(peana)*scale);
            if (reverse) ctx.scale(-1,1);
            T.draw(ctx,MONSTERS[id].img,-T.width(MONSTERS[id].img)*scale/2,-(T.height(MONSTERS[id].img)+10)*scale,T.width(MONSTERS[id].img)*scale,T.height(MONSTERS[id].img)*scale);
            ctx.restore();
            T.draw(ctx,eSphere[MONSTERS[id].type],x-T.width("03xz")*scale/2,y-16*scale,T.width("03xz")*scale,T.height("03xz")*scale);

            text(ctx,atk,x-18*scale,y-9*scale,Math.floor(20*scale)+"px"+FONT,atk==MONSTERS[id].atk?"white":(atk>MONSTERS[id].atk?"lime":"red"),"center","middle");
            text(ctx,hp,x+18*scale,y-9*scale,Math.floor(20*scale)+"px"+FONT,hp==MONSTERS[id].hp?"white":(hp>MONSTERS[id].hp?"lime":"red"),"center","middle");

            if (id>=120) T.draw(ctx,"3i47",x-T.width("3i47")*scale/2,y-(T.height("3i47")+10)*scale,T.width("3i47")*scale,T.height("3i47")*scale);
            else if (id>=60) T.draw(ctx,aura[MONSTERS[id].type],x-T.width(aura[MONSTERS[id].type])*scale/2,y-(T.height(aura[MONSTERS[id].type])+10)*scale,T.width(aura[MONSTERS[id].type])*scale,T.height(aura[MONSTERS[id].type])*scale);

        } else if (id<-1) {
            var hid=-id-2;
            var stats=level2stats(hid,level,prom);
            hp=bstats==undefined?stats.hp:bstats.hp;
            atk=bstats==undefined?stats.atk:bstats.atk;
            var eSphere = ["0cc2","0jhh","0ckf","0jyu","8duo"];
            var peanes = ["0bdr","084l","08h8","0luu"];
            var peana = peanes[HERO[hid].rarity];
            var sphere = eSphere[HERO[hid].type];
            ctx.save();
            ctx.translate(x,y);
            if (HERO[hid].rarity != 5){
                if (available) T.draw(ctx,peana,-T.width(peana)*scale/2,-T.height(peana)*scale,T.width(peana)*scale,T.height(peana)*scale);
                else T.negative(ctx,peana,-T.width(peana)*scale/2,-T.height(peana)*scale,T.width(peana)*scale,T.height(peana)*scale);
                if (reverse) ctx.scale(-1,1);
                if (hid==130 && scene=="prana" && mdata.city.hero[hid]!==0) {
                    T.draw(ctx,"ahqn",-T.width("ahqn")*scale/2,-(T.height("ahqn")+10)*scale,T.width("ahqn")*scale,T.height("ahqn")*scale);
                } else if (hid==130 && scene!=="prana") {
                    T.draw(ctx,"ahqn",-T.width("ahqn")*scale/2,-(T.height("ahqn")+10)*scale,T.width("ahqn")*scale,T.height("ahqn")*scale);
                }
                if (base) {
                    var iimg=HERO[hid].img;
                    var fixx = 0;
                    var fixy = 0;
                    if (iimg=="e3gv") {
                        if (lili+1*10*1000>Date.now()) iimg +="_0";
                    } else if (iimg=="hcxe") {
                        fixx = -2*scale;
                        fixy = 4*scale;
                    }
                    if (available) T.draw(ctx,iimg,-T.width(HERO[hid].img)*scale/2+fixx,-(T.height(HERO[hid].img)+15 )*scale+fixy,T.width(HERO[hid].img)*scale,T.height(HERO[hid].img)*scale);
                    else T.negative(ctx,iimg,-T.width(HERO[hid].img)*scale/2+fixx,-(T.height(HERO[hid].img)+15 )*scale+fixy,T.width(HERO[hid].img)*scale,T.height(HERO[hid].img)*scale);
                    if (hid==185) {
                        T.draw(ctx,"8tvj",-T.width(HERO[hid].img)*scale/2,-(T.height(HERO[hid].img)+15 )*scale,T.width(HERO[hid].img)*scale,T.height(HERO[hid].img)*scale);
                    }
                }
                if (available) T.draw(ctx,sphere,-T.width(sphere)*scale/2,-T.height(sphere)*scale,T.width(sphere)*scale,T.height(sphere)*scale);
                else T.negative(ctx,sphere,-T.width(sphere)*scale/2,-T.height(sphere)*scale,T.width(sphere)*scale,T.height(sphere)*scale);
                ctx.restore();
                if (HERO[hid].rarity == 3 && HERO[hid].pve!==undefined) {
                    var aura = ["fq9i","9b1q","ewf1","yrzo","3i47"];
                    T.draw(ctx,aura[HERO[hid].type],x-T.width(aura[HERO[hid].type])*scale/2,y-(T.height(aura[HERO[hid].type])+10)*scale,T.width(aura[HERO[hid].type])*scale,T.height(aura[HERO[hid].type])*scale);
                }
                if (HERO[hid].rarity == 3 && false) {
                    text(ctx,Math.ceil(atk),x-18*scale,y-9*scale,Math.floor(20*scale)+"px"+FONT,atk==stats.atk?"yellow":(atk>stats.atk?"lime":"red"),"center","middle","yellow",2);
                    if (hp>=1000) text(ctx,hp,x+18*scale,y-9*scale,Math.floor(16*scale)+"px"+FONT,hp==stats.hp?"yellow":(hp>stats.hp?"lime":"red"),"center","middle","yellow",2);
                    else text(ctx,hp,x+18*scale,y-9*scale,Math.floor(20*scale)+"px"+FONT,hp==stats.hp?"yellow":(hp>stats.hp?"lime":"red"),"center","middle","yellow",2);
                }
                else {
                    text(ctx,Math.ceil(atk),x-18*scale,y-9*scale,Math.floor(20*scale)+"px"+FONT,atk==stats.atk?"white":(atk>stats.atk?"lime":"red"),"center","middle");
                    if (hp>=1000) text(ctx,hp,x+18*scale,y-9*scale,Math.floor(16*scale)+"px"+FONT,hp==stats.hp?"white":(hp>stats.hp?"lime":"red"),"center","middle");
                    else text(ctx,hp,x+18*scale,y-9*scale,Math.floor(20*scale)+"px"+FONT,hp==stats.hp?"white":(hp>stats.hp?"lime":"red"),"center","middle");
                }
                if (level>=1000) {
                    var x1 = 0;
                    if (HERO[hid].type == 1) x1 = 0.6;
                    T.draw(ctx,"085m_"+Math.round(level/1000),x+x1-(T.width("085m_1")-1)*scale,y-16*scale,T.width("085m_1")*scale,T.height("085m_1")*scale);
                    T.draw(ctx,"0oie",x+x1,y-16*scale,T.width("0oie")*scale,T.height("0oie")*scale);
                } else if (level<10) {
                    var x1 = 0.5;
                    if (HERO[hid].type == 1) x1 = 1.1;
                    var nid="085m_"+level;
                    T.draw(ctx,nid,x+x1-T.width(nid)*scale/2,y-16*scale,T.width(nid)*scale,T.height(nid)*scale);
                } else {
                    var x1 = 0;
                    if (HERO[hid].type == 1) x1 = 0.6;
                    var nid="085m_"+Math.floor(level/10);
                    T.draw(ctx,nid,x+x1-(T.width(nid)-1)*scale,y-16*scale,T.width(nid)*scale,T.height(nid)*scale);
                    nid="085m_"+(level%10);
                    T.draw(ctx,nid,x+x1,y-16*scale,T.width(nid)*scale,T.height(nid)*scale);
                }

                if (hid==132) {
                    ctx.save();
                    ctx.translate(x,y);
                    if (reverse) ctx.scale(-1,1);
                    T.draw(ctx,"ii69",-T.width("ahqn")*scale/2,-(T.height("ahqn")+10)*scale-5,T.width("ahqn")*scale,T.height("ahqn")*scale);
                    ctx.restore();
                }

                ctx.save();
                ctx.translate(x,y);
                if (prom!==0 && scene!=="battle" && hide_prom==false) {
                    if (prom>0 && prom<5) {
                        for (var i=0; i<prom; ++i) T.draw(ctx,"l1qq",-T.width(HERO[hid].img)*scale/2-5,-(T.height(HERO[hid].img)+15 )*scale+(i*T.height("l1qq")*scale*0.65),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                    } else if (prom == 5) {
                        T.draw(ctx,"bn4f",-T.width(HERO[hid].img)*scale/2-10,-(T.height(HERO[hid].img)+15 )*scale,T.width("bn4f")*scale*0.65,T.height("bn4f")*scale*0.65);
                    } else if (prom == 6) {
                        var cx = -T.width(HERO[hid].img)*scale/2-10+T.width("e8d4")*scale*0.65*0.5;
                        var cy = -(T.height(HERO[hid].img)+15 )*scale+T.height("e8d4")*scale*0.65*0.5;
                        var grd = ctx.createRadialGradient(cx,cy,0,cx,cy,T.width("e8d4")*scale*0.65*0.5);
                        grd.addColorStop(0,"rgba(30,144,255,1)");
                        grd.addColorStop(1,"rgba(30,144,255,0)");
                        ctx.fillStyle=grd;
                        ctx.save();
                        ctx.beginPath();
                        ctx.arc(-T.width(HERO[hid].img)*scale/2-10+T.width("e8d4")*scale*0.65*0.5,-(T.height(HERO[hid].img)+15 )*scale+T.height("e8d4")*scale*0.65*0.5,T.width("e8d4")*scale*0.65*0.5,T.width("e8d4")*scale*0.65*0.4,0,2*Math.PI);
                        ctx.closePath();
                        ctx.fill();
                        ctx.restore();
                        T.draw(ctx,"e8d4",-T.width(HERO[hid].img)*scale/2-10,-(T.height(HERO[hid].img)+15 )*scale,T.width("e8d4")*scale*0.65,T.height("e8d4")*scale*0.65);
                    }
                } else if (prom!==0 && scene=="battle" && hide_prom==false) {
                    if (prom==1) T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale,-(T.height(HERO[hid].img)*1.5*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                    else if (prom==2) {
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale-15,-(T.height(HERO[hid].img)*1.48*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale+15,-(T.height(HERO[hid].img)*1.48*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                    } else if (prom==3) {
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale,-(T.height(HERO[hid].img)*1.5*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale-25,-(T.height(HERO[hid].img)*1.45*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale+25,-(T.height(HERO[hid].img)*1.45*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                    } else if (prom==4) {
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale-15,-(T.height(HERO[hid].img)*1.48*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale+15,-(T.height(HERO[hid].img)*1.48*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale-42,-(T.height(HERO[hid].img)*1.40*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                        T.draw(ctx,"l1qq",-T.width("l1qq")*0.5*0.65*scale+42,-(T.height(HERO[hid].img)*1.40*scale),T.width("l1qq")*scale*0.65,T.height("l1qq")*scale*0.65);
                    } else if (prom==5) {
                        T.draw(ctx,"bn4f",-T.width("bn4f")*0.5*0.65*scale,-(T.height(HERO[hid].img)*1.5*scale)-5,T.width("bn4f")*scale*0.65,T.height("bn4f")*scale*0.65);
                    } else if (prom==6) {
                        T.draw(ctx,"e8d4",-T.width("e8d4")*0.5*0.65*scale,-(T.height(HERO[hid].img)*1.5*scale)-5,T.width("e8d4")*scale*0.65,T.height("e8d4")*scale*0.65);
                    }
                }
                ctx.restore();
            }
            else {
                var wbScale = 0.35;
                T.draw(ctx,HERO[hid].img,-T.width(HERO[hid].img)*scale/2*wbScale+50,-(T.height(HERO[hid].img)+15 )*scale*wbScale+30,T.width(HERO[hid].img)*scale*wbScale,T.height(HERO[hid].img)*scale*wbScale);
                ctx.restore();
            }
        }
    }
    this.updateRanking = function () {
        if (ranquing==undefined) ranquing={};
        ranquing.time=Date.now();
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            PlayFab.ClientApi.GetLeaderboard({
                "StatisticName": "Ranking",
                "StartPosition": 0,
                "MaxResultsCount": 100,
            }, function (res,err) {
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.Leaderboard) {
                        ranquing.top=res.data.Leaderboard;
                        PlayFab.ClientApi.GetLeaderboardAroundPlayer({
                            "StatisticName": "Ranking",
                            "MaxResultsCount": 10,
                        }, function (res,err) {
                            if (_this.serverOk(res,err)) {
                                if (res.data && res.data.Leaderboard) {
                                    ranquing.player=res.data.Leaderboard;
                                    PlayFab.ClientApi.GetTitleData({
                                        "Keys": ["hof","tour"],
                                    }, function (res,err) {
                                        if (_this.serverOk(res,err)) {
                                            if (res.data && res.data.Data && res.data.Data.hof) {
                                                ranquing.hof=JSON.parse(res.data.Data.hof);
                                                tdata=JSON.parse(res.data.Data.tour);
                                            } else {
                                                ranquing.time-=2*60*1000;
                                                var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                                                    msg:"PFhof",
                                                    stk:res
                                                }));
                                                GA.getInstance().addEvent(ev);
                                            }
                                        }
                                    });
                                } else {
                                    ranquing.time-=2*60*1000;
                                    var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                                        msg:"PFtopX",
                                        stk:res
                                    }));
                                    GA.getInstance().addEvent(ev);
                                }
                            }
                        });
                    } else {
                        ranquing.time-=2*60*1000;
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFtop10",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.doTopSeason = function () {
        rTopSeason = [];
        for (var i = 0; i < CQWS.length; ++i) {
            for (var j = 0; j < 10; ++j) {
                var found = false;
                for (var k = 0; k < rTopSeason.length && found == false; ++k) {
                    if (rTopSeason[k].name == CQWS[i].ranking[j][0]) {
                        found = true;
                        rTopSeason[k].top.push(j);
                    }
                }
                if (!found) rTopSeason.push({name: CQWS[i].ranking[j][0], top: [j]});
            }
        }
        for (var i = 0; i < rTopSeason.length; ++i) rTopSeason[i].top.sort(sortNumber);
    }
    this.doFight = function (id) {
        oponent = id;
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "fight",
                "FunctionParameter": {
                    token: kongregate.services.getGameAuthToken(),
                    kid: kid,
                    id: id
                }
            }, function (res,err) {
                oponent = undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadPvPBattle(res.data.FunctionResult.battle);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFfight",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Fight error:"+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.loadLogBattle = function (id) {
        if (id>=0 && id<mdata.city.log.length) {
            var battle=mdata.city.log[id];
            beginBattle(battle.date,"You",battle.enemy,battle.setup,battle.player,"city",battle.shero,battle.phero,undefined,undefined,battle.spromo,battle.ppromo);
        }
    }
    this.loadPvPBattle = function (battle) {
        beginBattle(battle.date,"You",battle.enemy,battle.setup,battle.player,"ranking",battle.shero,battle.phero,undefined,undefined,battle.spromo,battle.ppromo);
        this.doAction("scene",{target:"battle"});
    }
    this.loadWBBattle = function (battle) {
        var arr=[];
        for (var i=0; i<HERO.length; ++i) arr.push(parseInt(battle.level));
        var arr2= Array(arr.length).fill(0);
        beginBattle(Date.now(),"You",battle.name+" ["+battle.level+"]",data.wb[data.wbline],battle.setup,"worldboss",mdata.city.hero,arr,undefined,undefined,mdata.city.promo,arr2);
        this.doAction("scene",{target:"battle"});
    }
    this.loadPvEBattle = function (battle) {
        beginBattle(battle.date,"You",battle.enemy,battle.setup,battle.player,"pve",battle.shero,battle.phero,undefined,undefined,battle.spromo,battle.ppromo);
        this.doAction("scene",{target:"battle"});
    }
    this.loadDailyBattle = function (battle) {
        beginBattle(battle.date,"You",battle.enemy,battle.setup,battle.player,"pved",battle.shero,battle.phero,undefined,undefined,battle.spromo,battle.ppromo);
        this.doAction("scene",{target:"battle"});
    }
    this.loadDungeonBattle = function (battle) {
    	var res = beginBattle(battle.date,"You",battle.enemy,battle.setup,battle.player,"buildings",battle.shero,battle.phero,undefined,undefined,battle.spromo,battle.ppromo);
        this.doAction("scene",{target:"battle"});
        return res;
    }
    this.loadPlaygroundBattle = function (battle) {
        beginBattle(battle.date,"Player 01","Player 02",battle.rowA,battle.rowB,battle.back,battle.heroA,battle.heroB,undefined,undefined,battle.promoA,battle.promoB);
        this.doAction("scene",{target:"battle"});
    }
    this.loadPlaygroundWB = function (battle) {
        var arr=[];
        for (var i=0; i<HERO.length; ++i) arr.push(parseInt(battle.level));
        beginBattle(battle.date,"Player " + (simwbplayer+1),battle.name+" ["+battle.level+"]",battle.rowA,battle.rowB,battle.back,battle.heroA,arr,undefined,undefined,battle.promoA,battle.promoB);
        this.doAction("scene",{target:"battle"});
    }
    this.loadHalloweenBattle = function (battle) {
        var arr2= Array(HERO.length).fill(0);
        beginBattle(battle.date,"You",battle.enemy,battle.setup,battle.player,"buildings",battle.shero,battle.phero,undefined,undefined,arr2,arr2);
        this.doAction("scene",{target:"battle"});
    }
    this.tournamentReplay = function (tbattle) {
        var stack = undefined;
        for (var i=4; i>=0; --i) {
            stack = [
                tbattle.date,
                tbattle.left,
                tbattle.right,
                tbattle.setup.slice(i*6,(i+1)*6),
                tbattle.player.slice(i*6,(i+1)*6),
                "tournaments",
                tbattle.shero,
                tbattle.phero,
                {
                    title: tbattle.title,
                    row: i+1,
                    winner: tbattle.winner,
                    awin: 0,
                    admg: 0,
                    bwin: 0,
                    bdmg: 0,
                    draw: 0
                },
                stack,
                tbattle.spromo,
                tbattle.ppromo,
                tbattle.grid?tbattle.grid.slice(i*6,(i+1)*6):undefined,
                tbattle.vals?tbattle.vals.slice(i*6,(i+1)*6):undefined,
            ]
        }
        beginBattle(stack[0],stack[1],stack[2],stack[3],stack[4],stack[5],stack[6],stack[7],stack[8],stack[9],stack[10],stack[11],stack[12],stack[13]);
        this.doAction("scene",{target:"battle"});
    }
    this.flashReplay = function (LEFT,RIGHT) {
        var stack = undefined;
        for (var i=2; i>=0; --i) {
            stack = [
                CQW.flash.history[showFlash].date,
                LEFT.name,
                RIGHT.name,
                LEFT.setup.slice(i*6,(i+1)*6),
                RIGHT.setup.slice(i*6,(i+1)*6),
                "buildings",
                CQW.flash.history[showFlash].hero,
                CQW.flash.history[showFlash].hero,
                {
                    title: "Flash Tournament Replay",
                    row: i+1,
                    winner: 0,
                    awin: 0,
                    admg: 0,
                    bwin: 0,
                    bdmg: 0,
                    draw: 0
                },
                stack
            ]
        }
        beginBattle(stack[0],stack[1],stack[2],stack[3],stack[4],stack[5],stack[6],stack[7],stack[8],stack[9]);
        this.doAction("scene",{target:"battle"});
    }
    this.loadHofBattle = function (id) {
        try {
            var battle=ranquing.hof[hofTab][id];
            beginBattle(battle.date,battle.left,battle.enemy,battle.setup,battle.player,"ranking",battle.shero,battle.phero,undefined,undefined,battle.spromo,battle.ppromo);
        } catch(e) {

        }
    }
    

    this.spinner = function (ctx,x,y,size) {
        ctx.save();
        ctx.translate(x,y);
        ctx.rotate(spin/100);
        T.draw(ctx,"07kr",-size/2,-size/2,size,size);
        ctx.restore();
    }
    this.getCitySpent = function () {
        var c=0;
        if (mdata!==undefined && mdata.city!==undefined && mdata.city.setup!=undefined) {
            for (var i=0; i<mdata.city.setup.length; ++i) {
                if (mdata.city.setup[i]>=0) c+=MONSTERS[mdata.city.setup[i]].cost;
            }
        }
        return c;
    }
    this.getPveSpent = function () {
        var c=0;
        if (data.pve[data.pveline]!=undefined) {
            for (var i=0; i<data.pve[data.pveline].length; ++i) {
                if (data.pve[data.pveline][i]>=0) c+=MONSTERS[data.pve[data.pveline][i]].cost;
            }
        }
        return c;
    }
    this.getWbSpent = function () {
        var c=0;
        if (data.wb!==undefined && data.wb[data.wbline]!=undefined) {
            for (var i=0; i<data.wb[data.wbline].length; ++i) {
                if (data.wb[data.wbline][i]>=0) c+=MONSTERS[data.wb[data.wbline][i]].cost;
            }
        }
        return c;
    }
    this.getTournamentSpent = function () {
        var c=0;
        if (data.tour.setup[tournamentid]!=undefined) {
            for (var i=0; i<data.tour.setup[tournamentid].length; ++i) {
                if (data.tour.setup[tournamentid][i]>=0) c+=MONSTERS[data.tour.setup[tournamentid][i]].cost;
            }
        }
        return c;
    }
    this.getPvPSpent = function () {
        var c=0;
        if (mdata!=undefined) {
            for (var i=0; i<mdata.city.setup.length; ++i) {
                if (mdata.city.setup[i]>=0) c+=MONSTERS[mdata.city.setup[i]].cost;
            }
        }
        return c;
    }
    this.getFlashSpent = function () {
        var c=0;
        if (data.flash!==undefined && data.flash.setup!==undefined) {
            for (var i=0; i<data.flash.setup.length; ++i) {
                if (data.flash.setup[i]>=0) c+=MONSTERS[data.flash.setup[i]].cost;
            }
        }
        return c;
    }
    this.joinedTour = function () {
    	if (CQW == undefined) this.wsync();
        if (tournamentid==0) {
        	if (_this.isEnabled("tournaments")) return CQW!==undefined&&CQW.tournament!==undefined&&CQW.tournament.joined!==undefined&&CQW.tournament.joined;
        } else if (tournamentid==1) {
            return CQW.tour!==undefined &&CQW.tour.current!==undefined&&CQW.tour.current.joined;
        }
        return false;
    }
    this.canJoinFlash = function () {
        if (mdata.city.flash!==undefined) {
            if (mdata.city.flash<Date.now() && !CQW.flash.current.joined) return true;
            else return false;
        }
        return false;
    }
    this.evalEventQueue = function () {
        if (mdata!==undefined && mdata.city!==undefined) {
            var active=[];
            for (var i=0; i<equeue.length; ++i) {
                active.push(equeue[i].id);
            }
            for (var i=0; i<EVENTS.length; ++i) {
                var pos=active.indexOf(EVENTS[i].id);
                var key=EVENTS[i].id.replace(/[0-9]/g, '');
                var isActive=EVENTS[i].active();
                var isAllowed=data.notifications[key]<Date.now();
                if (pos===-1 && isActive && isAllowed) {
                    equeue.push({
                        id: EVENTS[i].id,
                        icon: EVENTS[i].icon,
                        text: EVENTS[i].text,
                        action: EVENTS[i].action,
                        extra: EVENTS[i].extra,
                        notify: EVENTS[i].notify,
                    })
                } else if (pos!==-1 && (!isActive||!isAllowed)) {
                    equeue.splice(pos,1);
                }
            }
        }
    }
    this.isEnabled = function (scene) {
        var any=false;
        if (mdata !== undefined) {
            for (var i=3;i<HERO.length;++i) {
                if (mdata.city.hero[i] != 0) any=true;
            }
        }

        if (scene=="buildings") return true;
        else if (scene=="quantum") return data.stats.t.t.e2!=0;
        else if (scene=="ed") return data.stats.t.t.e4!=0;
        else if (scene=="experiment") return data.stats.t.t.e1!=0;
        else if (scene=="galaxies") return data.stats.t.t.e3!=0;
        else if (scene=="dimensions") return data.specie==14;
        else if (scene=="miracles") return data.stats.t.v.ascension!=0;
        else if (scene=="roulette") return data.stats.t.v.ascension!=0;
        else if (scene=="milestones") return data.stats.t.v.ascension!=0;
        else if (scene=="city") return mdata!=undefined && mdata.followers>=4000;
        else if (scene=="ranking") return mdata!=undefined;
        else if (scene=="battle") return true;
        else if (scene=="pve") return mdata!=undefined && mdata.followers>=4000 && mdata.city!=undefined && mdata.city.quests!=undefined;
        else if (scene=="pved") return mdata!=undefined && mdata.followers>=4000 && mdata.city!=undefined;
        else if (scene=="tournaments") return mdata!=undefined && mdata.followers>=5000;
        else if (scene=="prana") return mdata!=undefined && any;
        else if (scene=="worldboss") return mdata!=undefined && mdata.followers>=4000 && mdata.city!=undefined;
    }
    this.updateCurrency=function (val) {
        UM=val;
    }
    this.updateCurrencies=function (val,NBKS) {
        UM=val.UM;
        BK=val.BK;
        PK=val.PK;
        KU=val.KU;
        PG=val.PG;
        CC=val.CC;
        AS=val.AS;
        SD=val.SD;
        BKS=NBKS;
        ZG=val.ZG;
        ET=val.ET;
    }
    this.getHC = function () {
        return UM;
    }
    this.getSD = function () {
        return SD;
    }
    this.getShopText = function (id) {
        if (id=="mul1") return "Next: x"+this.pn(this.getPremium(1),"",true);
        else if (id=="mul5") return "Next: x"+this.pn(this.getPremium(5),"",true);
        else if (id=="mul15") return "Next: x"+this.pn(this.getPremium(15),"",true);
        else if (id=="fol1") return "Next: x"+this.pn(this.getFmul(1),"",true);
        else if (id=="fol5") return "Next: x"+this.pn(this.getFmul(5),"",true);
        else if (id=="fol15") return "Next: x"+this.pn(this.getFmul(15),"",true);
        else if (id=="tt3") return this.pn(data.stats.t.m.prod*24*60*60*3,"J");
        else if (id=="tt7") return this.pn(data.stats.t.m.prod*24*60*60*7,"J");
        else if (id=="tt14") return this.pn(data.stats.t.m.prod*24*60*60*14,"J");
        else if (id=="bc2") return this.pn(this.getOmegas(2),"\u03A9");
        else if (id=="bc5") return this.pn(this.getOmegas(5),"\u03A9");
        else if (id=="bc12") return this.pn(this.getOmegas(12),"\u03A9");

        return id;
    }
    var purchasing=undefined;
    
    this.purchase = function (id,uid,price) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && purchasing==undefined) {
            purchasing=uid;
            PlayFab.ClientApi.PurchaseItem({
                "ItemId": id,
                "VirtualCurrency": "UM",
                "Price": price,
            }, function (res,err) {
                purchasing = undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.Items) {
                        _this.updateCurrency(_this.getHC()-price);
                        if (id=="BK1" ||id=="BK11"||id=="BK25"||id=="CS1"||id=="CS2"||id=="CS3"||id=="CS4") {
                            _this.loadInventory();
                        } else {
                            _this.updateItems(res.data.Items);
                        }
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFpurchase",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Purchase error:"+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }

    this.purchase2 = function (id,uid,price) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && purchasing==undefined) {
            purchasing=uid;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "purchaseBundle",
                "FunctionParameter": {
                    "bundle":id,
                }
            }, function (res,err) {
                purchasing = undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateCurrency(_this.getHC()-price);
                        if (id=="BK1" ||id=="BK11"||id=="BK25") {
                            _this.loadInventory();
                        }
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFpurchase2",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Purchase2 error:"+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }

    this.purchaseSD = function (id,uid,price) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && purchasing==undefined) {
            purchasing=uid;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "purchaseBundle",
                "FunctionParameter": {
                    "bundle":id,
                }
            }, function (res,err) {
                purchasing = undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        //_this.updateCurrency(_this.getSD()-parseInt(price));
                        _this.loadInventory();
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFpurchase",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Purchase error:"+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.purchaseFOL = function (id,uid) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && purchasing==undefined) {
            purchasing=uid;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "pur",
                "FunctionParameter": {
                    "id":id,
                }
            }, function (res,err) {
                purchasing = undefined;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        //_this.updateCurrency(_this.getSD()-parseInt(price));
                        _this.loadInventory();
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFpurchase",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Purchase error:"+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }

    var toConsume=[];
    this.updateItems = function (items) {
        for (var i=0; i<items.length; ++i) {
            var type=items[i].ItemId;
            if (type=="FOL") data.premiumF=items[i].RemainingUses;
            else if (type=="MUL") data.premium2=items[i].RemainingUses;
            else if (type=="RES") data.premiumR=2;
            else if (type=="FOL5"||type=="FOL15") {}
            else if (type=="MUL5"||type=="MUL15") {}
            else if (type=="TT3"||type=="TT7"||type=="TT14"||type=="FALL"||type=="BC2"||type=="BC5"||type=="BC12") toConsume.push(items[i]);
        }
        this.consumeItems();
    }
    var consuming=false;
    this.consumeItems = function () {
        if (toConsume.length>0) {
            if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !consuming) {
                consuming=true;
                var elem=toConsume.pop();
                PlayFab.ClientApi.ConsumeItem({
                    "ItemInstanceId": elem.ItemInstanceId,
                    "ConsumeCount": 1
                }, function (res,err) {
                    consuming=false;
                    if (_this.serverOk(res,err)) {
                        if (res.data) {
                            if (elem.ItemId=="TT3") _this.doItem("tt3");
                            else if (elem.ItemId=="TT7") _this.doItem("tt7");
                            else if (elem.ItemId=="TT14") _this.doItem("tt14");
                            else if (elem.ItemId=="BC2") _this.doItem("bc2");
                            else if (elem.ItemId=="BC5") _this.doItem("bc5");
                            else if (elem.ItemId=="BC12") _this.doItem("bc12");
                            else if (elem.ItemId=="FALL") _this.doItem("fall");
                        } else {
                            var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                                msg:"PFconsume",
                                stk:res
                            }));
                            GA.getInstance().addEvent(ev);
                            popup={
                                text:"Consume error:"+res.data.FunctionResult.err,
                                mode:"alert",
                            }
                        }
                    }
                    _this.consumeItems();
                });
            }
        }
    }
    this.doItem = function (id) {
        if (id=="tt3") {
            var prod = data.stats.t.m.prod*24*60*60*3;
            data.energy+=prod;
            this.doStat("v","energy",prod);
            this.doStat("v","benergy",prod);
            this.doStat("m","energy",data.energy);
            this.updateResearch(prod);
        } else if (id=="tt7") {
            var prod = data.stats.t.m.prod*24*60*60*7;
            data.energy+=prod;
            this.doStat("v","energy",prod);
            this.doStat("v","benergy",prod);
            this.doStat("m","energy",data.energy);
            this.updateResearch(prod);
        } else if (id=="tt14") {
            var prod = data.stats.t.m.prod*24*60*60*14;
            data.energy+=prod;
            this.doStat("v","energy",prod);
            this.doStat("v","benergy",prod);
            this.doStat("m","energy",data.energy);
            this.updateResearch(prod);
        } else if (id=="bc2") {
            var newOmega = this.getOmegas(2);
            data.omega +=  newOmega;
            var e=data.stats.t.v.energy;
            var o=data.stats.t.v.gomega;
            var y=newOmega;
            var x = bn(8.5,5)*(o*o+2*o*y+2*o+y*y+2*y+1);
            this.doStat("v","energy",x-e);
            this.doStat("v","gomega",newOmega);
        } else if (id=="bc5") {
            var newOmega = this.getOmegas(5);
            data.omega +=  newOmega;
            var e=data.stats.t.v.energy;
            var o=data.stats.t.v.gomega;
            var y=newOmega;
            var x = bn(8.5,5)*(o*o+2*o*y+2*o+y*y+2*y+1);
            this.doStat("v","energy",x-e);
            this.doStat("v","gomega",newOmega);
        } else if (id=="bc12") {
            var newOmega = this.getOmegas(12);
            data.omega +=  newOmega;
            var e=data.stats.t.v.energy;
            var o=data.stats.t.v.gomega;
            var y=newOmega;
            var x = bn(8.5,5)*(o*o+2*o*y+2*o+y*y+2*y+1);
            this.doStat("v","energy",x-e);
            this.doStat("v","gomega",newOmega);
        } else if (id=="fall") {
            for (var li=0; li<data.lab.length; ++li) {
                this.doAction("Collect",{target:li});
            }
        }
        this.save();
    }
    var inventorySync=false;
    this.loadInventory = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !inventorySync) {
            inventorySync=true;
            PlayFab.ClientApi.GetUserInventory({
            }, function (res,err) {
                inventorySync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data) {
                        data.premiumF=0;
                        data.premium2=0;
                        if (data.premiumR==2) data.premiumR=0;
                        _this.updateCurrencies(res.data.VirtualCurrency,res.data.VirtualCurrencyRechargeTimes.BK.SecondsToRecharge);
                        _this.updateItems(res.data.Inventory);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFloadinv",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                        popup={
                            text:"Inventory error:"+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
                _this.consumeItems();
            });
        }
    }
    var evoSync=false;
    this.notifyEvolution = function (cb) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !evoSync) {
            evoSync=true;
            var cs=data.specie;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "evolution",
                "FunctionParameter": {
                    "species":cs,
                    "omega":data.stats.t.v.gomega,
                    "energy":data.stats.t.v.energy,
                }
            }, function (res,err) {
                evoSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        data.maxe=Math.max(data.maxe,cs);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFevo",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var rpveSync=false;
    this.resetpve = function (cb) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !rpveSync) {
            rpveSync=true;
            var cs=data.specie;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "resetpve",
                "FunctionParameter": {}
            }, function (res,err) {
                rpveSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFrpve",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }

    var panicSync=false;
    this.panic = function (cb) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !panicSync) {
            panicSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "panic",
                "FunctionParameter": {}
            }, function (res,err) {
                panicSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        data.stats.t.v.energy=Math.max(data.stats.t.v.energy,res.data.FunctionResult.energy);
                        data.stats.t.v.gomega=Math.max(data.stats.t.v.gomega,res.data.FunctionResult.omega);
                    } else {
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFrpve",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var claimHSync=false;
    this.claimH = function (id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !claimHSync) {
            claimHSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "claimH",
                "FunctionParameter": {
                    id: id
                }
            }, function (res,err) {
                claimHSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFclaimh",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var lvlupSync=false;
    this.levelup = function (id,mode) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !lvlupSync) {
            lvlupSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "levelUp",
                "FunctionParameter": {
                    id: id,
                    mode: mode==undefined?"PG":"CC"
                }
            }, function (res,err) {
                lvlupSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFlevelup",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.levelup10 = function (id,mode) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !lvlupSync) {
            lvlupSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "levelUp10",
                "FunctionParameter": {
                    id: id,
                    mode: mode==undefined?"PG":"CC"
                }
            }, function (res,err) {
                lvlupSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFlevelup",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.levelupmax = function (id,mode) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !lvlupSync) {
            lvlupSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "levelUpMax",
                "FunctionParameter": {
                    id: id,
                    mode: mode==undefined?"PG":"CC"
                }
            }, function (res,err) {
                lvlupSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFlevelup",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.leveldev = function (id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !lvlupSync) {
            lvlupSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "levelDev",
                "FunctionParameter": {
                    id: id,
                }
            }, function (res,err) {
                lvlupSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFleveldev",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }    
    }

    this.levelsuper = function (id,mode,multi) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !lvlupSync) {
            lvlupSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "levelSuper",
                "FunctionParameter": {
                    id: id,
                    mode: mode,
                    multi: multi,
                }
            }, function (res,err) {
                lvlupSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFlevelsuper",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var ascendSync = false;
    this.ascendhero = function (id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !ascendSync) {
            ascendSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "ascendHero",
                "FunctionParameter": {
                    id: id,
                }
            }, function (res,err) {
                ascendSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFascendhero",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }

    var toPgSync = false;
    this.topg = function (multiple,max,x100) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !toPgSync) {
            toPgSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "toPG",
                "FunctionParameter": {
                    multiple: multiple,
                    max: max,
                    x100: x100,
                }
            }, function (res,err) {
                toPgSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFtopg",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var toCCSync = false;
    this.tocc = function (multiple,max,x100) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !toCCSync) {
            toCCSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "toCC",
                "FunctionParameter": {
                    multiple: multiple,
                    max: max,
                    x100: x100,
                }
            }, function (res,err) {
                toCCSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFtocc",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }

    var registerSync=false;
    this.register = function (setup,id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !registerSync) {
            registerSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "register",
                "FunctionParameter": {
                    setup: setup,
                    id: id,
                    kid: kid
                }
            }, function (res,err) {
                registerSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFregister",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.etregister = function (setup) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !registerSync) {
            registerSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "etregister",
                "FunctionParameter": {
                    setup: setup,
                    kid: kid
                }
            }, function (res,err) {
                registerSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFetregister",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.cltour = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !registerSync) {
            registerSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "cltour",
            }, function (res,err) {
                registerSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFcltour",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.etcltour = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !registerSync) {
            registerSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "etcltour",
            }, function (res,err) {
                registerSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFetcltour",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var registerSync=false;
    this.fregister = function (setup,tid) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !registerSync) {
            registerSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "fregister",
                "FunctionParameter": {
                    setup: setup,
                    kid: kid,
                    tid: tid
                }
            }, function (res,err) {
                registerSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFfregister",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var voteSync=false;
    this.vote = function (setup) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !voteSync) {
            voteSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "vote",
                "FunctionParameter": {
                    vote: pollVote,
                    kid: kid
                }
            }, function (res,err) {
                voteSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.loadInventory();
                        _this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFvote",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.skill2text = function (skill,lvl,wb,promote,plvl,value) {
        //var ttext="All";
    	var stats = level2stats(skill.hid,lvl,plvl);
        lvl = Math.min(99,lvl);
        if (value===undefined) value=skill.value;
        if (promote!==undefined && plvl>=5 && wb!==true) value+=promote;
        var ttext="";
        if (skill.target==0) ttext="Air";
        else if (skill.target==1) ttext="Earth";
        else if (skill.target==2) ttext="Fire";
        else if (skill.target==3) ttext="Water";
        else if (skill.target==4) ttext="Void";
        if (skill.type=="def") {
            return {
                short: ttext+" Aura/n+"+value+" Armor",
                long: "Armor decreases the amount of direct damage a hero receives, by the value. Auras affect all friendly units until the unit with the aura dies.",
            }
        } else if (skill.type=="dmg") {
            return {
                short: ttext+" Aura/n+"+value+" Attack",
                long: "Attack increases the amount of direct damage a hero deals, by the value. Auras affect all friendly units until the unit with the aura dies.",
            }
        } else if (skill.type=="buffpatk") {
            return {
                short: ttext+" Aura/n+"+(value*100).toFixed(0)+"% Attack",
                long: "Attack percentage increases the amount of direct damage a hero deals, by the percentage, when it attacks. Auras affect all friendly units until the unit with the aura dies. ",
            }
        } else if (skill.type=="aoe") {
            return {
                short: "AoE/n"+value+" Damage per turn",
                long: "AoE (Area of Effect) deals the amount of damage, every turn, to each enemy unit.",
            }
        } else if (skill.type=="paoe") {
            return {
                short: "Black Hole(AoE) - Start of Battle/nDeals "+value+" Damage ("+(lvl/(1/value)).toFixed(0)+") per 1 level to all enemies",
                long: "Black Hole (Area of Effect) Deals the amount of damage, once at the start of the battle, to each enemy unit.",
            }
        } else if (skill.type=="heal") {
            return {
                short: "AoE Heal/n"+value+" Health per turn",
                long: "AoE (Area of Effect) Heal will heal that amount of health, every turn, to each friendly unit.",
            }
        } else if (skill.type=="healfirst") {
            return {
                short: "Targeted Heal/n"+value+" Health per turn to first unit",
                long: "Targeted Heal will heal that amount of health, every turn, to the specified unit.",
            }
        } else if (skill.type=="buff") {
            return {
                short: "Amplify/n"+value.toFixed(2)+"x Attack per Attack",
                long: "Amplify increases the units attack, by the value, after every attack.",
            }
        } else if (skill.type=="mon") {
            return {
                short: "Amplify - Start of Battle/n"+value.toFixed(2)+"x Attack per monster behind",
                long: "Amplify - Start of Battle increases the units attack at the start of battle. The units attack increases by the value, for every monster behind it.",
            }
        } else if (skill.type=="extra") {
            return {
                short: ttext+" Aura/n+"+value+" Attack & +"+value+" Armor",
                long: "Armor decreases the amount of direct damage a hero receives, by the value, when it is attacked. Attack increases the amount of direct damage a hero deals, by the value, when it attacks. Auras affect all friendly units until the unit with the aura dies.",
            }
        } else if (skill.type=="purity") {
            return {
                short: "Empowered/n "+value+"x Damage against "+ttext,
                long: "Empowered causes this unit to deal increased damage under certain circumstances. This unit deals increased damage equal to the multiplier to units of the same element.",
            }
        } else if (skill.type=="turna") {
            if (value<0) return {
                short: "Amplify/n"+value+" Attack per turn",
                long: "Amplify per turn increases or decreases the units attack, by the value, after every turn.",
            }
            else return {
                short: "Amplify/n+"+value+" Attack per turn",
                long: "Amplify per turn increases the units attack, by the value, after every turn.",
            }
        } else if (skill.type=="rainbow") {
            return {
                short: "Empowered/n+"+value+" Attack if 4 unique elements are behind",
                long: "Empowered causes this unit to deal increased damage under certain circumstances. This unit deals increased damage if there is a unit of all 4  elements behind it. (Fire, Water, Air, Earth)",
            }
        } else if (skill.type=="ban") {
            return {
                short: "Masochism/nLoses "+(100/value).toFixed(0)+"% HP after attacking",
                long: "Masochism causes this unit to deal damage to itself. This unit deals damage to itself equal to a percentage of its health after attacking",
            }
        } else if (skill.type=="boom") {
            return {
                short: "AoE Revenge/n"+(value*100).toFixed(0)+"% Attack ("+(stats.atk*value).toFixed(0)+") on death",
                long: "AoE (Area of Effect) Revenge causes this unit to trigger an action upon death. This unit deals damage to all enemies (AoE) equal to a percentage of its attack upon death.",
            }
        } else if (skill.type=="buffatk") {
            return {
                short: ttext+" Aura/n+1 Attack ("+Math.floor(lvl/(1/value)).toFixed(0)+") per "+(1/value).toFixed(1)+" levels",
                long: "Attack increases the amount of direct damage a hero deals, by the value, when it attacks. Auras affect all units until the unit with the aura dies. The attack value increases based on the level of this unit.",
            }
        } else if (skill.type=="buffdef") {
            return {
                short: ttext+" Aura/n+1 Armor ("+Math.floor(lvl/(1/value)).toFixed(0)+") per "+(1/value).toFixed(1)+" levels",
                long: "Armor decreases the amount of direct damage a hero receives, by the value, when it is attacked. Auras affect all units until the unit with the aura dies. The armor value increases based on the level of this unit.",
            }
        } else if (skill.type=="buffboth") {
            return {
                short: ttext+" Aura/n+1 Attack & +1 Armor ("+Math.floor(lvl/(1/value)).toFixed(0)+") per "+(1/value).toFixed(1)+" levels",
                long: "Armor decreases the amount of direct damage a hero receives, by the value, when it is attacked. Attack increases the amount of direct damage a hero deals, by the value, when it attacks. Auras affect all friendly units until the unit with the aura dies. The attack and armor value increases based on the level of this unit.",
            }
        } else if (skill.type=="buffaoe") {
            return {
                short: "AoE/n1 Damage ("+Math.floor(lvl/(1/value)).toFixed(0)+") per "+(1/value).toFixed(1)+" levels per turn",
                long: "AoE (Area of Effect) deals the amount of damage, every turn, to each enemy unit. This amount of damage increases based on the level of this unit.",
            }
        } else if (skill.type=="buffahe") {
            return {
                short: "AoE & Heal/n1 Damage & 1 Health ("+Math.floor(lvl/(1/value)).toFixed(0)+") per "+(1/value).toFixed(1)+" levels per turn",
                long: "AoE (Area of Effect) deals the amount of damage, every turn, to each enemy unit. AoE (Area of Effect) Heal heals the amount of health, every turn, to each friendly unit. This unit does both.",
            }
        } else if (skill.type=="buffheal") {
            return {
                short: "AoE Heal/n1 Health ("+Math.floor(lvl/(1/value)).toFixed(0)+") per "+(1/value).toFixed(1)+" levels per turn",
                long: "AoE (Area of Effect) Heal heals the amount of health, every turn, to each friendly unit. The heal value increases based on the level of this unit.",
            }
        } else if (skill.type=="rico") {
            return {
                short: "AoE Ricochet/n"+skill.target+" Target"+(skill.target>1?"s":"")+" - "+(value*100).toFixed(0)+"% Damage",
                long: "Ricochet causes direct damage to bounce to the target behind for a reduced value. Ricochet will continue bouncing with a reduced value until it hits the amount of targets specified in this skill after the original hit./n/n(Hint: Armor lowers the initial damage you take from Ricochet, thus all bounces are reduced).",
            }
        } else if (skill.type=="debuff") {
            if (wb) return {
                short: "Dampen/n-"+((value*100).toFixed(2))+"% to AoE skills",
                long: "Dampen decreases the amount of damage enemy units deal with AoE (Area of Effect) skills.",
            }
            else return {
                short: "Dampen/n-"+((value*100).toFixed(2))+"% (-"+(lvl*(value*100)).toFixed(1)+"%) per level to enemy AoE skills",
                long: "Dampen decreases the amount of damage enemy units deal with AoE (Area of Effect0 skills. The dampen value increases based on the level of this unit.",
            }
        } else if (skill.type=="ratio") {
            if (value==0) return {
                short: "Even Field(AoE) - Start of Battle/nDeals % damage to all enemies when outnumbered",
                long: "Even Field will lower the health of all enemies, once, at the start of the battle based on the amount of enemies this unit is facing compared to the amount of friendly units this unit has. All enemies health will be lowered to a value that is equal in percentage to the amount of units this units team is outnumbered by./n/nFor example: If this unit is alone, facing 5 enemy units, it will lower them all to 1/5th health. If this unit is with 3 other units, facing 6 units (4v6) it will lower them all to 4/6ths (2/3rds) health",
            }
            else return {
                short: "Even Field(AoE) - Start of Battle/nDeals % damage to all enemies(+1) when outnumbered",
                long: "Even Field will lower the health of all enemies, once, at the start of the battle based on the amount of enemies this unit is facing compared to the amount of friendly units this unit has. All enemies health will be lowered to a value that is equal in percentage to the amount of units this units team is outnumbered by./n/nFor example: If this unit is alone, facing 5 enemy units, it will lower them all to 1/5th health. If this unit is with 3 other units, facing 6 units (4v6) it will lower them all to 4/6ths (2/3rds) health. The Promo5 buff to this skill causes it to function as if the enemy has 1 more unit than they do.",
            }
        } else if (skill.type=="evo") {
            return {
                short: "Empowered/nPer level stats x"+value+" in combat",
                long: "Empowered causes this unit to be more powerful under certain circumstances. This unit will have its stats gained per level increased by the value when it is in combat.",
            }
        } else if (skill.type=="counter") {
            return {
                short: "Reflect/n"+(value*100).toFixed(0)+"% direct damage received",
                long: "Reflect causes this unit to deal a percentage of the direct damage it takes back to the unit that dealt the damage.",
            }
        } else if (skill.type=="ratk") {
            return {
                short: "Gamble - Start of Battle/nGains +0-"+(value).toFixed(0)+" Attack & Health",
                long: "Gamble causes this skill to have an element of randomness. This unit will gain an amount of Attack & Health at the start of battle within the range. Whilst this is random, the same battles will always have the same outcome.",
            }
        } else if (skill.type=="rtrg") {
            if (value==0) return {
                short: "Gamble/nAttacks hit a random enemy",
                long: "Gamble causes this skill to have an element of randomness. This unit will attack a random enemy unit with each attack. Whilst this is random, the same battles will always have the same outcome.",
            }
            else return {
                short: "Gamble/nAttacks hit a random enemy (ignores 1st unit)",
                long: "Gamble causes this skill to have an element of randomness. This unit will attack a random enemy unit, that is not the first enemy unit, with each attack. Whilst this is random, the same battles will always have the same outcome.",
            }
        } else if (skill.type=="rcrit") {
            return {
                short: "Gamble/nAttacks have a "+(100/skill.target).toFixed(2)+"% chance to deal "+value+"x damage",
                long: "Gamble causes this skill to have an element of randomness. This unit has a chance to direct damage equal to the multiplier with each attack. Whilst this is random, the same battles will always have the same outcome.",
            }
        } else if (skill.type=="moob") {
            return {
                short: "AoE & On Kill/n"+(value)+" when killing a unit",
                long: "AoE (Area of Effect) & On Kill causes this unit to perform an Area of Effect action when it kills another unit with direct damage. This unit will deal damage to all enemies equal to the damage value every time it kills another unit with a direct damage attack.",
            }
        } else if (skill.type=="amoob") {
            return {
                short: "AoE & On Kill/n "+(value).toFixed(0)+" Damage ("+(lvl/3)*value.toFixed(0)+") per "+3+" levels when killing a unit",
                long: "AoE (Area of Effect) & On Kill causes this unit to perform an Area of Effect action when it kills another unit with direct damage. This unit will deal damage to all enemies equal to the damage value every time it kills another unit with a direct damage attack. The damage value increases based on the level of this unit.",
            }
        } else if (skill.type=="tank") {
            return {
                short: "Dampen/nAbsorbs "+(value*100).toFixed(0)+"% of direct damage taken by front unit",
                long: "Dampen decreases the amount of damage enemies do. In this case, this is done through absorbing a percentage of the direct damage taken by the front unit.",
            }
        } else if (skill.type=="elem") {
            return {
                short: "Empowered/n"+((value+1.5)).toFixed(2)+"x Damage against "+ttext,
                long: "Empowered causes this unit to deal increased damage under certain circumstances. This unit deals increased damage equal to the multiplier to units of the same element.",
            }
        } else if (skill.type=="dampen") {
            return {
                short: "Dampen/nIgnores attacks over "+value+" damage",
                long: "Dampen decreases the amount of damage enemies do. In this case, this is done through ignoring attacks that deal damage greater than the value of damage displayed.",
            }
        } else if (skill.type=="explosion") {
            return {
                short: "Revenge/n"+value+" Damage on death",
                long: "Revenge causes this unit to trigger an action upon death. This unit deals damage to the first enemy equal to the value of damage displayed upon death.",
            }
        } else if (skill.type=="leech") {
            return {
                short: "Leech/nHeals "+(value*100).toFixed(0)+"% of Attack on Attack",
                long: "Leech causes direct damage attacks to heal this unit for a percentage of the damage dealt with each direct damage attack.",
            }
        } else if (skill.type=="evolve") {
            return {
                short: "Empowered/nGains "+(value*100).toFixed(0)+"% direct damage received as Attack",
                long: "Empowered causes this unit to be more powerful under certain circumstances. This unit will gain attack equal to a percentage of the direct damage received.",
            }
        } else if (skill.type=="anarchy") {
            return {
                short: "Targeted Reflect/n"+(value*100).toFixed(0)+"% direct damage, dealt to highest HP enemy",
                long: "Reflect causes this unit to deal a percentage of the direct damage it takes to another unit. This unit directs the reflected damage to the enemy with the highest HP.",
            }
        } else if (skill.type=="otk") {
            return {
                short: "Execute/nKills enemies below "+(value*100).toFixed(0)+"% HP after attacking them",
                long: "Execute causes attacks to kill enemies if they are below the displayed percentage of health after being attacked by this unit.",
            }
        } else if (skill.type=="armor") {
            return {
                short: "Dampen/nReceives "+(value*100).toFixed(0)+"% ("+(lvl/skill.target*value*100).toFixed(1)+")% less direct damage per "+(skill.target)+" levels",
                long: "Dampen decreases the amount of damage enemies do. In this case, this unit receives a percentange less direct damage. This damage reduction value increases based on level of this unit.",
            }
        } else if (skill.type=="reflect") {
            return {
                short: "AoE & Reflect/n"+(value*100).toFixed(1)+"% ("+(lvl/skill.target*value*100).toFixed(1)+")% direct damage received per "+(skill.target)+" levels",
                long: "AoE (Area of Effect) Reflect causes this until to deal a percentage of the direct damage it takes to all enemy units.",
            }
        } else if (skill.type=="amplify") {
            return {
                short: "Amplify/nAttacks deal +"+(value*100).toFixed(1)+"% ("+(lvl/skill.target*value*100).toFixed(1)+")% of targets Health per "+(skill.target)+" levels",
                long: "Amplify causes this units attacks to deal damage to the enemy unit that is equal to a percentage of the enemy units health.",
            }
        } else if (skill.type=="guardian") {
            return {
                short: "AoE & Heal & Masochism/n"+(value*1.5).toFixed(2)+" ("+(lvl/skill.target*value*1.5).toFixed(0)+") Damage & "+(value)+" ("+(lvl/skill.target*value).toFixed(0)+") Health per "+skill.target+" levels per turn",
                long: "AoE (Area of Effect) Heal & Masochism causes this unit to deal damage to all enemy units equal to the amount displayed, every turn. This until will also heal all friendly units equal to the amount displayed, every turn. This until will also deal damage to itself equal to the amount displayed, every turn./n/nThis unit WILL NOT heal itself.",
            }
        } else if (skill.type=="posbonus") {
            return {
                short: "Empowered - Start of Battle/n+"+(value)+" Attack & +"+(value)+" Health per unit behind",
                long: "Empowered causes units to be strong under certain circumstances. This unit will gain Attack and Health equal to the value once at the start of battle, for each unit behind it.",
            }
        } else if (skill.type=="aposbonus") {
            return {
                short: "Empowered - Start of Battle/n+"+(value*9).toFixed(0)+" Attack ("+Math.floor(lvl/(1/value)).toFixed(0)+") & Health ("+Math.floor(lvl/(1/value)).toFixed(0)+") per "+(9)+" levels per unit behind",
                long: "Empowered causes units to be strong under certain circumstances. This unit will gain Attack and Health equal to the value once at the start of battle, for each unit behind it. This value increases based on the level of this unit.",
            }
        } else if (skill.type=="friend") {
            return {
                short: "AoE Revenge/n"+(value*100).toFixed(0)+"% Attack ("+((stats.atk*(value*100))/100).toFixed(0)+") & Health ("+((stats.hp*(value*100))/100).toFixed(0)+") given to friendly units",
                long: "AoE (Area of Effect) causes this unit to trigger an action upon death. This unit will give all friendly units Attack & Health equal to the percentage displayed upon death.",
            }
        } else if (skill.type=="void") {
            return {
                short: "Master of Elements - Empowered/n+"+(value*100).toFixed(0)+"% Damage - neutral to the void",
                long: "Master of Elements units deal elemental damage bonus to all elemental units in the game. (Fire, Water, Air & Earth). If this unit attacks another void unit, no elemental damage bonus takes place.",
            }              
        } else if (skill.type=="bday") {
            return {
                short: "Surprise! Targeted /nDeals "+(value*100).toFixed(0)+"% Attack ("+((stats.atk*(value*100))/100).toFixed(0)+") per turn to enemies last unit",
                long: "Targeted causes this units skill to target another specific unit. This unit will deal a percentage of its attack as display, each turn, to the enemies last unit.",
            }
        } else if (skill.type=="infiltred") {
            return {
                short: "AoE Reckless/n"+(value*100).toFixed(0)+"% Attack on each Attack",
                long: "AoE (Area of Effect) Reckless causes this unit to attack everything, except itself. This until will deal damage equal to the percentage displayed of its attack, to everything (except itself) on each attack.",
            }
        } else if (skill.type=="backlash") {
            return {
                short: "Recovery/nHeals "+(value*100).toFixed(0)+"% of direct damage received",
                long: "Recovery causes this unit to be healed for the displayed percentage of direct damage received.",
            }
        } else if (skill.type=="mbonus") {
            return {
                short: "Empowered/nGains "+value+"x from Attack bonus",
                long: "Empowered causes units to be strong under certain circumstances. This unit gains an increased value from Attack auras that affect it.",
            }
        } else if (skill.type=="easter") {
            return {
                short: "Empowered/nPer level stats x"+value+" if with an Easter Hero",
                long: "Empowered causes units to be strong under certain circumstances. This unit gains increased stats in battle if another friendly unit is an Easter Hero.",
            }
        } else if (skill.type=="mshield") {
            return {
                short: "Dampen/nTakes "+(value*100).toFixed(0)+"% reduced damage from skill affects",
                long: "Dampen decreases the amount of damage enemies do. This unit takes reduced damage from skill affects. (Things such as Reflect, Ricochet, AoE)",
            }
        } else if (skill.type=="fixarmor") {
            return {
                short: "Dampen/nReceives "+(value*100).toFixed(0)+"% less direct damage",
                long: "Dampen decreases the amount of damage enemies do. This unit takes reduced direct damage equal to the percentage displayed.",
            }
        } else if (skill.type=="mon2") {
            return {
                short: "Empowered - Start of Battle/n+"+value+" Armor per unit behind",
                long: "Empowered causes units to be strong under certain circumstances. This unit gains armor at the start of battle for each unit behind it.",
            }
        } else if (skill.type=="fixreflect") {
            return {
                short: "Reflect/nDeals "+value+" to enemies when hit",
                long: "Reflect causes this unit to damage equal to the displayed value to units that attack it.",
            }
        } else if (skill.type=="buffpatk") {
            return {
                short: "AoE Empowered/nFriendly units deal "+(value*100).toFixed(0)+"% more direct damage",
                long: "Attack percentage increases the amount of direct damage a hero deals, by the percentage, when it attacks. Auras affect all friendly units until the unit with the aura dies. ",
            }
        } else if (skill.type=="cubearmor") {
            return {
                short: "Empowered/nGains "+value+"\xB3 ("+Math.pow(value,3)+") armor",
                long: "Empowered causes units to be strong under certain cicrumstances. This unit gains armor in all circumstances equal to the displayed amount. ",
            }
        } else if (skill.type=="cubeexecutor") {
            return {
                short: "Execute/nKills enemies below "+value+"\xB3 ("+Math.pow(value,3)+") Health after attacking them",
                long: "Execute causes attacks to kill enemies if they are below the displayed amount of health after being attacked by this unit.",
            }
        } else if (skill.type=="cubetarget") {
            return {
                short: "Targeted/nDeals "+value+"\xB3 ("+Math.pow(value,3)+") damage per turn to enemies front unit",
                long: "Targeted causes this units skill to target another specific unit. This unit will deal the displayed damage every turn to the enemies front unit.",
            }
        } else if (skill.type=="tetris") {
            return {
                short: "Targeted/nThrows a block for "+(value*100).toFixed(0)+"% bonus damage per Attack",
                long: "Targeted causes this units skill to target another specific unit. This until will deal damage equal to 100% of its attack in 1 of 6 ways. 100% to the first unit. 25% to the first unit, second, third and fourth unit. 75% to the first unit and 25% to the second unit. 25% to the first unit and 75% to the second unit. 25% to the first unit, 50% to the second unit and 25% to the third unit. 50% to the first unit and 50% to the second unit. The attack chosen is random.",
            }
        } else if (skill.type=="custom") {
            return {
                short: "Amplify - Start of Battle/nTurns "+(value*100).toFixed(0)+"% Attack to Health, by "+(skill.target*100).toFixed(0)+"% per position",
                long: "Amplify causes this unit to convert a percentange of its attack to health, this percentage increases based on the position in battle the unit is in. For example, this percentage is 3x stronger if the unit is the 3rd unit in your line-up. This percentage is 6x stronger if the unit is the 6th unit in your line-up.",
            }
        } else if (skill.type=="freflect") {
            return {
                short: "AoE & Reflect/nDeals "+value+" damage to all enemies when hit",
                long: "AoE (Area of Effect) Reflect causes this until to deal damage to all enemy units when it is attacked.",
            }
        } else if (skill.type=="fleech") {
            return {
                short: "Leech/nHeals for "+value+" on Attack",
                long: "Leech causes direct damage attacks to heal this unit for the value displayed with each direct damage attack.",
            }
        } else if (skill.type=="hpdeal") {
            return {
                short: "Empowered/nDeals additional damage equal to "+(value*100).toFixed(0)+"%  current Health after attacking a target",
                long: "Empowered causes units to be strong under certain circumstances. This unit will deal additional damage, to its target, equal to a percentange of its current health each time it attacks an enemy unit.",
            }
        } else if (skill.type=="fury") {
            return {
                short: "Amplify/n"+value+"x Attack every "+skill.target+" turns",
                long: "Amplify causes this unit to multiply its attack by the amount displayed every number of turns displayed.",
            }
        } else if (skill.type=="absorb") {
            return {
                short: "Amplify & On Kill/nGains +"+value.toFixed(0)+" Attack & Health when killing a unit",
                long: "Amplify causes this unit to gain Attack & Health equal to the amount displayed when it kills another unit with a direct damage attack.",
            }
        } else if (skill.type=="autobuffd") {
            return {
                short: "AoE/n"+value.toFixed(0)+" Damage per turn, doubling every "+skill.target+" turns",
                long: "AoE (Area of Effect) causes this unit to deal damage to all enemies every turn. This damage doubles every number of turns displayed.",
            }
        } else if (skill.type=="autobuff") {
            return {
                short: "AoE/n"+value.toFixed(0)+" Damage per turn, increasing by "+skill.target+" per turn",
                long: "AoE (Area of Effect) causes this unit to deal damage to all enemies every turn. This damage increases by the displayed amount every turn.",
            }
        } else if (skill.type=="buffall") {
            return {
                short: "AoE Aura Heal/n1 Attack, Damage, Armor & Health ("+Math.floor(lvl/(1/value)).toFixed(0)+") per "+(1/value).toFixed(1)+" levels",
                long: "AoE (Area of Effect), Aura, Heal, Attack. This unit will give all friendly units the displayed amount of Attack & Armor. This unit will deal damage to all enemy units equal to the amount displayed every turn and heal all friendly units equal to the amount displayed every turn. These values increase based on the level of this unit. Auras affect all friendly units until the unit with the aura dies.",
            }
        } else if (skill.type=="combo") {
            return {
                short: "AoE/n Deals "+(value*100).toFixed(0)+"% current health as AoE damage each turn",
                long: "AoE (Area of Effect) causes this unit to deal damage to all enemies every turn, equal to the display percentage of its health.",
            }
        } else if (skill.type=="flatlepre") {
            return {
                short: "Even Field(AoE) - Start of Battle/nDeals "+value+" damage per 9 levels to all enemies for each extra unit",
                long: "Even Field will deal damage, once, at the start of the battle based on the amount of enemies this unit is facing compared to the amount of friendly units this unit has. All enemies will take the displayed damage increased by the amount of units this units team is outnumbered by./n/nFor example: If this unit is alone, facing 5 enemy units, it will deal this damage 4 times. If this unit is with 3 other units, facing 6 units (4v6) it will deal this damage 2 times.",
            }
        } else if (skill.type=="bhit") {
            return {
                short: "Targeted - Start of Battle/nDeals "+(value).toFixed(1)+" Damage ("+Math.floor(value*lvl)+") per level to lowest HP enemy",
                long: "Targeted causes this units skill to target another specific unit. This unit will deal the displayed value in damage once, at the start of battle, to the enemy with the lowest HP.",
            }
        } else if (skill.type=="acum") {
            return {
				short: "Aura/n+"+value.toFixed(1)+" Attack per level ("+Math.floor(lvl*value).toFixed(0)+") every "+skill.value2+" turns",
                long: "Attack increases the amount of direct damage a hero deals, by the value. This value increases every number of turns displayed. The value of the attack increases based on the level of this unit. Auras affect all friendly units until the unit with the aura dies.",
            }
        } else if (skill.type=="empow") {
            return {
                short: "Empowered/nGains +"+value+" Attack and Health per unit in front, per 2 turns, per "+skill.target+" levels",
                long: "Empowered causes units to be strong under certain circumstances. This unit gains attack and health for each friendly unit in front of it, every 2 turns. The value of the attack and health increases based on the level of this unit.",
            }
        } else if (skill.type=="supershield") {
            return {
                short: "Dampen/nTakes "+(value*100).toFixed(0)+"% less direct damage per "+skill.target+" levels for 1 turn",
                long: "Damped decreases the amount of damage enemies do. This unit takes the displayed percentage reduced damage for 1 single turn.",
            }
        } else if (skill.type=="payback") {
            return {
                short: "Payback - Revenge/nStores "+(value*100).toFixed(0)+"% of damage received, dealing it to the first target upon death",
                long: "Accumulate all the received damage during the battle and give it back on death to the first Unit of the Enemy Team./n/nThe value of the attack is based on a percentage of the total damage received."
            }
        } else if (skill.type=="lullaby") {
            return {
                short: "Aura/n"+(value*100).toFixed(0)+"% Attack for "+(skill.target)+" Turns",
                long: "Attack percentage increases the amount of direct damage a hero deals, by the percentage, when it attacks. Auras affect all friendly units until the unit with the aura dies, or the amount of turns indicated have passed."
            }
        } else if (skill.type=="backrico") {
            return {
                short: "Reverse Ricochet - Targeted/n"+(skill.target)+" Targets - "+(value*100).toFixed(0)+"% Damage",
                long: "Ricochet causes direct damage to bounce to the target behind for reduced value. Ricochet will continue bouncing with a reduced value until it hits the amount of targets specific in this skill after the original hit./n/nThis is a reverse ricochet, meaning after hitting the initial target the Ricochet will start from the enemies last target and bounce forward to targets in front."
            }
        } else if (skill.type=="fromdeath") {
            return {
                short: "Revenge/nDeals "+value+" damage per level ("+(lvl*value)+") to first 2 enemies",
                long: "When the hero dies, causes an amount of damage to the first two enemy units"
            }
        } else if (skill.type=="antireflect") {
            return {
                short: "Pierce/nReflects triggered by this hero are 2% ("+(value*lvl/skill.target*100).toFixed(1)+"%) less effective per "+(skill.target)+" levels",
                long: "This heroes damage pierces through defenses, causing opponents to be less effective at reflecting damage. Any hero that reflects damage will instead reflect at a lower effectiveness"
            }
        } else if (skill.type=="voidmaster") {
            return {
                short: "Empowered/nGains "+(value*100).toFixed(0)+"% ("+(value*lvl/skill.target*100).toFixed(0)+"%) of all damage received per "+(skill.target)+" levels as Attack",
                long: "Empowered causes this unit to be more powerful under certain circumstances. This unit will gain attack equal to a percentage of all damage received."
            }
        } else if (skill.type=="horseman") {
            return {
                short: "Empowered - Start of Battle/nSteals "+(value*100).toFixed(0)+"% of opposing enemy unit's base stats",
                long: "Empowered causes this unit to be more powerful under certain circumstances. This unit will steal attack and health from the enemy unit at the same position at the start of the battle. It won't consider additional health or attack gained by skills. It won't work against world bosses."
            }
        } else if (skill.type=="revgnerf") {
            return {
                short: "Revenge/nLowers all enemies attack by "+(value*100).toFixed(0)+"%",
                long: "When the hero dies, reduces the base attack of all units in enemy lane."
            }
        } else if (skill.type=="overload") {
            return {
                short: "Pierce & On Kill/nPropagates "+(value*100).toFixed(0)+"% unused damage when killing a unit",
                long: "When it kills another unit with a direct damage attack, the remaining damage is done (with a multiplier) on the next enemy to come (it can be the same unit once revived).",
            }
        }
    }
    this.passive2text = function (passive,one_line) {
        if (one_line==undefined) one_line = false;
        var description="";
        var value=passive.value;
        if (passive.type==0) {
            description+="Passive skill/nReceives -"+(value*100).toFixed(0)+"% damage from same element";
        } else if (passive.type==1) {
            description+="Passive skill/nSets unit at "+(value*100).toFixed(0)+"% health after receiving fatal damage";
        } else if (passive.type==2) {
            description+="Passive skill/nGains +"+(value*100).toFixed(0)+"% from armor";
        } else if (passive.type==3) {
            description+="Passive skill/nGains +"+(value*100).toFixed(0)+"% from damage increases";
        } else if (passive.type==5) {
            description+="Passive skill/nIncreases damage dealt by "+(value*100).toFixed(0)+"%";
        } else if (passive.type==6) {
            description+="Passive skill/nGains +"+(value*100).toFixed(0)+"% from heals";
        } else if (passive.type==7) {
            description+="Passive skill/nReceives -"+(value*100).toFixed(0)+"% damage from skills";
        } else if (passive.type==9) {
            description+="Passive skill/nIncreases health by "+(value*100).toFixed(0)+"%";
        } else if (passive.type==10) {
            description+="Passive skill/nGains "+(value).toFixed(0)+"attack and health for each other horsemen";
        }

        if (passive==undefined) {
            description+="Passive skill/nPassive skill is not active yet";
        }

        if (one_line) description = description.replace("/n",": ");
        return description;
    }
    var wsynking=false;
    this.wsync = function () {
        if (wsynking) return;
        wsynking=true;
        var url = "https://cosmosquest.net/public.php?kid="+(kid||0);
        var xmlHTTP = new XMLHttpRequest();
        xmlHTTP.open( 'GET', url , true );
        
        xmlHTTP.onload = function( e ) {
            wsynking=false;
            var wdata=undefined;
            try {
                wdata=JSON.parse(this.response);
            } catch (e) {

            }
            if (wdata!==undefined) {
                CQW=wdata;
                if (CQW.version!==VERSION) {
                    popup = {
                        text:"New Version: "+CQW.version+" available, refresh?",
                        mode:"confirm",
                        action: function () {
                            location.reload();
                        }
                    }
                }
            }
        };
        xmlHTTP.onerror = function(e) {
            wsynking=false;
        }
        xmlHTTP.send();
    }
    var wsynking2=false;
    this.wsync2 = function () {
        if (wsynking2) return;
        wsynking2=true;
        var url = "https://cosmosquest.net/ranking.json?v="+VERSION;
        var xmlHTTP = new XMLHttpRequest();
        xmlHTTP.open( 'GET', url , true );
        
        xmlHTTP.onload = function( e ) {
            wsynking2=false;
            var wdata2=undefined;
            try {
                wdata2=JSON.parse(this.response);
            } catch (e) {

            }
            if (wdata2!==undefined) {
                CQWS=wdata2;
            }
        };
        xmlHTTP.onerror = function(e) {
            wsynking2=false;
        }
        xmlHTTP.send();
    }
    var bsynking=false;
    this.bsync = function () {
        if (bsynking) return;
        bsynking=true;
        var url = "https://cosmosquest.net/battles.php?kid="+(kid||0);
        var xmlHTTP = new XMLHttpRequest();
        xmlHTTP.open( 'GET', url , true );
        
        xmlHTTP.onload = function( e ) {
            try {
                bdata=JSON.parse(this.response);
            } catch (e) {
                console.log(e);
            }
            bsynking=false;
        };
        xmlHTTP.send();
    }
    this.is4thJuly = function () {
        var hid=Date.now()/(60*60*1000);
        if (hid>=416416 && hid<=416416+48) return true;
    }
    this.isHalloween = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        return tid>=18564 && tid<=18570;
    }
    this.isChristmas = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        return tid>=18231 && tid<=18255;
    }
    this.isChristmas2 = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        return tid>=18231 && tid<=18261;
    }
    this.isCandyTime = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        return tid>=18231 && tid<=18261;
    }
    this.isAnniversary = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        if (tid>=18309 && tid<=18310) return true;
        else return false;
    }
    this.isStPatrick = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        if (tid>=18330 && tid<=18343) return true;
    }
    this.isEternal = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        if (tid>=18423 && tid<=18428) return true;
    }
    this.isStGeorge = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        if (tid>=18375 && tid<=18381) return true;
    }
    this.isLimitedTimeHeroON = function () {
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        var isActive=undefined;
        if (tid>=18027 && tid<=18034) isActive=true;
        else isActive=false;
        var customStruct = {
            active: isActive,
            id: 168,
            tid: 18035*24*60*60*1000,
            name:"MOTHER",
            number: 168,
            price: 500,
            curr: "4xjo",
            type: "KRED",
            promo: 0,
            level: 1,
        };
        return customStruct;
    }
    this.isDailyEvent = function () {
        var element = {
            icon: undefined,
            text: undefined,
            mode: undefined,
        };
        var tid=Math.floor(Date.now()/(24*60*60*1000));
        var events=["lucky followers","cc","pge","lottery","flash","eas","dungeon","key tower","adventure"];
        if (CQW!==undefined && CQW.dungeon!==undefined && mdata!==undefined && mdata.city!==undefined) {
            element.icon="8k54";
            element.text="CQ Dungeon";
            element.mode="dungeon";
        }
        else if (CQW!==undefined && CQW.adventure!==undefined) {
            element.icon="0vjc";
            element.text="Cosmic Adventure";
            element.mode="adventure";
        }
        else if (CQW!==undefined && CQW.flash!==undefined) {
            element.icon="xs7d";
            element.text="Flash Tournaments";
            element.mode="flash";
        }
        else if (CQW!==undefined && CQW.lottery!==undefined) {
            element.icon="kdw2";
            element.text="CosmosQuest Lottery";
            element.mode="lottery";
        }
        else if (CQW!==undefined && CQW.followers!==undefined) {
            element.icon="wxlk";
            element.text="Lucky Followers";
            element.mode="followers";
        }
        else if (CQW!==undefined && CQW.keys!==undefined) {
            element.icon="3uvt";
            element.text="Keys Tower";
            element.mode="keys";
        }
        else if (CQW!==undefined && CQW.cc!==undefined) {
            element.icon="eorj";
            element.text="Cosmic Catcher";
            element.mode="cc";
        }
        else if (CQW!==undefined && CQW.pge!==undefined) {
            element.icon="skyh";
            element.text="Match Pairs";
            element.mode="pge";
        }
        return element;
    }
    this.isEAS = function () {
        var element = {
            icon: undefined,
            text: undefined,
            mode: undefined,
        };
        if (CQW!==undefined && CQW.WB!==undefined && CQW.WB.name.indexOf("SUPER")!==-1 && CQW.super!==undefined && CQW.super===1) {
            element.icon="ube1";
            element.text="Extra AS SWB";
            element.mode="wb";
        } else if (CQW!==undefined && CQW.super!==undefined && CQW.super===1) {
            element.icon="ube1";
            element.text="Extra AS World Boss";
            element.mode="wb";
        }
        return element;
    }
    this.isSWB = function () {
        var element = {
            icon: undefined,
            text: undefined,
            mode: undefined,
        };
        if (CQW!==undefined && CQW.WB!==undefined && CQW.WB.name.indexOf("SUPER")!==-1 && CQW.super!==undefined && CQW.super===1) {
            element.icon="esyg";
            element.text="Extra AS SWB";
            element.mode="wb";
        } else if (CQW!==undefined && CQW.WB!==undefined && CQW.WB.name.indexOf("SUPER")!==-1) {
            element.icon="esyg";
            element.text="Super World Boss";
            element.mode="wb";
        }
        return element;
    }
    this.checkBox = function (ctx,x,y,toggle,zname,zone,ztarget,text,side,tooltip) {
        var icon=toggle?"0oh5":"0o0x";
        T.draw(ctx,icon,x,y);
        if (side=="left") ctext(ctx,text,x-T.width(icon)/4,y+T.height(icon)/2,"35px"+FONT,"white","right","middle");
        else ctext(ctx,text,x+T.width(icon)*1.25,y+T.height(icon)/2,"35px"+FONT,"white","left","middle");
        
        var tgrect=(new Rect(x,y,T.width(icon),T.height(icon))).small();
        if (tgrect.isInside(GM.x,GM.y)) {
            ctx.fillStyle="rgba(255,255,255,0.2)";
            ctx.fillRect(x,y,T.width(icon),T.height(icon));
            otooltip = {
                text: tooltip,
                x:x+T.width(icon)/2,
                y:y+T.height(icon)/2
            }
        }
        this.addZone(zname,tgrect,zone,{target:ztarget});
    }
    this.rectButton = function (ctx,x,y,zname,zone,text,syncName,toggleArray,toggData,tooltip) {
        var syncable=false;
        var toggling=false;
        if (syncName!==undefined) syncable=true;
        if (toggleArray!==undefined) toggling=true;

        var bw = T.width("0567");
        var bh = T.height("0567");
        var rect = (new Rect(x,y,bw,bh)).small();
        T.draw(ctx,rect.isInside(GM.x,GM.y)?"0567":"07y4",x,y);

        if (toggling) {
            ctext(ctx,toggleArray[toggData],x+bw/2,y+bh/2,"32px "+FONT,"black","center","middle");
            this.addZone(zname,rect,zone,{target:(toggData+1)%toggleArray.length});
        }
        else{
            if (!syncable) {
                ctext(ctx,text,x+bw/2,y+bh/2,"32px "+FONT,"black","center","middle");
                this.addZone(zname,rect,zone);
            } else {
                if (!syncName) {
                    ctext(ctx,text,x+bw/2,y+bh/2,"32px "+FONT,"black","center","middle");
                    this.addZone(zname,rect,zone);
                } else {
                    this.spinner(ctx,x+bw/2,y+bh/2,bh/2);
                }
            }
        }
        if (rect.isInside(GM.x,GM.y)) {
            otooltip = {
                text: tooltip,
                x:x+bw/2,
                y:y+bh/2
            }
        }
    }
    this.soundBox = function (ctx,x,y,zname,zone,ztarget,text,sdata,tooltip) {
        var sw = T.width("0b33");
        var sh = T.height("0b33");
        ctext(ctx,text,x+sw/2,y-sh*0.3,"30px "+FONT,"white","center","top");
        T.draw(ctx,sdata?"0b33":"0dbg",x,y);
        var m1rect = (new Rect(x,y,sw,sh)).small();
        this.addZone(zname,(new Rect(x,y,sw,sh)).small(),zone,{target:ztarget});
        if (m1rect.isInside(GM.x,GM.y)) {
            ctx.fillStyle="rgba(255,255,255,0.04)";
            ctx.fillRect(x,y,sw,sh);
            otooltip = {
                text: tooltip,
                x:x+sw/2,
                y:y+sh/2
            }
        }
    }
    this.calcJump = function () {
        var arr=[];
        while (arr.length<3) {
            rnd=randInt(0,DIMENSION.length);
            if (arr.indexOf(rnd)===-1) arr.push(rnd);
        }
        data.jump=arr;
        this.save();
    }
    this.doJump = function (i) {
        var trg = data.jump[i];
        data.cdim=trg;
        data.lastDim=trg;
        this.doStat("v","djumps",1);
        this.doStat("a","dim",trg);
        ++data.dimensions[trg];
        ++data.djumps;
        ++data.cjumps;
        data.jump=undefined;
        this.save();
        this.notifyEvolution();
        this.evalResearch();
        this.evalBuildings();
        superClick=undefined;
        ascending={
            time: Date.now(),
        }
    }
    this.currentJump = function () {
        var pos = (Math.sqrt(8*data.djumps+1)-1)/2;
        var previous = Math.floor(pos.toFixed(3));
        var next = Math.ceil(pos.toFixed(3));
        var currentRun = previous;
        var runIndex = (currentRun*(currentRun+1))/2;
        if (data.djumps-runIndex==0 && data.cjumps!==0) return 0;
        return (data.djumps-runIndex)*2+138;
    }
    this.dimBuff = function (type) {
        var val = 1;
        for (var i=0; i<DIMENSION.length; ++i) {
            if (DIMENSION[i].abonus.type==type && data.cdim==i) {
                val*=DIMENSION[i].abonus.value;
            }
            if (DIMENSION[i].pbonus.type==type) {
                val+=data.dimensions[i]*DIMENSION[i].pbonus.value;
            }
        }
        return val;
    }
    this.balancer = function () {
        if (data.stats.t.v.energy<1000000) return 1;
        var pow = Math.log10(data.stats.t.v.energy);
        if (pow<100) return 1;
        else return 100-100/(1+Math.pow(Math.E,-(pow-90)/18));
    }
    this.runEnemyED = function (delta,i) {
        delta=Math.min(delta,50);
        var dataED = getDataED();
        var m = this.calcEDomegB(0);

        var zx = W*0.28125;
        var zy = 0 + 40;
        var tzw = T.width("0ch8");
        var tzh = T.height("0ch8") - 40;

        var gix = zx + 7; // Grid init X
        var giy = zy + 15; // Grid init Y

        var cell = "0ovp";

        edenemy[i].pos=dataED[m][edenemy[i].steps];

        if (edenemy[i].pos==dataED[m][dataED[m].length-1]) {
            edenemy[i].draw.x=undefined;
            edenemy[i].draw.y=undefined;
        }
        else {
            var Pos0 = dataED[m][edenemy[i].steps];
            var Pos1 = dataED[m][edenemy[i].steps+1];
            var x0=gix+Math.floor(Pos0/10)*T.width(cell)+1*Math.floor(Pos0/10);
            var x1=gix+Math.floor(Pos1/10)*T.width(cell)+1*Math.floor(Pos1/10);
            var y0=giy+Pos0%10*T.height(cell)+1*Pos0%10;
            var y1=giy+Pos1%10*T.height(cell)+1*Pos1%10;

            var x=x1-x0;
            var y=y1-y0;

            if (edenemy[i].steps == dataED[m].length-1) {
                edenemy[i].draw.x=undefined;
                edenemy[i].draw.y=undefined;
            } else {
                edenemy[i].draw.x=clamp(edenemy[i].draw.x+x*delta/1000*(1/edenemy[i].speed),Math.min(x0,x1),Math.max(x0,x1));
                edenemy[i].draw.y=clamp(edenemy[i].draw.y+y*delta/1000*(1/edenemy[i].speed),Math.min(y0,y1),Math.max(y0,y1));
                if (edenemy[i].draw.x==x1 && edenemy[i].draw.y==y1) {
                    ++edenemy[i].steps;
                }
            }

            var fps=(delta/1000)*3600;

            if (x!=0) {
                edenemy[i].interp.x = x/fps;
                edenemy[i].interp.y = 0;
            } else {
                edenemy[i].interp.x = 0;
                edenemy[i].interp.y = y/fps;
            }
        }
        edenemy[i].timer=Date.now();

        if (edenemy[i].steps>=dataED[m].length-1) {
            edenemy.splice(i,1);
            data.edmk = 0;
        }
    }
    
    this.runTowersED = function (i) {
        var Tower = this.getTower();
        var zx = W*0.28125;
        var zy = 0 + 40;
        var tzw = T.width("0ch8");
        var tzh = T.height("0ch8") - 40;

        var gix = zx + 7; // Grid init X
        var giy = zy + 15; // Grid init Y

        var cell = "0ovp";
        var radius = T.width(cell)*(Tower.range);

        var objective = {
            id: undefined,
            dis: undefined,
        };

        if (data.ed[i]>=1) {
            var tpos = {
                x: gix+Math.floor(i/10)*T.width(cell)+1*Math.floor(i/10)+T.width(cell)/2,
                y: giy+(i%10)*T.height(cell)+1*(i%10)+T.height(cell)/2,
            };
            for (var j=0;j<edenemy.length;++j) {
                var dx = tpos.x - (edenemy[j].draw.x+T.width(cell)/2);
                var dy = tpos.y - (edenemy[j].draw.y+T.height(cell)/2);
                var distance = Math.sqrt(dx * dx + dy * dy);
                if (objective.dis==undefined && !isNaN(distance)) {
                    objective.id = j;
                    objective.dis = distance;
                } else {
                    if (!isNaN(distance) && distance<=objective.dis) {
                        objective.id = j;
                        objective.dis = distance;
                    }
                }
            }
            if (objective.dis!==undefined && objective.dis <= radius) {
                this.edShoot(edenemy[objective.id].draw.x,edenemy[objective.id].draw.y,tpos.x,tpos.y);
                edenemy[objective.id].hp -= this.calcEDomegB(3);
                if (edenemy[objective.id].hp<=0) {
                    this.energyObtainED(objective.id);
                }
                data.ed[i]--;
                edtimers[i]=Date.now();
            }
        }
        return true;
    }
    this.edShoot = function (ex,ey,tx,ty) {
        var dx = ex - tx+T.width("0gv1")/2;
        var dy = ey - ty+T.height("0gv1")/2;
        
        var shoot = {
            x: tx,
            y: ty,
            obj: {
                x: ex+T.width("0gv1")/2,
                y: ey+T.height("0gv1")/2,
            },
            img: "0gv1",
            mov : {
                x: dx/10,
                y: dy/10,
            },
        }

        edShoots.push(shoot);
        T.play(56);
    }
    this.tdNRG = function () {
        var _const = [0.25,0.04761904762,0.1111111111,0.25,0.08,0.2666666667,0.02857142857];
        var factor = (_const[data.edlvl%7]*production);
        var prod = factor*(10+0.05*data.edlvl)*(1+mExtra.td);
        return prod;
    }
    this.energyObtainED = function (i) {
        T.play(57);
        edenemy.splice(i,1);
        this.doStat("v","tdk",1);
        if (data.edmlvl==data.edlvl) {
            data.edmk++;
            if (data.edmk>=(data.dimensions[6]>0?20:25)) {
                ++data.edmlvl;
                this.doStat("m","tdm",data.edmlvl);
                kongregate.stats.submit("td", data.edmlvl);
                ++data.edlvl;
                data.edmk=0;
                edenemy.splice(0, edenemy.length);
            }
        }
        // TODO
        var prod = this.tdNRG();
        if (mExtra!==undefined && mExtra.td!==undefined) prod+=mExtra.td;
        data.energy+=prod;
        this.updateResearch(prod);
        this.doStat("v","energy",prod);
        this.doStat("v","tde",prod);
        this.doStat("m","tde",prod);
        this.doStat("m","energy",data.energy);
    }
    this.calcEDomegaP = function (i) {
        var index = i+8;
        var exps = [150000,5.7,bn(1,14),1.37];
        return bn(1,15)*Math.pow(exps[i],data.omegas[index]+1);
    }
    this.calcEDomegB = function (i) {
        //["map","bat","charge","dmg"];
        var index = i+8;
        if (i==0) return data.omegas[index];
        else if (i==1) {
            var init=10;
            return Math.floor(init+data.omegas[index]*10);
        }
        else if (i==2) {
            var init=1;
            return Math.ceil(init+data.omegas[index]);
        }
        else if (i==3) {
            var _dps = data.omegas[index]+1;
            return (_dps)*this.dimBuff("tdd");
        }
    }
    this.restartMap = function () {
        for (var i=0;i<100;++i) {
            data.ed[i] = 0;
        }
        var firstMap=getDataED();
        var it=0;
        
        for (var i=0;i<firstMap[data.omegas[8]].length;++i){
            data.ed[firstMap[data.omegas[8]][i]]=-1;
        }
        edenemy.splice(0, edenemy.length);
    }
    this.getTower = function() {
        var _bat = 20;
        var _aspd = 2/this.dimBuff("tdspd");
        var _dps = (data.omegas[11]+1)*this.dimBuff("tdd");
        var _range = 2.5;

        var Tower = {
            bat: _bat,
            aspd: _aspd,
            dps: _dps,
            range: _range,
        };

        return Tower;
    }
    this.updateTD = function (delta) {
        var Tower = this.getTower();
        var zx = W*0.28125;
        var zy = 0 + 40;
        var tzw = T.width("0ch8");
        var tzh = T.height("0ch8") - 40;

        var gix = zx + 7; // Grid init X
        var giy = zy + 15; // Grid init Y

        var cell = "0ovp";

        for (var i=0;i<100;++i) {
            if(edenemy!==undefined && data.ed!==undefined && data.ed[i]>=1 && edtimers!==undefined && edtimers[i]!==undefined && edtimers[i]+Tower.aspd*1000<=Date.now()) {
                var radius = T.width(cell)*(Tower.range);
        
                var objective = {
                    id: undefined,
                    dis: undefined,
                };
        
                if (data.ed[i]>=1) {
                    var tpos = {
                        x: gix+Math.floor(i/10)*T.width(cell)+1*Math.floor(i/10)+T.width(cell)/2,
                        y: giy+(i%10)*T.height(cell)+1*(i%10)+T.height(cell)/2,
                    };
                    for (var j=0;j<edenemy.length;++j) {
                        var dx = tpos.x - (edenemy[j].draw.x+T.width(cell)/2);
                        var dy = tpos.y - (edenemy[j].draw.y+T.height(cell)/2);
                        var distance = Math.sqrt(dx * dx + dy * dy);
                        if (objective.dis==undefined && !isNaN(distance)) {
                            objective.id = j;
                            objective.dis = distance;
                        } else {
                            if (!isNaN(distance) && distance<=objective.dis) {
                                objective.id = j;
                                objective.dis = distance;
                            }
                        }
                    }
                    if (objective.dis!==undefined && objective.dis <= radius) {
                        this.edShoot(edenemy[objective.id].draw.x,edenemy[objective.id].draw.y,tpos.x,tpos.y);
                        edenemy[objective.id].hp -= this.calcEDomegB(3);
                        if (edenemy[objective.id].hp<=0) {
                            this.energyObtainED(objective.id);
                        }
                        data.ed[i]--;
                        edtimers[i]=Date.now();
                    }
                }
            }
        }

        var Enemy = this.getEnemy(delta);
        if (edenemy !== undefined) {
            for (var i=0;i<edenemy.length;++i) {
                delta=Math.min(delta,50);
                var dataED = getDataED();
                var m = this.calcEDomegB(0);

                edenemy[i].pos=dataED[m][edenemy[i].steps];

                if (edenemy[i].pos==dataED[m][dataED[m].length-1]) {
                    edenemy[i].draw.x=undefined;
                    edenemy[i].draw.y=undefined;
                }
                else {
                    var Pos0 = dataED[m][edenemy[i].steps];
                    var Pos1 = dataED[m][edenemy[i].steps+1];
                    var x0=gix+Math.floor(Pos0/10)*T.width(cell)+1*Math.floor(Pos0/10);
                    var x1=gix+Math.floor(Pos1/10)*T.width(cell)+1*Math.floor(Pos1/10);
                    var y0=giy+Pos0%10*T.height(cell)+1*Pos0%10;
                    var y1=giy+Pos1%10*T.height(cell)+1*Pos1%10;

                    var x=x1-x0;
                    var y=y1-y0;

                    if (edenemy[i].steps == dataED[m].length-1) {
                        edenemy[i].draw.x=undefined;
                        edenemy[i].draw.y=undefined;
                    } else {
                        edenemy[i].draw.x=clamp(edenemy[i].draw.x+x*delta/1000*(1/edenemy[i].speed),Math.min(x0,x1),Math.max(x0,x1));
                        edenemy[i].draw.y=clamp(edenemy[i].draw.y+y*delta/1000*(1/edenemy[i].speed),Math.min(y0,y1),Math.max(y0,y1));
                        if (edenemy[i].draw.x==x1 && edenemy[i].draw.y==y1) {
                            ++edenemy[i].steps;
                        }
                    }

                    var fps=(delta/1000)*3600;

                    if (x!=0) {
                        edenemy[i].interp.x = x/fps;
                        edenemy[i].interp.y = 0;
                    } else {
                        edenemy[i].interp.x = 0;
                        edenemy[i].interp.y = y/fps;
                    }
                }
                edenemy[i].timer=Date.now();

                if (edenemy[i].steps>=dataED[m].length-1) {
                    edenemy.splice(i,1);
                    data.edmk = 0;
                }
            }
        }
        if (edenemy!==undefined) {
            if (Date.now()-srateTimer >= (Enemy.srate*1000)){
                edenemy.push(Enemy);
                srateTimer=Date.now();
            }
        }

        if (edShoots.length>0) {
            for (var i=0; i<edShoots.length;++i) {
                var dx = edShoots[i].obj.x - edShoots[i].x;
                var dy = edShoots[i].obj.y - edShoots[i].y;
                var distance = Math.sqrt(dx * dx + dy * dy);
                var rS = T.width(edShoots[i].img)*0.6;
                var rE = T.width(edShoots[i].img);
                if (distance < (rE-rS)) {
                    edShoots.splice(i, 1);
                } else {
                    edShoots[i].x+=edShoots[i].mov.x;
                    edShoots[i].y+=edShoots[i].mov.y;
                }
            }
        }

    }
    var ev1sync=false;
    this.updateServerClicks = function () {
        if ((serverClicks==undefined||(Date.now()-serverClicks.timestamp)>60000)&&!ev1sync) {
            ev1sync = true;
            var url = "https://cosmosquest.net/event.php?kid="+(kid||0)+"&clicks="+(serverClicks!==undefined?serverClicks.player:0);
            var xmlHTTP = new XMLHttpRequest();
            xmlHTTP.open( 'GET', url , true );
            
            xmlHTTP.onload = function( e ) {
                ev1sync=false;
                if (serverClicks===undefined) {
                    serverClicks={
                        cap:60,
                        visible:0,
                        ts:Date.now(),
                        timestamp:Date.now(),
                        player:0,
                        value:0
                    }
                }
                serverClicks.timestamp=Date.now();
                try {
                    var evdata = JSON.parse(this.response);
                    if (evdata.success) {
                        serverClicks.player = evdata.player;
                        serverClicks.value = evdata.value;
                    } else {
                        popup={
                            text:"Error: "+evdata.error,
                            mode:"alert",
                        }
                    }
                } catch (e) {
                    popup={
                        text:"Something went wrong",
                        mode:"alert",
                    }
                }
            };
            xmlHTTP.send();
        } else if (serverClicks!==undefined) {
            tdiff = Date.now()-serverClicks.ts;
            serverClicks.ts=Date.now()-(tdiff%1000);
            serverClicks.cap=Math.min(300,serverClicks.cap+Math.floor(tdiff/1000));
            if (serverClicks.value-serverClicks.visible>60) {
                serverClicks.visible += Math.round(serverClicks.value*0.01);
            } else {
                serverClicks.visible+=1;
            }
        }
    }
    var buyhsync=false;
    this.buyhero = function (hid) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !buyhsync) {
            buyhsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "buyhero",
                "FunctionParameter": {
                    hid: hid,
                }
            }, function (res,err) {
                buyhsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFbuyh",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var buywcsync=false;
    this.buywc = function (wc) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !buywcsync) {
            buywcsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "buywc",
                "FunctionParameter": {
                    wc: wc,
                }
            }, function (res,err) {
                buywcsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFbuywc",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var fightWBsync=false;
    this.fightWB = function (wc) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !fightWBsync) {
            fightWBsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "fightWB",
                "FunctionParameter": {
                    setup: data.wb[data.wbline],
                    kid: kid,
					wbid: CQW.WB.uid
                }
            }, function (res,err) {
                fightWBsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadWBBattle(res.data.FunctionResult.battle);
                        CQW.WB.dealt=parseInt(CQW.WB.dealt)+parseInt(res.data.FunctionResult.battle.damage);
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFfightwb",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.buylot = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "buylot",
                "FunctionParameter": {
                    qty: (mulChest ? 10 : (x100 ? 100 : 1)),
                }
            }, function (res,err) {
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.loadInventory();
                        _this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFbuylot",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var advSync=false;
    this.discard = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !advSync) {
            advSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "discard",
            }, function (res,err) {
                advSync=false;
                if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                    _this.updateMData(res.data.FunctionResult.data);
                    _this.loadInventory();
                } else {
                    popup={
                        text:"Error: "+res.data.FunctionResult.err,
                        mode:"alert",
                    }
                    var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                        msg:"PFdiscard",
                        stk:res
                    }));
                    GA.getInstance().addEvent(ev);
                }
            });
        }
    }
    this.advPick = function (cell) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !advSync) {
            advSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "pickAdv",
                "FunctionParameter": {
                    cell: cell,
                }
            }, function (res,err) {
                advSync=false;
                if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                    _this.updateMData(res.data.FunctionResult.data);
                    _this.loadInventory();
                } else {
                    popup={
                        text:"Error: "+res.data.FunctionResult.err,
                        mode:"alert",
                    }
                    var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                        msg:"PFpickAdv",
                        stk:res
                    }));
                    GA.getInstance().addEvent(ev);
                }
            });
        }
    }
    var xmassync=false;
    this.xmas = function (val) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !xmassync) {
            xmassync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "xmas",
                "FunctionParameter": {
                    cs: val,
                }
            }, function (res,err) {
                xmassync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFxmas",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.getEnemy = function(delta) {
        delta=Math.min(delta,50);
        var m = this.calcEDomegB(0);
        var dataED = getDataED();
        var _const = [0.25,0.04761904762,0.1111111111,0.25,0.08,0.2666666667,0.02857142857];
        var _hp = Math.ceil((data.edlvl+1)/_const[data.edlvl%7]);
        var _speed = [2,3.5,3,1,2.5,1.5,5];
        var _srate = [2*2,2.5*2,3*2,4*2,5*2,6*2,7*2];
        var _steps = 0;
        var _pos = dataED[m][0];
        var _timer = Date.now();

        var zx = W*0.28125;
        var zy = 0 + 40;
        var tzw = T.width("0ch8");
        var tzh = T.height("0ch8") - 40;

        var gix = zx + 7; // Grid init X
        var giy = zy + 15; // Grid init Y

        var cell = "0ovp";

        var Pos0 = dataED[m][0];
        var Pos1 = dataED[m][1];
        var x0=gix+Math.floor(Pos0/10)*T.width(cell)+1*Math.floor(Pos0/10);
        var x1=gix+Math.floor(Pos1/10)*T.width(cell)+1*Math.floor(Pos1/10);
        var y0=giy+Pos0%10*T.height(cell)+1*Pos0%10;
        var y1=giy+Pos1%10*T.height(cell)+1*Pos1%10;

        var _x=x1-x0;
        var _y=y1-y0;

        var fps=(delta/1000)*3600;

        var Enemy = {
            hp: _hp,
            speed: _speed[data.edlvl%7],
            srate: _srate[data.edlvl%7],
            steps: _steps,
            pos: _pos,
            interp: { 
                x: undefined,
                y: undefined,
            },
            draw: {
                x: x0,
                y: y0,
            },
            timer: _timer,
        };

        if (_x!=0) {
            Enemy.interp.x = _x/fps;
            Enemy.interp.y = 0;
        } else {
            Enemy.interp.x = 0;
            Enemy.interp.y = _y/fps;
        }

        return Enemy;
    }
    
    var bidsync=false;
    this.placebid = function (hero,bid) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !bidsync) {
            bidsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "auction",
                "FunctionParameter": {
                    hid: hero,
                    kid: kid,
                    name: kongregate.services.getUsername(),
                    bid: bid,
                }
            }, function (res,err) {
                bidsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.loadInventory();
                        _this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFbid",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var sfcsync=false;
    this.sfcell = function (cell) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !sfcsync) {
            sfcsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "sfcell",
                "FunctionParameter": {
                    cell: cell,
                }
            }, function (res,err) {
                sfcsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        mdata.followers+=res.data.FunctionResult.followers;
                        _this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFsfcell",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }

    var towerSync=false;
    this.tower = function (gem) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !towerSync) {
            towerSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "keyevent",
                "FunctionParameter": {
                    pick: gem,
                }
            }, function (res,err) {
                towerSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        CQW.keys.push(res.data.FunctionResult.value);
                        tLevelTimer = Date.now();
                        if (res.data.FunctionResult.data !== undefined) _this.updateMData(res.data.FunctionResult.data);
                        //_this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFkeyevent",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }        
    }
    var promsync = false;
    this.doPromotion = function (hid,um) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !promsync) {
            promsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "promotion",
                "FunctionParameter": {
                    hid: hid,
                    um: um,
                }
            }, function (res,err) {
                promsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    this.doTraining = function (hid,um) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !promsync) {
            promsync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "training",
                "FunctionParameter": {
                    hid: hid,
                    um: um,
                }
            }, function (res,err) {
                promsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                        // TODO Clean local grids
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var pgesync = false;
    this.pge = function (card) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !pgesync) {
            pgesync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "pge",
                "FunctionParameter": {
                    card: card,
                    kid: kid
                }
            }, function (res,err) {
                pgesync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        if (mdata.city.pge.choice[0] == -1 && mdata.city.pge.choice[1] == -1) readytopge = Date.now();
                        if (res.data.FunctionResult.update) _this.loadInventory();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFpge",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.cc3v3nt = function (coins) {
        cc_data.sent = true;
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined) {
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "cc3v3nt",
                "FunctionParameter": {
                    coins: coins,
                    kid: kid
                }
            }, function (res,err) {
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFcc3v3nt",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                    
                }
            });
        }
    }
    var adventureSync = false;
    this.adventure = function (kind,percentage) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !adventureSync) {
            adventureSync = true;
            adventure.next = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "adventure",
                "FunctionParameter": {
                    kind: kind,
                    percentage: percentage,
                }
            },function (res,err) {
                adventureSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFadventure",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var easterPSync = false;
    this.claimPersonalEaster = function (milestone,option) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !easterPSync) {
            easterPSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "peaster",
                "FunctionParameter": {
                    m: milestone,
                    o: option,
                }
            }, function (res,err) {
                easterPSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                    }
                }
            });
        }
    }
    var easterCSync = false;
    this.claimCommunityEaster = function (milestone) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !easterCSync) {
            easterCSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "ceaster",
                "FunctionParameter": {
                    m: milestone,
                }
            }, function (res,err) {
                easterCSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                        _this.wsync();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFceaster",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var ltoSync = false;
    this.buylto = function (offer) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !ltoSync) {
            ltoSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "lto",
                "FunctionParameter": {
                    offer: offer,
                }
            }, function (res,err) {
                ltoSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFlto",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var recycleSync = false;
    this.recycle = function (hid,choice) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !recycleSync) {
            recycleSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "recycle",
                "FunctionParameter": {
                    hid: hid,
                    choice: choice,
                    kid: kid
                }
            }, function (res,err) {
                recycleSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        _this.loadInventory();
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFrecycle",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var halloweenSync=false;
    this.levelHalloween = function (id,mode) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !halloweenSync) {
            halloweenSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "levelHalloween",
                "FunctionParameter": {
                    id: id,
                    mode: mode
                }
            }, function (res,err) {
                halloweenSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFlevelHalloween",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.fightHalloween = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !halloweenSync) {
            halloweenSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "fightH",
                "FunctionParameter": {
                    kid: kid,
                    setup: data.halloween,
                }
            }, function (res,err) {
                halloweenSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        if (res.data.FunctionResult.update) {
                            _this.wsync();
                            _this.loadInventory();
                        }
                        _this.loadHalloweenBattle(res.data.FunctionResult.battle);
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFfightH",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var stGeorgeSync = false;
    this.stGeorge = function (clicks) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !stGeorgeSync) {
            stGeorgeSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "stGeorge",
                "FunctionParameter": {
                    clicks: clicks
                }
            },function (res,err) {
                stGeorgeSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        stGeorgeData.timer = undefined;
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFstGeorge",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var upGeorgeSync = false;
    this.upgradeStGeorge = function (mode) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !upGeorgeSync) {
            upGeorgeSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "upGeorge",
                "FunctionParameter": {
                    mode: mode
                }
            },function (res,err) {
                upGeorgeSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFupGeorge",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var etsync = false;
    this.excet = function (id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !etsync) {
            etsync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "excet",
                "FunctionParameter": {
                    id: id
                }
            },function (res,err) {
                etsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFexcet",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var bwsync = false;
    this.buywb = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !bwsync) {
            bwsync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "buyWbAttack",
            },function (res,err) {
                bwsync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFbuyWbAttack",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var spaceSync = false;
    this.claimSpaceJourney = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !spaceSync) {
            spaceSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "sjclaim",
            },function (res,err) {
                spaceSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                            _this.updateLoopEventRanking("spacejourney");
                        }
                    } else {
                        if (res.data.FunctionResult.err == "Captcha Required") {
                            _this.createCaptcha(function() {_this.claimSpaceJourney()});
                        } else {
                            popup={
                                text:"Error: "+res.data.FunctionResult.err,
                                mode:"alert",
                            }
                            var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                                msg:"PFsjclm",
                                stk:res
                            }));
                            GA.getInstance().addEvent(ev);
                        }  
                    }
                }
            });
        }
    }
    this.upgradeSpaceJourney = function (upgrade) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !spaceSync) {
            spaceSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "sjupgrade",
                "FunctionParameter": {
                    upgrade: upgrade
                }
            },function (res,err) {
                spaceSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFspup",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.startSpaceJourneyMission = function (mission) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !spaceSync) {
            spaceSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "sjmission",
                "FunctionParameter": {
                    mission: mission
                }
            },function (res,err) {
                spaceSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFsjmis",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.hyperloop = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !spaceSync) {
            spaceSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "sjHyperloop",
            },function (res,err) {
                spaceSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFsjHyperloop",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        } 
    }
    var ggSync = false;
    this.ggdoactivity = function (activity) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !ggSync) {
            ggSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "ggactivity",
                "FunctionParameter": {
                    activity: activity
                }
            },function (res,err) {
                ggSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        if (res.data.FunctionResult.err == "Captcha Required") {
                            _this.createCaptcha(function() {_this.ggdoactivity(activity)});
                        } else {
                            popup={
                                text:"Error: "+res.data.FunctionResult.err,
                                mode:"alert",
                            }
                            var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                                msg:"PFggactivity",
                                stk:res
                            }));
                            GA.getInstance().addEvent(ev);
                        }
                    }
                }
            });
        }
    }
    this.ggdoupgrade = function (upgrade) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !ggSync) {
            ggSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "ggupgrade",
                "FunctionParameter": {
                    upgrade: upgrade
                }
            },function (res,err) {
                ggSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                            _this.updateLoopEventRanking("games");
                        }
                        if (res.data.FunctionResult.log !== undefined) gamesReceivedActions = res.data.FunctionResult.log;
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFggupgrade",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.ggdodefense = function (defense) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !ggSync) {
            ggSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "ggdefenses",
                "FunctionParameter": {
                    defense: defense
                }
            },function (res,err) {
                ggSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                            _this.updateLoopEventRanking("games");
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFggdefenses",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.ggclaimactivity = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !ggSync) {
            ggSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "ggclaim",
            },function (res,err) {
                ggSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            //_this.loadInventory();
							eventRanking.ptime = 0;
                            _this.updateLoopEventRanking("games");
                        }
                        if (res.data.FunctionResult.log !== undefined) gamesReceivedActions = res.data.FunctionResult.log;
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFggclaim",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.ggautoactivity = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !ggSync) {
            ggSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "ggautoclaim",
            },function (res,err) {
                ggSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            //_this.loadInventory();
							eventRanking.ptime = 0;
                            _this.updateLoopEventRanking("games");
                        }
                        if (res.data.FunctionResult.log !== undefined) gamesReceivedActions = res.data.FunctionResult.log;
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFggautoclaim",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.ggautodefense = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !ggSync) {
            ggSync = true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "ggautodefense",
            },function (res,err) {
                ggSync = false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            //_this.loadInventory();
                            _this.updateLoopEventRanking("games");
                        }
                        if (res.data.FunctionResult.log !== undefined) gamesReceivedActions = res.data.FunctionResult.log;
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFggautodefense",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var eternalSync=false;
    this.levelEternal = function (id,mode) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !eternalSync) {
            eternalSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "levelEternal",
                "FunctionParameter": {
                    id: id,
                    mode: mode
                }
            },function (res,err) {
                eternalSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFlevelEternal",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.unlockEternal = function (id) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !eternalSync) {
            eternalSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "unlockEternal",
                "FunctionParameter": {
                    id: id
                }
            },function (res,err) {
                eternalSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        battleSync=Date.now();
                        _this.updateMData(res.data.FunctionResult.data);
                        if (res.data.FunctionResult.update) {
                            _this.loadInventory();
                        }
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFunlockEternal",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    var startEventSync = false;
    this.startEvent = function () {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !startEventSync) {
            startEventSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "startLoopEvent"
            },function (res,err) {
                startEventSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFstartLoopEvent",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.drawSolver = function (ctx) {
        if (solver!==undefined) {
            zones = {};
            var bgw=900;
            var bgh=595;
            roundedRect(ctx,W*0.5-(bgw/2),H*0.5-(bgh/2),bgw,bgh,15,"rgba(216,233,255,1)");
            roundedRect(ctx,W*0.5-(bgw/2)+2,H*0.5-(bgh/2)+2,bgw-4,bgh-4,15,"rgba(33,33,33,1)");
            // close
            var cw = T.width("0evr");
            var ch = T.height("0evr");
            var gw = T.width("0lts")*1.1;
            var gw2 = T.width("0lts")*1.02;
            var gh = T.height("0lts")*1.1;
            var crect = (new Rect(W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13,cw,ch)).small();
            if (crect.isInside(GM.x,GM.y)) {
                T.draw(ctx,"0o6b",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
                this.addZone("csolver",crect,"csolver");
            }
            else T.draw(ctx,"0evr",W*0.5+bgw/2-cw*1.2,H*0.5-bgh/2+ch*0.13);
            var info = solver.info();
            text(ctx,"SOLVER",W*0.5,H*0.1,"64px"+FONT,"white","center","middle","black",2);
            if (info.solver=="normal") {
                text(ctx,"Tries: "+info.tries,W*0.5-bgw/2+20,H*0.95,"32px"+FONT,"white","left","middle");
                text(ctx,"Result:",W*0.5+bgw/2-60,H*0.94,"32px"+FONT,"white","right","middle");
                text(ctx,"Damage: "+info.dmg,W*0.5+bgw/2-20,H*0.9,"32px"+FONT,"white","right","middle");
                text(ctx," "+(info.res==1?"WIN":"FAIL"),W*0.5+bgw/2-60,H*0.94,"32px"+FONT,info.res==1?"green":"red","left","middle");
                T.draw(ctx,"0lts",W*0.6-gw/2,H*0.2,gw,gh);
                text(ctx,"vs",W*0.5,H*0.5,"40px"+FONT,"white","center","middle");
                T.draw(ctx,"0lts",W*0.4-gw/2,H*0.6,gw,gh);
                for (var i=0; i<6; ++i) {
                    this.drawMonster(ctx,info.best[i],W*0.4-gw2/2+gw2/6*(i+0.5),H*0.6+gh-20,undefined,false,1,info.hero[-(info.best[i]+2)],true,undefined,info.promo[-(info.best[i]+2)]);
                    this.drawMonster(ctx,info.setup[i],W*0.6-gw2/2+gw2/6*((5-i)+0.5),H*0.2+gh-20,undefined,true,1,info.shero[-(info.setup[i]+2)],true,undefined,info.spromo[-(info.setup[i]+2)]);
                }
            } else if (info.solver=="wb") {
                text(ctx,"Tries: "+info.tries,W*0.5-bgw/2+20,H*0.95,"32px"+FONT,"white","left","middle");
                text(ctx,"Result:",W*0.5+bgw/2-60,H*0.94,"32px"+FONT,"white","right","middle");
                text(ctx,"Damage: "+info.dmg,W*0.5+bgw/2-20,H*0.9,"32px"+FONT,"white","right","middle");
                text(ctx," "+(info.res==1?"WIN":"FAIL"),W*0.5+bgw/2-60,H*0.94,"32px"+FONT,info.res==1?"green":"red","left","middle");
                //T.draw(ctx,"0lts",W*0.6-gw/2,H*0.2,gw,gh);
                text(ctx,"vs",W*0.5,H*0.5,"40px"+FONT,"white","center","middle");
                T.draw(ctx,"0lts",W*0.4-gw/2,H*0.6,gw,gh);
                for (var i=0; i<6; ++i) {
                    this.drawMonster(ctx,info.best[i],W*0.4-gw2/2+gw2/6*(i+0.5),H*0.6+gh-20,undefined,false,1,info.hero[-(info.best[i]+2)],true,undefined,info.promo[-(info.best[i]+2)]);
                    this.drawMonster(ctx,info.setup[i],W*0.6-gw2/2+gw2/6*((5-i)+0.5),H*0.2+gh-20,undefined,true,1,info.shero[-(info.setup[i]+2)],true,undefined,info.spromo[-(info.setup[i]+2)]);
                }
            } else {
                text(ctx,"Tries: "+info.tries,W*0.5-bgw/2+20,H*0.95,"32px"+FONT,"white","left","middle");
                
                //text(ctx,"Average position: "+Math.round(info.average+1),W*0.5+bgw/2-20,H*0.85,"32px"+FONT,"white","right","middle");
                for (var j=0; j<info.top.length; ++j) {
                    T.draw(ctx,"0lts",W*0.5-gw/2,H*(0.15+j*0.2),gw,gh);
                    var row = info.top[j].row;
                    for (var i=0; i<6; ++i) {
                        this.drawMonster(ctx,row[i],W*0.5-gw2/2+gw2/6*(i+0.5),H*(0.15+j*0.2)+gh-20,undefined,false,1,info.hero[-(row[i]+2)],true,undefined,info.promo[-(row[i]+2)]);
                    }
                    text(ctx,"Win %: "+(info.top[j].wr*100).toFixed(2),W*0.5+bgw/2-20,H*(0.15+j*0.2)+40,"32px"+FONT,"white","right","middle");
                    text(ctx,"Rounds alive: "+info.top[j].alive,W*0.5+bgw/2-20,H*(0.15+j*0.2)+80,"32px"+FONT,"white","right","middle");
                    var sx = W*0.06;
                    var sy = H*(0.15+j*0.2)+50;
                    var sw = T.width("091m")*0.7;
                    var sh = T.height("091m")*0.7;
                    var crect = (new Rect(sx,sy,sw,sh)).small();
                    if (crect.isInside(GM.x,GM.y)) {
                        this.addZone("csolver",crect,"csolver",{target:info.top[j].id});
                        T.draw(ctx,"0eni",sx,sy,sw,sh);
                    } else {
                        T.draw(ctx,"091m",sx,sy,sw,sh);
                    }
                    text(ctx,"Pick Top "+(j+1),sx+sw/2,sy+sh/2,"40px"+FONT,"white","center","middle");
                    T.draw(ctx,"0m9x",sx,sy,sw,sh);
                }
            }
        }
    }
    var captchaSync = false;
    this.createCaptcha = function (func) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !captchaSync) {
            captchaSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "createCaptcha",
            },function (res,err) {
                captchaSync=false;
                if (_this.serverOk(res,err)) {
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.loadCaptcha("https://cosmosquest.net/capcha.php?id="+res.data.FunctionResult.id);
                        captchaFunction = func;
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFcaptcha",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.validateCaptcha = function (solution) {
        if (kongregate!==undefined && kid!==undefined && kid!=0 && pfdata!==undefined && !captchaSync) {
            captchaSync=true;
            PlayFab.ClientApi.ExecuteCloudScript({
                "RevisionSelection":PFMODE,
                "FunctionName": "validateCaptcha",
                "FunctionParameter": {
                    solution: solution,
                }
            },function (res,err) {
                captchaSync=false;
                if (_this.serverOk(res,err)) {
                    captchaLoaded = false;
                    selectedCaptcha = [];
                    imgcaptcha = undefined;
                    if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==true) {
                        _this.updateMData(res.data.FunctionResult.data);
                        captchaFunction();
                    } else if (res.data && res.data.FunctionResult && res.data.FunctionResult.ok==false) {
                        _this.createCaptcha(captchaFunction);
                    } else {
                        popup={
                            text:"Error: "+res.data.FunctionResult.err,
                            mode:"alert",
                        }
                        var ev = new GA.Events.Exception(GA.Events.ErrorSeverity.warning, JSON.stringify({
                            msg:"PFunlockEternal",
                            stk:res
                        }));
                        GA.getInstance().addEvent(ev);
                    }
                }
            });
        }
    }
    this.loadCaptcha = function (captcha) {
        imgcaptcha = new Image();
        imgcaptcha.onload=function () {
            captchaLoaded = true;
            captchaSync = false;
        }
        imgcaptcha.crossOrigin = "Anonymous";
        imgcaptcha.src = captcha;
    }
    this.drawCaptcha = function (ctx) {
        ctx.fillStyle="rgba(0,0,0,0.75)";
        ctx.fillRect(0,0,W,H);

        var bgw = W*0.4;
        var bgh = H*0.75;

        T.draw(ctx,"0ko4",W*0.5-bgw*0.5-6,H*0.55-bgh*0.5-6,bgw+12,bgh+12);
        ctx.fillStyle="rgba(255,20,147,0.7)";
        ctx.fillRect(W*0.5-bgw*0.5+4,H*0.55-bgh*0.5+3,bgw-8,bgh-7);
        
        ctx.drawImage(imgcaptcha,W*0.5-imgcaptcha.naturalWidth*1.5*0.5,H*0.5-imgcaptcha.naturalHeight*1.5*0.5,imgcaptcha.naturalWidth*1.5,imgcaptcha.naturalHeight*1.5);
        var capchaw = imgcaptcha.naturalWidth*1.5;
        var capchah = imgcaptcha.naturalHeight*1.5;
        var position = 0;
        var x = W*0.5-capchaw*0.5;
        var y = H*0.5-capchaw*0.5;
        for (var i = 0; i < 3; ++i) {
            for (var j = 0; j < 3; ++j) {
                var zonerect = (new Rect(x+((capchaw/3)*j),y+((capchah/3)*i),capchaw/3,capchah/3)).small();
                var existent = false;
                for (var k = 0; k < selectedCaptcha.length; ++k) {
                    if (selectedCaptcha[k] == position) existent = true;
                }
                if (existent) {
                    ctx.fillStyle="rgba(255,0,0,0.35)";
                    ctx.fillRect(x+((capchaw/3)*j),y+((capchah/3)*i),capchaw/3,capchah/3);  
                }

                if (zonerect.isInside(GM.x,GM.y)) {
                    ctx.fillStyle="rgba(255,255,255,0.35)";
                    ctx.fillRect(x+((capchaw/3)*j),y+((capchah/3)*i),capchaw/3,capchah/3);                    
                    this.addZone("captchar",zonerect,"capzone",{target:position});
                }
                ++position;
            }
        }

        roundedRect(ctx,W*0.5-W*0.15*0.5,H*0.86-H*0.07*0.5,W*0.15,H*0.07,5,"rgb(255,215,0)");
        roundedRect(ctx,W*0.5-W*0.15*0.5+4,H*0.86-H*0.07*0.5+4,W*0.15-8,H*0.07-8,5,"white");
        roundedRect(ctx,W*0.5-W*0.15*0.5+6,H*0.86-H*0.07*0.5+6,W*0.15-12,H*0.07-12,5,"rgb(255,215,0)");
        text(ctx,"SEND CAPTCHA",W*0.5,H*0.86,"36px"+FONT,"black","center","middle");
        var sendrect = (new Rect(W*0.5-W*0.15*0.5,H*0.86-H*0.07*0.5,W*0.15,H*0.07)).small();
        if (sendrect.isInside(GM.x,GM.y)) {
            roundedRect(ctx,W*0.5-W*0.15*0.5,H*0.86-H*0.07*0.5,W*0.15,H*0.07,5,"rgba(0,0,0,0.25)");
            this.addZone("captchas",sendrect,"sendcap",{target:selectedCaptcha});
        }
    }

    data = this.loadData();
    this.updateData();
    this.evalOmega();
    this.evalResearch();
    this.evalBuildings();
    var oe = data.energy;
    var or = data.researching;
    var ot = Date.now()-data.last;
    this.updateProduction(-1);
    var de = data.energy-oe;
    if (de>0 && ot>5*60*1000) {
        popup = {
            mode:"offline",
            energy: de,
            tech: data.researching==undefined?or:undefined,
        }
    }
    
    this.initAchievements();
    this.save();
    if (data.adBlock<Date.now()) data.adBlock=Date.now()+3*60*1000;
    this.initAds();
    this.calcNextArr();
    if (kongregate!==undefined&&kid==0) {
        function onKongregateInPageLogin() {
            kid = kongregate.services.getUserId();
            if (kid!==0 && pfdata===undefined) {
                _this.relog();
            }
        }
        kongregate.services.addEventListener("login", onKongregateInPageLogin);
    }
    this.sync();

}
